/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "./dist/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _promise = __webpack_require__(1);
	
	var _promise2 = _interopRequireDefault(_promise);
	
	var _regenerator = __webpack_require__(72);
	
	var _regenerator2 = _interopRequireDefault(_regenerator);
	
	var _asyncToGenerator2 = __webpack_require__(75);
	
	var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);
	
	var _soloApi = __webpack_require__(76);
	
	var _util = __webpack_require__(77);
	
	var _wsApi = __webpack_require__(83);
	
	var _cybexjs = __webpack_require__(183);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var cancelFlag = 0;
	
	function sillyUIcontroll(top) {
		document.getElementById("imgDone").style.zIndex = 0;
		document.getElementById("imgLogin").style.zIndex = 0;
		document.getElementById("imgWaitPIN").style.zIndex = 0;
		document.getElementById("imgWaitBTN").style.zIndex = 0;
		document.getElementById("imgProcessing").style.zIndex = 0;
	
		document.getElementById(top).style.zIndex = 99;
	}
	
	window.restart = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
		return _regenerator2.default.wrap(function _callee$(_context) {
			while (1) {
				switch (_context.prev = _context.next) {
					case 0:
						sillyUIcontroll("imgLogin");
						document.getElementById("account").innerText = "";
	
					case 2:
					case 'end':
						return _context.stop();
				}
			}
		}, _callee, undefined);
	}));
	
	window.abort = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
		return _regenerator2.default.wrap(function _callee2$(_context2) {
			while (1) {
				switch (_context2.prev = _context2.next) {
					case 0:
						cancelFlag = 1;
	
					case 1:
					case 'end':
						return _context2.stop();
				}
			}
		}, _callee2, undefined);
	}));
	
	var initcybex = function () {
		var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(i) {
			return _regenerator2.default.wrap(function _callee3$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							if (!(i >= 3)) {
								_context3.next = 2;
								break;
							}
	
							return _context3.abrupt('return', false);
	
						case 2:
							_context3.prev = 2;
	
							console.log('[cybex][initcybex]Apis = ', _wsApi.Apis);
	
							_context3.next = 6;
							return _wsApi.Apis.instance('wss://hangzhou.51nebula.com', true).init_promise;
	
						case 6:
							return _context3.abrupt('return', true);
	
						case 9:
							_context3.prev = 9;
							_context3.t0 = _context3['catch'](2);
	
							console.log('err in initcybex = ', _context3.t0);
	
							_context3.next = 14;
							return _promise2.default.delay(3000);
	
						case 14:
							_context3.next = 16;
							return _wsApi.Apis.close();
	
						case 16:
							return _context3.abrupt('return', initcybex(++i));
	
						case 17:
						case 'end':
							return _context3.stop();
					}
				}
			}, _callee3, undefined, [[2, 9]]);
		}));
	
		return function initcybex(_x) {
			return _ref3.apply(this, arguments);
		};
	}();
	
	window.register = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4() {
		var devObj, PINObj, addrObj, cybAddress, id, account;
		return _regenerator2.default.wrap(function _callee4$(_context4) {
			while (1) {
				switch (_context4.prev = _context4.next) {
					case 0:
						console.log("start register\n");
	
						_context4.next = 3;
						return (0, _soloApi.connect)();
	
					case 3:
						devObj = _context4.sent;
	
						if (!devObj.isConnect) {
							_context4.next = 8;
							break;
						}
	
						if (!devObj.err) {
							console.log("device connect success!\n");
							console.log("version:%s,sn:%s,net:%s,lifecycle:%s\n", devObj.version, devObj.sn, devObj.net, devObj.lifecycle);
						} else console.log("connect:%s\n", devObj.err);
						_context4.next = 11;
						break;
	
					case 8:
						console.log("device connect fail!\n");
						alert("Please connect WOOKONG SOLO!\n");
						return _context4.abrupt('return', null);
	
					case 11:
						if (!(devObj.lifecycle != _util.lifeCycle.user)) {
							_context4.next = 14;
							break;
						}
	
						console.log("please init your device by wookong solo client first!\n");
						return _context4.abrupt('return', null);
	
					case 14:
						_context4.next = 16;
						return (0, _soloApi.checkpinstate)();
	
					case 16:
						PINObj = _context4.sent;
	
						if (!PINObj.isConnect) {
							_context4.next = 37;
							break;
						}
	
						if (PINObj.err) {
							_context4.next = 34;
							break;
						}
	
						_context4.t0 = PINObj.state;
						_context4.next = _context4.t0 === _util.pinState.logout ? 22 : _context4.t0 === _util.pinState.login ? 26 : _context4.t0 === _util.pinState.locked ? 28 : _context4.t0 === _util.pinState.notset ? 30 : 32;
						break;
	
					case 22:
						console.log("pin logout\n");
						document.getElementById("imgLogin").style.zIndex = 0;
						document.getElementById("imgWaitPIN").style.zIndex = 99;
						return _context4.abrupt('break', 32);
	
					case 26:
						console.log("pin login\n");
						return _context4.abrupt('break', 32);
	
					case 28:
						console.log("pin locked\n");
						return _context4.abrupt('return', null);
	
					case 30:
						console.log("pin notset\n");
						return _context4.abrupt('return', null);
	
					case 32:
						_context4.next = 35;
						break;
	
					case 34:
						console.log("checkpinstate:%s\n", PINObj.err);
	
					case 35:
						_context4.next = 39;
						break;
	
					case 37:
						console.log("device connect fail!\n");
						return _context4.abrupt('return', null);
	
					case 39:
						if (!(cancelFlag == 1)) {
							_context4.next = 43;
							break;
						}
	
						cancelFlag = 0;
						console.log("operation aborted!\n");
						return _context4.abrupt('return', null);
	
					case 43:
						if (PINObj.state != _util.pinState.login) {
							_context4.next = 14;
							break;
						}
	
					case 44:
						_context4.next = 46;
						return (0, _soloApi.getaddress)();
	
					case 46:
						addrObj = _context4.sent;
	
						if (!addrObj.isConnect) {
							_context4.next = 51;
							break;
						}
	
						if (!addrObj.err) console.log("CYB address:%s\n", addrObj.address);else console.log("getaddress:%s\n", addrObj.err);
						_context4.next = 53;
						break;
	
					case 51:
						console.log("device connect fail!\n");
						return _context4.abrupt('return', null);
	
					case 53:
						cybAddress = addrObj.address.substring(0, addrObj.address.length - 1);
						id = {};
						_context4.prev = 55;
						_context4.next = 58;
						return initcybex(0);
	
					case 58:
						_context4.next = 60;
						return _wsApi.Apis.instance().db_api().exec('get_key_references', [[cybAddress]]);
	
					case 60:
						id = _context4.sent;
	
						//check resgit or not
						if (!id[0][0]) {
							console.log("cyb not regist!\n");
						} else {
							console.log("account exists!\n");
						}
						_context4.next = 67;
						break;
	
					case 64:
						_context4.prev = 64;
						_context4.t1 = _context4['catch'](55);
	
						console.log("api connect fail!\n");
	
					case 67:
						_context4.prev = 67;
	
						console.log('[cybex][getBalance]id =', id);
						_context4.next = 71;
						return _wsApi.Apis.instance().db_api().exec('get_accounts', id);
	
					case 71:
						account = _context4.sent;
	
						console.log('[getbalance][accounts]accounts = ', account[0].name);
						_context4.next = 78;
						break;
	
					case 75:
						_context4.prev = 75;
						_context4.t2 = _context4['catch'](67);
	
						console.log("get address fail\n");
	
					case 78:
					case 'end':
						return _context4.stop();
				}
			}
		}, _callee4, undefined, [[55, 64], [67, 75]]);
	}));
	
	var fetchTransferFieldIds = function () {
		var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(_ref6) {
			var fromAccount = _ref6.fromAccount,
			    toAccount = _ref6.toAccount,
			    asset = _ref6.asset,
			    feeAsset = _ref6.feeAsset;
			var chainFrom, chainTo, chainAsset, chainFeeAsset, from, to, assetId, feeAssetId;
			return _regenerator2.default.wrap(function _callee5$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							_context5.next = 2;
							return (0, _cybexjs.FetchChain)('getAccount', fromAccount);
	
						case 2:
							chainFrom = _context5.sent;
							_context5.next = 5;
							return (0, _cybexjs.FetchChain)('getAccount', toAccount);
	
						case 5:
							chainTo = _context5.sent;
							_context5.next = 8;
							return (0, _cybexjs.FetchChain)('getAsset', asset);
	
						case 8:
							chainAsset = _context5.sent;
							_context5.next = 11;
							return (0, _cybexjs.FetchChain)('getAsset', feeAsset);
	
						case 11:
							chainFeeAsset = _context5.sent;
							from = chainFrom.get('id');
							to = chainTo.get('id');
							assetId = chainAsset.get('id');
							feeAssetId = chainFeeAsset.get('id');
							return _context5.abrupt('return', { from: from, to: to, assetId: assetId, feeAssetId: feeAssetId });
	
						case 17:
						case 'end':
							return _context5.stop();
					}
				}
			}, _callee5, undefined);
		}));
	
		return function fetchTransferFieldIds(_x2) {
			return _ref5.apply(this, arguments);
		};
	}();
	
	var buildTransferTransaction = function () {
		var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6(_ref8) {
			var fromAccount = _ref8.fromAccount,
			    toAccount = _ref8.toAccount,
			    amount = _ref8.amount,
			    _ref8$asset = _ref8.asset,
			    asset = _ref8$asset === undefined ? 'CYB' : _ref8$asset,
			    _ref8$feeAsset = _ref8.feeAsset,
			    feeAsset = _ref8$feeAsset === undefined ? 'CYB' : _ref8$feeAsset;
	
			var _ref9, from, to, assetId, feeAssetId, transferData, assertData, transaction, transferOp, assertOp;
	
			return _regenerator2.default.wrap(function _callee6$(_context6) {
				while (1) {
					switch (_context6.prev = _context6.next) {
						case 0:
							_context6.next = 2;
							return fetchTransferFieldIds({ fromAccount: fromAccount, toAccount: toAccount, asset: asset, feeAsset: feeAsset });
	
						case 2:
							_ref9 = _context6.sent;
							from = _ref9.from;
							to = _ref9.to;
							assetId = _ref9.assetId;
							feeAssetId = _ref9.feeAssetId;
							transferData = {
								from: from,
								to: to,
								fee: { amount: 0, asset_id: feeAssetId },
								amount: { amount: amount, asset_id: assetId }
							};
							assertData = {
								fee: { amount: 0, asset_id: feeAssetId },
								fee_paying_account: from,
								predicates: [[0, { account_id: to, name: toAccount }], [1, { asset_id: assetId, symbol: asset }], [1, { asset_id: feeAssetId, symbol: feeAsset }]]
							};
							transaction = new _cybexjs.TransactionBuilder();
							transferOp = transaction.get_type_operation('transfer', transferData);
							assertOp = transaction.get_type_operation('assert', assertData);
	
							transaction.add_operation(assertOp);
							transaction.add_operation(transferOp);
	
							_context6.next = 16;
							return transaction.set_required_fees();
	
						case 16:
							return _context6.abrupt('return', transaction);
	
						case 17:
						case 'end':
							return _context6.stop();
					}
				}
			}, _callee6, undefined);
		}));
	
		return function buildTransferTransaction(_x3) {
			return _ref7.apply(this, arguments);
		};
	}();
	
	var broadcastTransaction = function () {
		var _ref10 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7(transaction) {
			var error;
			return _regenerator2.default.wrap(function _callee7$(_context7) {
				while (1) {
					switch (_context7.prev = _context7.next) {
						case 0:
							_context7.prev = 0;
							_context7.next = 3;
							return transaction.broadcast(function () {
								return console.log('Sent');
							});
	
						case 3:
							_context7.next = 9;
							break;
	
						case 5:
							_context7.prev = 5;
							_context7.t0 = _context7['catch'](0);
							error = _context7.t0.message.split('\n')[0];
							return _context7.abrupt('return', { error: error });
	
						case 9:
							return _context7.abrupt('return', { error: '', transaction: transaction });
	
						case 10:
						case 'end':
							return _context7.stop();
					}
				}
			}, _callee7, undefined, [[0, 5]]);
		}));
	
		return function broadcastTransaction(_x4) {
			return _ref10.apply(this, arguments);
		};
	}();
	
	window.login = function () {
		var _ref11 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8(random) {
			var devObj, PINObj, addrObj, cybAddress, id, account, fromaccount, toaccount, amount, asset, feeAsset, signObj, txTransfer, testTxs, testCount, i;
			return _regenerator2.default.wrap(function _callee8$(_context8) {
				while (1) {
					switch (_context8.prev = _context8.next) {
						case 0:
							console.log("start login\n");
	
							_context8.next = 3;
							return (0, _soloApi.connect)();
	
						case 3:
							devObj = _context8.sent;
	
							if (!devObj.isConnect) {
								_context8.next = 8;
								break;
							}
	
							if (!devObj.err) {
								console.log("device connect success!\n");
								console.log("version:%s,sn:%s,net:%s,lifecycle:%s\n", devObj.version, devObj.sn, devObj.net, devObj.lifecycle);
							} else console.log("connect:%s\n", devObj.err);
							_context8.next = 11;
							break;
	
						case 8:
							console.log("device connect fail!\n");
							window.alert("Please connect WOOKONG SOLO!\n");
							return _context8.abrupt('return', null);
	
						case 11:
							if (!(devObj.lifecycle != _util.lifeCycle.user)) {
								_context8.next = 14;
								break;
							}
	
							console.log("please init your device by wookong solo client first!\n");
							return _context8.abrupt('return', null);
	
						case 14:
							_context8.next = 16;
							return (0, _soloApi.checkpinstate)();
	
						case 16:
							PINObj = _context8.sent;
	
							if (!PINObj.isConnect) {
								_context8.next = 36;
								break;
							}
	
							if (PINObj.err) {
								_context8.next = 33;
								break;
							}
	
							_context8.t0 = PINObj.state;
							_context8.next = _context8.t0 === _util.pinState.logout ? 22 : _context8.t0 === _util.pinState.login ? 25 : _context8.t0 === _util.pinState.locked ? 27 : _context8.t0 === _util.pinState.notset ? 29 : 31;
							break;
	
						case 22:
							console.log("pin logout\n");
							sillyUIcontroll("imgWaitPIN");
							return _context8.abrupt('break', 31);
	
						case 25:
							console.log("pin login\n");
							return _context8.abrupt('break', 31);
	
						case 27:
							console.log("pin locked\n");
							return _context8.abrupt('return', null);
	
						case 29:
							console.log("pin notset\n");
							return _context8.abrupt('return', null);
	
						case 31:
							_context8.next = 34;
							break;
	
						case 33:
							console.log("checkpinstate:%s\n", PINObj.err);
	
						case 34:
							_context8.next = 38;
							break;
	
						case 36:
							console.log("device connect fail!\n");
							return _context8.abrupt('return', null);
	
						case 38:
							if (!(cancelFlag == 1)) {
								_context8.next = 42;
								break;
							}
	
							cancelFlag = 0;
							console.log("operation aborted!\n");
							return _context8.abrupt('return', null);
	
						case 42:
							if (PINObj.state != _util.pinState.login) {
								_context8.next = 14;
								break;
							}
	
						case 43:
							_context8.next = 45;
							return (0, _soloApi.getaddress)();
	
						case 45:
							addrObj = _context8.sent;
	
							if (!addrObj.isConnect) {
								_context8.next = 50;
								break;
							}
	
							if (!addrObj.err) console.log("CYB address:%s\n", addrObj.address);else console.log("getaddress:%s\n", addrObj.err);
							_context8.next = 52;
							break;
	
						case 50:
							console.log("device connect fail!\n");
							return _context8.abrupt('return', null);
	
						case 52:
							sillyUIcontroll("imgProcessing");
							cybAddress = addrObj.address.substring(0, addrObj.address.length - 1);
	
							if (_wsApi.Apis.instance()) {
								_context8.next = 57;
								break;
							}
	
							_context8.next = 57;
							return _wsApi.Apis.init();
	
						case 57:
							id = {};
							_context8.prev = 58;
							_context8.next = 61;
							return _wsApi.Apis.instance().db_api().exec('get_key_references', [[cybAddress]]);
	
						case 61:
							id = _context8.sent;
	
							//check resgit or not
							if (!id[0][0]) {
								console.log("cyb not regist!\n");
							} else {
								console.log("account exists!\n");
							}
							_context8.next = 68;
							break;
	
						case 65:
							_context8.prev = 65;
							_context8.t1 = _context8['catch'](58);
	
							console.log("api connect fail!\n");
	
						case 68:
							_context8.prev = 68;
							//get account
							console.log('[cybex][getBalance]id =', id);
							_context8.next = 72;
							return _wsApi.Apis.instance().db_api().exec('get_accounts', id);
	
						case 72:
							account = _context8.sent;
	
							console.log('[getbalance][accounts]accounts = ', account[0].name);
							_context8.next = 79;
							break;
	
						case 76:
							_context8.prev = 76;
							_context8.t2 = _context8['catch'](68);
	
							console.log("get address fail\n");
	
						case 79:
	
							//transfer test
	
	
							fromaccount = "cybu2fsolo22";
							toaccount = "iphone-xr-512r";
							amount = 1;
							asset = "CYB";
							feeAsset = "CYB";
							//let transaction = await buildTransferTransaction({ fromaccount,toaccount, amount, asset, feeAsset });
							//console.log("after buildTransferTransaction\n");
							//  await transaction.finalize();
	
							//	console.log("tx",ransaction.tr_buffer);
	
							/*	signObj = await signTransaction(transaction.tr_buffer);
	      		if (signObj.isConnect) {
	      			if (!signObj.err)
	      				console.log("\n\nsignature:%s\n", signObj.signature);
	      			else
	      				console.log("signature err:%s\n", signObj.err);
	      		}
	      		else {
	      			console.log("device connect fail!\n");
	      		}*/
							//const broadcastResp = await broadcastTransaction(transaction);
	
							//sign test
							sillyUIcontroll("imgWaitBTN");
							console.log("before sign\n");
							txTransfer = "f24412812423440b8a5c02242c0100000000000000d60a0300ad0a0e6970686f6e652d78722d3531326b010003435942010003435942000000e80300000000000000d60aad0a010000000000000000000000";
							//var txLimitOrderCreate = "ab1a36b889e21d2803219d379d10d39ff282b0399934946b1d5b799ceeb9fded4134c89732d8b52c7f5c02242c0100000000000000b60a03010003435942012f0455534454010003435942000001370000000000000000b60a01000000000000000001000000000000002f0e407f5c000000"
							//var txLimitOrderCancel = "ab1a36b889e21d2803219d379d10d39ff282b0399934946b1d5b799ceeb9fded91341f66da4a552e7f5c0224640000000000000000b60a01010003435942000002050000000000000000b60a898d9a040000";
							//var txBalanceClaim = "ab1a36b889e21d2803219d379d10d39ff282b0399934946b1d5b799ceeb9fdedce34407d6c66932f7f5c0224c80000000000000000b60a0200ad0a0e6970686f6e652d78722d3531326b010003435942000025000000000000000000b60a9701034926dea8b5eb03e6687e6ee0119c3ea177334992979687587f214356bfc20aa001000000000000000000";
							//var txWithDraw = "ab1a36b889e21d2803219d379d10d39ff282b0399934946b1d5b799ceeb9fded3043d136578e4b7b7f5c02242c0100000000000000b60a030084010c6a6164652d67617465776179011709544553542e555344540100034359420000003c0400000000000000b60a840101000000000000001701035a027af0635db6dc87a66b6e64cf6c0e79df1ccf98f888680c91242ed7a2cb890363bdfe6f66b4071f3b451f12046748ecd5e8e5467955e0a7c6ab121dfe95ce3708faeaf85169010050a49829d9838646c5b6cfd3668187d975b18a6f5743e7cbfed0187de06e39bceec86417248c4be942986e585541b9f22dbc8db968b90b40dd97aa13d87735ed8411cf80f46a8cb2989af37ec7b3d56ab60000";
	
							testTxs = new Array();
	
							testTxs[0] = txTransfer;
							//testTxs[1] = txLimitOrderCreate;
							//testTxs[2] = txLimitOrderCancel;
							//testTxs[3] = txBalanceClaim;
							//testTxs[4] = txWithDraw;
	
	
							testCount = 1;
							i = 0;
	
						case 91:
							_context8.next = 93;
							return (0, _soloApi.signTransaction)(testTxs[i]);
	
						case 93:
							signObj = _context8.sent;
	
							if (signObj.isConnect) {
								if (!signObj.err) console.log("\n\nsignature:%s\n", signObj.signature);else console.log("signature err:%s\n", signObj.err);
							} else {
								console.log("device connect fail!\n");
							}
							i++;
	
						case 96:
							if (i < testCount) {
								_context8.next = 91;
								break;
							}
	
						case 97:
	
							console.log("Pubkey = %s\n", cybAddress);
							console.log("Random= %s\n", random);
							console.log("==================do verify the signature==================\n");
							sillyUIcontroll("imgDone");
							document.getElementById("account").innerText = account[0].name;
	
						case 102:
						case 'end':
							return _context8.stop();
					}
				}
			}, _callee8, undefined, [[58, 65], [68, 76]]);
		}));
	
		return function (_x5) {
			return _ref11.apply(this, arguments);
		};
	}();
	
	window.sign = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9() {
		return _regenerator2.default.wrap(function _callee9$(_context9) {
			while (1) {
				switch (_context9.prev = _context9.next) {
					case 0:
					case 'end':
						return _context9.stop();
				}
			}
		}, _callee9, undefined);
	}));

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(2), __esModule: true };

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(3);
	__webpack_require__(4);
	__webpack_require__(48);
	__webpack_require__(52);
	__webpack_require__(70);
	__webpack_require__(71);
	module.exports = __webpack_require__(12).Promise;


/***/ }),
/* 3 */
/***/ (function(module, exports) {



/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $at = __webpack_require__(5)(true);
	
	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(8)(String, 'String', function (iterated) {
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var index = this._i;
	  var point;
	  if (index >= O.length) return { value: undefined, done: true };
	  point = $at(O, index);
	  this._i += point.length;
	  return { value: point, done: false };
	});


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(6);
	var defined = __webpack_require__(7);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function (TO_STRING) {
	  return function (that, pos) {
	    var s = String(defined(that));
	    var i = toInteger(pos);
	    var l = s.length;
	    var a, b;
	    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};


/***/ }),
/* 6 */
/***/ (function(module, exports) {

	// 7.1.4 ToInteger
	var ceil = Math.ceil;
	var floor = Math.floor;
	module.exports = function (it) {
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};


/***/ }),
/* 7 */
/***/ (function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on  " + it);
	  return it;
	};


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY = __webpack_require__(9);
	var $export = __webpack_require__(10);
	var redefine = __webpack_require__(26);
	var hide = __webpack_require__(15);
	var Iterators = __webpack_require__(27);
	var $iterCreate = __webpack_require__(28);
	var setToStringTag = __webpack_require__(44);
	var getPrototypeOf = __webpack_require__(46);
	var ITERATOR = __webpack_require__(45)('iterator');
	var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
	var FF_ITERATOR = '@@iterator';
	var KEYS = 'keys';
	var VALUES = 'values';
	
	var returnThis = function () { return this; };
	
	module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function (kind) {
	    if (!BUGGY && kind in proto) return proto[kind];
	    switch (kind) {
	      case KEYS: return function keys() { return new Constructor(this, kind); };
	      case VALUES: return function values() { return new Constructor(this, kind); };
	    } return function entries() { return new Constructor(this, kind); };
	  };
	  var TAG = NAME + ' Iterator';
	  var DEF_VALUES = DEFAULT == VALUES;
	  var VALUES_BUG = false;
	  var proto = Base.prototype;
	  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
	  var $default = $native || getMethod(DEFAULT);
	  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
	  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
	  var methods, key, IteratorPrototype;
	  // Fix native
	  if ($anyNative) {
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
	    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if (DEF_VALUES && $native && $native.name !== VALUES) {
	    VALUES_BUG = true;
	    $default = function values() { return $native.call(this); };
	  }
	  // Define iterator
	  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG] = returnThis;
	  if (DEFAULT) {
	    methods = {
	      values: DEF_VALUES ? $default : getMethod(VALUES),
	      keys: IS_SET ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if (FORCED) for (key in methods) {
	      if (!(key in proto)) redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};


/***/ }),
/* 9 */
/***/ (function(module, exports) {

	module.exports = true;


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(11);
	var core = __webpack_require__(12);
	var ctx = __webpack_require__(13);
	var hide = __webpack_require__(15);
	var has = __webpack_require__(25);
	var PROTOTYPE = 'prototype';
	
	var $export = function (type, name, source) {
	  var IS_FORCED = type & $export.F;
	  var IS_GLOBAL = type & $export.G;
	  var IS_STATIC = type & $export.S;
	  var IS_PROTO = type & $export.P;
	  var IS_BIND = type & $export.B;
	  var IS_WRAP = type & $export.W;
	  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
	  var expProto = exports[PROTOTYPE];
	  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
	  var key, own, out;
	  if (IS_GLOBAL) source = name;
	  for (key in source) {
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if (own && has(exports, key)) continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function (C) {
	      var F = function (a, b, c) {
	        if (this instanceof C) {
	          switch (arguments.length) {
	            case 0: return new C();
	            case 1: return new C(a);
	            case 2: return new C(a, b);
	          } return new C(a, b, c);
	        } return C.apply(this, arguments);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if (IS_PROTO) {
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library`
	module.exports = $export;


/***/ }),
/* 11 */
/***/ (function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self
	  // eslint-disable-next-line no-new-func
	  : Function('return this')();
	if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),
/* 12 */
/***/ (function(module, exports) {

	var core = module.exports = { version: '2.6.1' };
	if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(14);
	module.exports = function (fn, that, length) {
	  aFunction(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 1: return function (a) {
	      return fn.call(that, a);
	    };
	    case 2: return function (a, b) {
	      return fn.call(that, a, b);
	    };
	    case 3: return function (a, b, c) {
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};


/***/ }),
/* 14 */
/***/ (function(module, exports) {

	module.exports = function (it) {
	  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
	  return it;
	};


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	var dP = __webpack_require__(16);
	var createDesc = __webpack_require__(24);
	module.exports = __webpack_require__(20) ? function (object, key, value) {
	  return dP.f(object, key, createDesc(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	var anObject = __webpack_require__(17);
	var IE8_DOM_DEFINE = __webpack_require__(19);
	var toPrimitive = __webpack_require__(23);
	var dP = Object.defineProperty;
	
	exports.f = __webpack_require__(20) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if (IE8_DOM_DEFINE) try {
	    return dP(O, P, Attributes);
	  } catch (e) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(18);
	module.exports = function (it) {
	  if (!isObject(it)) throw TypeError(it + ' is not an object!');
	  return it;
	};


/***/ }),
/* 18 */
/***/ (function(module, exports) {

	module.exports = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = !__webpack_require__(20) && !__webpack_require__(21)(function () {
	  return Object.defineProperty(__webpack_require__(22)('div'), 'a', { get: function () { return 7; } }).a != 7;
	});


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(21)(function () {
	  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
	});


/***/ }),
/* 21 */
/***/ (function(module, exports) {

	module.exports = function (exec) {
	  try {
	    return !!exec();
	  } catch (e) {
	    return true;
	  }
	};


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(18);
	var document = __webpack_require__(11).document;
	// typeof document.createElement is 'object' in old IE
	var is = isObject(document) && isObject(document.createElement);
	module.exports = function (it) {
	  return is ? document.createElement(it) : {};
	};


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(18);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function (it, S) {
	  if (!isObject(it)) return it;
	  var fn, val;
	  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};


/***/ }),
/* 24 */
/***/ (function(module, exports) {

	module.exports = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};


/***/ }),
/* 25 */
/***/ (function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function (it, key) {
	  return hasOwnProperty.call(it, key);
	};


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(15);


/***/ }),
/* 27 */
/***/ (function(module, exports) {

	module.exports = {};


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var create = __webpack_require__(29);
	var descriptor = __webpack_require__(24);
	var setToStringTag = __webpack_require__(44);
	var IteratorPrototype = {};
	
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(15)(IteratorPrototype, __webpack_require__(45)('iterator'), function () { return this; });
	
	module.exports = function (Constructor, NAME, next) {
	  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
	  setToStringTag(Constructor, NAME + ' Iterator');
	};


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject = __webpack_require__(17);
	var dPs = __webpack_require__(30);
	var enumBugKeys = __webpack_require__(42);
	var IE_PROTO = __webpack_require__(39)('IE_PROTO');
	var Empty = function () { /* empty */ };
	var PROTOTYPE = 'prototype';
	
	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(22)('iframe');
	  var i = enumBugKeys.length;
	  var lt = '<';
	  var gt = '>';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(43).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};
	
	module.exports = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty();
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	var dP = __webpack_require__(16);
	var anObject = __webpack_require__(17);
	var getKeys = __webpack_require__(31);
	
	module.exports = __webpack_require__(20) ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject(O);
	  var keys = getKeys(Properties);
	  var length = keys.length;
	  var i = 0;
	  var P;
	  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys = __webpack_require__(32);
	var enumBugKeys = __webpack_require__(42);
	
	module.exports = Object.keys || function keys(O) {
	  return $keys(O, enumBugKeys);
	};


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	var has = __webpack_require__(25);
	var toIObject = __webpack_require__(33);
	var arrayIndexOf = __webpack_require__(36)(false);
	var IE_PROTO = __webpack_require__(39)('IE_PROTO');
	
	module.exports = function (object, names) {
	  var O = toIObject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (has(O, key = names[i++])) {
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(34);
	var defined = __webpack_require__(7);
	module.exports = function (it) {
	  return IObject(defined(it));
	};


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(35);
	// eslint-disable-next-line no-prototype-builtins
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};


/***/ }),
/* 35 */
/***/ (function(module, exports) {

	var toString = {}.toString;
	
	module.exports = function (it) {
	  return toString.call(it).slice(8, -1);
	};


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(33);
	var toLength = __webpack_require__(37);
	var toAbsoluteIndex = __webpack_require__(38);
	module.exports = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIObject($this);
	    var length = toLength(O.length);
	    var index = toAbsoluteIndex(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare
	      if (value != value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
	      if (O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(6);
	var min = Math.min;
	module.exports = function (it) {
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(6);
	var max = Math.max;
	var min = Math.min;
	module.exports = function (index, length) {
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(40)('keys');
	var uid = __webpack_require__(41);
	module.exports = function (key) {
	  return shared[key] || (shared[key] = uid(key));
	};


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

	var core = __webpack_require__(12);
	var global = __webpack_require__(11);
	var SHARED = '__core-js_shared__';
	var store = global[SHARED] || (global[SHARED] = {});
	
	(module.exports = function (key, value) {
	  return store[key] || (store[key] = value !== undefined ? value : {});
	})('versions', []).push({
	  version: core.version,
	  mode: __webpack_require__(9) ? 'pure' : 'global',
	  copyright: '© 2018 Denis Pushkarev (zloirock.ru)'
	});


/***/ }),
/* 41 */
/***/ (function(module, exports) {

	var id = 0;
	var px = Math.random();
	module.exports = function (key) {
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};


/***/ }),
/* 42 */
/***/ (function(module, exports) {

	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

	var document = __webpack_require__(11).document;
	module.exports = document && document.documentElement;


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

	var def = __webpack_require__(16).f;
	var has = __webpack_require__(25);
	var TAG = __webpack_require__(45)('toStringTag');
	
	module.exports = function (it, tag, stat) {
	  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
	};


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

	var store = __webpack_require__(40)('wks');
	var uid = __webpack_require__(41);
	var Symbol = __webpack_require__(11).Symbol;
	var USE_SYMBOL = typeof Symbol == 'function';
	
	var $exports = module.exports = function (name) {
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};
	
	$exports.store = store;


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has = __webpack_require__(25);
	var toObject = __webpack_require__(47);
	var IE_PROTO = __webpack_require__(39)('IE_PROTO');
	var ObjectProto = Object.prototype;
	
	module.exports = Object.getPrototypeOf || function (O) {
	  O = toObject(O);
	  if (has(O, IE_PROTO)) return O[IE_PROTO];
	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(7);
	module.exports = function (it) {
	  return Object(defined(it));
	};


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(49);
	var global = __webpack_require__(11);
	var hide = __webpack_require__(15);
	var Iterators = __webpack_require__(27);
	var TO_STRING_TAG = __webpack_require__(45)('toStringTag');
	
	var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
	  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
	  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
	  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
	  'TextTrackList,TouchList').split(',');
	
	for (var i = 0; i < DOMIterables.length; i++) {
	  var NAME = DOMIterables[i];
	  var Collection = global[NAME];
	  var proto = Collection && Collection.prototype;
	  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
	  Iterators[NAME] = Iterators.Array;
	}


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var addToUnscopables = __webpack_require__(50);
	var step = __webpack_require__(51);
	var Iterators = __webpack_require__(27);
	var toIObject = __webpack_require__(33);
	
	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(8)(Array, 'Array', function (iterated, kind) {
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var kind = this._k;
	  var index = this._i++;
	  if (!O || index >= O.length) {
	    this._t = undefined;
	    return step(1);
	  }
	  if (kind == 'keys') return step(0, index);
	  if (kind == 'values') return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');


/***/ }),
/* 50 */
/***/ (function(module, exports) {

	module.exports = function () { /* empty */ };


/***/ }),
/* 51 */
/***/ (function(module, exports) {

	module.exports = function (done, value) {
	  return { value: value, done: !!done };
	};


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY = __webpack_require__(9);
	var global = __webpack_require__(11);
	var ctx = __webpack_require__(13);
	var classof = __webpack_require__(53);
	var $export = __webpack_require__(10);
	var isObject = __webpack_require__(18);
	var aFunction = __webpack_require__(14);
	var anInstance = __webpack_require__(54);
	var forOf = __webpack_require__(55);
	var speciesConstructor = __webpack_require__(59);
	var task = __webpack_require__(60).set;
	var microtask = __webpack_require__(62)();
	var newPromiseCapabilityModule = __webpack_require__(63);
	var perform = __webpack_require__(64);
	var userAgent = __webpack_require__(65);
	var promiseResolve = __webpack_require__(66);
	var PROMISE = 'Promise';
	var TypeError = global.TypeError;
	var process = global.process;
	var versions = process && process.versions;
	var v8 = versions && versions.v8 || '';
	var $Promise = global[PROMISE];
	var isNode = classof(process) == 'process';
	var empty = function () { /* empty */ };
	var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
	var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;
	
	var USE_NATIVE = !!function () {
	  try {
	    // correct subclassing with @@species support
	    var promise = $Promise.resolve(1);
	    var FakePromise = (promise.constructor = {})[__webpack_require__(45)('species')] = function (exec) {
	      exec(empty, empty);
	    };
	    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    return (isNode || typeof PromiseRejectionEvent == 'function')
	      && promise.then(empty) instanceof FakePromise
	      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
	      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
	      // we can't detect it synchronously, so just check versions
	      && v8.indexOf('6.6') !== 0
	      && userAgent.indexOf('Chrome/66') === -1;
	  } catch (e) { /* empty */ }
	}();
	
	// helpers
	var isThenable = function (it) {
	  var then;
	  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};
	var notify = function (promise, isReject) {
	  if (promise._n) return;
	  promise._n = true;
	  var chain = promise._c;
	  microtask(function () {
	    var value = promise._v;
	    var ok = promise._s == 1;
	    var i = 0;
	    var run = function (reaction) {
	      var handler = ok ? reaction.ok : reaction.fail;
	      var resolve = reaction.resolve;
	      var reject = reaction.reject;
	      var domain = reaction.domain;
	      var result, then, exited;
	      try {
	        if (handler) {
	          if (!ok) {
	            if (promise._h == 2) onHandleUnhandled(promise);
	            promise._h = 1;
	          }
	          if (handler === true) result = value;
	          else {
	            if (domain) domain.enter();
	            result = handler(value); // may throw
	            if (domain) {
	              domain.exit();
	              exited = true;
	            }
	          }
	          if (result === reaction.promise) {
	            reject(TypeError('Promise-chain cycle'));
	          } else if (then = isThenable(result)) {
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch (e) {
	        if (domain && !exited) domain.exit();
	        reject(e);
	      }
	    };
	    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
	    promise._c = [];
	    promise._n = false;
	    if (isReject && !promise._h) onUnhandled(promise);
	  });
	};
	var onUnhandled = function (promise) {
	  task.call(global, function () {
	    var value = promise._v;
	    var unhandled = isUnhandled(promise);
	    var result, handler, console;
	    if (unhandled) {
	      result = perform(function () {
	        if (isNode) {
	          process.emit('unhandledRejection', value, promise);
	        } else if (handler = global.onunhandledrejection) {
	          handler({ promise: promise, reason: value });
	        } else if ((console = global.console) && console.error) {
	          console.error('Unhandled promise rejection', value);
	        }
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
	    } promise._a = undefined;
	    if (unhandled && result.e) throw result.v;
	  });
	};
	var isUnhandled = function (promise) {
	  return promise._h !== 1 && (promise._a || promise._c).length === 0;
	};
	var onHandleUnhandled = function (promise) {
	  task.call(global, function () {
	    var handler;
	    if (isNode) {
	      process.emit('rejectionHandled', promise);
	    } else if (handler = global.onrejectionhandled) {
	      handler({ promise: promise, reason: promise._v });
	    }
	  });
	};
	var $reject = function (value) {
	  var promise = this;
	  if (promise._d) return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  promise._v = value;
	  promise._s = 2;
	  if (!promise._a) promise._a = promise._c.slice();
	  notify(promise, true);
	};
	var $resolve = function (value) {
	  var promise = this;
	  var then;
	  if (promise._d) return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  try {
	    if (promise === value) throw TypeError("Promise can't be resolved itself");
	    if (then = isThenable(value)) {
	      microtask(function () {
	        var wrapper = { _w: promise, _d: false }; // wrap
	        try {
	          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
	        } catch (e) {
	          $reject.call(wrapper, e);
	        }
	      });
	    } else {
	      promise._v = value;
	      promise._s = 1;
	      notify(promise, false);
	    }
	  } catch (e) {
	    $reject.call({ _w: promise, _d: false }, e); // wrap
	  }
	};
	
	// constructor polyfill
	if (!USE_NATIVE) {
	  // 25.4.3.1 Promise(executor)
	  $Promise = function Promise(executor) {
	    anInstance(this, $Promise, PROMISE, '_h');
	    aFunction(executor);
	    Internal.call(this);
	    try {
	      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
	    } catch (err) {
	      $reject.call(this, err);
	    }
	  };
	  // eslint-disable-next-line no-unused-vars
	  Internal = function Promise(executor) {
	    this._c = [];             // <- awaiting reactions
	    this._a = undefined;      // <- checked in isUnhandled reactions
	    this._s = 0;              // <- state
	    this._d = false;          // <- done
	    this._v = undefined;      // <- value
	    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
	    this._n = false;          // <- notify
	  };
	  Internal.prototype = __webpack_require__(67)($Promise.prototype, {
	    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
	    then: function then(onFulfilled, onRejected) {
	      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
	      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail = typeof onRejected == 'function' && onRejected;
	      reaction.domain = isNode ? process.domain : undefined;
	      this._c.push(reaction);
	      if (this._a) this._a.push(reaction);
	      if (this._s) notify(this, false);
	      return reaction.promise;
	    },
	    // 25.4.5.1 Promise.prototype.catch(onRejected)
	    'catch': function (onRejected) {
	      return this.then(undefined, onRejected);
	    }
	  });
	  OwnPromiseCapability = function () {
	    var promise = new Internal();
	    this.promise = promise;
	    this.resolve = ctx($resolve, promise, 1);
	    this.reject = ctx($reject, promise, 1);
	  };
	  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
	    return C === $Promise || C === Wrapper
	      ? new OwnPromiseCapability(C)
	      : newGenericPromiseCapability(C);
	  };
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
	__webpack_require__(44)($Promise, PROMISE);
	__webpack_require__(68)(PROMISE);
	Wrapper = __webpack_require__(12)[PROMISE];
	
	// statics
	$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
	  // 25.4.4.5 Promise.reject(r)
	  reject: function reject(r) {
	    var capability = newPromiseCapability(this);
	    var $$reject = capability.reject;
	    $$reject(r);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
	  // 25.4.4.6 Promise.resolve(x)
	  resolve: function resolve(x) {
	    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
	  }
	});
	$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(69)(function (iter) {
	  $Promise.all(iter)['catch'](empty);
	})), PROMISE, {
	  // 25.4.4.1 Promise.all(iterable)
	  all: function all(iterable) {
	    var C = this;
	    var capability = newPromiseCapability(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = perform(function () {
	      var values = [];
	      var index = 0;
	      var remaining = 1;
	      forOf(iterable, false, function (promise) {
	        var $index = index++;
	        var alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        C.resolve(promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[$index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if (result.e) reject(result.v);
	    return capability.promise;
	  },
	  // 25.4.4.4 Promise.race(iterable)
	  race: function race(iterable) {
	    var C = this;
	    var capability = newPromiseCapability(C);
	    var reject = capability.reject;
	    var result = perform(function () {
	      forOf(iterable, false, function (promise) {
	        C.resolve(promise).then(capability.resolve, reject);
	      });
	    });
	    if (result.e) reject(result.v);
	    return capability.promise;
	  }
	});


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(35);
	var TAG = __webpack_require__(45)('toStringTag');
	// ES3 wrong here
	var ARG = cof(function () { return arguments; }()) == 'Arguments';
	
	// fallback for IE11 Script Access Denied error
	var tryGet = function (it, key) {
	  try {
	    return it[key];
	  } catch (e) { /* empty */ }
	};
	
	module.exports = function (it) {
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};


/***/ }),
/* 54 */
/***/ (function(module, exports) {

	module.exports = function (it, Constructor, name, forbiddenField) {
	  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
	    throw TypeError(name + ': incorrect invocation!');
	  } return it;
	};


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

	var ctx = __webpack_require__(13);
	var call = __webpack_require__(56);
	var isArrayIter = __webpack_require__(57);
	var anObject = __webpack_require__(17);
	var toLength = __webpack_require__(37);
	var getIterFn = __webpack_require__(58);
	var BREAK = {};
	var RETURN = {};
	var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
	  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
	  var f = ctx(fn, that, entries ? 2 : 1);
	  var index = 0;
	  var length, step, iterator, result;
	  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
	    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	    if (result === BREAK || result === RETURN) return result;
	  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
	    result = call(iterator, f, step.value, entries);
	    if (result === BREAK || result === RETURN) return result;
	  }
	};
	exports.BREAK = BREAK;
	exports.RETURN = RETURN;


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(17);
	module.exports = function (iterator, fn, value, entries) {
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch (e) {
	    var ret = iterator['return'];
	    if (ret !== undefined) anObject(ret.call(iterator));
	    throw e;
	  }
	};


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	// check on default Array iterator
	var Iterators = __webpack_require__(27);
	var ITERATOR = __webpack_require__(45)('iterator');
	var ArrayProto = Array.prototype;
	
	module.exports = function (it) {
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

	var classof = __webpack_require__(53);
	var ITERATOR = __webpack_require__(45)('iterator');
	var Iterators = __webpack_require__(27);
	module.exports = __webpack_require__(12).getIteratorMethod = function (it) {
	  if (it != undefined) return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.3.20 SpeciesConstructor(O, defaultConstructor)
	var anObject = __webpack_require__(17);
	var aFunction = __webpack_require__(14);
	var SPECIES = __webpack_require__(45)('species');
	module.exports = function (O, D) {
	  var C = anObject(O).constructor;
	  var S;
	  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
	};


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

	var ctx = __webpack_require__(13);
	var invoke = __webpack_require__(61);
	var html = __webpack_require__(43);
	var cel = __webpack_require__(22);
	var global = __webpack_require__(11);
	var process = global.process;
	var setTask = global.setImmediate;
	var clearTask = global.clearImmediate;
	var MessageChannel = global.MessageChannel;
	var Dispatch = global.Dispatch;
	var counter = 0;
	var queue = {};
	var ONREADYSTATECHANGE = 'onreadystatechange';
	var defer, channel, port;
	var run = function () {
	  var id = +this;
	  // eslint-disable-next-line no-prototype-builtins
	  if (queue.hasOwnProperty(id)) {
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};
	var listener = function (event) {
	  run.call(event.data);
	};
	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if (!setTask || !clearTask) {
	  setTask = function setImmediate(fn) {
	    var args = [];
	    var i = 1;
	    while (arguments.length > i) args.push(arguments[i++]);
	    queue[++counter] = function () {
	      // eslint-disable-next-line no-new-func
	      invoke(typeof fn == 'function' ? fn : Function(fn), args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clearTask = function clearImmediate(id) {
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if (__webpack_require__(35)(process) == 'process') {
	    defer = function (id) {
	      process.nextTick(ctx(run, id, 1));
	    };
	  // Sphere (JS game engine) Dispatch API
	  } else if (Dispatch && Dispatch.now) {
	    defer = function (id) {
	      Dispatch.now(ctx(run, id, 1));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  } else if (MessageChannel) {
	    channel = new MessageChannel();
	    port = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = ctx(port.postMessage, port, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
	    defer = function (id) {
	      global.postMessage(id + '', '*');
	    };
	    global.addEventListener('message', listener, false);
	  // IE8-
	  } else if (ONREADYSTATECHANGE in cel('script')) {
	    defer = function (id) {
	      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
	        html.removeChild(this);
	        run.call(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function (id) {
	      setTimeout(ctx(run, id, 1), 0);
	    };
	  }
	}
	module.exports = {
	  set: setTask,
	  clear: clearTask
	};


/***/ }),
/* 61 */
/***/ (function(module, exports) {

	// fast apply, http://jsperf.lnkit.com/fast-apply/5
	module.exports = function (fn, args, that) {
	  var un = that === undefined;
	  switch (args.length) {
	    case 0: return un ? fn()
	                      : fn.call(that);
	    case 1: return un ? fn(args[0])
	                      : fn.call(that, args[0]);
	    case 2: return un ? fn(args[0], args[1])
	                      : fn.call(that, args[0], args[1]);
	    case 3: return un ? fn(args[0], args[1], args[2])
	                      : fn.call(that, args[0], args[1], args[2]);
	    case 4: return un ? fn(args[0], args[1], args[2], args[3])
	                      : fn.call(that, args[0], args[1], args[2], args[3]);
	  } return fn.apply(that, args);
	};


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(11);
	var macrotask = __webpack_require__(60).set;
	var Observer = global.MutationObserver || global.WebKitMutationObserver;
	var process = global.process;
	var Promise = global.Promise;
	var isNode = __webpack_require__(35)(process) == 'process';
	
	module.exports = function () {
	  var head, last, notify;
	
	  var flush = function () {
	    var parent, fn;
	    if (isNode && (parent = process.domain)) parent.exit();
	    while (head) {
	      fn = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch (e) {
	        if (head) notify();
	        else last = undefined;
	        throw e;
	      }
	    } last = undefined;
	    if (parent) parent.enter();
	  };
	
	  // Node.js
	  if (isNode) {
	    notify = function () {
	      process.nextTick(flush);
	    };
	  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
	  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
	    var toggle = true;
	    var node = document.createTextNode('');
	    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
	    notify = function () {
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if (Promise && Promise.resolve) {
	    // Promise.resolve without an argument throws an error in LG WebOS 2
	    var promise = Promise.resolve(undefined);
	    notify = function () {
	      promise.then(flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    notify = function () {
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(global, flush);
	    };
	  }
	
	  return function (fn) {
	    var task = { fn: fn, next: undefined };
	    if (last) last.next = task;
	    if (!head) {
	      head = task;
	      notify();
	    } last = task;
	  };
	};


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 25.4.1.5 NewPromiseCapability(C)
	var aFunction = __webpack_require__(14);
	
	function PromiseCapability(C) {
	  var resolve, reject;
	  this.promise = new C(function ($$resolve, $$reject) {
	    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject = $$reject;
	  });
	  this.resolve = aFunction(resolve);
	  this.reject = aFunction(reject);
	}
	
	module.exports.f = function (C) {
	  return new PromiseCapability(C);
	};


/***/ }),
/* 64 */
/***/ (function(module, exports) {

	module.exports = function (exec) {
	  try {
	    return { e: false, v: exec() };
	  } catch (e) {
	    return { e: true, v: e };
	  }
	};


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(11);
	var navigator = global.navigator;
	
	module.exports = navigator && navigator.userAgent || '';


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

	var anObject = __webpack_require__(17);
	var isObject = __webpack_require__(18);
	var newPromiseCapability = __webpack_require__(63);
	
	module.exports = function (C, x) {
	  anObject(C);
	  if (isObject(x) && x.constructor === C) return x;
	  var promiseCapability = newPromiseCapability.f(C);
	  var resolve = promiseCapability.resolve;
	  resolve(x);
	  return promiseCapability.promise;
	};


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

	var hide = __webpack_require__(15);
	module.exports = function (target, src, safe) {
	  for (var key in src) {
	    if (safe && target[key]) target[key] = src[key];
	    else hide(target, key, src[key]);
	  } return target;
	};


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var global = __webpack_require__(11);
	var core = __webpack_require__(12);
	var dP = __webpack_require__(16);
	var DESCRIPTORS = __webpack_require__(20);
	var SPECIES = __webpack_require__(45)('species');
	
	module.exports = function (KEY) {
	  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
	  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
	    configurable: true,
	    get: function () { return this; }
	  });
	};


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

	var ITERATOR = __webpack_require__(45)('iterator');
	var SAFE_CLOSING = false;
	
	try {
	  var riter = [7][ITERATOR]();
	  riter['return'] = function () { SAFE_CLOSING = true; };
	  // eslint-disable-next-line no-throw-literal
	  Array.from(riter, function () { throw 2; });
	} catch (e) { /* empty */ }
	
	module.exports = function (exec, skipClosing) {
	  if (!skipClosing && !SAFE_CLOSING) return false;
	  var safe = false;
	  try {
	    var arr = [7];
	    var iter = arr[ITERATOR]();
	    iter.next = function () { return { done: safe = true }; };
	    arr[ITERATOR] = function () { return iter; };
	    exec(arr);
	  } catch (e) { /* empty */ }
	  return safe;
	};


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-promise-finally
	'use strict';
	var $export = __webpack_require__(10);
	var core = __webpack_require__(12);
	var global = __webpack_require__(11);
	var speciesConstructor = __webpack_require__(59);
	var promiseResolve = __webpack_require__(66);
	
	$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
	  var C = speciesConstructor(this, core.Promise || global.Promise);
	  var isFunction = typeof onFinally == 'function';
	  return this.then(
	    isFunction ? function (x) {
	      return promiseResolve(C, onFinally()).then(function () { return x; });
	    } : onFinally,
	    isFunction ? function (e) {
	      return promiseResolve(C, onFinally()).then(function () { throw e; });
	    } : onFinally
	  );
	} });


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/tc39/proposal-promise-try
	var $export = __webpack_require__(10);
	var newPromiseCapability = __webpack_require__(63);
	var perform = __webpack_require__(64);
	
	$export($export.S, 'Promise', { 'try': function (callbackfn) {
	  var promiseCapability = newPromiseCapability.f(this);
	  var result = perform(callbackfn);
	  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
	  return promiseCapability.promise;
	} });


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(73);


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	
	// This method of obtaining a reference to the global object needs to be
	// kept identical to the way it is obtained in runtime.js
	var g = (function() { return this })() || Function("return this")();
	
	// Use `getOwnPropertyNames` because not all browsers support calling
	// `hasOwnProperty` on the global `self` object in a worker. See #183.
	var hadRuntime = g.regeneratorRuntime &&
	  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;
	
	// Save the old regeneratorRuntime in case it needs to be restored later.
	var oldRuntime = hadRuntime && g.regeneratorRuntime;
	
	// Force reevalutation of runtime.js.
	g.regeneratorRuntime = undefined;
	
	module.exports = __webpack_require__(74);
	
	if (hadRuntime) {
	  // Restore the original runtime.
	  g.regeneratorRuntime = oldRuntime;
	} else {
	  // Remove the global property added by runtime.js.
	  try {
	    delete g.regeneratorRuntime;
	  } catch(e) {
	    g.regeneratorRuntime = undefined;
	  }
	}


/***/ }),
/* 74 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	
	!(function(global) {
	  "use strict";
	
	  var Op = Object.prototype;
	  var hasOwn = Op.hasOwnProperty;
	  var undefined; // More compressible than void 0.
	  var $Symbol = typeof Symbol === "function" ? Symbol : {};
	  var iteratorSymbol = $Symbol.iterator || "@@iterator";
	  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
	
	  var inModule = typeof module === "object";
	  var runtime = global.regeneratorRuntime;
	  if (runtime) {
	    if (inModule) {
	      // If regeneratorRuntime is defined globally and we're in a module,
	      // make the exports object identical to regeneratorRuntime.
	      module.exports = runtime;
	    }
	    // Don't bother evaluating the rest of this file if the runtime was
	    // already defined globally.
	    return;
	  }
	
	  // Define the runtime globally (as expected by generated code) as either
	  // module.exports (if we're in a module) or a new, empty object.
	  runtime = global.regeneratorRuntime = inModule ? module.exports : {};
	
	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	    var generator = Object.create(protoGenerator.prototype);
	    var context = new Context(tryLocsList || []);
	
	    // The ._invoke method unifies the implementations of the .next,
	    // .throw, and .return methods.
	    generator._invoke = makeInvokeMethod(innerFn, self, context);
	
	    return generator;
	  }
	  runtime.wrap = wrap;
	
	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }
	
	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";
	
	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};
	
	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}
	
	  // This is a polyfill for %IteratorPrototype% for environments that
	  // don't natively support it.
	  var IteratorPrototype = {};
	  IteratorPrototype[iteratorSymbol] = function () {
	    return this;
	  };
	
	  var getProto = Object.getPrototypeOf;
	  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
	  if (NativeIteratorPrototype &&
	      NativeIteratorPrototype !== Op &&
	      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	    // This environment has a native %IteratorPrototype%; use it instead
	    // of the polyfill.
	    IteratorPrototype = NativeIteratorPrototype;
	  }
	
	  var Gp = GeneratorFunctionPrototype.prototype =
	    Generator.prototype = Object.create(IteratorPrototype);
	  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	  GeneratorFunctionPrototype.constructor = GeneratorFunction;
	  GeneratorFunctionPrototype[toStringTagSymbol] =
	    GeneratorFunction.displayName = "GeneratorFunction";
	
	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      prototype[method] = function(arg) {
	        return this._invoke(method, arg);
	      };
	    });
	  }
	
	  runtime.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };
	
	  runtime.mark = function(genFun) {
	    if (Object.setPrototypeOf) {
	      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	    } else {
	      genFun.__proto__ = GeneratorFunctionPrototype;
	      if (!(toStringTagSymbol in genFun)) {
	        genFun[toStringTagSymbol] = "GeneratorFunction";
	      }
	    }
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };
	
	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `hasOwn.call(value, "__await")` to determine if the yielded value is
	  // meant to be awaited.
	  runtime.awrap = function(arg) {
	    return { __await: arg };
	  };
	
	  function AsyncIterator(generator) {
	    function invoke(method, arg, resolve, reject) {
	      var record = tryCatch(generator[method], generator, arg);
	      if (record.type === "throw") {
	        reject(record.arg);
	      } else {
	        var result = record.arg;
	        var value = result.value;
	        if (value &&
	            typeof value === "object" &&
	            hasOwn.call(value, "__await")) {
	          return Promise.resolve(value.__await).then(function(value) {
	            invoke("next", value, resolve, reject);
	          }, function(err) {
	            invoke("throw", err, resolve, reject);
	          });
	        }
	
	        return Promise.resolve(value).then(function(unwrapped) {
	          // When a yielded Promise is resolved, its final value becomes
	          // the .value of the Promise<{value,done}> result for the
	          // current iteration. If the Promise is rejected, however, the
	          // result for this iteration will be rejected with the same
	          // reason. Note that rejections of yielded Promises are not
	          // thrown back into the generator function, as is the case
	          // when an awaited Promise is rejected. This difference in
	          // behavior between yield and await is important, because it
	          // allows the consumer to decide what to do with the yielded
	          // rejection (swallow it and continue, manually .throw it back
	          // into the generator, abandon iteration, whatever). With
	          // await, by contrast, there is no opportunity to examine the
	          // rejection reason outside the generator function, so the
	          // only option is to throw it from the await expression, and
	          // let the generator function handle the exception.
	          result.value = unwrapped;
	          resolve(result);
	        }, reject);
	      }
	    }
	
	    var previousPromise;
	
	    function enqueue(method, arg) {
	      function callInvokeWithMethodAndArg() {
	        return new Promise(function(resolve, reject) {
	          invoke(method, arg, resolve, reject);
	        });
	      }
	
	      return previousPromise =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(
	          callInvokeWithMethodAndArg,
	          // Avoid propagating failures to Promises returned by later
	          // invocations of the iterator.
	          callInvokeWithMethodAndArg
	        ) : callInvokeWithMethodAndArg();
	    }
	
	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }
	
	  defineIteratorMethods(AsyncIterator.prototype);
	  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
	    return this;
	  };
	  runtime.AsyncIterator = AsyncIterator;
	
	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList)
	    );
	
	    return runtime.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };
	
	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;
	
	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }
	
	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }
	
	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }
	
	      context.method = method;
	      context.arg = arg;
	
	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          var delegateResult = maybeInvokeDelegate(delegate, context);
	          if (delegateResult) {
	            if (delegateResult === ContinueSentinel) continue;
	            return delegateResult;
	          }
	        }
	
	        if (context.method === "next") {
	          // Setting context._sent for legacy support of Babel's
	          // function.sent implementation.
	          context.sent = context._sent = context.arg;
	
	        } else if (context.method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw context.arg;
	          }
	
	          context.dispatchException(context.arg);
	
	        } else if (context.method === "return") {
	          context.abrupt("return", context.arg);
	        }
	
	        state = GenStateExecuting;
	
	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;
	
	          if (record.arg === ContinueSentinel) {
	            continue;
	          }
	
	          return {
	            value: record.arg,
	            done: context.done
	          };
	
	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(context.arg) call above.
	          context.method = "throw";
	          context.arg = record.arg;
	        }
	      }
	    };
	  }
	
	  // Call delegate.iterator[context.method](context.arg) and handle the
	  // result, either by returning a { value, done } result from the
	  // delegate iterator, or by modifying context.method and context.arg,
	  // setting context.delegate to null, and returning the ContinueSentinel.
	  function maybeInvokeDelegate(delegate, context) {
	    var method = delegate.iterator[context.method];
	    if (method === undefined) {
	      // A .throw or .return when the delegate iterator has no .throw
	      // method always terminates the yield* loop.
	      context.delegate = null;
	
	      if (context.method === "throw") {
	        if (delegate.iterator.return) {
	          // If the delegate iterator has a return method, give it a
	          // chance to clean up.
	          context.method = "return";
	          context.arg = undefined;
	          maybeInvokeDelegate(delegate, context);
	
	          if (context.method === "throw") {
	            // If maybeInvokeDelegate(context) changed context.method from
	            // "return" to "throw", let that override the TypeError below.
	            return ContinueSentinel;
	          }
	        }
	
	        context.method = "throw";
	        context.arg = new TypeError(
	          "The iterator does not provide a 'throw' method");
	      }
	
	      return ContinueSentinel;
	    }
	
	    var record = tryCatch(method, delegate.iterator, context.arg);
	
	    if (record.type === "throw") {
	      context.method = "throw";
	      context.arg = record.arg;
	      context.delegate = null;
	      return ContinueSentinel;
	    }
	
	    var info = record.arg;
	
	    if (! info) {
	      context.method = "throw";
	      context.arg = new TypeError("iterator result is not an object");
	      context.delegate = null;
	      return ContinueSentinel;
	    }
	
	    if (info.done) {
	      // Assign the result of the finished delegate to the temporary
	      // variable specified by delegate.resultName (see delegateYield).
	      context[delegate.resultName] = info.value;
	
	      // Resume execution at the desired location (see delegateYield).
	      context.next = delegate.nextLoc;
	
	      // If context.method was "throw" but the delegate handled the
	      // exception, let the outer generator proceed normally. If
	      // context.method was "next", forget context.arg since it has been
	      // "consumed" by the delegate iterator. If context.method was
	      // "return", allow the original .return call to continue in the
	      // outer generator.
	      if (context.method !== "return") {
	        context.method = "next";
	        context.arg = undefined;
	      }
	
	    } else {
	      // Re-yield the result returned by the delegate method.
	      return info;
	    }
	
	    // The delegate iterator is finished, so forget it and continue with
	    // the outer generator.
	    context.delegate = null;
	    return ContinueSentinel;
	  }
	
	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);
	
	  Gp[toStringTagSymbol] = "Generator";
	
	  // A Generator should always return itself as the iterator object when the
	  // @@iterator function is called on it. Some browsers' implementations of the
	  // iterator prototype chain incorrectly implement this, causing the Generator
	  // object to not be returned from this call. This ensures that doesn't happen.
	  // See https://github.com/facebook/regenerator/issues/274 for more details.
	  Gp[iteratorSymbol] = function() {
	    return this;
	  };
	
	  Gp.toString = function() {
	    return "[object Generator]";
	  };
	
	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };
	
	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }
	
	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }
	
	    this.tryEntries.push(entry);
	  }
	
	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }
	
	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }
	
	  runtime.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();
	
	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }
	
	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };
	
	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }
	
	      if (typeof iterable.next === "function") {
	        return iterable;
	      }
	
	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }
	
	          next.value = undefined;
	          next.done = true;
	
	          return next;
	        };
	
	        return next.next = next;
	      }
	    }
	
	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  runtime.values = values;
	
	  function doneResult() {
	    return { value: undefined, done: true };
	  }
	
	  Context.prototype = {
	    constructor: Context,
	
	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      // Resetting context._sent for legacy support of Babel's
	      // function.sent implementation.
	      this.sent = this._sent = undefined;
	      this.done = false;
	      this.delegate = null;
	
	      this.method = "next";
	      this.arg = undefined;
	
	      this.tryEntries.forEach(resetTryEntry);
	
	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined;
	          }
	        }
	      }
	    },
	
	    stop: function() {
	      this.done = true;
	
	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }
	
	      return this.rval;
	    },
	
	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }
	
	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;
	
	        if (caught) {
	          // If the dispatched exception was caught by a catch block,
	          // then let that catch block handle the exception normally.
	          context.method = "next";
	          context.arg = undefined;
	        }
	
	        return !! caught;
	      }
	
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;
	
	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }
	
	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");
	
	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }
	
	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }
	
	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }
	
	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },
	
	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }
	
	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }
	
	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;
	
	      if (finallyEntry) {
	        this.method = "next";
	        this.next = finallyEntry.finallyLoc;
	        return ContinueSentinel;
	      }
	
	      return this.complete(record);
	    },
	
	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }
	
	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = this.arg = record.arg;
	        this.method = "return";
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }
	
	      return ContinueSentinel;
	    },
	
	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },
	
	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }
	
	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },
	
	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };
	
	      if (this.method === "next") {
	        // Deliberately forget the last sent value so that we don't
	        // accidentally pass it on to the delegate.
	        this.arg = undefined;
	      }
	
	      return ContinueSentinel;
	    }
	  };
	})(
	  // In sloppy mode, unbound `this` refers to the global object, fallback to
	  // Function constructor if we're in global strict mode. That is sadly a form
	  // of indirect eval which violates Content Security Policy.
	  (function() { return this })() || Function("return this")()
	);


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _promise = __webpack_require__(1);
	
	var _promise2 = _interopRequireDefault(_promise);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (fn) {
	  return function () {
	    var gen = fn.apply(this, arguments);
	    return new _promise2.default(function (resolve, reject) {
	      function step(key, arg) {
	        try {
	          var info = gen[key](arg);
	          var value = info.value;
	        } catch (error) {
	          reject(error);
	          return;
	        }
	
	        if (info.done) {
	          resolve(value);
	        } else {
	          return _promise2.default.resolve(value).then(function (value) {
	            step("next", value);
	          }, function (err) {
	            step("throw", err);
	          });
	        }
	      }
	
	      return step("next");
	    });
	  };
	};

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.signTransaction = exports.getaddress = exports.checkpinstate = exports.connect = undefined;
	
	var _regenerator = __webpack_require__(72);
	
	var _regenerator2 = _interopRequireDefault(_regenerator);
	
	var _asyncToGenerator2 = __webpack_require__(75);
	
	var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);
	
	var _util = __webpack_require__(77);
	
	var _soloIo = __webpack_require__(78);
	
	__webpack_require__(79);
	
	__webpack_require__(80);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var connect = exports.connect = function () {
		var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
			var devObj, cmd, res, resData;
			return _regenerator2.default.wrap(function _callee$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							devObj = {
								isConnect: false,
								version: "",
								sn: "",
								net: "",
								lifecycle: "",
								err: ""
							};
							cmd = "8064000000";
							_context.next = 4;
							return (0, _soloIo.sendcmd)(cmd);
	
						case 4:
							res = _context.sent;
	
							if (!(res.length == 4 && res != _util.commDefine.cmdOK)) {
								_context.next = 10;
								break;
							}
	
							if (res == _util.commDefine.noDevice || _util.commDefine.appID) {
								devObj.isConnect = false;
							} else {
								devObj.isConnect = true;
								devObj.err = res;
							}
							return _context.abrupt('return', devObj);
	
						case 10:
							if (!(res.length > 4)) {
								_context.next = 23;
								break;
							}
	
							resData = res;
	
							res = res.substring(res.length - 4, res.length);
	
							if (!(res == _util.commDefine.cmdOK)) {
								_context.next = 22;
								break;
							}
	
							/*
	      COS version：4 bytes
	      SN：32 bytes
	      NET Flag：1 byte （01-Test Net 02-Formal Net ）
	      Life Cycle：4bytes(04000000-生产状态 01000000-初始化状态 02000000-用户状态)
	      !!!!xxxxx222222!!!
	      */
							devObj.isConnect = true;
							devObj.version = resData.substring(0, 8);
							devObj.sn = resData.substring(8, 72);
							devObj.net = resData.substring(72, 74);
							devObj.lifecycle = resData.substring(74, 76);
							return _context.abrupt('return', devObj);
	
						case 22:
							return _context.abrupt('return', devObj);
	
						case 23:
							return _context.abrupt('return', res);
	
						case 24:
						case 'end':
							return _context.stop();
					}
				}
			}, _callee, undefined);
		}));
	
		return function connect() {
			return _ref.apply(this, arguments);
		};
	}();
	
	var checkpinstate = exports.checkpinstate = function () {
		var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
			var PINObj, cmd, res, resData;
			return _regenerator2.default.wrap(function _callee2$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							PINObj = {
								isConnect: false,
								state: "",
								err: ""
							};
							cmd = "8064010000";
							_context2.next = 4;
							return (0, _soloIo.sendcmd)(cmd);
	
						case 4:
							res = _context2.sent;
	
							if (!(res.length == 4 && res != _util.commDefine.cmdOK)) {
								_context2.next = 10;
								break;
							}
	
							if (res == _util.commDefine.noDevice || _util.commDefine.appID) {
								PINObj.isConnect = false;
							} else {
								PINObj.isConnect = true;
								PINObj.err = res;
							}
							return _context2.abrupt('return', PINObj);
	
						case 10:
							if (!(res.length > 4)) {
								_context2.next = 20;
								break;
							}
	
							resData = res;
	
							res = res.substring(res.length - 4, res.length);
	
							if (!(res == _util.commDefine.cmdOK)) {
								_context2.next = 19;
								break;
							}
	
							PINObj.isConnect = true;
							PINObj.state = resData.substring(0, 2);
							return _context2.abrupt('return', PINObj);
	
						case 19:
							return _context2.abrupt('return', PINObj);
	
						case 20:
						case 'end':
							return _context2.stop();
					}
				}
			}, _callee2, undefined);
		}));
	
		return function checkpinstate() {
			return _ref2.apply(this, arguments);
		};
	}();
	
	var getaddress = exports.getaddress = function () {
		var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
			var addrObj, cmdRecover, res, cmd, resData;
			return _regenerator2.default.wrap(function _callee3$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							addrObj = {
								isConnect: false,
								address: "",
								err: ""
							};
							cmdRecover = "806002000c000000000100000080000000";
							_context3.next = 4;
							return (0, _soloIo.sendcmd)(cmdRecover);
	
						case 4:
							res = _context3.sent;
	
							if (!(res.length == 4 && res != _util.commDefine.cmdOK)) {
								_context3.next = 8;
								break;
							}
	
							if (res == _util.commDefine.noDevice || _util.commDefine.appID) {
								addrObj.isConnect = false;
							} else {
								addrObj.isConnect = true;
								addrObj.err = res;
							}
							return _context3.abrupt('return', addrObj);
	
						case 8:
							cmd = "8062020100";
							_context3.next = 11;
							return (0, _soloIo.sendcmd)(cmd);
	
						case 11:
							res = _context3.sent;
	
							if (!(res.length == 4 && res != _util.commDefine.cmdOK)) {
								_context3.next = 17;
								break;
							}
	
							if (res == _util.commDefine.noDevice || _util.commDefine.appID) {
								addrObj.isConnect = false;
							} else {
								addrObj.isConnect = true;
								addrObj.err = res;
							}
							return _context3.abrupt('return', addrObj);
	
						case 17:
							if (!(res.length > 4)) {
								_context3.next = 28;
								break;
							}
	
							resData = res;
	
							res = res.substring(res.length - 4, res.length);
	
							if (!(res == _util.commDefine.cmdOK)) {
								_context3.next = 27;
								break;
							}
	
							addrObj.isConnect = true;
							addrObj.address = resData.substring(0, resData.length - 4);
							addrObj.address = (0, _util.parseAddr)(addrObj.address);
							return _context3.abrupt('return', addrObj);
	
						case 27:
							return _context3.abrupt('return', addrObj);
	
						case 28:
						case 'end':
							return _context3.stop();
					}
				}
			}, _callee3, undefined);
		}));
	
		return function getaddress() {
			return _ref3.apply(this, arguments);
		};
	}();
	
	var signTransaction = exports.signTransaction = function () {
		var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(tx) {
			var signObj, txLen, tmpLen, firstBlock, cmdSign, strTxLen, res, getBtn, resData;
			return _regenerator2.default.wrap(function _callee4$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							signObj = {
								isConnect: false,
								signature: "",
								err: ""
							};
							txLen = tx.length;
							tmpLen = txLen;
	
							console.log("enter sign txLen = %d\n", tx.length);
	
							if (!(txLen > 2000)) {
								_context4.next = 7;
								break;
							}
	
							signObj.err = _util.commDefine.errToLong;
							return _context4.abrupt('return', signObj);
	
						case 7:
							/*if (txLen < 255) {
	      	var strTxLen = txLen.toString(16);
	      	if (tx.length % 2 != 0)
	      		strTxLen = "0" + strTxLen;
	      	var cmdSign = "80a00200" + strTxLen + tx;
	      		var res = await sendcmd(cmdSign);
	      	if (res.length == 4 && res != commDefine.cmdOK) {
	      		if (res == commDefine.noDevice || commDefine.appID) {
	      			signObj.isConnect = false;
	      			return signObj;
	      		}
	      		else {
	      			signObj.isConnect = true;
	      			signObj.err = res;
	      			return signObj;
	      		}
	      	}
	      }*/
	
							firstBlock = 1;
							cmdSign = "";
							strTxLen = "";
	
							console.log("before while tmpLen = %d\n", tmpLen);
	
						case 11:
							if (!(tmpLen > 0)) {
								_context4.next = 28;
								break;
							}
	
							console.log("in while tmpLen = %d\n", tmpLen);
							if (tmpLen > _util.commDefine.apduMaxLen) {
								strTxLen = _util.commDefine.strMaxLen;
								console.log("strTxLen = %s \n", strTxLen);
								if (firstBlock == 1) {
									console.log("firstBlock\n");
									firstBlock = 0;
									cmdSign = "80a00201" + strTxLen + tx.substring(0, _util.commDefine.apduMaxLen);
									tx = tx.substring(_util.commDefine.apduMaxLen, tx.length);
									tmpLen = tmpLen - _util.commDefine.apduMaxLen;
									console.log("firstBlock tmpLen=%d cmdSign = %s\n", tmpLen, cmdSign);
								} else {
									console.log("midBlock\n");
									strTxLen = _util.commDefine.apduMaxLen.toString(16);
									cmdSign = "80a00202" + strTxLen + tx.substring(0, _util.commDefine.apduMaxLen);
									tx = tx.substring(_util.commDefine.apduMaxLen, tx.length);
									tmpLen = tmpLen - _util.commDefine.apduMaxLen;
									console.log("midBlock tmpLen=%d cmdSign = %s\n", tmpLen, cmdSign);
								}
							} else {
								console.log("lastBlock\n");
								tmpLen = tmpLen / 2;
								strTxLen = tmpLen.toString(16);
								if (strTxLen.length % 2 != 0) strTxLen = "0" + strTxLen;
								console.log("strTxLen = %s \n", strTxLen);
								cmdSign = "80a00200" + strTxLen + tx;
								tmpLen = 0;
								console.log("lastBlock tmpLen=%d cmdSign = %s\n", tmpLen, cmdSign);
							}
	
							_context4.next = 16;
							return (0, _soloIo.sendcmd)(cmdSign);
	
						case 16:
							res = _context4.sent;
	
							if (!(res.length == 4 && res != _util.commDefine.cmdOK)) {
								_context4.next = 26;
								break;
							}
	
							if (!(res == _util.commDefine.noDevice || _util.commDefine.appID)) {
								_context4.next = 23;
								break;
							}
	
							signObj.isConnect = false;
							return _context4.abrupt('return', signObj);
	
						case 23:
							signObj.isConnect = true;
							signObj.err = res;
							return _context4.abrupt('return', signObj);
	
						case 26:
							_context4.next = 11;
							break;
	
						case 28:
							getBtn = "80ae000000";
	
						case 29:
							_context4.next = 31;
							return (0, _soloIo.sendcmd)(getBtn);
	
						case 31:
							res = _context4.sent;
	
						case 32:
							if (res == _util.commDefine.waitBtn) {
								_context4.next = 29;
								break;
							}
	
						case 33:
							if (!(res.length == 4 && res != _util.commDefine.cmdOK)) {
								_context4.next = 44;
								break;
							}
	
							if (!(res == _util.commDefine.noDevice || _util.commDefine.appID)) {
								_context4.next = 39;
								break;
							}
	
							signObj.isConnect = false;
							return _context4.abrupt('return', signObj);
	
						case 39:
							signObj.isConnect = true;
							signObj.err = res;
							return _context4.abrupt('return', signObj);
	
						case 42:
							_context4.next = 59;
							break;
	
						case 44:
							if (!(res.length > 4)) {
								_context4.next = 56;
								break;
							}
	
							resData = res;
	
							res = res.substring(res.length - 4, res.length);
	
							if (!(res == _util.commDefine.cmdOK)) {
								_context4.next = 53;
								break;
							}
	
							signObj.isConnect = true;
							signObj.signature = resData.substring(0, resData.length - 4);
							return _context4.abrupt('return', signObj);
	
						case 53:
							return _context4.abrupt('return', signObj);
	
						case 54:
							_context4.next = 59;
							break;
	
						case 56:
							if (!(res == _util.commDefine.cmdOK)) {
								_context4.next = 59;
								break;
							}
	
							signObj.isConnect = true;
							return _context4.abrupt('return', signObj);
	
						case 59:
							return _context4.abrupt('return', signObj);
	
						case 60:
						case 'end':
							return _context4.stop();
					}
				}
			}, _callee4, undefined);
		}));
	
		return function signTransaction(_x) {
			return _ref4.apply(this, arguments);
		};
	}();

/***/ }),
/* 77 */
/***/ (function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.padding = padding;
	exports.parseAddr = parseAddr;
	var vKHtag = exports.vKHtag = "3B7D8101";
	
	var errorCode = exports.errorCode = {
		succuess: 0,
		fail: 1,
		timeout: 5
	};
	
	var commDefine = exports.commDefine = {
		maxPacketLength: 50,
		headerLength: 8,
		packetControlLength: 6,
		fisrtPacket: "0001",
		midPacket: "0002",
		lastPacket: "0000",
		pilotTimeout: 2,
		normalTimeout: 5,
		cmdOK: "9000",
		cmdNG: "68",
		noDevice: "6805",
		appID: "6802",
		waitBtn: "6F00",
		errToLong: "6700",
		apduMaxLen: "510",
		strMaxLen: "ff"
	};
	var pinState = exports.pinState = {
		notset: "03",
		locked: "02",
		login: "01",
		logout: "00"
	};
	var lifeCycle = exports.lifeCycle = {
		init: "01",
		user: "02",
		factory: "04"
	};
	
	function padding(send_data, send_len) {
		for (var i = 0; i < 64 - 8 - send_len; i++) {
			send_data = send_data + "1";
		}
		return send_data;
	}
	
	function parseAddr(strAddr) {
		var arr = new Array();
		var addr = "";
		for (var i = 0; i < strAddr.length; i = i + 2) {
			var el = strAddr.substring(i, i + 2);
			arr[i / 2] = parseInt(el, 16);
		}
		for (var j = 0; j < strAddr.length / 2; j++) {
			addr = addr + String.fromCharCode(arr[j]);
		}
	
		return addr;
	}

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.sendcmd = undefined;
	
	var _regenerator = __webpack_require__(72);
	
	var _regenerator2 = _interopRequireDefault(_regenerator);
	
	var _promise = __webpack_require__(1);
	
	var _promise2 = _interopRequireDefault(_promise);
	
	var _asyncToGenerator2 = __webpack_require__(75);
	
	var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);
	
	var _util = __webpack_require__(77);
	
	var _b = __webpack_require__(79);
	
	var _u2f = __webpack_require__(80);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var isFinal = 0;
	
	function cmdCallback(response) {
		var res;
		console.log("cmdCallback response.errorCode = %d\n", response.errorCode);
		if (!response.errorCode) {
			if (!isFinal) {
				console.log("not final\n");
				res = _util.commDefine.cmdOK;
				return res;
			}
			var rv = response.signatureData;
			res = (0, _b.B64_decode)(rv).join('');
			res = res.substring(5, res.length);
			console.log("final res %s\n", res);
		} else {
			var strcode = response.errorCode.toString(16);
			if (strcode.length % 2 != 0) strcode = "0" + strcode;
			res = _util.commDefine.cmdNG + strcode;
			console.log("error code =%s \n", res);
		}
		return res;
	}
	
	var sendcmd = exports.sendcmd = function () {
		var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(send_buf) {
			var callbackflag, res, mutiFirst, strSendLen, send_len, pacBuf, tmpLen, tmpFirstBuf, tmpMidBuf, vKHb64, vKHb32, key, self;
			return _regenerator2.default.wrap(function _callee$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							callbackflag = 0;
							mutiFirst = 1;
							send_len = send_buf.length;
	
							//final callback
							console.log("enter sendcmd\n");
							console.log("len =%d, send_buf = %s\n", send_buf.length, send_buf);
							//org send_buf	
							//header(8) +len(2) + 00 + packet_type(2) + data(50)
							//each packet 50 chars
	
						case 5:
							if (!(send_len > 0)) {
								_context.next = 23;
								break;
							}
	
							//if(send_len<=commDefine.maxPacketLength - commDefine.headerLength - commDefine.packetControlLength)
							if (send_len <= _util.commDefine.maxPacketLength) {
								// if less then 50 send and get response back
								console.log("final case \n");
								send_len = send_len / 2;
								strSendLen = send_len.toString(16);
								if (strSendLen.length % 2 != 0) strSendLen = "0" + strSendLen;
	
								pacBuf = strSendLen + _util.commDefine.lastPacket + send_buf;
								pacBuf = (0, _util.padding)(pacBuf, send_len * 2 + _util.commDefine.packetControlLength);
								send_len = 0;
								isFinal = 1;
							}
							//if(send_len>commDefine.maxPacketLength - commDefine.headerLength - commDefine.packetControlLength)
							if (send_len > _util.commDefine.maxPacketLength) {
								//if more then 50 send first 50 and -50
								console.log("mid case \n");
								tmpLen = _util.commDefine.maxPacketLength / 2;
	
								strSendLen = tmpLen.toString(16);
								if (strSendLen.length % 2 != 0) strSendLen = "0" + strSendLen;
	
								if (mutiFirst == 1) {
									// first in multi packet index = 1
									tmpFirstBuf = send_buf.substring(0, _util.commDefine.maxPacketLength);
	
									pacBuf = strSendLen + _util.commDefine.fisrtPacket + tmpFirstBuf;
									mutiFirst = 0;
								} else {
									tmpMidBuf = send_buf.substring(0, _util.commDefine.maxPacketLength);
	
									pacBuf = strSendLen + _util.commDefine.midPacket + tmpMidBuf;
								}
								pacBuf = (0, _util.padding)(pacBuf, _util.commDefine.maxPacketLength + _util.commDefine.packetControlLength);
								send_buf = send_buf.substring(_util.commDefine.maxPacketLength, send_len);
								send_len = send_len - _util.commDefine.maxPacketLength;
								isFinal = 0;
							}
	
							pacBuf = _util.vKHtag + pacBuf;
							console.log("pacBuf %s \n", pacBuf);
							console.log("send len = %d", send_len);
	
							vKHb64 = (0, _b.B64_encode)(pacBuf, 64); //real buffer
	
							vKHb32 = (0, _b.B64_encode)(pacBuf, 32);
							key = {};
	
							key["version"] = "U2F_V2";
							key["keyHandle"] = vKHb64;
							self = undefined;
							_context.next = 19;
							return new _promise2.default(function (resolve, reject) {
								(0, _u2f.sign)(location.origin, vKHb32, [key], function (response) {
									res = cmdCallback(response);
									resolve(res);
								}, _util.commDefine.pilotTimeout);
							});
	
						case 19:
							if (!(res.length == 4 && res != _util.commDefine.cmdOK)) {
								_context.next = 21;
								break;
							}
	
							return _context.abrupt('return', res);
	
						case 21:
							_context.next = 5;
							break;
	
						case 23:
							return _context.abrupt('return', res);
	
						case 24:
						case 'end':
							return _context.stop();
					}
				}
			}, _callee, undefined);
		}));
	
		return function sendcmd(_x) {
			return _ref.apply(this, arguments);
		};
	}();

/***/ }),
/* 79 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.B64_encode = B64_encode;
	exports.base64_encode = base64_encode;
	exports.B64_decode = B64_decode;
	// Copyright 2014 Google Inc. All rights reserved
	//
	// Use of this source code is governed by a BSD-style
	// license that can be found in the LICENSE file or at
	// https://developers.google.com/open-source/licenses/bsd
	
	// WebSafeBase64Escape and Unescape.
	function B64_encode(bytes, opt_length) {
	  if (!opt_length) opt_length = bytes.length;
	  var b64out = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_';
	  var result = '';
	  var shift = 0;
	  var accu = 0;
	  var inputIndex = 0;
	
	  while (opt_length--) {
	    accu <<= 8;
	    accu |= bytes[inputIndex++].charCodeAt();
	    shift += 8;
	    while (shift >= 6) {
	      var i = accu >> shift - 6 & 63;
	      result += b64out.charAt(i);
	      shift -= 6;
	    }
	  }
	  if (shift) {
	    accu <<= 8;
	    shift += 8;
	    var i = accu >> shift - 6 & 63;
	    result += b64out.charAt(i);
	  }
	  return result;
	}
	
	// Normal base64 encode; not websafe, including padding.
	function base64_encode(bytes, opt_length) {
	  if (!opt_length) opt_length = bytes.length;
	  var b64out = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	  var result = '';
	  var shift = 0;
	  var accu = 0;
	  var inputIndex = 0;
	  while (opt_length--) {
	    accu <<= 8;
	    accu |= bytes[inputIndex++];
	    shift += 8;
	    while (shift >= 6) {
	      var i = accu >> shift - 6 & 63;
	      result += b64out.charAt(i);
	      shift -= 6;
	    }
	  }
	  if (shift) {
	    accu <<= 8;
	    shift += 8;
	    var i = accu >> shift - 6 & 63;
	    result += b64out.charAt(i);
	  }
	  while (result.length % 4) {
	    result += '=';
	  }return result;
	}
	
	var B64_inmap = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 0, 0, 0, 0, 64, 0, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 0, 0, 0, 0, 0];
	
	function B64_decode(string) {
	  var bytes = [];
	  var accu = 0;
	  var shift = 0;
	  for (var i = 0; i < string.length; ++i) {
	    var c = string.charCodeAt(i);
	    if (c < 32 || c > 127 || !B64_inmap[c - 32]) return [];
	    accu <<= 6;
	    accu |= B64_inmap[c - 32] - 1;
	    shift += 6;
	    if (shift >= 8) {
	      bytes.push(String.fromCharCode(accu >> shift - 8 & 255));
	      shift -= 8;
	    }
	  }
	  return bytes;
	}

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

	//Copyright 2014-2015 Google Inc. All rights reserved.
	
	//Use of this source code is governed by a BSD-style
	//license that can be found in the LICENSE file or at
	//https://developers.google.com/open-source/licenses/bsd
	
	/**
	 * @fileoverview The U2F api.
	 */
	'use strict';
	
	/**
	 * Namespace for the U2F api.
	 * @type {Object}
	 */
	
	var _stringify = __webpack_require__(81);
	
	var _stringify2 = _interopRequireDefault(_stringify);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var u2f = u2f || {};
	
	/**
	  * Require integration
	  */
	if (true) {
	  module.exports = u2f;
	}
	
	/**
	 * FIDO U2F Javascript API Version
	 * @number
	 */
	var js_api_version;
	
	/**
	 * The U2F extension id
	 * @const {string}
	 */
	// The Chrome packaged app extension ID.
	// Uncomment this if you want to deploy a server instance that uses
	// the package Chrome app and does not require installing the U2F Chrome extension.
	u2f.EXTENSION_ID = 'kmendfapggjehodndflmmgagdbamhnfd';
	// The U2F Chrome extension ID.
	// Uncomment this if you want to deploy a server instance that uses
	// the U2F Chrome extension to authenticate.
	// u2f.EXTENSION_ID = 'pfboblefjcgdjicmnffhdgionmgcdmne';
	
	
	/**
	 * Message types for messsages to/from the extension
	 * @const
	 * @enum {string}
	 */
	u2f.MessageTypes = {
	  'U2F_REGISTER_REQUEST': 'u2f_register_request',
	  'U2F_REGISTER_RESPONSE': 'u2f_register_response',
	  'U2F_SIGN_REQUEST': 'u2f_sign_request',
	  'U2F_SIGN_RESPONSE': 'u2f_sign_response',
	  'U2F_GET_API_VERSION_REQUEST': 'u2f_get_api_version_request',
	  'U2F_GET_API_VERSION_RESPONSE': 'u2f_get_api_version_response'
	};
	
	/**
	 * Response status codes
	 * @const
	 * @enum {number}
	 */
	u2f.ErrorCodes = {
	  'OK': 0,
	  'OTHER_ERROR': 1,
	  'BAD_REQUEST': 2,
	  'CONFIGURATION_UNSUPPORTED': 3,
	  'DEVICE_INELIGIBLE': 4,
	  'TIMEOUT': 5
	};
	
	/**
	 * A message for registration requests
	 * @typedef {{
	 *   type: u2f.MessageTypes,
	 *   appId: ?string,
	 *   timeoutSeconds: ?number,
	 *   requestId: ?number
	 * }}
	 */
	u2f.U2fRequest;
	
	/**
	 * A message for registration responses
	 * @typedef {{
	 *   type: u2f.MessageTypes,
	 *   responseData: (u2f.Error | u2f.RegisterResponse | u2f.SignResponse),
	 *   requestId: ?number
	 * }}
	 */
	u2f.U2fResponse;
	
	/**
	 * An error object for responses
	 * @typedef {{
	 *   errorCode: u2f.ErrorCodes,
	 *   errorMessage: ?string
	 * }}
	 */
	u2f.Error;
	
	/**
	 * Data object for a single sign request.
	 * @typedef {enum {BLUETOOTH_RADIO, BLUETOOTH_LOW_ENERGY, USB, NFC}}
	 */
	u2f.Transport;
	
	/**
	 * Data object for a single sign request.
	 * @typedef {Array<u2f.Transport>}
	 */
	u2f.Transports;
	
	/**
	 * Data object for a single sign request.
	 * @typedef {{
	 *   version: string,
	 *   challenge: string,
	 *   keyHandle: string,
	 *   appId: string
	 * }}
	 */
	u2f.SignRequest;
	
	/**
	 * Data object for a sign response.
	 * @typedef {{
	 *   keyHandle: string,
	 *   signatureData: string,
	 *   clientData: string
	 * }}
	 */
	u2f.SignResponse;
	
	/**
	 * Data object for a registration request.
	 * @typedef {{
	 *   version: string,
	 *   challenge: string
	 * }}
	 */
	u2f.RegisterRequest;
	
	/**
	 * Data object for a registration response.
	 * @typedef {{
	 *   version: string,
	 *   keyHandle: string,
	 *   transports: Transports,
	 *   appId: string
	 * }}
	 */
	u2f.RegisterResponse;
	
	/**
	 * Data object for a registered key.
	 * @typedef {{
	 *   version: string,
	 *   keyHandle: string,
	 *   transports: ?Transports,
	 *   appId: ?string
	 * }}
	 */
	u2f.RegisteredKey;
	
	/**
	 * Data object for a get API register response.
	 * @typedef {{
	 *   js_api_version: number
	 * }}
	 */
	u2f.GetJsApiVersionResponse;
	
	//Low level MessagePort API support
	
	/**
	 * Sets up a MessagePort to the U2F extension using the
	 * available mechanisms.
	 * @param {function((MessagePort|u2f.WrappedChromeRuntimePort_))} callback
	 */
	u2f.getMessagePort = function (callback) {
	  if (typeof chrome != 'undefined' && chrome.runtime) {
	    // The actual message here does not matter, but we need to get a reply
	    // for the callback to run. Thus, send an empty signature request
	    // in order to get a failure response.
	    var msg = {
	      type: u2f.MessageTypes.U2F_SIGN_REQUEST,
	      signRequests: []
	    };
	    chrome.runtime.sendMessage(u2f.EXTENSION_ID, msg, function () {
	      if (!chrome.runtime.lastError) {
	        // We are on a whitelisted origin and can talk directly
	        // with the extension.
	        u2f.getChromeRuntimePort_(callback);
	      } else {
	        // chrome.runtime was available, but we couldn't message
	        // the extension directly, use iframe
	        u2f.getIframePort_(callback);
	      }
	    });
	  } else if (u2f.isAndroidChrome_()) {
	    u2f.getAuthenticatorPort_(callback);
	  } else if (u2f.isIosChrome_()) {
	    u2f.getIosPort_(callback);
	  } else {
	    // chrome.runtime was not available at all, which is normal
	    // when this origin doesn't have access to any extensions.
	    u2f.getIframePort_(callback);
	  }
	};
	
	/**
	 * Detect chrome running on android based on the browser's useragent.
	 * @private
	 */
	u2f.isAndroidChrome_ = function () {
	  var userAgent = navigator.userAgent;
	  return userAgent.indexOf('Chrome') != -1 && userAgent.indexOf('Android') != -1;
	};
	
	/**
	 * Detect chrome running on iOS based on the browser's platform.
	 * @private
	 */
	u2f.isIosChrome_ = function () {
	  return ["iPhone", "iPad", "iPod"].indexOf(navigator.platform) > -1;
	};
	
	/**
	 * Connects directly to the extension via chrome.runtime.connect.
	 * @param {function(u2f.WrappedChromeRuntimePort_)} callback
	 * @private
	 */
	u2f.getChromeRuntimePort_ = function (callback) {
	  var port = chrome.runtime.connect(u2f.EXTENSION_ID, { 'includeTlsChannelId': true });
	  setTimeout(function () {
	    callback(new u2f.WrappedChromeRuntimePort_(port));
	  }, 0);
	};
	
	/**
	 * Return a 'port' abstraction to the Authenticator app.
	 * @param {function(u2f.WrappedAuthenticatorPort_)} callback
	 * @private
	 */
	u2f.getAuthenticatorPort_ = function (callback) {
	  setTimeout(function () {
	    callback(new u2f.WrappedAuthenticatorPort_());
	  }, 0);
	};
	
	/**
	 * Return a 'port' abstraction to the iOS client app.
	 * @param {function(u2f.WrappedIosPort_)} callback
	 * @private
	 */
	u2f.getIosPort_ = function (callback) {
	  setTimeout(function () {
	    callback(new u2f.WrappedIosPort_());
	  }, 0);
	};
	
	/**
	 * A wrapper for chrome.runtime.Port that is compatible with MessagePort.
	 * @param {Port} port
	 * @constructor
	 * @private
	 */
	u2f.WrappedChromeRuntimePort_ = function (port) {
	  this.port_ = port;
	};
	
	/**
	 * Format and return a sign request compliant with the JS API version supported by the extension.
	 * @param {Array<u2f.SignRequest>} signRequests
	 * @param {number} timeoutSeconds
	 * @param {number} reqId
	 * @return {Object}
	 */
	u2f.formatSignRequest_ = function (appId, challenge, registeredKeys, timeoutSeconds, reqId) {
	  if (js_api_version === undefined || js_api_version < 1.1) {
	    // Adapt request to the 1.0 JS API
	    var signRequests = [];
	    for (var i = 0; i < registeredKeys.length; i++) {
	      signRequests[i] = {
	        version: registeredKeys[i].version,
	        challenge: challenge,
	        keyHandle: registeredKeys[i].keyHandle,
	        appId: appId
	      };
	    }
	    return {
	      type: u2f.MessageTypes.U2F_SIGN_REQUEST,
	      signRequests: signRequests,
	      timeoutSeconds: timeoutSeconds,
	      requestId: reqId
	    };
	  }
	  // JS 1.1 API
	  return {
	    type: u2f.MessageTypes.U2F_SIGN_REQUEST,
	    appId: appId,
	    challenge: challenge,
	    registeredKeys: registeredKeys,
	    timeoutSeconds: timeoutSeconds,
	    requestId: reqId
	  };
	};
	
	/**
	 * Format and return a register request compliant with the JS API version supported by the extension..
	 * @param {Array<u2f.SignRequest>} signRequests
	 * @param {Array<u2f.RegisterRequest>} signRequests
	 * @param {number} timeoutSeconds
	 * @param {number} reqId
	 * @return {Object}
	 */
	u2f.formatRegisterRequest_ = function (appId, registeredKeys, registerRequests, timeoutSeconds, reqId) {
	  if (js_api_version === undefined || js_api_version < 1.1) {
	    // Adapt request to the 1.0 JS API
	    for (var i = 0; i < registerRequests.length; i++) {
	      registerRequests[i].appId = appId;
	    }
	    var signRequests = [];
	    for (var i = 0; i < registeredKeys.length; i++) {
	      signRequests[i] = {
	        version: registeredKeys[i].version,
	        challenge: registerRequests[0],
	        keyHandle: registeredKeys[i].keyHandle,
	        appId: appId
	      };
	    }
	    return {
	      type: u2f.MessageTypes.U2F_REGISTER_REQUEST,
	      signRequests: signRequests,
	      registerRequests: registerRequests,
	      timeoutSeconds: timeoutSeconds,
	      requestId: reqId
	    };
	  }
	  // JS 1.1 API
	  return {
	    type: u2f.MessageTypes.U2F_REGISTER_REQUEST,
	    appId: appId,
	    registerRequests: registerRequests,
	    registeredKeys: registeredKeys,
	    timeoutSeconds: timeoutSeconds,
	    requestId: reqId
	  };
	};
	
	/**
	 * Posts a message on the underlying channel.
	 * @param {Object} message
	 */
	u2f.WrappedChromeRuntimePort_.prototype.postMessage = function (message) {
	  this.port_.postMessage(message);
	};
	
	/**
	 * Emulates the HTML 5 addEventListener interface. Works only for the
	 * onmessage event, which is hooked up to the chrome.runtime.Port.onMessage.
	 * @param {string} eventName
	 * @param {function({data: Object})} handler
	 */
	u2f.WrappedChromeRuntimePort_.prototype.addEventListener = function (eventName, handler) {
	  var name = eventName.toLowerCase();
	  if (name == 'message' || name == 'onmessage') {
	    this.port_.onMessage.addListener(function (message) {
	      // Emulate a minimal MessageEvent object
	      handler({ 'data': message });
	    });
	  } else {
	    console.error('WrappedChromeRuntimePort only supports onMessage');
	  }
	};
	
	/**
	 * Wrap the Authenticator app with a MessagePort interface.
	 * @constructor
	 * @private
	 */
	u2f.WrappedAuthenticatorPort_ = function () {
	  this.requestId_ = -1;
	  this.requestObject_ = null;
	};
	
	/**
	 * Launch the Authenticator intent.
	 * @param {Object} message
	 */
	u2f.WrappedAuthenticatorPort_.prototype.postMessage = function (message) {
	  var intentUrl = u2f.WrappedAuthenticatorPort_.INTENT_URL_BASE_ + ';S.request=' + encodeURIComponent((0, _stringify2.default)(message)) + ';end';
	  document.location = intentUrl;
	};
	
	/**
	 * Tells what type of port this is.
	 * @return {String} port type
	 */
	u2f.WrappedAuthenticatorPort_.prototype.getPortType = function () {
	  return "WrappedAuthenticatorPort_";
	};
	
	/**
	 * Emulates the HTML 5 addEventListener interface.
	 * @param {string} eventName
	 * @param {function({data: Object})} handler
	 */
	u2f.WrappedAuthenticatorPort_.prototype.addEventListener = function (eventName, handler) {
	  var name = eventName.toLowerCase();
	  if (name == 'message') {
	    var self = this;
	    /* Register a callback to that executes when
	     * chrome injects the response. */
	    window.addEventListener('message', self.onRequestUpdate_.bind(self, handler), false);
	  } else {
	    console.error('WrappedAuthenticatorPort only supports message');
	  }
	};
	
	/**
	 * Callback invoked  when a response is received from the Authenticator.
	 * @param function({data: Object}) callback
	 * @param {Object} message message Object
	 */
	u2f.WrappedAuthenticatorPort_.prototype.onRequestUpdate_ = function (callback, message) {
	  var messageObject = JSON.parse(message.data);
	  var intentUrl = messageObject['intentURL'];
	
	  var errorCode = messageObject['errorCode'];
	  var responseObject = null;
	  if (messageObject.hasOwnProperty('data')) {
	    responseObject = /** @type {Object} */JSON.parse(messageObject['data']);
	  }
	
	  callback({ 'data': responseObject });
	};
	
	/**
	 * Base URL for intents to Authenticator.
	 * @const
	 * @private
	 */
	/*
	u2f.WrappedAuthenticatorPort_.INTENT_URL_BASE_ =
	  'intent:#Intent;action=com.google.android.apps.authenticator.AUTHENTICATE';
	*/
	u2f.WrappedAuthenticatorPort_.INTENT_URL_BASE_ = 'intent:#Intent;action=com.ledger.android.u2f.bridge.AUTHENTICATE';
	
	/**
	 * Wrap the iOS client app with a MessagePort interface.
	 * @constructor
	 * @private
	 */
	u2f.WrappedIosPort_ = function () {};
	
	/**
	 * Launch the iOS client app request
	 * @param {Object} message
	 */
	u2f.WrappedIosPort_.prototype.postMessage = function (message) {
	  var str = (0, _stringify2.default)(message);
	  var url = "u2f://auth?" + encodeURI(str);
	  location.replace(url);
	};
	
	/**
	 * Tells what type of port this is.
	 * @return {String} port type
	 */
	u2f.WrappedIosPort_.prototype.getPortType = function () {
	  return "WrappedIosPort_";
	};
	
	/**
	 * Emulates the HTML 5 addEventListener interface.
	 * @param {string} eventName
	 * @param {function({data: Object})} handler
	 */
	u2f.WrappedIosPort_.prototype.addEventListener = function (eventName, handler) {
	  var name = eventName.toLowerCase();
	  if (name !== 'message') {
	    console.error('WrappedIosPort only supports message');
	  }
	};
	
	/**
	 * Sets up an embedded trampoline iframe, sourced from the extension.
	 * @param {function(MessagePort)} callback
	 * @private
	 */
	u2f.getIframePort_ = function (callback) {
	  // Create the iframe
	  var iframeOrigin = 'chrome-extension://' + u2f.EXTENSION_ID;
	  var iframe = document.createElement('iframe');
	  iframe.src = iframeOrigin + '/u2f-comms.html';
	  iframe.setAttribute('style', 'display:none');
	  document.body.appendChild(iframe);
	
	  var channel = new MessageChannel();
	  var ready = function ready(message) {
	    if (message.data == 'ready') {
	      channel.port1.removeEventListener('message', ready);
	      callback(channel.port1);
	    } else {
	      console.error('First event on iframe port was not "ready"');
	    }
	  };
	  channel.port1.addEventListener('message', ready);
	  channel.port1.start();
	
	  iframe.addEventListener('load', function () {
	    // Deliver the port to the iframe and initialize
	    iframe.contentWindow.postMessage('init', iframeOrigin, [channel.port2]);
	  });
	};
	
	//High-level JS API
	
	/**
	 * Default extension response timeout in seconds.
	 * @const
	 */
	u2f.EXTENSION_TIMEOUT_SEC = 30;
	
	/**
	 * A singleton instance for a MessagePort to the extension.
	 * @type {MessagePort|u2f.WrappedChromeRuntimePort_}
	 * @private
	 */
	u2f.port_ = null;
	
	/**
	 * Callbacks waiting for a port
	 * @type {Array<function((MessagePort|u2f.WrappedChromeRuntimePort_))>}
	 * @private
	 */
	u2f.waitingForPort_ = [];
	
	/**
	 * A counter for requestIds.
	 * @type {number}
	 * @private
	 */
	u2f.reqCounter_ = 0;
	
	/**
	 * A map from requestIds to client callbacks
	 * @type {Object.<number,(function((u2f.Error|u2f.RegisterResponse))
	 *                       |function((u2f.Error|u2f.SignResponse)))>}
	 * @private
	 */
	u2f.callbackMap_ = {};
	
	/**
	 * Creates or retrieves the MessagePort singleton to use.
	 * @param {function((MessagePort|u2f.WrappedChromeRuntimePort_))} callback
	 * @private
	 */
	u2f.getPortSingleton_ = function (callback) {
	  if (u2f.port_) {
	    callback(u2f.port_);
	  } else {
	    if (u2f.waitingForPort_.length == 0) {
	      u2f.getMessagePort(function (port) {
	        u2f.port_ = port;
	        u2f.port_.addEventListener('message',
	        /** @type {function(Event)} */u2f.responseHandler_);
	
	        // Careful, here be async callbacks. Maybe.
	        while (u2f.waitingForPort_.length) {
	          u2f.waitingForPort_.shift()(u2f.port_);
	        }
	      });
	    }
	    u2f.waitingForPort_.push(callback);
	  }
	};
	
	/**
	 * Handles response messages from the extension.
	 * @param {MessageEvent.<u2f.Response>} message
	 * @private
	 */
	u2f.responseHandler_ = function (message) {
	  var response = message.data;
	  var reqId = response['requestId'];
	  if (!reqId || !u2f.callbackMap_[reqId]) {
	    console.error('Unknown or missing requestId in response.');
	    return;
	  }
	  var cb = u2f.callbackMap_[reqId];
	  delete u2f.callbackMap_[reqId];
	  cb(response['responseData']);
	};
	
	/**
	 * Dispatches an array of sign requests to available U2F tokens.
	 * If the JS API version supported by the extension is unknown, it first sends a
	 * message to the extension to find out the supported API version and then it sends
	 * the sign request.
	 * @param {string=} appId
	 * @param {string=} challenge
	 * @param {Array<u2f.RegisteredKey>} registeredKeys
	 * @param {unction((u2f.Erfror|u2f.SignResponse))} callback
	 * @param {number=} opt_timeoutSeconds
	 */
	u2f.sign = function (appId, challenge, registeredKeys, callback, opt_timeoutSeconds) {
	  // if (js_api_version === undefined) 
	  // {
	  // Send a message to get the extension to JS API version, then send the actual sign request.
	  //  u2f.getApiVersion(
	  //      function (response) {
	  //       js_api_version = response['js_api_version'] === undefined ? 0 : response['js_api_version'];
	  //console.log("Extension JS API Version: ", js_api_version);
	  //       u2f.sendSignRequest(appId, challenge, registeredKeys, callback, opt_timeoutSeconds);
	  //    });
	  // } else {
	  // We know the JS API version. Send the actual sign request in the supported API version.
	  u2f.sendSignRequest(appId, challenge, registeredKeys, callback, opt_timeoutSeconds);
	  // }
	};
	
	/**
	 * Dispatches an array of sign requests to available U2F tokens.
	 * @param {string=} appId
	 * @param {string=} challenge
	 * @param {Array<u2f.RegisteredKey>} registeredKeys
	 * @param {function((u2f.Error|u2f.SignResponse))} callback
	 * @param {number=} opt_timeoutSeconds
	 */
	u2f.sendSignRequest = function (appId, challenge, registeredKeys, callback, opt_timeoutSeconds) {
	  u2f.getPortSingleton_(function (port) {
	    var reqId = ++u2f.reqCounter_;
	    u2f.callbackMap_[reqId] = callback;
	    var timeoutSeconds = typeof opt_timeoutSeconds !== 'undefined' ? opt_timeoutSeconds : u2f.EXTENSION_TIMEOUT_SEC;
	    var req = u2f.formatSignRequest_(appId, challenge, registeredKeys, timeoutSeconds, reqId);
	    port.postMessage(req);
	  });
	};
	
	/**
	 * Dispatches register requests to available U2F tokens. An array of sign
	 * requests identifies already registered tokens.
	 * If the JS API version supported by the extension is unknown, it first sends a
	 * message to the extension to find out the supported API version and then it sends
	 * the register request.
	 * @param {string=} appId
	 * @param {Array<u2f.RegisterRequest>} registerRequests
	 * @param {Array<u2f.RegisteredKey>} registeredKeys
	 * @param {function((u2f.Error|u2f.RegisterResponse))} callback
	 * @param {number=} opt_timeoutSeconds
	 */
	u2f.register = function (appId, registerRequests, registeredKeys, callback, opt_timeoutSeconds) {
	  if (js_api_version === undefined) {
	    // Send a message to get the extension to JS API version, then send the actual register request.
	    u2f.getApiVersion(function (response) {
	      js_api_version = response['js_api_version'] === undefined ? 0 : response['js_api_version'];
	      //console.log("Extension JS API Version: ", js_api_version);
	      u2f.sendRegisterRequest(appId, registerRequests, registeredKeys, callback, opt_timeoutSeconds);
	    });
	  } else {
	    // We know the JS API version. Send the actual register request in the supported API version.
	    u2f.sendRegisterRequest(appId, registerRequests, registeredKeys, callback, opt_timeoutSeconds);
	  }
	};
	
	/**
	 * Dispatches register requests to available U2F tokens. An array of sign
	 * requests identifies already registered tokens.
	 * @param {string=} appId
	 * @param {Array<u2f.RegisterRequest>} registerRequests
	 * @param {Array<u2f.RegisteredKey>} registeredKeys
	 * @param {function((u2f.Error|u2f.RegisterResponse))} callback
	 * @param {number=} opt_timeoutSeconds
	 */
	u2f.sendRegisterRequest = function (appId, registerRequests, registeredKeys, callback, opt_timeoutSeconds) {
	  u2f.getPortSingleton_(function (port) {
	    var reqId = ++u2f.reqCounter_;
	    u2f.callbackMap_[reqId] = callback;
	    var timeoutSeconds = typeof opt_timeoutSeconds !== 'undefined' ? opt_timeoutSeconds : u2f.EXTENSION_TIMEOUT_SEC;
	    var req = u2f.formatRegisterRequest_(appId, registeredKeys, registerRequests, timeoutSeconds, reqId);
	    port.postMessage(req);
	  });
	};
	
	/**
	 * Dispatches a message to the extension to find out the supported
	 * JS API version.
	 * If the user is on a mobile phone and is thus using Google Authenticator instead
	 * of the Chrome extension, don't send the request and simply return 0.
	 * @param {function((u2f.Error|u2f.GetJsApiVersionResponse))} callback
	 * @param {number=} opt_timeoutSeconds
	 */
	u2f.getApiVersion = function (callback, opt_timeoutSeconds) {
	  u2f.getPortSingleton_(function (port) {
	    // If we are using Android Google Authenticator or iOS client app,
	    // do not fire an intent to ask which JS API version to use.
	    if (port.getPortType) {
	      var apiVersion;
	      switch (port.getPortType()) {
	        case 'WrappedIosPort_':
	        case 'WrappedAuthenticatorPort_':
	          apiVersion = 1.1;
	          break;
	
	        default:
	          apiVersion = 0;
	          break;
	      }
	      callback({ 'js_api_version': apiVersion });
	      return;
	    }
	    var reqId = ++u2f.reqCounter_;
	    u2f.callbackMap_[reqId] = callback;
	    var req = {
	      type: u2f.MessageTypes.U2F_GET_API_VERSION_REQUEST,
	      timeoutSeconds: typeof opt_timeoutSeconds !== 'undefined' ? opt_timeoutSeconds : u2f.EXTENSION_TIMEOUT_SEC,
	      requestId: reqId
	    };
	    port.postMessage(req);
	  });
	};
	
	module.exports = {
	  sign: u2f.sign
	};

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(82), __esModule: true };

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

	var core = __webpack_require__(12);
	var $JSON = core.JSON || (core.JSON = { stringify: JSON.stringify });
	module.exports = function stringify(it) { // eslint-disable-line no-unused-vars
	  return $JSON.stringify.apply($JSON, arguments);
	};


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Apis = undefined;
	
	var _regenerator = __webpack_require__(72);
	
	var _regenerator2 = _interopRequireDefault(_regenerator);
	
	var _asyncToGenerator2 = __webpack_require__(75);
	
	var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);
	
	var _classCallCheck2 = __webpack_require__(84);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(85);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _cybexjsWs = __webpack_require__(89);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Api = function () {
	  function Api() {
	    (0, _classCallCheck3.default)(this, Api);
	    this.apiInstance = null;
	  }
	
	  (0, _createClass3.default)(Api, [{
	    key: "init",
	    value: function () {
	      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
	        var nodeUrl;
	        return _regenerator2.default.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                nodeUrl = 'wss://hangzhou.51nebula.com';
	
	                this.apiInstance = _cybexjsWs.Apis.instance(nodeUrl, true);
	                _context.next = 4;
	                return this.apiInstance.init_promise;
	
	              case 4:
	                return _context.abrupt("return", _context.sent);
	
	              case 5:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));
	
	      function init() {
	        return _ref.apply(this, arguments);
	      }
	
	      return init;
	    }()
	  }, {
	    key: "instance",
	    value: function instance() {
	      return this.apiInstance;
	    }
	  }]);
	  return Api;
	}();
	
	var Apis = exports.Apis = new Api();

/***/ }),
/* 84 */
/***/ (function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	exports.default = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _defineProperty = __webpack_require__(86);
	
	var _defineProperty2 = _interopRequireDefault(_defineProperty);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
	    }
	  }
	
	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(87), __esModule: true };

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(88);
	var $Object = __webpack_require__(12).Object;
	module.exports = function defineProperty(it, key, desc) {
	  return $Object.defineProperty(it, key, desc);
	};


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(10);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(20), 'Object', { defineProperty: __webpack_require__(16).f });


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, global) {(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory();
		else if(typeof define === 'function' && define.amd)
			define("cybexjs-ws", [], factory);
		else if(typeof exports === 'object')
			exports["cybexjs-ws"] = factory();
		else
			root["cybexjs-ws"] = factory();
	})(typeof self !== 'undefined' ? self : this, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, {
	/******/ 				configurable: false,
	/******/ 				enumerable: true,
	/******/ 				get: getter
	/******/ 			});
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 17);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ (function(module, exports, __webpack_require__) {
	
	/* eslint-disable node/no-deprecated-api */
	var buffer = __webpack_require__(20)
	var Buffer = buffer.Buffer
	
	// alternative to using Object.keys for old browsers
	function copyProps (src, dst) {
	  for (var key in src) {
	    dst[key] = src[key]
	  }
	}
	if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
	  module.exports = buffer
	} else {
	  // Copy properties from require('buffer')
	  copyProps(buffer, exports)
	  exports.Buffer = SafeBuffer
	}
	
	function SafeBuffer (arg, encodingOrOffset, length) {
	  return Buffer(arg, encodingOrOffset, length)
	}
	
	// Copy static methods from Buffer
	copyProps(Buffer, SafeBuffer)
	
	SafeBuffer.from = function (arg, encodingOrOffset, length) {
	  if (typeof arg === 'number') {
	    throw new TypeError('Argument must not be a number')
	  }
	  return Buffer(arg, encodingOrOffset, length)
	}
	
	SafeBuffer.alloc = function (size, fill, encoding) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  var buf = Buffer(size)
	  if (fill !== undefined) {
	    if (typeof encoding === 'string') {
	      buf.fill(fill, encoding)
	    } else {
	      buf.fill(fill)
	    }
	  } else {
	    buf.fill(0)
	  }
	  return buf
	}
	
	SafeBuffer.allocUnsafe = function (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  return Buffer(size)
	}
	
	SafeBuffer.allocUnsafeSlow = function (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  return buffer.SlowBuffer(size)
	}
	
	
	/***/ }),
	/* 1 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	const safeBuffer = __webpack_require__(0);
	const Limiter = __webpack_require__(21);
	const zlib = __webpack_require__(22);
	
	const bufferUtil = __webpack_require__(3);
	
	const Buffer = safeBuffer.Buffer;
	
	const TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);
	const EMPTY_BLOCK = Buffer.from([0x00]);
	
	const kWriteInProgress = Symbol('write-in-progress');
	const kPendingClose = Symbol('pending-close');
	const kTotalLength = Symbol('total-length');
	const kCallback = Symbol('callback');
	const kBuffers = Symbol('buffers');
	const kError = Symbol('error');
	const kOwner = Symbol('owner');
	
	//
	// We limit zlib concurrency, which prevents severe memory fragmentation
	// as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913
	// and https://github.com/websockets/ws/issues/1202
	//
	// Intentionally global; it's the global thread pool that's an issue.
	//
	let zlibLimiter;
	
	/**
	 * permessage-deflate implementation.
	 */
	class PerMessageDeflate {
	  /**
	   * Creates a PerMessageDeflate instance.
	   *
	   * @param {Object} options Configuration options
	   * @param {Boolean} options.serverNoContextTakeover Request/accept disabling
	   *     of server context takeover
	   * @param {Boolean} options.clientNoContextTakeover Advertise/acknowledge
	   *     disabling of client context takeover
	   * @param {(Boolean|Number)} options.serverMaxWindowBits Request/confirm the
	   *     use of a custom server window size
	   * @param {(Boolean|Number)} options.clientMaxWindowBits Advertise support
	   *     for, or request, a custom client window size
	   * @param {Number} options.level The value of zlib's `level` param
	   * @param {Number} options.memLevel The value of zlib's `memLevel` param
	   * @param {Number} options.threshold Size (in bytes) below which messages
	   *     should not be compressed
	   * @param {Number} options.concurrencyLimit The number of concurrent calls to
	   *     zlib
	   * @param {Boolean} isServer Create the instance in either server or client
	   *     mode
	   * @param {Number} maxPayload The maximum allowed message length
	   */
	  constructor (options, isServer, maxPayload) {
	    this._maxPayload = maxPayload | 0;
	    this._options = options || {};
	    this._threshold = this._options.threshold !== undefined
	      ? this._options.threshold
	      : 1024;
	    this._isServer = !!isServer;
	    this._deflate = null;
	    this._inflate = null;
	
	    this.params = null;
	
	    if (!zlibLimiter) {
	      const concurrency = this._options.concurrencyLimit !== undefined
	        ? this._options.concurrencyLimit
	        : 10;
	      zlibLimiter = new Limiter({ concurrency });
	    }
	  }
	
	  /**
	   * @type {String}
	   */
	  static get extensionName () {
	    return 'permessage-deflate';
	  }
	
	  /**
	   * Create extension parameters offer.
	   *
	   * @return {Object} Extension parameters
	   * @public
	   */
	  offer () {
	    const params = {};
	
	    if (this._options.serverNoContextTakeover) {
	      params.server_no_context_takeover = true;
	    }
	    if (this._options.clientNoContextTakeover) {
	      params.client_no_context_takeover = true;
	    }
	    if (this._options.serverMaxWindowBits) {
	      params.server_max_window_bits = this._options.serverMaxWindowBits;
	    }
	    if (this._options.clientMaxWindowBits) {
	      params.client_max_window_bits = this._options.clientMaxWindowBits;
	    } else if (this._options.clientMaxWindowBits == null) {
	      params.client_max_window_bits = true;
	    }
	
	    return params;
	  }
	
	  /**
	   * Accept extension offer.
	   *
	   * @param {Array} paramsList Extension parameters
	   * @return {Object} Accepted configuration
	   * @public
	   */
	  accept (paramsList) {
	    paramsList = this.normalizeParams(paramsList);
	
	    var params;
	    if (this._isServer) {
	      params = this.acceptAsServer(paramsList);
	    } else {
	      params = this.acceptAsClient(paramsList);
	    }
	
	    this.params = params;
	    return params;
	  }
	
	  /**
	   * Releases all resources used by the extension.
	   *
	   * @public
	   */
	  cleanup () {
	    if (this._inflate) {
	      if (this._inflate[kWriteInProgress]) {
	        this._inflate[kPendingClose] = true;
	      } else {
	        this._inflate.close();
	        this._inflate = null;
	      }
	    }
	    if (this._deflate) {
	      if (this._deflate[kWriteInProgress]) {
	        this._deflate[kPendingClose] = true;
	      } else {
	        this._deflate.close();
	        this._deflate = null;
	      }
	    }
	  }
	
	  /**
	   * Accept extension offer from client.
	   *
	   * @param {Array} paramsList Extension parameters
	   * @return {Object} Accepted configuration
	   * @private
	   */
	  acceptAsServer (paramsList) {
	    const accepted = {};
	    const result = paramsList.some((params) => {
	      if (
	        (this._options.serverNoContextTakeover === false &&
	          params.server_no_context_takeover) ||
	        (this._options.serverMaxWindowBits === false &&
	          params.server_max_window_bits) ||
	        (typeof this._options.serverMaxWindowBits === 'number' &&
	          typeof params.server_max_window_bits === 'number' &&
	          this._options.serverMaxWindowBits > params.server_max_window_bits) ||
	        (typeof this._options.clientMaxWindowBits === 'number' &&
	          !params.client_max_window_bits)
	      ) {
	        return;
	      }
	
	      if (
	        this._options.serverNoContextTakeover ||
	        params.server_no_context_takeover
	      ) {
	        accepted.server_no_context_takeover = true;
	      }
	      if (
	        this._options.clientNoContextTakeover ||
	        (this._options.clientNoContextTakeover !== false &&
	          params.client_no_context_takeover)
	      ) {
	        accepted.client_no_context_takeover = true;
	      }
	      if (typeof this._options.serverMaxWindowBits === 'number') {
	        accepted.server_max_window_bits = this._options.serverMaxWindowBits;
	      } else if (typeof params.server_max_window_bits === 'number') {
	        accepted.server_max_window_bits = params.server_max_window_bits;
	      }
	      if (typeof this._options.clientMaxWindowBits === 'number') {
	        accepted.client_max_window_bits = this._options.clientMaxWindowBits;
	      } else if (
	        this._options.clientMaxWindowBits !== false &&
	        typeof params.client_max_window_bits === 'number'
	      ) {
	        accepted.client_max_window_bits = params.client_max_window_bits;
	      }
	      return true;
	    });
	
	    if (!result) throw new Error("Doesn't support the offered configuration");
	
	    return accepted;
	  }
	
	  /**
	   * Accept extension response from server.
	   *
	   * @param {Array} paramsList Extension parameters
	   * @return {Object} Accepted configuration
	   * @private
	   */
	  acceptAsClient (paramsList) {
	    const params = paramsList[0];
	
	    if (
	      this._options.clientNoContextTakeover === false &&
	      params.client_no_context_takeover
	    ) {
	      throw new Error('Invalid value for "client_no_context_takeover"');
	    }
	
	    if (
	      (typeof this._options.clientMaxWindowBits === 'number' &&
	        (!params.client_max_window_bits ||
	          params.client_max_window_bits > this._options.clientMaxWindowBits)) ||
	      (this._options.clientMaxWindowBits === false &&
	        params.client_max_window_bits)
	    ) {
	      throw new Error('Invalid value for "client_max_window_bits"');
	    }
	
	    return params;
	  }
	
	  /**
	   * Normalize extensions parameters.
	   *
	   * @param {Array} paramsList Extension parameters
	   * @return {Array} Normalized extensions parameters
	   * @private
	   */
	  normalizeParams (paramsList) {
	    return paramsList.map((params) => {
	      Object.keys(params).forEach((key) => {
	        var value = params[key];
	        if (value.length > 1) {
	          throw new Error(`Multiple extension parameters for ${key}`);
	        }
	
	        value = value[0];
	
	        switch (key) {
	          case 'server_no_context_takeover':
	          case 'client_no_context_takeover':
	            if (value !== true) {
	              throw new Error(`invalid extension parameter value for ${key} (${value})`);
	            }
	            params[key] = true;
	            break;
	          case 'server_max_window_bits':
	          case 'client_max_window_bits':
	            if (typeof value === 'string') {
	              value = parseInt(value, 10);
	              if (
	                Number.isNaN(value) ||
	                value < zlib.Z_MIN_WINDOWBITS ||
	                value > zlib.Z_MAX_WINDOWBITS
	              ) {
	                throw new Error(`invalid extension parameter value for ${key} (${value})`);
	              }
	            }
	            if (!this._isServer && value === true) {
	              throw new Error(`Missing extension parameter value for ${key}`);
	            }
	            params[key] = value;
	            break;
	          default:
	            throw new Error(`Not defined extension parameter (${key})`);
	        }
	      });
	      return params;
	    });
	  }
	
	  /**
	   * Decompress data. Concurrency limited by async-limiter.
	   *
	   * @param {Buffer} data Compressed data
	   * @param {Boolean} fin Specifies whether or not this is the last fragment
	   * @param {Function} callback Callback
	   * @public
	   */
	  decompress (data, fin, callback) {
	    zlibLimiter.push((done) => {
	      this._decompress(data, fin, (err, result) => {
	        done();
	        callback(err, result);
	      });
	    });
	  }
	
	  /**
	   * Compress data. Concurrency limited by async-limiter.
	   *
	   * @param {Buffer} data Data to compress
	   * @param {Boolean} fin Specifies whether or not this is the last fragment
	   * @param {Function} callback Callback
	   * @public
	   */
	  compress (data, fin, callback) {
	    zlibLimiter.push((done) => {
	      this._compress(data, fin, (err, result) => {
	        done();
	        callback(err, result);
	      });
	    });
	  }
	
	  /**
	   * Decompress data.
	   *
	   * @param {Buffer} data Compressed data
	   * @param {Boolean} fin Specifies whether or not this is the last fragment
	   * @param {Function} callback Callback
	   * @private
	   */
	  _decompress (data, fin, callback) {
	    const endpoint = this._isServer ? 'client' : 'server';
	
	    if (!this._inflate) {
	      const key = `${endpoint}_max_window_bits`;
	      const windowBits = typeof this.params[key] !== 'number'
	        ? zlib.Z_DEFAULT_WINDOWBITS
	        : this.params[key];
	
	      this._inflate = zlib.createInflateRaw({ windowBits });
	      this._inflate[kTotalLength] = 0;
	      this._inflate[kBuffers] = [];
	      this._inflate[kOwner] = this;
	      this._inflate.on('error', inflateOnError);
	      this._inflate.on('data', inflateOnData);
	    }
	
	    this._inflate[kCallback] = callback;
	    this._inflate[kWriteInProgress] = true;
	
	    this._inflate.write(data);
	    if (fin) this._inflate.write(TRAILER);
	
	    this._inflate.flush(() => {
	      const err = this._inflate[kError];
	
	      if (err) {
	        this._inflate.close();
	        this._inflate = null;
	        callback(err);
	        return;
	      }
	
	      const data = bufferUtil.concat(
	        this._inflate[kBuffers],
	        this._inflate[kTotalLength]
	      );
	
	      if (
	        (fin && this.params[`${endpoint}_no_context_takeover`]) ||
	        this._inflate[kPendingClose]
	      ) {
	        this._inflate.close();
	        this._inflate = null;
	      } else {
	        this._inflate[kWriteInProgress] = false;
	        this._inflate[kTotalLength] = 0;
	        this._inflate[kBuffers] = [];
	      }
	
	      callback(null, data);
	    });
	  }
	
	  /**
	   * Compress data.
	   *
	   * @param {Buffer} data Data to compress
	   * @param {Boolean} fin Specifies whether or not this is the last fragment
	   * @param {Function} callback Callback
	   * @private
	   */
	  _compress (data, fin, callback) {
	    if (!data || data.length === 0) {
	      process.nextTick(callback, null, EMPTY_BLOCK);
	      return;
	    }
	
	    const endpoint = this._isServer ? 'server' : 'client';
	
	    if (!this._deflate) {
	      const key = `${endpoint}_max_window_bits`;
	      const windowBits = typeof this.params[key] !== 'number'
	        ? zlib.Z_DEFAULT_WINDOWBITS
	        : this.params[key];
	
	      this._deflate = zlib.createDeflateRaw({
	        memLevel: this._options.memLevel,
	        level: this._options.level,
	        flush: zlib.Z_SYNC_FLUSH,
	        windowBits
	      });
	
	      this._deflate[kTotalLength] = 0;
	      this._deflate[kBuffers] = [];
	
	      //
	      // `zlib.DeflateRaw` emits an `'error'` event only when an attempt to use
	      // it is made after it has already been closed. This cannot happen here,
	      // so we only add a listener for the `'data'` event.
	      //
	      this._deflate.on('data', deflateOnData);
	    }
	
	    this._deflate[kWriteInProgress] = true;
	
	    this._deflate.write(data);
	    this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {
	      var data = bufferUtil.concat(
	        this._deflate[kBuffers],
	        this._deflate[kTotalLength]
	      );
	
	      if (fin) data = data.slice(0, data.length - 4);
	
	      if (
	        (fin && this.params[`${endpoint}_no_context_takeover`]) ||
	        this._deflate[kPendingClose]
	      ) {
	        this._deflate.close();
	        this._deflate = null;
	      } else {
	        this._deflate[kWriteInProgress] = false;
	        this._deflate[kTotalLength] = 0;
	        this._deflate[kBuffers] = [];
	      }
	
	      callback(null, data);
	    });
	  }
	}
	
	module.exports = PerMessageDeflate;
	
	/**
	 * The listener of the `zlib.DeflateRaw` stream `'data'` event.
	 *
	 * @param {Buffer} chunk A chunk of data
	 * @private
	 */
	function deflateOnData (chunk) {
	  this[kBuffers].push(chunk);
	  this[kTotalLength] += chunk.length;
	}
	
	/**
	 * The listener of the `zlib.InflateRaw` stream `'data'` event.
	 *
	 * @param {Buffer} chunk A chunk of data
	 * @private
	 */
	function inflateOnData (chunk) {
	  this[kTotalLength] += chunk.length;
	
	  if (
	    this[kOwner]._maxPayload < 1 ||
	    this[kTotalLength] <= this[kOwner]._maxPayload
	  ) {
	    this[kBuffers].push(chunk);
	    return;
	  }
	
	  this[kError] = new Error('max payload size exceeded');
	  this[kError].closeCode = 1009;
	  this.removeListener('data', inflateOnData);
	  this.reset();
	}
	
	/**
	 * The listener of the `zlib.InflateRaw` stream `'error'` event.
	 *
	 * @param {Error} err The emitted error
	 * @private
	 */
	function inflateOnError (err) {
	  //
	  // There is no need to call `Zlib#close()` as the handle is automatically
	  // closed when an error is emitted.
	  //
	  this[kOwner]._inflate = null;
	  this[kCallback](err);
	}
	
	
	/***/ }),
	/* 2 */
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(91);
	
	/***/ }),
	/* 3 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	/*!
	 * ws: a node.js websocket client
	 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
	 * MIT Licensed
	 */
	
	
	
	const safeBuffer = __webpack_require__(0);
	
	const Buffer = safeBuffer.Buffer;
	
	/**
	 * Merges an array of buffers into a new buffer.
	 *
	 * @param {Buffer[]} list The array of buffers to concat
	 * @param {Number} totalLength The total length of buffers in the list
	 * @return {Buffer} The resulting buffer
	 * @public
	 */
	const concat = (list, totalLength) => {
	  const target = Buffer.allocUnsafe(totalLength);
	  var offset = 0;
	
	  for (var i = 0; i < list.length; i++) {
	    const buf = list[i];
	    buf.copy(target, offset);
	    offset += buf.length;
	  }
	
	  return target;
	};
	
	try {
	  const bufferUtil = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"bufferutil\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	
	  module.exports = Object.assign({ concat }, bufferUtil.BufferUtil || bufferUtil);
	} catch (e) /* istanbul ignore next */ {
	  /**
	   * Masks a buffer using the given mask.
	   *
	   * @param {Buffer} source The buffer to mask
	   * @param {Buffer} mask The mask to use
	   * @param {Buffer} output The buffer where to store the result
	   * @param {Number} offset The offset at which to start writing
	   * @param {Number} length The number of bytes to mask.
	   * @public
	   */
	  const mask = (source, mask, output, offset, length) => {
	    for (var i = 0; i < length; i++) {
	      output[offset + i] = source[i] ^ mask[i & 3];
	    }
	  };
	
	  /**
	   * Unmasks a buffer using the given mask.
	   *
	   * @param {Buffer} buffer The buffer to unmask
	   * @param {Buffer} mask The mask to use
	   * @public
	   */
	  const unmask = (buffer, mask) => {
	    // Required until https://github.com/nodejs/node/issues/9006 is resolved.
	    const length = buffer.length;
	    for (var i = 0; i < length; i++) {
	      buffer[i] ^= mask[i & 3];
	    }
	  };
	
	  module.exports = { concat, mask, unmask };
	}
	
	
	/***/ }),
	/* 4 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	const safeBuffer = __webpack_require__(0);
	
	const Buffer = safeBuffer.Buffer;
	
	exports.BINARY_TYPES = ['nodebuffer', 'arraybuffer', 'fragments'];
	exports.GUID = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11';
	exports.EMPTY_BUFFER = Buffer.alloc(0);
	exports.NOOP = () => {};
	
	
	/***/ }),
	/* 5 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ChainWebSocket__ = __webpack_require__(6);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__GrapheneApi__ = __webpack_require__(26);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ChainConfig__ = __webpack_require__(16);
	// var { List } = require("immutable");
	
	
	
	
	let inst;
	let autoReconnect = true;
	/**
	    Configure: configure as follows `Apis.instance("ws://localhost:8090").init_promise`.  This returns a promise, once resolved the connection is ready.
	
	    Import: import { Apis } from "@graphene/chain"
	
	    Short-hand: Apis.db("method", "parm1", 2, 3, ...).  Returns a promise with results.
	
	    Additional usage: Apis.instance().db_api().exec("method", ["method", "parm1", 2, 3, ...]).  Returns a promise with results.
	*/
	
	/* harmony default export */ __webpack_exports__["a"] = ({
	  setRpcConnectionStatusCallback: function(callback) {
	    this.statusCb = callback;
	    if (inst) inst.setRpcConnectionStatusCallback(callback);
	  },
	
	  /**
	        @arg {boolean} auto means automatic reconnect if possible( browser case), default true
	    */
	  setAutoReconnect: function(auto) {
	    autoReconnect = auto;
	  },
	
	  /**
	        @arg {string} cs is only provided in the first call
	        @return {Apis} singleton .. Check Apis.instance().init_promise to know when the connection is established
	    */
	  reset: function(cs = "ws://localhost:8090", connect, connectTimeout = 4000) {
	    return this.close().then(() => {
	      inst = new ApisInstance();
	      inst.setRpcConnectionStatusCallback(this.statusCb);
	
	      if (inst && connect) {
	        inst.connect(
	          cs,
	          connectTimeout
	        );
	      }
	
	      return inst;
	    });
	  },
	  instance: function(
	    cs = "ws://localhost:8090",
	    connect,
	    connectTimeout = 4000,
	    enableCrypto
	  ) {
	    if (!inst) {
	      inst = new ApisInstance();
	      inst.setRpcConnectionStatusCallback(this.statusCb);
	    }
	
	    if (inst && connect) {
	      inst.connect(
	        cs,
	        connectTimeout,
	        enableCrypto
	      );
	    }
	
	    return inst;
	  },
	  chainId: () => Apis.instance().chain_id,
	
	  close: () => {
	    if (inst) {
	      return new Promise(res => {
	        inst.close().then(() => {
	          inst = null;
	          res();
	        });
	      });
	    }
	
	    return Promise.resolve();
	  }
	  // db: (method, ...args) => Apis.instance().db_api().exec(method, toStrings(args)),
	  // network: (method, ...args) => Apis.instance().network_api().exec(method, toStrings(args)),
	  // history: (method, ...args) => Apis.instance().history_api().exec(method, toStrings(args)),
	  // crypto: (method, ...args) => Apis.instance().crypto_api().exec(method, toStrings(args))
	});
	
	class ApisInstance {
	  /** @arg {string} connection .. */
	  connect(cs, connectTimeout, enableCrypto = false) {
	    // console.log("INFO\tApiInstances\tconnect\t", cs);
	    this.url = cs;
	    let rpc_user = "",
	      rpc_password = "";
	    if (
	      typeof window !== "undefined" &&
	      window.location &&
	      window.location.protocol === "https:" &&
	      cs.indexOf("wss://") < 0
	    ) {
	      throw new Error("Secure domains require wss connection");
	    }
	
	    this.ws_rpc = new __WEBPACK_IMPORTED_MODULE_0__ChainWebSocket__["a" /* default */](
	      cs,
	      this.statusCb,
	      connectTimeout,
	      autoReconnect,
	      () => {
	        this._db.exec("get_objects", [["2.1.0"]]).catch(e => {});
	      }
	    );
	
	    this.init_promise = this.ws_rpc.login(rpc_user, rpc_password).then(() => {
	      // console.log("Connected to API node:", cs);
	      this._db = new __WEBPACK_IMPORTED_MODULE_1__GrapheneApi__["a" /* default */](this.ws_rpc, "database");
	      this._net = new __WEBPACK_IMPORTED_MODULE_1__GrapheneApi__["a" /* default */](this.ws_rpc, "network_broadcast");
	      this._hist = new __WEBPACK_IMPORTED_MODULE_1__GrapheneApi__["a" /* default */](this.ws_rpc, "history");
	      this._limit = new __WEBPACK_IMPORTED_MODULE_1__GrapheneApi__["a" /* default */](this.ws_rpc, "limit_order_status");
	      if (enableCrypto) this._crypt = new __WEBPACK_IMPORTED_MODULE_1__GrapheneApi__["a" /* default */](this.ws_rpc, "crypto");
	      var db_promise = this._db.init().then(() => {
	        //https://github.com/cryptonomex/graphene/wiki/chain-locked-tx
	        return this._db.exec("get_chain_id", []).then(_chain_id => {
	          this.chain_id = _chain_id;
	          return __WEBPACK_IMPORTED_MODULE_2__ChainConfig__["a" /* default */].setChainId(_chain_id);
	          //DEBUG console.log("chain_id1",this.chain_id)
	        });
	      });
	      this.ws_rpc.on_reconnect = () => {
	        this.ws_rpc.login("", "").then(() => {
	          this._db.init().then(() => {
	            if (this.statusCb) this.statusCb("reconnect");
	          });
	          this._net.init();
	          this._hist.init();
	          if (enableCrypto) this._crypt.init();
	        });
	      };
	      let initPromises = [
	        db_promise,
	        this._net.init(),
	        this._limit.init().catch(() => null),
	        this._hist.init()
	      ];
	      if (enableCrypto) initPromises.push(this._crypt.init());
	      return Promise.all(initPromises);
	    });
	  }
	
	  close() {
	    if (this.ws_rpc) {
	      return this.ws_rpc.close().then(() => {
	        this.ws_rpc = null;
	      });
	    }
	    this.ws_rpc = null;
	    return Promise.resolve();
	  }
	
	  db_api() {
	    return this._db;
	  }
	
	  network_api() {
	    return this._net;
	  }
	
	  history_api() {
	    return this._hist;
	  }
	
	  crypto_api() {
	    return this._crypt;
	  }
	
	  limit_api() {
	    return this._limit;
	  }
	
	  setRpcConnectionStatusCallback(callback) {
	    this.statusCb = callback;
	  }
	}
	
	
	/***/ }),
	/* 6 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	let WebSocketClient;
	if (typeof WebSocket === "undefined" && !process.env.browser) {
	    WebSocketClient = __webpack_require__(18);
	} else {
	    WebSocketClient = WebSocket;
	}
	
	var SOCKET_DEBUG = false;
	
	function getWebSocketClient(autoReconnect){
	    if( !autoReconnect &&  (typeof(WebSocket) !== "undefined" && typeof document !== "undefined") ) {
	        return WebSocket;
	    }
	    return WebSocketClient;
	}
	
	let keep_alive_interval = 5000;
	let max_send_life = 5;
	let max_recv_life = max_send_life * 2;
	
	class ChainWebSocket {
	
	    constructor(ws_server, statusCb, connectTimeout = 5000, autoReconnect=true, keepAliveCb=null) {
	        this.statusCb = statusCb;
	        this.connectionTimeout = setTimeout(() => {
	            if (this.current_reject) this.current_reject(new Error("Connection attempt timed out: " + ws_server));
	        }, connectTimeout);
	        let WsClient = getWebSocketClient(autoReconnect);
	        try {
	            this.ws = new WsClient(ws_server);
	        } catch (error) {
	            console.error("invalid websocket URL:", error, ws_server);
	            this.ws = new WsClient("wss://127.0.0.1:8090");
	        }
	        this.ws.timeoutInterval = 5000;
	        this.current_reject = null;
	        this.on_reconnect = null;
	        this.send_life = max_send_life;
	        this.recv_life = max_recv_life;
	        this.keepAliveCb = keepAliveCb;
	        this.connect_promise = new Promise((resolve, reject) => {
	            this.current_reject = reject;
	            this.ws.onopen = () => {
	                clearTimeout(this.connectionTimeout);
	                if(this.statusCb) this.statusCb("open");
	                if(this.on_reconnect) this.on_reconnect();
	                this.keepalive_timer = setInterval(()=>{
	                    this.recv_life --;
	                    if( this.recv_life == 0){
	                        console.error('keep alive timeout.');
	                        if( this.ws.terminate ) {
	                            this.ws.terminate();
	                        }
	                        else{
	                            this.ws.close();
	                        }
	                        clearInterval(this.keepalive_timer);
	                        this.keepalive_timer = undefined;
	                        return;
	                    }
	                    this.send_life --;
	                    if( this.send_life == 0) {
	                        // this.ws.ping('', false, true);
	                        if ( this.keepAliveCb ){
	                            this.keepAliveCb();
	                        }
	                        this.send_life = max_send_life;
	                    }
	                }, 5000);
	                resolve();
	            }
	            this.ws.onerror = (error) => {
	                if( this.keepalive_timer ){
	                    clearInterval(this.keepalive_timer);
	                    this.keepalive_timer = undefined;
	                }
	                clearTimeout(this.connectionTimeout);
	                if(this.statusCb) this.statusCb("error");
	
	                if (this.current_reject) {
	                    this.current_reject(error);
	                }
	            };
	            this.ws.onmessage = (message) => {
	                this.recv_life = max_recv_life;
	                this.listener(JSON.parse(message.data));
	            }
	            this.ws.onclose = () => {
	                if( this.keepalive_timer ){
	                    clearInterval(this.keepalive_timer);
	                    this.keepalive_timer = undefined;
	                }
	                var err = new Error('connection closed');
	                for(var cbId = this.responseCbId + 1; cbId <= this.cbId; cbId +=1 ){
	                    this.cbs[cbId].reject(err);
	                }
	                if(this.statusCb) this.statusCb("closed");
	                if (this.closeCb) this.closeCb();
	            };
	        });
	        this.cbId = 0;
	        this.responseCbId = 0;
	        this.cbs = {};
	        this.subs = {};
	        this.unsub = {};
	    }
	
	    call(params) {
	        if( this.ws.readyState !== 1){
	            return Promise.reject(new Error('websocket state error:' + this.ws.readyState));
	        }
	        let method = params[1];
	        if(SOCKET_DEBUG)
	            console.log("[ChainWebSocket] >---- call ----->  \"id\":" + (this.cbId+1), JSON.stringify(params));
	
	        this.cbId += 1;
	
	        if (method === "set_subscribe_callback" || method === "subscribe_to_market" ||
	            method === "broadcast_transaction_with_callback" || method === "set_pending_transaction_callback"
	            )
	        {
	            // Store callback in subs map
	            this.subs[this.cbId] = {
	                callback: params[2][0]
	            };
	
	            // Replace callback with the callback id
	            params[2][0] = this.cbId;
	        }
	
	        if( method === "unsubscribe_from_market" || method === "unsubscribe_from_accounts") {
	            if (typeof params[2][0] !== "function") {
	                throw new Error("First parameter of unsub must be the original callback");
	            }
	
	            let unSubCb = params[2].splice(0, 1)[0];
	
	            // Find the corresponding subscription
	            for (let id in this.subs) {
	                if (this.subs[id].callback === unSubCb) {
	                    this.unsub[this.cbId] = id;
	                    break;
	                }
	            }
	        }
	
	        var request = {
	            method: "call",
	            params: params
	        };
	        request.id = this.cbId;
	        this.send_life = max_send_life;
	
	        return new Promise((resolve, reject) => {
	            this.cbs[this.cbId] = {
	                time: new Date(),
	                resolve: resolve,
	                reject: reject
	            };
	            this.ws.send(JSON.stringify(request));
	        });
	
	    }
	
	    listener(response) {
	        if(SOCKET_DEBUG)
	            console.log("[ChainWebSocket] <---- reply ----<", JSON.stringify(response));
	
	        let sub = false,
	            callback = null;
	
	        if (response.method === "notice") {
	            sub = true;
	            response.id = response.params[0];
	        }
	
	        if (!sub) {
	            callback = this.cbs[response.id];
	            this.responseCbId = response.id;
	        } else {
	            callback = this.subs[response.id].callback;
	        }
	
	        if (callback && !sub) {
	            if (response.error) {
	                callback.reject(response.error);
	            } else {
	                callback.resolve(response.result);
	            }
	            delete this.cbs[response.id];
	
	            if (this.unsub[response.id]) {
	                delete this.subs[this.unsub[response.id]];
	                delete this.unsub[response.id];
	            }
	
	        } else if (callback && sub) {
	            callback(response.params[1]);
	        } else {
	            console.log("Warning: unknown websocket response: ", response);
	        }
	    }
	
	    login(user, password) {
	        return this.connect_promise.then(() => {
	            return this.call([1, "login", [user, password]]);
	        });
	    }
	
	    close() {
	        return new Promise((res) => {
	            this.closeCb = () => {
	                res();
	                this.closeCb = null;
	            };
	            this.ws.close();
	            if (this.ws.readyState !== 1) res();
	        })
	    }
	}
	
	/* harmony default export */ __webpack_exports__["a"] = (ChainWebSocket);
	
	
	/***/ }),
	/* 7 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	/*!
	 * ws: a node.js websocket client
	 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
	 * MIT Licensed
	 */
	
	
	
	const EventEmitter = __webpack_require__(8);
	const crypto = __webpack_require__(2);
	const Ultron = __webpack_require__(9);
	const https = __webpack_require__(19);
	const http = __webpack_require__(10);
	const url = __webpack_require__(11);
	
	const PerMessageDeflate = __webpack_require__(1);
	const EventTarget = __webpack_require__(23);
	const Extensions = __webpack_require__(12);
	const constants = __webpack_require__(4);
	const Receiver = __webpack_require__(13);
	const Sender = __webpack_require__(15);
	
	const protocolVersions = [8, 13];
	const closeTimeout = 30 * 1000; // Allow 30 seconds to terminate the connection cleanly.
	
	/**
	 * Class representing a WebSocket.
	 *
	 * @extends EventEmitter
	 */
	class WebSocket extends EventEmitter {
	  /**
	   * Create a new `WebSocket`.
	   *
	   * @param {String} address The URL to which to connect
	   * @param {(String|String[])} protocols The subprotocols
	   * @param {Object} options Connection options
	   */
	  constructor (address, protocols, options) {
	    super();
	
	    if (!protocols) {
	      protocols = [];
	    } else if (typeof protocols === 'string') {
	      protocols = [protocols];
	    } else if (!Array.isArray(protocols)) {
	      options = protocols;
	      protocols = [];
	    }
	
	    this.readyState = WebSocket.CONNECTING;
	    this.bytesReceived = 0;
	    this.extensions = {};
	    this.protocol = '';
	
	    this._binaryType = constants.BINARY_TYPES[0];
	    this._finalize = this.finalize.bind(this);
	    this._finalizeCalled = false;
	    this._closeMessage = null;
	    this._closeTimer = null;
	    this._closeCode = null;
	    this._receiver = null;
	    this._sender = null;
	    this._socket = null;
	    this._ultron = null;
	
	    if (Array.isArray(address)) {
	      initAsServerClient.call(this, address[0], address[1], options);
	    } else {
	      initAsClient.call(this, address, protocols, options);
	    }
	  }
	
	  get CONNECTING () { return WebSocket.CONNECTING; }
	  get CLOSING () { return WebSocket.CLOSING; }
	  get CLOSED () { return WebSocket.CLOSED; }
	  get OPEN () { return WebSocket.OPEN; }
	
	  /**
	   * @type {Number}
	   */
	  get bufferedAmount () {
	    var amount = 0;
	
	    if (this._socket) {
	      amount = this._socket.bufferSize + this._sender._bufferedBytes;
	    }
	    return amount;
	  }
	
	  /**
	   * This deviates from the WHATWG interface since ws doesn't support the required
	   * default "blob" type (instead we define a custom "nodebuffer" type).
	   *
	   * @type {String}
	   */
	  get binaryType () {
	    return this._binaryType;
	  }
	
	  set binaryType (type) {
	    if (constants.BINARY_TYPES.indexOf(type) < 0) return;
	
	    this._binaryType = type;
	
	    //
	    // Allow to change `binaryType` on the fly.
	    //
	    if (this._receiver) this._receiver._binaryType = type;
	  }
	
	  /**
	   * Set up the socket and the internal resources.
	   *
	   * @param {net.Socket} socket The network socket between the server and client
	   * @param {Buffer} head The first packet of the upgraded stream
	   * @private
	   */
	  setSocket (socket, head) {
	    socket.setTimeout(0);
	    socket.setNoDelay();
	
	    this._receiver = new Receiver(this.extensions, this._maxPayload, this.binaryType);
	    this._sender = new Sender(socket, this.extensions);
	    this._ultron = new Ultron(socket);
	    this._socket = socket;
	
	    // socket cleanup handlers
	    this._ultron.on('close', this._finalize);
	    this._ultron.on('error', this._finalize);
	    this._ultron.on('end', this._finalize);
	
	    // ensure that the head is added to the receiver
	    if (head.length > 0) socket.unshift(head);
	
	    // subsequent packets are pushed to the receiver
	    this._ultron.on('data', (data) => {
	      this.bytesReceived += data.length;
	      this._receiver.add(data);
	    });
	
	    // receiver event handlers
	    this._receiver.onmessage = (data) => this.emit('message', data);
	    this._receiver.onping = (data) => {
	      this.pong(data, !this._isServer, true);
	      this.emit('ping', data);
	    };
	    this._receiver.onpong = (data) => this.emit('pong', data);
	    this._receiver.onclose = (code, reason) => {
	      this._closeMessage = reason;
	      this._closeCode = code;
	      this.close(code, reason);
	    };
	    this._receiver.onerror = (error, code) => {
	      // close the connection when the receiver reports a HyBi error code
	      this.close(code, '');
	      this.emit('error', error);
	    };
	
	    this.readyState = WebSocket.OPEN;
	    this.emit('open');
	  }
	
	  /**
	   * Clean up and release internal resources.
	   *
	   * @param {(Boolean|Error)} Indicates whether or not an error occurred
	   * @private
	   */
	  finalize (error) {
	    if (this._finalizeCalled) return;
	
	    this.readyState = WebSocket.CLOSING;
	    this._finalizeCalled = true;
	
	    clearTimeout(this._closeTimer);
	    this._closeTimer = null;
	
	    //
	    // If the connection was closed abnormally (with an error), or if the close
	    // control frame was malformed or not received then the close code must be
	    // 1006.
	    //
	    if (error) this._closeCode = 1006;
	
	    if (this._socket) {
	      this._ultron.destroy();
	      this._socket.on('error', function onerror () {
	        this.destroy();
	      });
	
	      if (!error) this._socket.end();
	      else this._socket.destroy();
	
	      this._receiver.cleanup(() => this.emitClose());
	
	      this._receiver = null;
	      this._sender = null;
	      this._socket = null;
	      this._ultron = null;
	    } else {
	      this.emitClose();
	    }
	  }
	
	  /**
	   * Emit the `close` event.
	   *
	   * @private
	   */
	  emitClose () {
	    this.readyState = WebSocket.CLOSED;
	    this.emit('close', this._closeCode || 1006, this._closeMessage || '');
	
	    if (this.extensions[PerMessageDeflate.extensionName]) {
	      this.extensions[PerMessageDeflate.extensionName].cleanup();
	    }
	
	    this.extensions = null;
	
	    this.removeAllListeners();
	    this.on('error', constants.NOOP); // Catch all errors after this.
	  }
	
	  /**
	   * Pause the socket stream.
	   *
	   * @public
	   */
	  pause () {
	    if (this.readyState !== WebSocket.OPEN) throw new Error('not opened');
	
	    this._socket.pause();
	  }
	
	  /**
	   * Resume the socket stream
	   *
	   * @public
	   */
	  resume () {
	    if (this.readyState !== WebSocket.OPEN) throw new Error('not opened');
	
	    this._socket.resume();
	  }
	
	  /**
	   * Start a closing handshake.
	   *
	   * @param {Number} code Status code explaining why the connection is closing
	   * @param {String} data A string explaining why the connection is closing
	   * @public
	   */
	  close (code, data) {
	    if (this.readyState === WebSocket.CLOSED) return;
	    if (this.readyState === WebSocket.CONNECTING) {
	      if (this._req && !this._req.aborted) {
	        this._req.abort();
	        this.emit('error', new Error('closed before the connection is established'));
	        this.finalize(true);
	      }
	      return;
	    }
	
	    if (this.readyState === WebSocket.CLOSING) {
	      if (this._closeCode && this._socket) this._socket.end();
	      return;
	    }
	
	    this.readyState = WebSocket.CLOSING;
	    this._sender.close(code, data, !this._isServer, (err) => {
	      if (err) this.emit('error', err);
	
	      if (this._socket) {
	        if (this._closeCode) this._socket.end();
	        //
	        // Ensure that the connection is cleaned up even when the closing
	        // handshake fails.
	        //
	        clearTimeout(this._closeTimer);
	        this._closeTimer = setTimeout(this._finalize, closeTimeout, true);
	      }
	    });
	  }
	
	  /**
	   * Send a ping message.
	   *
	   * @param {*} data The message to send
	   * @param {Boolean} mask Indicates whether or not to mask `data`
	   * @param {Boolean} failSilently Indicates whether or not to throw if `readyState` isn't `OPEN`
	   * @public
	   */
	  ping (data, mask, failSilently) {
	    if (this.readyState !== WebSocket.OPEN) {
	      if (failSilently) return;
	      throw new Error('not opened');
	    }
	
	    if (typeof data === 'number') data = data.toString();
	    if (mask === undefined) mask = !this._isServer;
	    this._sender.ping(data || constants.EMPTY_BUFFER, mask);
	  }
	
	  /**
	   * Send a pong message.
	   *
	   * @param {*} data The message to send
	   * @param {Boolean} mask Indicates whether or not to mask `data`
	   * @param {Boolean} failSilently Indicates whether or not to throw if `readyState` isn't `OPEN`
	   * @public
	   */
	  pong (data, mask, failSilently) {
	    if (this.readyState !== WebSocket.OPEN) {
	      if (failSilently) return;
	      throw new Error('not opened');
	    }
	
	    if (typeof data === 'number') data = data.toString();
	    if (mask === undefined) mask = !this._isServer;
	    this._sender.pong(data || constants.EMPTY_BUFFER, mask);
	  }
	
	  /**
	   * Send a data message.
	   *
	   * @param {*} data The message to send
	   * @param {Object} options Options object
	   * @param {Boolean} options.compress Specifies whether or not to compress `data`
	   * @param {Boolean} options.binary Specifies whether `data` is binary or text
	   * @param {Boolean} options.fin Specifies whether the fragment is the last one
	   * @param {Boolean} options.mask Specifies whether or not to mask `data`
	   * @param {Function} cb Callback which is executed when data is written out
	   * @public
	   */
	  send (data, options, cb) {
	    if (typeof options === 'function') {
	      cb = options;
	      options = {};
	    }
	
	    if (this.readyState !== WebSocket.OPEN) {
	      if (cb) cb(new Error('not opened'));
	      else throw new Error('not opened');
	      return;
	    }
	
	    if (typeof data === 'number') data = data.toString();
	
	    const opts = Object.assign({
	      binary: typeof data !== 'string',
	      mask: !this._isServer,
	      compress: true,
	      fin: true
	    }, options);
	
	    if (!this.extensions[PerMessageDeflate.extensionName]) {
	      opts.compress = false;
	    }
	
	    this._sender.send(data || constants.EMPTY_BUFFER, opts, cb);
	  }
	
	  /**
	   * Forcibly close the connection.
	   *
	   * @public
	   */
	  terminate () {
	    if (this.readyState === WebSocket.CLOSED) return;
	    if (this.readyState === WebSocket.CONNECTING) {
	      if (this._req && !this._req.aborted) {
	        this._req.abort();
	        this.emit('error', new Error('closed before the connection is established'));
	        this.finalize(true);
	      }
	      return;
	    }
	
	    this.finalize(true);
	  }
	}
	
	WebSocket.CONNECTING = 0;
	WebSocket.OPEN = 1;
	WebSocket.CLOSING = 2;
	WebSocket.CLOSED = 3;
	
	//
	// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.
	// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface
	//
	['open', 'error', 'close', 'message'].forEach((method) => {
	  Object.defineProperty(WebSocket.prototype, `on${method}`, {
	    /**
	     * Return the listener of the event.
	     *
	     * @return {(Function|undefined)} The event listener or `undefined`
	     * @public
	     */
	    get () {
	      const listeners = this.listeners(method);
	      for (var i = 0; i < listeners.length; i++) {
	        if (listeners[i]._listener) return listeners[i]._listener;
	      }
	    },
	    /**
	     * Add a listener for the event.
	     *
	     * @param {Function} listener The listener to add
	     * @public
	     */
	    set (listener) {
	      const listeners = this.listeners(method);
	      for (var i = 0; i < listeners.length; i++) {
	        //
	        // Remove only the listeners added via `addEventListener`.
	        //
	        if (listeners[i]._listener) this.removeListener(method, listeners[i]);
	      }
	      this.addEventListener(method, listener);
	    }
	  });
	});
	
	WebSocket.prototype.addEventListener = EventTarget.addEventListener;
	WebSocket.prototype.removeEventListener = EventTarget.removeEventListener;
	
	module.exports = WebSocket;
	
	/**
	 * Initialize a WebSocket server client.
	 *
	 * @param {http.IncomingMessage} req The request object
	 * @param {net.Socket} socket The network socket between the server and client
	 * @param {Buffer} head The first packet of the upgraded stream
	 * @param {Object} options WebSocket attributes
	 * @param {Number} options.protocolVersion The WebSocket protocol version
	 * @param {Object} options.extensions The negotiated extensions
	 * @param {Number} options.maxPayload The maximum allowed message size
	 * @param {String} options.protocol The chosen subprotocol
	 * @private
	 */
	function initAsServerClient (socket, head, options) {
	  this.protocolVersion = options.protocolVersion;
	  this._maxPayload = options.maxPayload;
	  this.extensions = options.extensions;
	  this.protocol = options.protocol;
	
	  this._isServer = true;
	
	  this.setSocket(socket, head);
	}
	
	/**
	 * Initialize a WebSocket client.
	 *
	 * @param {String} address The URL to which to connect
	 * @param {String[]} protocols The list of subprotocols
	 * @param {Object} options Connection options
	 * @param {String} options.protocol Value of the `Sec-WebSocket-Protocol` header
	 * @param {(Boolean|Object)} options.perMessageDeflate Enable/disable permessage-deflate
	 * @param {Number} options.handshakeTimeout Timeout in milliseconds for the handshake request
	 * @param {String} options.localAddress Local interface to bind for network connections
	 * @param {Number} options.protocolVersion Value of the `Sec-WebSocket-Version` header
	 * @param {Object} options.headers An object containing request headers
	 * @param {String} options.origin Value of the `Origin` or `Sec-WebSocket-Origin` header
	 * @param {http.Agent} options.agent Use the specified Agent
	 * @param {String} options.host Value of the `Host` header
	 * @param {Number} options.family IP address family to use during hostname lookup (4 or 6).
	 * @param {Function} options.checkServerIdentity A function to validate the server hostname
	 * @param {Boolean} options.rejectUnauthorized Verify or not the server certificate
	 * @param {String} options.passphrase The passphrase for the private key or pfx
	 * @param {String} options.ciphers The ciphers to use or exclude
	 * @param {String} options.ecdhCurve The curves for ECDH key agreement to use or exclude
	 * @param {(String|String[]|Buffer|Buffer[])} options.cert The certificate key
	 * @param {(String|String[]|Buffer|Buffer[])} options.key The private key
	 * @param {(String|Buffer)} options.pfx The private key, certificate, and CA certs
	 * @param {(String|String[]|Buffer|Buffer[])} options.ca Trusted certificates
	 * @private
	 */
	function initAsClient (address, protocols, options) {
	  options = Object.assign({
	    protocolVersion: protocolVersions[1],
	    protocol: protocols.join(','),
	    perMessageDeflate: true,
	    handshakeTimeout: null,
	    localAddress: null,
	    headers: null,
	    family: null,
	    origin: null,
	    agent: null,
	    host: null,
	
	    //
	    // SSL options.
	    //
	    checkServerIdentity: null,
	    rejectUnauthorized: null,
	    passphrase: null,
	    ciphers: null,
	    ecdhCurve: null,
	    cert: null,
	    key: null,
	    pfx: null,
	    ca: null
	  }, options);
	
	  if (protocolVersions.indexOf(options.protocolVersion) === -1) {
	    throw new Error(
	      `unsupported protocol version: ${options.protocolVersion} ` +
	      `(supported versions: ${protocolVersions.join(', ')})`
	    );
	  }
	
	  this.protocolVersion = options.protocolVersion;
	  this._isServer = false;
	  this.url = address;
	
	  const serverUrl = url.parse(address);
	  const isUnixSocket = serverUrl.protocol === 'ws+unix:';
	
	  if (!serverUrl.host && (!isUnixSocket || !serverUrl.path)) {
	    throw new Error('invalid url');
	  }
	
	  const isSecure = serverUrl.protocol === 'wss:' || serverUrl.protocol === 'https:';
	  const key = crypto.randomBytes(16).toString('base64');
	  const httpObj = isSecure ? https : http;
	  var perMessageDeflate;
	
	  const requestOptions = {
	    port: serverUrl.port || (isSecure ? 443 : 80),
	    host: serverUrl.hostname,
	    path: '/',
	    headers: {
	      'Sec-WebSocket-Version': options.protocolVersion,
	      'Sec-WebSocket-Key': key,
	      'Connection': 'Upgrade',
	      'Upgrade': 'websocket'
	    }
	  };
	
	  if (options.headers) Object.assign(requestOptions.headers, options.headers);
	  if (options.perMessageDeflate) {
	    perMessageDeflate = new PerMessageDeflate(
	      options.perMessageDeflate !== true ? options.perMessageDeflate : {},
	      false
	    );
	    requestOptions.headers['Sec-WebSocket-Extensions'] = Extensions.format({
	      [PerMessageDeflate.extensionName]: perMessageDeflate.offer()
	    });
	  }
	  if (options.protocol) {
	    requestOptions.headers['Sec-WebSocket-Protocol'] = options.protocol;
	  }
	  if (options.origin) {
	    if (options.protocolVersion < 13) {
	      requestOptions.headers['Sec-WebSocket-Origin'] = options.origin;
	    } else {
	      requestOptions.headers.Origin = options.origin;
	    }
	  }
	  if (options.host) requestOptions.headers.Host = options.host;
	  if (serverUrl.auth) requestOptions.auth = serverUrl.auth;
	
	  if (options.localAddress) requestOptions.localAddress = options.localAddress;
	  if (options.family) requestOptions.family = options.family;
	
	  if (isUnixSocket) {
	    const parts = serverUrl.path.split(':');
	
	    requestOptions.socketPath = parts[0];
	    requestOptions.path = parts[1];
	  } else if (serverUrl.path) {
	    //
	    // Make sure that path starts with `/`.
	    //
	    if (serverUrl.path.charAt(0) !== '/') {
	      requestOptions.path = `/${serverUrl.path}`;
	    } else {
	      requestOptions.path = serverUrl.path;
	    }
	  }
	
	  var agent = options.agent;
	
	  //
	  // A custom agent is required for these options.
	  //
	  if (
	    options.rejectUnauthorized != null ||
	    options.checkServerIdentity ||
	    options.passphrase ||
	    options.ciphers ||
	    options.ecdhCurve ||
	    options.cert ||
	    options.key ||
	    options.pfx ||
	    options.ca
	  ) {
	    if (options.passphrase) requestOptions.passphrase = options.passphrase;
	    if (options.ciphers) requestOptions.ciphers = options.ciphers;
	    if (options.ecdhCurve) requestOptions.ecdhCurve = options.ecdhCurve;
	    if (options.cert) requestOptions.cert = options.cert;
	    if (options.key) requestOptions.key = options.key;
	    if (options.pfx) requestOptions.pfx = options.pfx;
	    if (options.ca) requestOptions.ca = options.ca;
	    if (options.checkServerIdentity) {
	      requestOptions.checkServerIdentity = options.checkServerIdentity;
	    }
	    if (options.rejectUnauthorized != null) {
	      requestOptions.rejectUnauthorized = options.rejectUnauthorized;
	    }
	
	    if (!agent) agent = new httpObj.Agent(requestOptions);
	  }
	
	  if (agent) requestOptions.agent = agent;
	
	  this._req = httpObj.get(requestOptions);
	
	  if (options.handshakeTimeout) {
	    this._req.setTimeout(options.handshakeTimeout, () => {
	      this._req.abort();
	      this.emit('error', new Error('opening handshake has timed out'));
	      this.finalize(true);
	    });
	  }
	
	  this._req.on('error', (error) => {
	    if (this._req.aborted) return;
	
	    this._req = null;
	    this.emit('error', error);
	    this.finalize(true);
	  });
	
	  this._req.on('response', (res) => {
	    if (!this.emit('unexpected-response', this._req, res)) {
	      this._req.abort();
	      this.emit('error', new Error(`unexpected server response (${res.statusCode})`));
	      this.finalize(true);
	    }
	  });
	
	  this._req.on('upgrade', (res, socket, head) => {
	    this.emit('headers', res.headers, res);
	
	    //
	    // The user may have closed the connection from a listener of the `headers`
	    // event.
	    //
	    if (this.readyState !== WebSocket.CONNECTING) return;
	
	    this._req = null;
	
	    const digest = crypto.createHash('sha1')
	      .update(key + constants.GUID, 'binary')
	      .digest('base64');
	
	    if (res.headers['sec-websocket-accept'] !== digest) {
	      socket.destroy();
	      this.emit('error', new Error('invalid server key'));
	      return this.finalize(true);
	    }
	
	    const serverProt = res.headers['sec-websocket-protocol'];
	    const protList = (options.protocol || '').split(/, */);
	    var protError;
	
	    if (!options.protocol && serverProt) {
	      protError = 'server sent a subprotocol even though none requested';
	    } else if (options.protocol && !serverProt) {
	      protError = 'server sent no subprotocol even though requested';
	    } else if (serverProt && protList.indexOf(serverProt) === -1) {
	      protError = 'server responded with an invalid protocol';
	    }
	
	    if (protError) {
	      socket.destroy();
	      this.emit('error', new Error(protError));
	      return this.finalize(true);
	    }
	
	    if (serverProt) this.protocol = serverProt;
	
	    if (perMessageDeflate) {
	      try {
	        const serverExtensions = Extensions.parse(
	          res.headers['sec-websocket-extensions']
	        );
	
	        if (serverExtensions[PerMessageDeflate.extensionName]) {
	          perMessageDeflate.accept(
	            serverExtensions[PerMessageDeflate.extensionName]
	          );
	          this.extensions[PerMessageDeflate.extensionName] = perMessageDeflate;
	        }
	      } catch (err) {
	        socket.destroy();
	        this.emit('error', new Error('invalid Sec-WebSocket-Extensions header'));
	        return this.finalize(true);
	      }
	    }
	
	    this.setSocket(socket, head);
	  });
	}
	
	
	/***/ }),
	/* 8 */
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(118);
	
	/***/ }),
	/* 9 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	var has = Object.prototype.hasOwnProperty;
	
	/**
	 * An auto incrementing id which we can use to create "unique" Ultron instances
	 * so we can track the event emitters that are added through the Ultron
	 * interface.
	 *
	 * @type {Number}
	 * @private
	 */
	var id = 0;
	
	/**
	 * Ultron is high-intelligence robot. It gathers intelligence so it can start improving
	 * upon his rudimentary design. It will learn from your EventEmitting patterns
	 * and exterminate them.
	 *
	 * @constructor
	 * @param {EventEmitter} ee EventEmitter instance we need to wrap.
	 * @api public
	 */
	function Ultron(ee) {
	  if (!(this instanceof Ultron)) return new Ultron(ee);
	
	  this.id = id++;
	  this.ee = ee;
	}
	
	/**
	 * Register a new EventListener for the given event.
	 *
	 * @param {String} event Name of the event.
	 * @param {Functon} fn Callback function.
	 * @param {Mixed} context The context of the function.
	 * @returns {Ultron}
	 * @api public
	 */
	Ultron.prototype.on = function on(event, fn, context) {
	  fn.__ultron = this.id;
	  this.ee.on(event, fn, context);
	
	  return this;
	};
	/**
	 * Add an EventListener that's only called once.
	 *
	 * @param {String} event Name of the event.
	 * @param {Function} fn Callback function.
	 * @param {Mixed} context The context of the function.
	 * @returns {Ultron}
	 * @api public
	 */
	Ultron.prototype.once = function once(event, fn, context) {
	  fn.__ultron = this.id;
	  this.ee.once(event, fn, context);
	
	  return this;
	};
	
	/**
	 * Remove the listeners we assigned for the given event.
	 *
	 * @returns {Ultron}
	 * @api public
	 */
	Ultron.prototype.remove = function remove() {
	  var args = arguments
	    , ee = this.ee
	    , event;
	
	  //
	  // When no event names are provided we assume that we need to clear all the
	  // events that were assigned through us.
	  //
	  if (args.length === 1 && 'string' === typeof args[0]) {
	    args = args[0].split(/[, ]+/);
	  } else if (!args.length) {
	    if (ee.eventNames) {
	      args = ee.eventNames();
	    } else if (ee._events) {
	      args = [];
	
	      for (event in ee._events) {
	        if (has.call(ee._events, event)) args.push(event);
	      }
	
	      if (Object.getOwnPropertySymbols) {
	        args = args.concat(Object.getOwnPropertySymbols(ee._events));
	      }
	    }
	  }
	
	  for (var i = 0; i < args.length; i++) {
	    var listeners = ee.listeners(args[i]);
	
	    for (var j = 0; j < listeners.length; j++) {
	      event = listeners[j];
	
	      //
	      // Once listeners have a `listener` property that stores the real listener
	      // in the EventEmitter that ships with Node.js.
	      //
	      if (event.listener) {
	        if (event.listener.__ultron !== this.id) continue;
	      } else if (event.__ultron !== this.id) {
	        continue;
	      }
	
	      ee.removeListener(args[i], event);
	    }
	  }
	
	  return this;
	};
	
	/**
	 * Destroy the Ultron instance, remove all listeners and release all references.
	 *
	 * @returns {Boolean}
	 * @api public
	 */
	Ultron.prototype.destroy = function destroy() {
	  if (!this.ee) return false;
	
	  this.remove();
	  this.ee = null;
	
	  return true;
	};
	
	//
	// Expose the module.
	//
	module.exports = Ultron;
	
	
	/***/ }),
	/* 10 */
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(151);
	
	/***/ }),
	/* 11 */
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(158);
	
	/***/ }),
	/* 12 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	//
	// Allowed token characters:
	//
	// '!', '#', '$', '%', '&', ''', '*', '+', '-',
	// '.', 0-9, A-Z, '^', '_', '`', a-z, '|', '~'
	//
	// tokenChars[32] === 0 // ' '
	// tokenChars[33] === 1 // '!'
	// tokenChars[34] === 0 // '"'
	// ...
	//
	const tokenChars = [
	  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0 - 15
	  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31
	  0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, // 32 - 47
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 48 - 63
	  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64 - 79
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 80 - 95
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 96 - 111
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0 // 112 - 127
	];
	
	/**
	 * Adds an offer to the map of extension offers or a parameter to the map of
	 * parameters.
	 *
	 * @param {Object} dest The map of extension offers or parameters
	 * @param {String} name The extension or parameter name
	 * @param {(Object|Boolean|String)} elem The extension parameters or the
	 *     parameter value
	 * @private
	 */
	function push (dest, name, elem) {
	  if (Object.prototype.hasOwnProperty.call(dest, name)) dest[name].push(elem);
	  else dest[name] = [elem];
	}
	
	/**
	 * Parses the `Sec-WebSocket-Extensions` header into an object.
	 *
	 * @param {String} header The field value of the header
	 * @return {Object} The parsed object
	 * @public
	 */
	function parse (header) {
	  const offers = {};
	
	  if (header === undefined || header === '') return offers;
	
	  var params = {};
	  var mustUnescape = false;
	  var isEscaping = false;
	  var inQuotes = false;
	  var extensionName;
	  var paramName;
	  var start = -1;
	  var end = -1;
	
	  for (var i = 0; i < header.length; i++) {
	    const code = header.charCodeAt(i);
	
	    if (extensionName === undefined) {
	      if (end === -1 && tokenChars[code] === 1) {
	        if (start === -1) start = i;
	      } else if (code === 0x20/* ' ' */|| code === 0x09/* '\t' */) {
	        if (end === -1 && start !== -1) end = i;
	      } else if (code === 0x3b/* ';' */ || code === 0x2c/* ',' */) {
	        if (start === -1) throw new Error(`unexpected character at index ${i}`);
	
	        if (end === -1) end = i;
	        const name = header.slice(start, end);
	        if (code === 0x2c) {
	          push(offers, name, params);
	          params = {};
	        } else {
	          extensionName = name;
	        }
	
	        start = end = -1;
	      } else {
	        throw new Error(`unexpected character at index ${i}`);
	      }
	    } else if (paramName === undefined) {
	      if (end === -1 && tokenChars[code] === 1) {
	        if (start === -1) start = i;
	      } else if (code === 0x20 || code === 0x09) {
	        if (end === -1 && start !== -1) end = i;
	      } else if (code === 0x3b || code === 0x2c) {
	        if (start === -1) throw new Error(`unexpected character at index ${i}`);
	
	        if (end === -1) end = i;
	        push(params, header.slice(start, end), true);
	        if (code === 0x2c) {
	          push(offers, extensionName, params);
	          params = {};
	          extensionName = undefined;
	        }
	
	        start = end = -1;
	      } else if (code === 0x3d/* '=' */&& start !== -1 && end === -1) {
	        paramName = header.slice(start, i);
	        start = end = -1;
	      } else {
	        throw new Error(`unexpected character at index ${i}`);
	      }
	    } else {
	      //
	      // The value of a quoted-string after unescaping must conform to the
	      // token ABNF, so only token characters are valid.
	      // Ref: https://tools.ietf.org/html/rfc6455#section-9.1
	      //
	      if (isEscaping) {
	        if (tokenChars[code] !== 1) {
	          throw new Error(`unexpected character at index ${i}`);
	        }
	        if (start === -1) start = i;
	        else if (!mustUnescape) mustUnescape = true;
	        isEscaping = false;
	      } else if (inQuotes) {
	        if (tokenChars[code] === 1) {
	          if (start === -1) start = i;
	        } else if (code === 0x22/* '"' */ && start !== -1) {
	          inQuotes = false;
	          end = i;
	        } else if (code === 0x5c/* '\' */) {
	          isEscaping = true;
	        } else {
	          throw new Error(`unexpected character at index ${i}`);
	        }
	      } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {
	        inQuotes = true;
	      } else if (end === -1 && tokenChars[code] === 1) {
	        if (start === -1) start = i;
	      } else if (start !== -1 && (code === 0x20 || code === 0x09)) {
	        if (end === -1) end = i;
	      } else if (code === 0x3b || code === 0x2c) {
	        if (start === -1) throw new Error(`unexpected character at index ${i}`);
	
	        if (end === -1) end = i;
	        var value = header.slice(start, end);
	        if (mustUnescape) {
	          value = value.replace(/\\/g, '');
	          mustUnescape = false;
	        }
	        push(params, paramName, value);
	        if (code === 0x2c) {
	          push(offers, extensionName, params);
	          params = {};
	          extensionName = undefined;
	        }
	
	        paramName = undefined;
	        start = end = -1;
	      } else {
	        throw new Error(`unexpected character at index ${i}`);
	      }
	    }
	  }
	
	  if (start === -1 || inQuotes) throw new Error('unexpected end of input');
	
	  if (end === -1) end = i;
	  const token = header.slice(start, end);
	  if (extensionName === undefined) {
	    push(offers, token, {});
	  } else {
	    if (paramName === undefined) {
	      push(params, token, true);
	    } else if (mustUnescape) {
	      push(params, paramName, token.replace(/\\/g, ''));
	    } else {
	      push(params, paramName, token);
	    }
	    push(offers, extensionName, params);
	  }
	
	  return offers;
	}
	
	/**
	 * Serializes a parsed `Sec-WebSocket-Extensions` header to a string.
	 *
	 * @param {Object} value The object to format
	 * @return {String} A string representing the given value
	 * @public
	 */
	function format (value) {
	  return Object.keys(value).map((token) => {
	    var paramsList = value[token];
	    if (!Array.isArray(paramsList)) paramsList = [paramsList];
	    return paramsList.map((params) => {
	      return [token].concat(Object.keys(params).map((k) => {
	        var p = params[k];
	        if (!Array.isArray(p)) p = [p];
	        return p.map((v) => v === true ? k : `${k}=${v}`).join('; ');
	      })).join('; ');
	    }).join(', ');
	  }).join(', ');
	}
	
	module.exports = { format, parse };
	
	
	/***/ }),
	/* 13 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	/*!
	 * ws: a node.js websocket client
	 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
	 * MIT Licensed
	 */
	
	
	
	const safeBuffer = __webpack_require__(0);
	
	const PerMessageDeflate = __webpack_require__(1);
	const isValidUTF8 = __webpack_require__(24);
	const bufferUtil = __webpack_require__(3);
	const ErrorCodes = __webpack_require__(14);
	const constants = __webpack_require__(4);
	
	const Buffer = safeBuffer.Buffer;
	
	const GET_INFO = 0;
	const GET_PAYLOAD_LENGTH_16 = 1;
	const GET_PAYLOAD_LENGTH_64 = 2;
	const GET_MASK = 3;
	const GET_DATA = 4;
	const INFLATING = 5;
	
	/**
	 * HyBi Receiver implementation.
	 */
	class Receiver {
	  /**
	   * Creates a Receiver instance.
	   *
	   * @param {Object} extensions An object containing the negotiated extensions
	   * @param {Number} maxPayload The maximum allowed message length
	   * @param {String} binaryType The type for binary data
	   */
	  constructor (extensions, maxPayload, binaryType) {
	    this._binaryType = binaryType || constants.BINARY_TYPES[0];
	    this._extensions = extensions || {};
	    this._maxPayload = maxPayload | 0;
	
	    this._bufferedBytes = 0;
	    this._buffers = [];
	
	    this._compressed = false;
	    this._payloadLength = 0;
	    this._fragmented = 0;
	    this._masked = false;
	    this._fin = false;
	    this._mask = null;
	    this._opcode = 0;
	
	    this._totalPayloadLength = 0;
	    this._messageLength = 0;
	    this._fragments = [];
	
	    this._cleanupCallback = null;
	    this._hadError = false;
	    this._dead = false;
	    this._loop = false;
	
	    this.onmessage = null;
	    this.onclose = null;
	    this.onerror = null;
	    this.onping = null;
	    this.onpong = null;
	
	    this._state = GET_INFO;
	  }
	
	  /**
	   * Consumes bytes from the available buffered data.
	   *
	   * @param {Number} bytes The number of bytes to consume
	   * @return {Buffer} Consumed bytes
	   * @private
	   */
	  readBuffer (bytes) {
	    var offset = 0;
	    var dst;
	    var l;
	
	    this._bufferedBytes -= bytes;
	
	    if (bytes === this._buffers[0].length) return this._buffers.shift();
	
	    if (bytes < this._buffers[0].length) {
	      dst = this._buffers[0].slice(0, bytes);
	      this._buffers[0] = this._buffers[0].slice(bytes);
	      return dst;
	    }
	
	    dst = Buffer.allocUnsafe(bytes);
	
	    while (bytes > 0) {
	      l = this._buffers[0].length;
	
	      if (bytes >= l) {
	        this._buffers[0].copy(dst, offset);
	        offset += l;
	        this._buffers.shift();
	      } else {
	        this._buffers[0].copy(dst, offset, 0, bytes);
	        this._buffers[0] = this._buffers[0].slice(bytes);
	      }
	
	      bytes -= l;
	    }
	
	    return dst;
	  }
	
	  /**
	   * Checks if the number of buffered bytes is bigger or equal than `n` and
	   * calls `cleanup` if necessary.
	   *
	   * @param {Number} n The number of bytes to check against
	   * @return {Boolean} `true` if `bufferedBytes >= n`, else `false`
	   * @private
	   */
	  hasBufferedBytes (n) {
	    if (this._bufferedBytes >= n) return true;
	
	    this._loop = false;
	    if (this._dead) this.cleanup(this._cleanupCallback);
	    return false;
	  }
	
	  /**
	   * Adds new data to the parser.
	   *
	   * @public
	   */
	  add (data) {
	    if (this._dead) return;
	
	    this._bufferedBytes += data.length;
	    this._buffers.push(data);
	    this.startLoop();
	  }
	
	  /**
	   * Starts the parsing loop.
	   *
	   * @private
	   */
	  startLoop () {
	    this._loop = true;
	
	    while (this._loop) {
	      switch (this._state) {
	        case GET_INFO:
	          this.getInfo();
	          break;
	        case GET_PAYLOAD_LENGTH_16:
	          this.getPayloadLength16();
	          break;
	        case GET_PAYLOAD_LENGTH_64:
	          this.getPayloadLength64();
	          break;
	        case GET_MASK:
	          this.getMask();
	          break;
	        case GET_DATA:
	          this.getData();
	          break;
	        default: // `INFLATING`
	          this._loop = false;
	      }
	    }
	  }
	
	  /**
	   * Reads the first two bytes of a frame.
	   *
	   * @private
	   */
	  getInfo () {
	    if (!this.hasBufferedBytes(2)) return;
	
	    const buf = this.readBuffer(2);
	
	    if ((buf[0] & 0x30) !== 0x00) {
	      this.error(new Error('RSV2 and RSV3 must be clear'), 1002);
	      return;
	    }
	
	    const compressed = (buf[0] & 0x40) === 0x40;
	
	    if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {
	      this.error(new Error('RSV1 must be clear'), 1002);
	      return;
	    }
	
	    this._fin = (buf[0] & 0x80) === 0x80;
	    this._opcode = buf[0] & 0x0f;
	    this._payloadLength = buf[1] & 0x7f;
	
	    if (this._opcode === 0x00) {
	      if (compressed) {
	        this.error(new Error('RSV1 must be clear'), 1002);
	        return;
	      }
	
	      if (!this._fragmented) {
	        this.error(new Error(`invalid opcode: ${this._opcode}`), 1002);
	        return;
	      } else {
	        this._opcode = this._fragmented;
	      }
	    } else if (this._opcode === 0x01 || this._opcode === 0x02) {
	      if (this._fragmented) {
	        this.error(new Error(`invalid opcode: ${this._opcode}`), 1002);
	        return;
	      }
	
	      this._compressed = compressed;
	    } else if (this._opcode > 0x07 && this._opcode < 0x0b) {
	      if (!this._fin) {
	        this.error(new Error('FIN must be set'), 1002);
	        return;
	      }
	
	      if (compressed) {
	        this.error(new Error('RSV1 must be clear'), 1002);
	        return;
	      }
	
	      if (this._payloadLength > 0x7d) {
	        this.error(new Error('invalid payload length'), 1002);
	        return;
	      }
	    } else {
	      this.error(new Error(`invalid opcode: ${this._opcode}`), 1002);
	      return;
	    }
	
	    if (!this._fin && !this._fragmented) this._fragmented = this._opcode;
	
	    this._masked = (buf[1] & 0x80) === 0x80;
	
	    if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;
	    else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;
	    else this.haveLength();
	  }
	
	  /**
	   * Gets extended payload length (7+16).
	   *
	   * @private
	   */
	  getPayloadLength16 () {
	    if (!this.hasBufferedBytes(2)) return;
	
	    this._payloadLength = this.readBuffer(2).readUInt16BE(0, true);
	    this.haveLength();
	  }
	
	  /**
	   * Gets extended payload length (7+64).
	   *
	   * @private
	   */
	  getPayloadLength64 () {
	    if (!this.hasBufferedBytes(8)) return;
	
	    const buf = this.readBuffer(8);
	    const num = buf.readUInt32BE(0, true);
	
	    //
	    // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned
	    // if payload length is greater than this number.
	    //
	    if (num > Math.pow(2, 53 - 32) - 1) {
	      this.error(new Error('max payload size exceeded'), 1009);
	      return;
	    }
	
	    this._payloadLength = (num * Math.pow(2, 32)) + buf.readUInt32BE(4, true);
	    this.haveLength();
	  }
	
	  /**
	   * Payload length has been read.
	   *
	   * @private
	   */
	  haveLength () {
	    if (this._opcode < 0x08 && this.maxPayloadExceeded(this._payloadLength)) {
	      return;
	    }
	
	    if (this._masked) this._state = GET_MASK;
	    else this._state = GET_DATA;
	  }
	
	  /**
	   * Reads mask bytes.
	   *
	   * @private
	   */
	  getMask () {
	    if (!this.hasBufferedBytes(4)) return;
	
	    this._mask = this.readBuffer(4);
	    this._state = GET_DATA;
	  }
	
	  /**
	   * Reads data bytes.
	   *
	   * @private
	   */
	  getData () {
	    var data = constants.EMPTY_BUFFER;
	
	    if (this._payloadLength) {
	      if (!this.hasBufferedBytes(this._payloadLength)) return;
	
	      data = this.readBuffer(this._payloadLength);
	      if (this._masked) bufferUtil.unmask(data, this._mask);
	    }
	
	    if (this._opcode > 0x07) {
	      this.controlMessage(data);
	    } else if (this._compressed) {
	      this._state = INFLATING;
	      this.decompress(data);
	    } else if (this.pushFragment(data)) {
	      this.dataMessage();
	    }
	  }
	
	  /**
	   * Decompresses data.
	   *
	   * @param {Buffer} data Compressed data
	   * @private
	   */
	  decompress (data) {
	    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];
	
	    perMessageDeflate.decompress(data, this._fin, (err, buf) => {
	      if (err) {
	        this.error(err, err.closeCode === 1009 ? 1009 : 1007);
	        return;
	      }
	
	      if (this.pushFragment(buf)) this.dataMessage();
	      this.startLoop();
	    });
	  }
	
	  /**
	   * Handles a data message.
	   *
	   * @private
	   */
	  dataMessage () {
	    if (this._fin) {
	      const messageLength = this._messageLength;
	      const fragments = this._fragments;
	
	      this._totalPayloadLength = 0;
	      this._messageLength = 0;
	      this._fragmented = 0;
	      this._fragments = [];
	
	      if (this._opcode === 2) {
	        var data;
	
	        if (this._binaryType === 'nodebuffer') {
	          data = toBuffer(fragments, messageLength);
	        } else if (this._binaryType === 'arraybuffer') {
	          data = toArrayBuffer(toBuffer(fragments, messageLength));
	        } else {
	          data = fragments;
	        }
	
	        this.onmessage(data);
	      } else {
	        const buf = toBuffer(fragments, messageLength);
	
	        if (!isValidUTF8(buf)) {
	          this.error(new Error('invalid utf8 sequence'), 1007);
	          return;
	        }
	
	        this.onmessage(buf.toString());
	      }
	    }
	
	    this._state = GET_INFO;
	  }
	
	  /**
	   * Handles a control message.
	   *
	   * @param {Buffer} data Data to handle
	   * @private
	   */
	  controlMessage (data) {
	    if (this._opcode === 0x08) {
	      if (data.length === 0) {
	        this.onclose(1000, '');
	        this._loop = false;
	        this.cleanup(this._cleanupCallback);
	      } else if (data.length === 1) {
	        this.error(new Error('invalid payload length'), 1002);
	      } else {
	        const code = data.readUInt16BE(0, true);
	
	        if (!ErrorCodes.isValidErrorCode(code)) {
	          this.error(new Error(`invalid status code: ${code}`), 1002);
	          return;
	        }
	
	        const buf = data.slice(2);
	
	        if (!isValidUTF8(buf)) {
	          this.error(new Error('invalid utf8 sequence'), 1007);
	          return;
	        }
	
	        this.onclose(code, buf.toString());
	        this._loop = false;
	        this.cleanup(this._cleanupCallback);
	      }
	
	      return;
	    }
	
	    if (this._opcode === 0x09) this.onping(data);
	    else this.onpong(data);
	
	    this._state = GET_INFO;
	  }
	
	  /**
	   * Handles an error.
	   *
	   * @param {Error} err The error
	   * @param {Number} code Close code
	   * @private
	   */
	  error (err, code) {
	    this.onerror(err, code);
	    this._hadError = true;
	    this._loop = false;
	    this.cleanup(this._cleanupCallback);
	  }
	
	  /**
	   * Checks payload size, disconnects socket when it exceeds `maxPayload`.
	   *
	   * @param {Number} length Payload length
	   * @private
	   */
	  maxPayloadExceeded (length) {
	    if (length === 0 || this._maxPayload < 1) return false;
	
	    const fullLength = this._totalPayloadLength + length;
	
	    if (fullLength <= this._maxPayload) {
	      this._totalPayloadLength = fullLength;
	      return false;
	    }
	
	    this.error(new Error('max payload size exceeded'), 1009);
	    return true;
	  }
	
	  /**
	   * Appends a fragment in the fragments array after checking that the sum of
	   * fragment lengths does not exceed `maxPayload`.
	   *
	   * @param {Buffer} fragment The fragment to add
	   * @return {Boolean} `true` if `maxPayload` is not exceeded, else `false`
	   * @private
	   */
	  pushFragment (fragment) {
	    if (fragment.length === 0) return true;
	
	    const totalLength = this._messageLength + fragment.length;
	
	    if (this._maxPayload < 1 || totalLength <= this._maxPayload) {
	      this._messageLength = totalLength;
	      this._fragments.push(fragment);
	      return true;
	    }
	
	    this.error(new Error('max payload size exceeded'), 1009);
	    return false;
	  }
	
	  /**
	   * Releases resources used by the receiver.
	   *
	   * @param {Function} cb Callback
	   * @public
	   */
	  cleanup (cb) {
	    this._dead = true;
	
	    if (!this._hadError && (this._loop || this._state === INFLATING)) {
	      this._cleanupCallback = cb;
	    } else {
	      this._extensions = null;
	      this._fragments = null;
	      this._buffers = null;
	      this._mask = null;
	
	      this._cleanupCallback = null;
	      this.onmessage = null;
	      this.onclose = null;
	      this.onerror = null;
	      this.onping = null;
	      this.onpong = null;
	
	      if (cb) cb();
	    }
	  }
	}
	
	module.exports = Receiver;
	
	/**
	 * Makes a buffer from a list of fragments.
	 *
	 * @param {Buffer[]} fragments The list of fragments composing the message
	 * @param {Number} messageLength The length of the message
	 * @return {Buffer}
	 * @private
	 */
	function toBuffer (fragments, messageLength) {
	  if (fragments.length === 1) return fragments[0];
	  if (fragments.length > 1) return bufferUtil.concat(fragments, messageLength);
	  return constants.EMPTY_BUFFER;
	}
	
	/**
	 * Converts a buffer to an `ArrayBuffer`.
	 *
	 * @param {Buffer} The buffer to convert
	 * @return {ArrayBuffer} Converted buffer
	 */
	function toArrayBuffer (buf) {
	  if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {
	    return buf.buffer;
	  }
	
	  return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
	}
	
	
	/***/ }),
	/* 14 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	/*!
	 * ws: a node.js websocket client
	 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
	 * MIT Licensed
	 */
	
	
	
	module.exports = {
	  isValidErrorCode: function (code) {
	    return (code >= 1000 && code <= 1013 && code !== 1004 && code !== 1005 && code !== 1006) ||
	      (code >= 3000 && code <= 4999);
	  },
	  1000: 'normal',
	  1001: 'going away',
	  1002: 'protocol error',
	  1003: 'unsupported data',
	  1004: 'reserved',
	  1005: 'reserved for extensions',
	  1006: 'reserved for extensions',
	  1007: 'inconsistent or invalid data',
	  1008: 'policy violation',
	  1009: 'message too big',
	  1010: 'extension handshake missing',
	  1011: 'an unexpected condition prevented the request from being fulfilled',
	  1012: 'service restart',
	  1013: 'try again later'
	};
	
	
	/***/ }),
	/* 15 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	/*!
	 * ws: a node.js websocket client
	 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
	 * MIT Licensed
	 */
	
	
	
	const safeBuffer = __webpack_require__(0);
	const crypto = __webpack_require__(2);
	
	const PerMessageDeflate = __webpack_require__(1);
	const bufferUtil = __webpack_require__(3);
	const ErrorCodes = __webpack_require__(14);
	
	const Buffer = safeBuffer.Buffer;
	
	/**
	 * HyBi Sender implementation.
	 */
	class Sender {
	  /**
	   * Creates a Sender instance.
	   *
	   * @param {net.Socket} socket The connection socket
	   * @param {Object} extensions An object containing the negotiated extensions
	   */
	  constructor (socket, extensions) {
	    this._extensions = extensions || {};
	    this._socket = socket;
	
	    this._firstFragment = true;
	    this._compress = false;
	
	    this._bufferedBytes = 0;
	    this._deflating = false;
	    this._queue = [];
	  }
	
	  /**
	   * Frames a piece of data according to the HyBi WebSocket protocol.
	   *
	   * @param {Buffer} data The data to frame
	   * @param {Object} options Options object
	   * @param {Number} options.opcode The opcode
	   * @param {Boolean} options.readOnly Specifies whether `data` can be modified
	   * @param {Boolean} options.fin Specifies whether or not to set the FIN bit
	   * @param {Boolean} options.mask Specifies whether or not to mask `data`
	   * @param {Boolean} options.rsv1 Specifies whether or not to set the RSV1 bit
	   * @return {Buffer[]} The framed data as a list of `Buffer` instances
	   * @public
	   */
	  static frame (data, options) {
	    const merge = data.length < 1024 || (options.mask && options.readOnly);
	    var offset = options.mask ? 6 : 2;
	    var payloadLength = data.length;
	
	    if (data.length >= 65536) {
	      offset += 8;
	      payloadLength = 127;
	    } else if (data.length > 125) {
	      offset += 2;
	      payloadLength = 126;
	    }
	
	    const target = Buffer.allocUnsafe(merge ? data.length + offset : offset);
	
	    target[0] = options.fin ? options.opcode | 0x80 : options.opcode;
	    if (options.rsv1) target[0] |= 0x40;
	
	    if (payloadLength === 126) {
	      target.writeUInt16BE(data.length, 2, true);
	    } else if (payloadLength === 127) {
	      target.writeUInt32BE(0, 2, true);
	      target.writeUInt32BE(data.length, 6, true);
	    }
	
	    if (!options.mask) {
	      target[1] = payloadLength;
	      if (merge) {
	        data.copy(target, offset);
	        return [target];
	      }
	
	      return [target, data];
	    }
	
	    const mask = crypto.randomBytes(4);
	
	    target[1] = payloadLength | 0x80;
	    target[offset - 4] = mask[0];
	    target[offset - 3] = mask[1];
	    target[offset - 2] = mask[2];
	    target[offset - 1] = mask[3];
	
	    if (merge) {
	      bufferUtil.mask(data, mask, target, offset, data.length);
	      return [target];
	    }
	
	    bufferUtil.mask(data, mask, data, 0, data.length);
	    return [target, data];
	  }
	
	  /**
	   * Sends a close message to the other peer.
	   *
	   * @param {(Number|undefined)} code The status code component of the body
	   * @param {String} data The message component of the body
	   * @param {Boolean} mask Specifies whether or not to mask the message
	   * @param {Function} cb Callback
	   * @public
	   */
	  close (code, data, mask, cb) {
	    if (code !== undefined && (typeof code !== 'number' || !ErrorCodes.isValidErrorCode(code))) {
	      throw new Error('first argument must be a valid error code number');
	    }
	
	    const buf = Buffer.allocUnsafe(2 + (data ? Buffer.byteLength(data) : 0));
	
	    buf.writeUInt16BE(code || 1000, 0, true);
	    if (buf.length > 2) buf.write(data, 2);
	
	    if (this._deflating) {
	      this.enqueue([this.doClose, buf, mask, cb]);
	    } else {
	      this.doClose(buf, mask, cb);
	    }
	  }
	
	  /**
	   * Frames and sends a close message.
	   *
	   * @param {Buffer} data The message to send
	   * @param {Boolean} mask Specifies whether or not to mask `data`
	   * @param {Function} cb Callback
	   * @private
	   */
	  doClose (data, mask, cb) {
	    this.sendFrame(Sender.frame(data, {
	      fin: true,
	      rsv1: false,
	      opcode: 0x08,
	      mask,
	      readOnly: false
	    }), cb);
	  }
	
	  /**
	   * Sends a ping message to the other peer.
	   *
	   * @param {*} data The message to send
	   * @param {Boolean} mask Specifies whether or not to mask `data`
	   * @public
	   */
	  ping (data, mask) {
	    var readOnly = true;
	
	    if (!Buffer.isBuffer(data)) {
	      if (data instanceof ArrayBuffer) {
	        data = Buffer.from(data);
	      } else if (ArrayBuffer.isView(data)) {
	        data = viewToBuffer(data);
	      } else {
	        data = Buffer.from(data);
	        readOnly = false;
	      }
	    }
	
	    if (this._deflating) {
	      this.enqueue([this.doPing, data, mask, readOnly]);
	    } else {
	      this.doPing(data, mask, readOnly);
	    }
	  }
	
	  /**
	   * Frames and sends a ping message.
	   *
	   * @param {*} data The message to send
	   * @param {Boolean} mask Specifies whether or not to mask `data`
	   * @param {Boolean} readOnly Specifies whether `data` can be modified
	   * @private
	   */
	  doPing (data, mask, readOnly) {
	    this.sendFrame(Sender.frame(data, {
	      fin: true,
	      rsv1: false,
	      opcode: 0x09,
	      mask,
	      readOnly
	    }));
	  }
	
	  /**
	   * Sends a pong message to the other peer.
	   *
	   * @param {*} data The message to send
	   * @param {Boolean} mask Specifies whether or not to mask `data`
	   * @public
	   */
	  pong (data, mask) {
	    var readOnly = true;
	
	    if (!Buffer.isBuffer(data)) {
	      if (data instanceof ArrayBuffer) {
	        data = Buffer.from(data);
	      } else if (ArrayBuffer.isView(data)) {
	        data = viewToBuffer(data);
	      } else {
	        data = Buffer.from(data);
	        readOnly = false;
	      }
	    }
	
	    if (this._deflating) {
	      this.enqueue([this.doPong, data, mask, readOnly]);
	    } else {
	      this.doPong(data, mask, readOnly);
	    }
	  }
	
	  /**
	   * Frames and sends a pong message.
	   *
	   * @param {*} data The message to send
	   * @param {Boolean} mask Specifies whether or not to mask `data`
	   * @param {Boolean} readOnly Specifies whether `data` can be modified
	   * @private
	   */
	  doPong (data, mask, readOnly) {
	    this.sendFrame(Sender.frame(data, {
	      fin: true,
	      rsv1: false,
	      opcode: 0x0a,
	      mask,
	      readOnly
	    }));
	  }
	
	  /**
	   * Sends a data message to the other peer.
	   *
	   * @param {*} data The message to send
	   * @param {Object} options Options object
	   * @param {Boolean} options.compress Specifies whether or not to compress `data`
	   * @param {Boolean} options.binary Specifies whether `data` is binary or text
	   * @param {Boolean} options.fin Specifies whether the fragment is the last one
	   * @param {Boolean} options.mask Specifies whether or not to mask `data`
	   * @param {Function} cb Callback
	   * @public
	   */
	  send (data, options, cb) {
	    var opcode = options.binary ? 2 : 1;
	    var rsv1 = options.compress;
	    var readOnly = true;
	
	    if (!Buffer.isBuffer(data)) {
	      if (data instanceof ArrayBuffer) {
	        data = Buffer.from(data);
	      } else if (ArrayBuffer.isView(data)) {
	        data = viewToBuffer(data);
	      } else {
	        data = Buffer.from(data);
	        readOnly = false;
	      }
	    }
	
	    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];
	
	    if (this._firstFragment) {
	      this._firstFragment = false;
	      if (rsv1 && perMessageDeflate) {
	        rsv1 = data.length >= perMessageDeflate._threshold;
	      }
	      this._compress = rsv1;
	    } else {
	      rsv1 = false;
	      opcode = 0;
	    }
	
	    if (options.fin) this._firstFragment = true;
	
	    if (perMessageDeflate) {
	      const opts = {
	        fin: options.fin,
	        rsv1,
	        opcode,
	        mask: options.mask,
	        readOnly
	      };
	
	      if (this._deflating) {
	        this.enqueue([this.dispatch, data, this._compress, opts, cb]);
	      } else {
	        this.dispatch(data, this._compress, opts, cb);
	      }
	    } else {
	      this.sendFrame(Sender.frame(data, {
	        fin: options.fin,
	        rsv1: false,
	        opcode,
	        mask: options.mask,
	        readOnly
	      }), cb);
	    }
	  }
	
	  /**
	   * Dispatches a data message.
	   *
	   * @param {Buffer} data The message to send
	   * @param {Boolean} compress Specifies whether or not to compress `data`
	   * @param {Object} options Options object
	   * @param {Number} options.opcode The opcode
	   * @param {Boolean} options.readOnly Specifies whether `data` can be modified
	   * @param {Boolean} options.fin Specifies whether or not to set the FIN bit
	   * @param {Boolean} options.mask Specifies whether or not to mask `data`
	   * @param {Boolean} options.rsv1 Specifies whether or not to set the RSV1 bit
	   * @param {Function} cb Callback
	   * @private
	   */
	  dispatch (data, compress, options, cb) {
	    if (!compress) {
	      this.sendFrame(Sender.frame(data, options), cb);
	      return;
	    }
	
	    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];
	
	    this._deflating = true;
	    perMessageDeflate.compress(data, options.fin, (_, buf) => {
	      options.readOnly = false;
	      this.sendFrame(Sender.frame(buf, options), cb);
	      this._deflating = false;
	      this.dequeue();
	    });
	  }
	
	  /**
	   * Executes queued send operations.
	   *
	   * @private
	   */
	  dequeue () {
	    while (!this._deflating && this._queue.length) {
	      const params = this._queue.shift();
	
	      this._bufferedBytes -= params[1].length;
	      params[0].apply(this, params.slice(1));
	    }
	  }
	
	  /**
	   * Enqueues a send operation.
	   *
	   * @param {Array} params Send operation parameters.
	   * @private
	   */
	  enqueue (params) {
	    this._bufferedBytes += params[1].length;
	    this._queue.push(params);
	  }
	
	  /**
	   * Sends a frame.
	   *
	   * @param {Buffer[]} list The frame to send
	   * @param {Function} cb Callback
	   * @private
	   */
	  sendFrame (list, cb) {
	    if (list.length === 2) {
	      this._socket.write(list[0]);
	      this._socket.write(list[1], cb);
	    } else {
	      this._socket.write(list[0], cb);
	    }
	  }
	}
	
	module.exports = Sender;
	
	/**
	 * Converts an `ArrayBuffer` view into a buffer.
	 *
	 * @param {(DataView|TypedArray)} view The view to convert
	 * @return {Buffer} Converted view
	 * @private
	 */
	function viewToBuffer (view) {
	  const buf = Buffer.from(view.buffer);
	
	  if (view.byteLength !== view.buffer.byteLength) {
	    return buf.slice(view.byteOffset, view.byteOffset + view.byteLength);
	  }
	
	  return buf;
	}
	
	
	/***/ }),
	/* 16 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	let _this;
	
	const ADDRESS_PREFIX = "CYB"; // 修改此处会修改包括各种key生成在内的前缀；
	
	const PREFIX_OF_CHAIN = {
	    "4018d7844c78f6a6c41c6a552b898022310fc5dec06da467ee7905a8dad512c8": "BTS",
	    "d3011619ed40beb302e3ef32b527fa36b89594d93b885fb226230988b47a12c5": "BTS",
	    "a42af4f55e76505b97529e8be59ed549065fb9bf8d2edf2bb3707df231b0e5e0": "CYB",
	    "133572a395d5b12c7db7f2d5f0dadd347b68ccbd996defafcb5768954c6d46c5": "CYB",
	    "45ad2d3f9ef92a49b55c2227eb06123f613bb35dd08bd876f2aea21925a67a67": "MUSE",
	    "39f5e2ede1f8bc1a3a54a7914414e3779e33193f1f5693510e73cb7a87617447": "TEST"
	};
	
	const Network = class {
	    constructor(chain_id, core_asset) {
	        this.chain_id = chain_id;
	        this.core_asset = core_asset;
	    }
	
	    get address_prefix() {
	        let _global = global || window || {};
	        return _global && _global.localStorage &&
	            _global.localStorage.getItem(`PREFIX_${this.chain_id}`) ||
	            PREFIX_OF_CHAIN[this.chain_id] ||
	            this.core_asset;
	    };
	};
	
	let ecc_config = {
	    address_prefix: ADDRESS_PREFIX
	};
	
	_this = {
	    core_asset: "CORE",
	    address_prefix: ADDRESS_PREFIX,
	    expire_in_secs: 45,
	    expire_in_secs_proposal: 24 * 60 * 60,
	    review_in_secs_committee: 24 * 60 * 60,
	    networks: {
	        BitShares: new Network(
	            "4018d7844c78f6a6c41c6a552b898022310fc5dec06da467ee7905a8dad512c8",
	            "BTS"
	        ),
	        CybexOpen: new Network(
	            "d3011619ed40beb302e3ef32b527fa36b89594d93b885fb226230988b47a12c5",
	            "BTS"
	        ),
	        Cybex: new Network(
	            "a42af4f55e76505b97529e8be59ed549065fb9bf8d2edf2bb3707df231b0e5e0",
	            ADDRESS_PREFIX
	        ),
	        CybexTest: new Network(
	            "133572a395d5b12c7db7f2d5f0dadd347b68ccbd996defafcb5768954c6d46c5",
	            ADDRESS_PREFIX
	        ),
	        Muse: new Network(
	            "45ad2d3f9ef92a49b55c2227eb06123f613bb35dd08bd876f2aea21925a67a67",
	            "MUSE"
	        ),
	        Test: new Network(
	            "39f5e2ede1f8bc1a3a54a7914414e3779e33193f1f5693510e73cb7a87617447",
	            "TEST"
	        ),
	        Obelisk: {
	            core_asset: "GOV",
	            address_prefix: "FEW",
	            chain_id: "1cfde7c388b9e8ac06462d68aadbd966b58f88797637d9af805b4560b0e9661e"
	        }
	    },
	
	    /** Set a few properties for known chain IDs. */
	    setChainId: function (chain_id) {
	
	        let i, len, network, network_name, ref;
	        ref = Object.keys(_this.networks);
	
	        for (i = 0, len = ref.length; i < len; i++) {
	
	            network_name = ref[i];
	            network = _this.networks[network_name];
	
	            if (network.chain_id === chain_id) {
	
	                _this.network_name = network_name;
	
	                if (network.address_prefix) {
	                    _this.address_prefix = network.address_prefix;
	                    ecc_config.address_prefix = network.address_prefix;
	                }
	
	                // console.log("INFO    Configured for", network_name, ":", network.address_prefix, "\n");
	
	                return {
	                    network_name: network_name,
	                    network: network
	                };
	            }
	        }
	
	        if (!_this.network_name) {
	            console.log("Unknown chain id (this may be a testnet)", chain_id);
	        }
	
	    },
	
	    reset: function () {
	        _this.core_asset = "CORE";
	        _this.address_prefix = ADDRESS_PREFIX;
	        ecc_config.address_prefix = ADDRESS_PREFIX;
	        _this.expire_in_secs = 15;
	        _this.expire_in_secs_proposal = 24 * 60 * 60;
	
	        console.log("Chain config reset");
	    },
	
	    setPrefix: function (prefix = ADDRESS_PREFIX) {
	        _this.address_prefix = prefix;
	        ecc_config.address_prefix = prefix;
	    }
	};
	
	/* harmony default export */ __webpack_exports__["a"] = (_this);
	
	/***/ }),
	/* 17 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_ApiInstances__ = __webpack_require__(5);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_ConnectionManager__ = __webpack_require__(27);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_ChainConfig__ = __webpack_require__(16);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Apis", function() { return __WEBPACK_IMPORTED_MODULE_0__src_ApiInstances__["a"]; });
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ChainConfig", function() { return __WEBPACK_IMPORTED_MODULE_2__src_ChainConfig__["a"]; });
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Manager", function() { return __WEBPACK_IMPORTED_MODULE_1__src_ConnectionManager__["a"]; });
	
	
	
	
	
	
	
	/***/ }),
	/* 18 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	/*!
	 * ws: a node.js websocket client
	 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
	 * MIT Licensed
	 */
	
	
	
	const WebSocket = __webpack_require__(7);
	
	WebSocket.Server = __webpack_require__(25);
	WebSocket.Receiver = __webpack_require__(13);
	WebSocket.Sender = __webpack_require__(15);
	
	module.exports = WebSocket;
	
	
	/***/ }),
	/* 19 */
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(165);
	
	/***/ }),
	/* 20 */
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(92);
	
	/***/ }),
	/* 21 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	function Queue(options) {
	  if (!(this instanceof Queue)) {
	    return new Queue(options);
	  }
	
	  options = options || {};
	  this.concurrency = options.concurrency || Infinity;
	  this.pending = 0;
	  this.jobs = [];
	  this.cbs = [];
	  this._done = done.bind(this);
	}
	
	var arrayAddMethods = [
	  'push',
	  'unshift',
	  'splice'
	];
	
	arrayAddMethods.forEach(function(method) {
	  Queue.prototype[method] = function() {
	    var methodResult = Array.prototype[method].apply(this.jobs, arguments);
	    this._run();
	    return methodResult;
	  };
	});
	
	Object.defineProperty(Queue.prototype, 'length', {
	  get: function() {
	    return this.pending + this.jobs.length;
	  }
	});
	
	Queue.prototype._run = function() {
	  if (this.pending === this.concurrency) {
	    return;
	  }
	  if (this.jobs.length) {
	    var job = this.jobs.shift();
	    this.pending++;
	    job(this._done);
	    this._run();
	  }
	
	  if (this.pending === 0) {
	    while (this.cbs.length !== 0) {
	      var cb = this.cbs.pop();
	      process.nextTick(cb);
	    }
	  }
	};
	
	Queue.prototype.onDone = function(cb) {
	  if (typeof cb === 'function') {
	    this.cbs.push(cb);
	    this._run();
	  }
	};
	
	function done() {
	  this.pending--;
	  this._run();
	}
	
	module.exports = Queue;
	
	
	/***/ }),
	/* 22 */
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(166);
	
	/***/ }),
	/* 23 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	/**
	 * Class representing an event.
	 *
	 * @private
	 */
	class Event {
	  /**
	   * Create a new `Event`.
	   *
	   * @param {String} type The name of the event
	   * @param {Object} target A reference to the target to which the event was dispatched
	   */
	  constructor (type, target) {
	    this.target = target;
	    this.type = type;
	  }
	}
	
	/**
	 * Class representing a message event.
	 *
	 * @extends Event
	 * @private
	 */
	class MessageEvent extends Event {
	  /**
	   * Create a new `MessageEvent`.
	   *
	   * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The received data
	   * @param {WebSocket} target A reference to the target to which the event was dispatched
	   */
	  constructor (data, target) {
	    super('message', target);
	
	    this.data = data;
	  }
	}
	
	/**
	 * Class representing a close event.
	 *
	 * @extends Event
	 * @private
	 */
	class CloseEvent extends Event {
	  /**
	   * Create a new `CloseEvent`.
	   *
	   * @param {Number} code The status code explaining why the connection is being closed
	   * @param {String} reason A human-readable string explaining why the connection is closing
	   * @param {WebSocket} target A reference to the target to which the event was dispatched
	   */
	  constructor (code, reason, target) {
	    super('close', target);
	
	    this.wasClean = code === undefined || code === 1000 || (code >= 3000 && code <= 4999);
	    this.reason = reason;
	    this.code = code;
	  }
	}
	
	/**
	 * Class representing an open event.
	 *
	 * @extends Event
	 * @private
	 */
	class OpenEvent extends Event {
	  /**
	   * Create a new `OpenEvent`.
	   *
	   * @param {WebSocket} target A reference to the target to which the event was dispatched
	   */
	  constructor (target) {
	    super('open', target);
	  }
	}
	
	/**
	 * This provides methods for emulating the `EventTarget` interface. It's not
	 * meant to be used directly.
	 *
	 * @mixin
	 */
	const EventTarget = {
	  /**
	   * Register an event listener.
	   *
	   * @param {String} method A string representing the event type to listen for
	   * @param {Function} listener The listener to add
	   * @public
	   */
	  addEventListener (method, listener) {
	    if (typeof listener !== 'function') return;
	
	    function onMessage (data) {
	      listener.call(this, new MessageEvent(data, this));
	    }
	
	    function onClose (code, message) {
	      listener.call(this, new CloseEvent(code, message, this));
	    }
	
	    function onError (event) {
	      event.type = 'error';
	      event.target = this;
	      listener.call(this, event);
	    }
	
	    function onOpen () {
	      listener.call(this, new OpenEvent(this));
	    }
	
	    if (method === 'message') {
	      onMessage._listener = listener;
	      this.on(method, onMessage);
	    } else if (method === 'close') {
	      onClose._listener = listener;
	      this.on(method, onClose);
	    } else if (method === 'error') {
	      onError._listener = listener;
	      this.on(method, onError);
	    } else if (method === 'open') {
	      onOpen._listener = listener;
	      this.on(method, onOpen);
	    } else {
	      this.on(method, listener);
	    }
	  },
	
	  /**
	   * Remove an event listener.
	   *
	   * @param {String} method A string representing the event type to remove
	   * @param {Function} listener The listener to remove
	   * @public
	   */
	  removeEventListener (method, listener) {
	    const listeners = this.listeners(method);
	
	    for (var i = 0; i < listeners.length; i++) {
	      if (listeners[i] === listener || listeners[i]._listener === listener) {
	        this.removeListener(method, listeners[i]);
	      }
	    }
	  }
	};
	
	module.exports = EventTarget;
	
	
	/***/ }),
	/* 24 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	/*!
	 * ws: a node.js websocket client
	 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
	 * MIT Licensed
	 */
	
	
	
	try {
	  const isValidUTF8 = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"utf-8-validate\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	
	  module.exports = typeof isValidUTF8 === 'object'
	    ? isValidUTF8.Validation.isValidUTF8 // utf-8-validate@<3.0.0
	    : isValidUTF8;
	} catch (e) /* istanbul ignore next */ {
	  module.exports = () => true;
	}
	
	
	/***/ }),
	/* 25 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	/*!
	 * ws: a node.js websocket client
	 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
	 * MIT Licensed
	 */
	
	
	
	const safeBuffer = __webpack_require__(0);
	const EventEmitter = __webpack_require__(8);
	const crypto = __webpack_require__(2);
	const Ultron = __webpack_require__(9);
	const http = __webpack_require__(10);
	const url = __webpack_require__(11);
	
	const PerMessageDeflate = __webpack_require__(1);
	const Extensions = __webpack_require__(12);
	const constants = __webpack_require__(4);
	const WebSocket = __webpack_require__(7);
	
	const Buffer = safeBuffer.Buffer;
	
	/**
	 * Class representing a WebSocket server.
	 *
	 * @extends EventEmitter
	 */
	class WebSocketServer extends EventEmitter {
	  /**
	   * Create a `WebSocketServer` instance.
	   *
	   * @param {Object} options Configuration options
	   * @param {String} options.host The hostname where to bind the server
	   * @param {Number} options.port The port where to bind the server
	   * @param {http.Server} options.server A pre-created HTTP/S server to use
	   * @param {Function} options.verifyClient An hook to reject connections
	   * @param {Function} options.handleProtocols An hook to handle protocols
	   * @param {String} options.path Accept only connections matching this path
	   * @param {Boolean} options.noServer Enable no server mode
	   * @param {Boolean} options.clientTracking Specifies whether or not to track clients
	   * @param {(Boolean|Object)} options.perMessageDeflate Enable/disable permessage-deflate
	   * @param {Number} options.maxPayload The maximum allowed message size
	   * @param {Function} callback A listener for the `listening` event
	   */
	  constructor (options, callback) {
	    super();
	
	    options = Object.assign({
	      maxPayload: 100 * 1024 * 1024,
	      perMessageDeflate: false,
	      handleProtocols: null,
	      clientTracking: true,
	      verifyClient: null,
	      noServer: false,
	      backlog: null, // use default (511 as implemented in net.js)
	      server: null,
	      host: null,
	      path: null,
	      port: null
	    }, options);
	
	    if (options.port == null && !options.server && !options.noServer) {
	      throw new TypeError('missing or invalid options');
	    }
	
	    if (options.port != null) {
	      this._server = http.createServer((req, res) => {
	        const body = http.STATUS_CODES[426];
	
	        res.writeHead(426, {
	          'Content-Length': body.length,
	          'Content-Type': 'text/plain'
	        });
	        res.end(body);
	      });
	      this._server.allowHalfOpen = false;
	      this._server.listen(options.port, options.host, options.backlog, callback);
	    } else if (options.server) {
	      this._server = options.server;
	    }
	
	    if (this._server) {
	      this._ultron = new Ultron(this._server);
	      this._ultron.on('listening', () => this.emit('listening'));
	      this._ultron.on('error', (err) => this.emit('error', err));
	      this._ultron.on('upgrade', (req, socket, head) => {
	        this.handleUpgrade(req, socket, head, (client) => {
	          this.emit('connection', client, req);
	        });
	      });
	    }
	
	    if (options.perMessageDeflate === true) options.perMessageDeflate = {};
	    if (options.clientTracking) this.clients = new Set();
	    this.options = options;
	  }
	
	  /**
	   * Close the server.
	   *
	   * @param {Function} cb Callback
	   * @public
	   */
	  close (cb) {
	    //
	    // Terminate all associated clients.
	    //
	    if (this.clients) {
	      for (const client of this.clients) client.terminate();
	    }
	
	    const server = this._server;
	
	    if (server) {
	      this._ultron.destroy();
	      this._ultron = this._server = null;
	
	      //
	      // Close the http server if it was internally created.
	      //
	      if (this.options.port != null) return server.close(cb);
	    }
	
	    if (cb) cb();
	  }
	
	  /**
	   * See if a given request should be handled by this server instance.
	   *
	   * @param {http.IncomingMessage} req Request object to inspect
	   * @return {Boolean} `true` if the request is valid, else `false`
	   * @public
	   */
	  shouldHandle (req) {
	    if (this.options.path && url.parse(req.url).pathname !== this.options.path) {
	      return false;
	    }
	
	    return true;
	  }
	
	  /**
	   * Handle a HTTP Upgrade request.
	   *
	   * @param {http.IncomingMessage} req The request object
	   * @param {net.Socket} socket The network socket between the server and client
	   * @param {Buffer} head The first packet of the upgraded stream
	   * @param {Function} cb Callback
	   * @public
	   */
	  handleUpgrade (req, socket, head, cb) {
	    socket.on('error', socketError);
	
	    const version = +req.headers['sec-websocket-version'];
	    const extensions = {};
	
	    if (
	      req.method !== 'GET' || req.headers.upgrade.toLowerCase() !== 'websocket' ||
	      !req.headers['sec-websocket-key'] || (version !== 8 && version !== 13) ||
	      !this.shouldHandle(req)
	    ) {
	      return abortConnection(socket, 400);
	    }
	
	    if (this.options.perMessageDeflate) {
	      const perMessageDeflate = new PerMessageDeflate(
	        this.options.perMessageDeflate,
	        true,
	        this.options.maxPayload
	      );
	
	      try {
	        const offers = Extensions.parse(
	          req.headers['sec-websocket-extensions']
	        );
	
	        if (offers[PerMessageDeflate.extensionName]) {
	          perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);
	          extensions[PerMessageDeflate.extensionName] = perMessageDeflate;
	        }
	      } catch (err) {
	        return abortConnection(socket, 400);
	      }
	    }
	
	    var protocol = (req.headers['sec-websocket-protocol'] || '').split(/, */);
	
	    //
	    // Optionally call external protocol selection handler.
	    //
	    if (this.options.handleProtocols) {
	      protocol = this.options.handleProtocols(protocol, req);
	      if (protocol === false) return abortConnection(socket, 401);
	    } else {
	      protocol = protocol[0];
	    }
	
	    //
	    // Optionally call external client verification handler.
	    //
	    if (this.options.verifyClient) {
	      const info = {
	        origin: req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],
	        secure: !!(req.connection.authorized || req.connection.encrypted),
	        req
	      };
	
	      if (this.options.verifyClient.length === 2) {
	        this.options.verifyClient(info, (verified, code, message) => {
	          if (!verified) return abortConnection(socket, code || 401, message);
	
	          this.completeUpgrade(
	            protocol,
	            extensions,
	            version,
	            req,
	            socket,
	            head,
	            cb
	          );
	        });
	        return;
	      }
	
	      if (!this.options.verifyClient(info)) return abortConnection(socket, 401);
	    }
	
	    this.completeUpgrade(protocol, extensions, version, req, socket, head, cb);
	  }
	
	  /**
	   * Upgrade the connection to WebSocket.
	   *
	   * @param {String} protocol The chosen subprotocol
	   * @param {Object} extensions The accepted extensions
	   * @param {Number} version The WebSocket protocol version
	   * @param {http.IncomingMessage} req The request object
	   * @param {net.Socket} socket The network socket between the server and client
	   * @param {Buffer} head The first packet of the upgraded stream
	   * @param {Function} cb Callback
	   * @private
	   */
	  completeUpgrade (protocol, extensions, version, req, socket, head, cb) {
	    //
	    // Destroy the socket if the client has already sent a FIN packet.
	    //
	    if (!socket.readable || !socket.writable) return socket.destroy();
	
	    const key = crypto.createHash('sha1')
	      .update(req.headers['sec-websocket-key'] + constants.GUID, 'binary')
	      .digest('base64');
	
	    const headers = [
	      'HTTP/1.1 101 Switching Protocols',
	      'Upgrade: websocket',
	      'Connection: Upgrade',
	      `Sec-WebSocket-Accept: ${key}`
	    ];
	
	    if (protocol) headers.push(`Sec-WebSocket-Protocol: ${protocol}`);
	    if (extensions[PerMessageDeflate.extensionName]) {
	      const params = extensions[PerMessageDeflate.extensionName].params;
	      const value = Extensions.format({
	        [PerMessageDeflate.extensionName]: [params]
	      });
	      headers.push(`Sec-WebSocket-Extensions: ${value}`);
	    }
	
	    //
	    // Allow external modification/inspection of handshake headers.
	    //
	    this.emit('headers', headers, req);
	
	    socket.write(headers.concat('\r\n').join('\r\n'));
	
	    const client = new WebSocket([socket, head], null, {
	      maxPayload: this.options.maxPayload,
	      protocolVersion: version,
	      extensions,
	      protocol
	    });
	
	    if (this.clients) {
	      this.clients.add(client);
	      client.on('close', () => this.clients.delete(client));
	    }
	
	    socket.removeListener('error', socketError);
	    cb(client);
	  }
	}
	
	module.exports = WebSocketServer;
	
	/**
	 * Handle premature socket errors.
	 *
	 * @private
	 */
	function socketError () {
	  this.destroy();
	}
	
	/**
	 * Close the connection when preconditions are not fulfilled.
	 *
	 * @param {net.Socket} socket The socket of the upgrade request
	 * @param {Number} code The HTTP response status code
	 * @param {String} [message] The HTTP response body
	 * @private
	 */
	function abortConnection (socket, code, message) {
	  if (socket.writable) {
	    message = message || http.STATUS_CODES[code];
	    socket.write(
	      `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\r\n` +
	      'Connection: close\r\n' +
	      'Content-type: text/html\r\n' +
	      `Content-Length: ${Buffer.byteLength(message)}\r\n` +
	      '\r\n' +
	      message
	    );
	  }
	
	  socket.removeListener('error', socketError);
	  socket.destroy();
	}
	
	
	/***/ }),
	/* 26 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	class GrapheneApi {
	
	    constructor(ws_rpc, api_name) {
	        this.ws_rpc = ws_rpc;
	        this.api_name = api_name;
	    }
	
	    init() {
	        var self = this
	        return this.ws_rpc.call([1, this.api_name, []]).then( response => {
	            //console.log("[GrapheneApi.js:11] ----- GrapheneApi.init ----->", this.api_name, response);
	            self.api_id = response;
	            return self;
	        });
	    }
	
	    exec(method, params) {
	        return this.ws_rpc.call([this.api_id, method, params]).catch(error => {
	            console.log("!!! GrapheneApi error: ", method, params, error, JSON.stringify(error));
	            throw error;
	        });
	    }
	}
	
	/* harmony default export */ __webpack_exports__["a"] = (GrapheneApi);
	
	
	/***/ }),
	/* 27 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ApiInstances__ = __webpack_require__(5);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ChainWebSocket__ = __webpack_require__(6);
	
	
	
	class Manager {
	    constructor({url, urls}) {
	        this.url = url;
	        this.urls = urls.filter(a => a !== url);
	    }
	
	    static close() {
	        return __WEBPACK_IMPORTED_MODULE_0__ApiInstances__["a" /* default */].close();
	    }
	
	    logFailure(url, err) {
	        console.error("Skipping to next full node API server. Error: " + (err ? JSON.stringify(err.message) : ""));
	    }
	
	    connect(connect = true, url = this.url, enableCrypto = false) {
	        return new Promise((resolve, reject) => {
	            __WEBPACK_IMPORTED_MODULE_0__ApiInstances__["a" /* default */].instance(url, connect, undefined, enableCrypto).init_promise
	            .then((res) => {
	                this.url = url;
	                resolve(res);
	            }).catch((err) => {
	                __WEBPACK_IMPORTED_MODULE_0__ApiInstances__["a" /* default */].close().then(() => {
	                    reject(new Error("Unable to connect to node: " + url + ", error:" + JSON.stringify(err && err.message)));
	                });
	            });
	        });
	    }
	
	    connectWithFallback(connect = true, url = this.url, index = 0, resolve = null, reject = null, enableCrypto) {
	        if (reject && (index > this.urls.length)) return reject(new Error("Tried "+ (index) +" connections, none of which worked: " + JSON.stringify(this.urls.concat(this.url))));
	        const fallback = (err, resolve, reject) => {
	            this.logFailure(url, err);
	            return this.connectWithFallback(connect, this.urls[index], index + 1, resolve, reject, enableCrypto);
	        }
	        if (resolve && reject) {
	            return this.connect(connect, url, enableCrypto)
	            .then(resolve)
	            .catch((err) => {
	                fallback(err, resolve, reject);
	            })
	        } else {
	            return new Promise((resolve, reject) => {
	                this.connect(connect, undefined, enableCrypto)
	                .then(resolve)
	                .catch((err) => {
	                    fallback(err, resolve, reject);
	                })
	            })
	        }
	    }
	
	    checkConnections(rpc_user = "", rpc_password = "", resolve, reject) {
	        let connectionStartTimes = {};
	        const checkFunction = (resolve, reject) => {
	            let fullList = this.urls.concat(this.url);
	            let connectionPromises = [];
	
	            fullList.forEach(url => {
	                let conn = new __WEBPACK_IMPORTED_MODULE_1__ChainWebSocket__["a" /* default */](url, () => {});
	                connectionStartTimes[url] = new Date().getTime();
	                connectionPromises.push(() => {
	                    return conn.login(rpc_user, rpc_password).then((data) => {
	                        let result = {[url]: new Date().getTime() - connectionStartTimes[url]};
	                        return conn.close().then(() => result);
	                    }).catch(err => {
	                        if (url === this.url) {
	                            this.url = this.urls[0];
	                        } else {
	                            this.urls = this.urls.filter(a => a !== url);
	                        }
	                        return conn.close().then(() => null);
	                    })
	                });
	            });
	
	            Promise.all(
	                connectionPromises.map(a => a())
	            ).then((res) => {
	                resolve(res.filter(a => !!a).reduce((f, a) => {
	                    let key = Object.keys(a)[0];
	                    f[key] = a[key];
	                    return f;
	                }, {}));
	            }).catch(() => {
	                return this.checkConnections(rpc_user, rpc_password, resolve, reject);
	            });
	        };
	
	        if (resolve && reject) {
	            checkFunction(resolve, reject);
	        } else {
	            return new Promise(checkFunction)
	        }
	
	    }
	}
	
	/* harmony default export */ __webpack_exports__["a"] = (Manager);
	
	
	/***/ })
	/******/ ]);
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90), (function() { return this; }())))

/***/ }),
/* 90 */
/***/ (function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;
	
	process.listeners = function (name) { return [] }
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var rng = __webpack_require__(96)
	
	function error () {
	  var m = [].slice.call(arguments).join(' ')
	  throw new Error([
	    m,
	    'we accept pull requests',
	    'http://github.com/dominictarr/crypto-browserify'
	    ].join('\n'))
	}
	
	exports.createHash = __webpack_require__(98)
	
	exports.createHmac = __webpack_require__(110)
	
	exports.randomBytes = function(size, callback) {
	  if (callback && callback.call) {
	    try {
	      callback.call(this, undefined, new Buffer(rng(size)))
	    } catch (err) { callback(err) }
	  } else {
	    return new Buffer(rng(size))
	  }
	}
	
	function each(a, f) {
	  for(var i in a)
	    f(a[i], i)
	}
	
	exports.getHashes = function () {
	  return ['sha1', 'sha256', 'sha512', 'md5', 'rmd160']
	}
	
	var p = __webpack_require__(111)(exports)
	exports.pbkdf2 = p.pbkdf2
	exports.pbkdf2Sync = p.pbkdf2Sync
	__webpack_require__(113)(exports, module.exports);
	
	// the least I can do is make error messages for the rest of the node.js/crypto api.
	each(['createCredentials'
	, 'createSign'
	, 'createVerify'
	, 'createDiffieHellman'
	], function (name) {
	  exports[name] = function () {
	    error('sorry,', name, 'is not implemented yet')
	  }
	})
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(92).Buffer))

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */
	
	'use strict'
	
	var base64 = __webpack_require__(93)
	var ieee754 = __webpack_require__(94)
	var isArray = __webpack_require__(95)
	
	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50
	
	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.
	
	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()
	
	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	exports.kMaxLength = kMaxLength()
	
	function typedArraySupport () {
	  try {
	    var arr = new Uint8Array(1)
	    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
	    return arr.foo() === 42 && // typed array instances can be augmented
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}
	
	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}
	
	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length)
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer(length)
	    }
	    that.length = length
	  }
	
	  return that
	}
	
	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */
	
	function Buffer (arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length)
	  }
	
	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}
	
	Buffer.poolSize = 8192 // not used by this implementation
	
	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype
	  return arr
	}
	
	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }
	
	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }
	
	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }
	
	  return fromObject(that, value)
	}
	
	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	}
	
	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	  if (typeof Symbol !== 'undefined' && Symbol.species &&
	      Buffer[Symbol.species] === Buffer) {
	    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	    Object.defineProperty(Buffer, Symbol.species, {
	      value: null,
	      configurable: true
	    })
	  }
	}
	
	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}
	
	function alloc (that, size, fill, encoding) {
	  assertSize(size)
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}
	
	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	}
	
	function allocUnsafe (that, size) {
	  assertSize(size)
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0
	    }
	  }
	  return that
	}
	
	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	}
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	}
	
	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8'
	  }
	
	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }
	
	  var length = byteLength(string, encoding) | 0
	  that = createBuffer(that, length)
	
	  var actual = that.write(string, encoding)
	
	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual)
	  }
	
	  return that
	}
	
	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0
	  that = createBuffer(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}
	
	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength // this throws if `array` is not a valid ArrayBuffer
	
	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }
	
	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }
	
	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array)
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset)
	  } else {
	    array = new Uint8Array(array, byteOffset, length)
	  }
	
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array)
	  }
	  return that
	}
	
	function fromObject (that, obj) {
	  if (Buffer.isBuffer(obj)) {
	    var len = checked(obj.length) | 0
	    that = createBuffer(that, len)
	
	    if (that.length === 0) {
	      return that
	    }
	
	    obj.copy(that, 0, 0, len)
	    return that
	  }
	
	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }
	
	    if (obj.type === 'Buffer' && isArray(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }
	
	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}
	
	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}
	
	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0
	  }
	  return Buffer.alloc(+length)
	}
	
	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}
	
	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }
	
	  if (a === b) return 0
	
	  var x = a.length
	  var y = b.length
	
	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i]
	      y = b[i]
	      break
	    }
	  }
	
	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}
	
	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}
	
	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }
	
	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }
	
	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length
	    }
	  }
	
	  var buffer = Buffer.allocUnsafe(length)
	  var pos = 0
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i]
	    if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos)
	    pos += buf.length
	  }
	  return buffer
	}
	
	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string
	  }
	
	  var len = string.length
	  if (len === 0) return 0
	
	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength
	
	function slowToString (encoding, start, end) {
	  var loweredCase = false
	
	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.
	
	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }
	
	  if (end === undefined || end > this.length) {
	    end = this.length
	  }
	
	  if (end <= 0) {
	    return ''
	  }
	
	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0
	  start >>>= 0
	
	  if (end <= start) {
	    return ''
	  }
	
	  if (!encoding) encoding = 'utf8'
	
	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)
	
	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)
	
	      case 'ascii':
	        return asciiSlice(this, start, end)
	
	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)
	
	      case 'base64':
	        return base64Slice(this, start, end)
	
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)
	
	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	
	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer.prototype._isBuffer = true
	
	function swap (b, n, m) {
	  var i = b[n]
	  b[n] = b[m]
	  b[m] = i
	}
	
	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1)
	  }
	  return this
	}
	
	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3)
	    swap(this, i + 1, i + 2)
	  }
	  return this
	}
	
	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7)
	    swap(this, i + 1, i + 6)
	    swap(this, i + 2, i + 5)
	    swap(this, i + 3, i + 4)
	  }
	  return this
	}
	
	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}
	
	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}
	
	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}
	
	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }
	
	  if (start === undefined) {
	    start = 0
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0
	  }
	  if (thisStart === undefined) {
	    thisStart = 0
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length
	  }
	
	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }
	
	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }
	
	  start >>>= 0
	  end >>>= 0
	  thisStart >>>= 0
	  thisEnd >>>= 0
	
	  if (this === target) return 0
	
	  var x = thisEnd - thisStart
	  var y = end - start
	  var len = Math.min(x, y)
	
	  var thisCopy = this.slice(thisStart, thisEnd)
	  var targetCopy = target.slice(start, end)
	
	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i]
	      y = targetCopy[i]
	      break
	    }
	  }
	
	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}
	
	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1
	
	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset
	    byteOffset = 0
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000
	  }
	  byteOffset = +byteOffset  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1)
	  }
	
	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0
	    else return -1
	  }
	
	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding)
	  }
	
	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }
	
	  throw new TypeError('val must be string, number or Buffer')
	}
	
	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1
	  var arrLength = arr.length
	  var valLength = val.length
	
	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase()
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2
	      arrLength /= 2
	      valLength /= 2
	      byteOffset /= 2
	    }
	  }
	
	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }
	
	  var i
	  if (dir) {
	    var foundIndex = -1
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex
	        foundIndex = -1
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false
	          break
	        }
	      }
	      if (found) return i
	    }
	  }
	
	  return -1
	}
	
	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	}
	
	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	}
	
	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	}
	
	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }
	
	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')
	
	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed
	  }
	  return i
	}
	
	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}
	
	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}
	
	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}
	
	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}
	
	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}
	
	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }
	
	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining
	
	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }
	
	  if (!encoding) encoding = 'utf8'
	
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)
	
	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)
	
	      case 'ascii':
	        return asciiWrite(this, string, offset, length)
	
	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)
	
	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)
	
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)
	
	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	
	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}
	
	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}
	
	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []
	
	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1
	
	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint
	
	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }
	
	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }
	
	    res.push(codePoint)
	    i += bytesPerSequence
	  }
	
	  return decodeCodePointsArray(res)
	}
	
	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000
	
	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }
	
	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}
	
	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}
	
	function latin1Slice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}
	
	function hexSlice (buf, start, end) {
	  var len = buf.length
	
	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len
	
	  var out = ''
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i])
	  }
	  return out
	}
	
	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}
	
	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end
	
	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }
	
	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }
	
	  if (end < start) end = start
	
	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end)
	    newBuf.__proto__ = Buffer.prototype
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start]
	    }
	  }
	
	  return newBuf
	}
	
	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}
	
	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	
	  return val
	}
	
	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }
	
	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }
	
	  return val
	}
	
	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}
	
	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}
	
	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}
	
	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}
	
	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}
	
	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80
	
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
	
	  return val
	}
	
	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80
	
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
	
	  return val
	}
	
	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}
	
	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}
	
	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}
	
	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}
	
	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}
	
	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}
	
	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}
	
	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}
	
	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}
	
	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}
	
	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }
	
	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }
	
	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}
	
	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}
	
	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}
	
	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}
	
	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)
	
	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }
	
	  var i = 0
	  var mul = 1
	  var sub = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)
	
	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }
	
	  var i = byteLength - 1
	  var mul = 1
	  var sub = 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}
	
	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}
	
	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}
	
	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}
	
	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}
	
	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}
	
	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}
	
	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start
	
	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0
	
	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')
	
	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }
	
	  var len = end - start
	  var i
	
	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    )
	  }
	
	  return len
	}
	
	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start
	      start = 0
	      end = this.length
	    } else if (typeof end === 'string') {
	      encoding = end
	      end = this.length
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0)
	      if (code < 256) {
	        val = code
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255
	  }
	
	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }
	
	  if (end <= start) {
	    return this
	  }
	
	  start = start >>> 0
	  end = end === undefined ? this.length : end >>> 0
	
	  if (!val) val = 0
	
	  var i
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val
	    }
	  } else {
	    var bytes = Buffer.isBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer(val, encoding).toString())
	    var len = bytes.length
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len]
	    }
	  }
	
	  return this
	}
	
	// HELPER FUNCTIONS
	// ================
	
	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g
	
	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}
	
	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}
	
	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}
	
	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []
	
	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i)
	
	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }
	
	        // valid lead
	        leadSurrogate = codePoint
	
	        continue
	      }
	
	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }
	
	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }
	
	    leadSurrogate = null
	
	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }
	
	  return bytes
	}
	
	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}
	
	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break
	
	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }
	
	  return byteArray
	}
	
	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}
	
	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}
	
	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 93 */
/***/ (function(module, exports) {

	'use strict'
	
	exports.byteLength = byteLength
	exports.toByteArray = toByteArray
	exports.fromByteArray = fromByteArray
	
	var lookup = []
	var revLookup = []
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array
	
	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i]
	  revLookup[code.charCodeAt(i)] = i
	}
	
	// Support decoding URL-safe base64 strings, as Node.js does.
	// See: https://en.wikipedia.org/wiki/Base64#URL_applications
	revLookup['-'.charCodeAt(0)] = 62
	revLookup['_'.charCodeAt(0)] = 63
	
	function getLens (b64) {
	  var len = b64.length
	
	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }
	
	  // Trim off extra bytes after placeholder bytes are found
	  // See: https://github.com/beatgammit/base64-js/issues/42
	  var validLen = b64.indexOf('=')
	  if (validLen === -1) validLen = len
	
	  var placeHoldersLen = validLen === len
	    ? 0
	    : 4 - (validLen % 4)
	
	  return [validLen, placeHoldersLen]
	}
	
	// base64 is 4/3 + up to two characters of the original data
	function byteLength (b64) {
	  var lens = getLens(b64)
	  var validLen = lens[0]
	  var placeHoldersLen = lens[1]
	  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
	}
	
	function _byteLength (b64, validLen, placeHoldersLen) {
	  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
	}
	
	function toByteArray (b64) {
	  var tmp
	  var lens = getLens(b64)
	  var validLen = lens[0]
	  var placeHoldersLen = lens[1]
	
	  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))
	
	  var curByte = 0
	
	  // if there are placeholders, only get up to the last complete 4 chars
	  var len = placeHoldersLen > 0
	    ? validLen - 4
	    : validLen
	
	  for (var i = 0; i < len; i += 4) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 18) |
	      (revLookup[b64.charCodeAt(i + 1)] << 12) |
	      (revLookup[b64.charCodeAt(i + 2)] << 6) |
	      revLookup[b64.charCodeAt(i + 3)]
	    arr[curByte++] = (tmp >> 16) & 0xFF
	    arr[curByte++] = (tmp >> 8) & 0xFF
	    arr[curByte++] = tmp & 0xFF
	  }
	
	  if (placeHoldersLen === 2) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 2) |
	      (revLookup[b64.charCodeAt(i + 1)] >> 4)
	    arr[curByte++] = tmp & 0xFF
	  }
	
	  if (placeHoldersLen === 1) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 10) |
	      (revLookup[b64.charCodeAt(i + 1)] << 4) |
	      (revLookup[b64.charCodeAt(i + 2)] >> 2)
	    arr[curByte++] = (tmp >> 8) & 0xFF
	    arr[curByte++] = tmp & 0xFF
	  }
	
	  return arr
	}
	
	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] +
	    lookup[num >> 12 & 0x3F] +
	    lookup[num >> 6 & 0x3F] +
	    lookup[num & 0x3F]
	}
	
	function encodeChunk (uint8, start, end) {
	  var tmp
	  var output = []
	  for (var i = start; i < end; i += 3) {
	    tmp =
	      ((uint8[i] << 16) & 0xFF0000) +
	      ((uint8[i + 1] << 8) & 0xFF00) +
	      (uint8[i + 2] & 0xFF)
	    output.push(tripletToBase64(tmp))
	  }
	  return output.join('')
	}
	
	function fromByteArray (uint8) {
	  var tmp
	  var len = uint8.length
	  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
	  var parts = []
	  var maxChunkLength = 16383 // must be multiple of 3
	
	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(
	      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
	    ))
	  }
	
	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1]
	    parts.push(
	      lookup[tmp >> 2] +
	      lookup[(tmp << 4) & 0x3F] +
	      '=='
	    )
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
	    parts.push(
	      lookup[tmp >> 10] +
	      lookup[(tmp >> 4) & 0x3F] +
	      lookup[(tmp << 2) & 0x3F] +
	      '='
	    )
	  }
	
	  return parts.join('')
	}


/***/ }),
/* 94 */
/***/ (function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = (nBytes * 8) - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]
	
	  i += d
	
	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}
	
	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}
	
	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}
	
	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = (nBytes * 8) - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0
	
	  value = Math.abs(value)
	
	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }
	
	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = ((value * c) - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }
	
	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
	
	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
	
	  buffer[offset + i - d] |= s * 128
	}


/***/ }),
/* 95 */
/***/ (function(module, exports) {

	var toString = {}.toString;
	
	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, Buffer) {(function() {
	  var g = ('undefined' === typeof window ? global : window) || {}
	  _crypto = (
	    g.crypto || g.msCrypto || __webpack_require__(97)
	  )
	  module.exports = function(size) {
	    // Modern Browsers
	    if(_crypto.getRandomValues) {
	      var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array
	      /* This will not work in older browsers.
	       * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
	       */
	    
	      _crypto.getRandomValues(bytes);
	      return bytes;
	    }
	    else if (_crypto.randomBytes) {
	      return _crypto.randomBytes(size)
	    }
	    else
	      throw new Error(
	        'secure random number generation not supported by this browser\n'+
	        'use chrome, FireFox or Internet Explorer 11'
	      )
	  }
	}())
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(92).Buffer))

/***/ }),
/* 97 */
/***/ (function(module, exports) {

	/* (ignored) */

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(99)
	
	var md5 = toConstructor(__webpack_require__(107))
	var rmd160 = toConstructor(__webpack_require__(109))
	
	function toConstructor (fn) {
	  return function () {
	    var buffers = []
	    var m= {
	      update: function (data, enc) {
	        if(!Buffer.isBuffer(data)) data = new Buffer(data, enc)
	        buffers.push(data)
	        return this
	      },
	      digest: function (enc) {
	        var buf = Buffer.concat(buffers)
	        var r = fn(buf)
	        buffers = null
	        return enc ? r.toString(enc) : r
	      }
	    }
	    return m
	  }
	}
	
	module.exports = function (alg) {
	  if('md5' === alg) return new md5()
	  if('rmd160' === alg) return new rmd160()
	  return createHash(alg)
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(92).Buffer))

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

	var exports = module.exports = function (alg) {
	  var Alg = exports[alg]
	  if(!Alg) throw new Error(alg + ' is not supported (we accept pull requests)')
	  return new Alg()
	}
	
	var Buffer = __webpack_require__(92).Buffer
	var Hash   = __webpack_require__(100)(Buffer)
	
	exports.sha1 = __webpack_require__(101)(Buffer, Hash)
	exports.sha256 = __webpack_require__(105)(Buffer, Hash)
	exports.sha512 = __webpack_require__(106)(Buffer, Hash)


/***/ }),
/* 100 */
/***/ (function(module, exports) {

	module.exports = function (Buffer) {
	
	  //prototype class for hash functions
	  function Hash (blockSize, finalSize) {
	    this._block = new Buffer(blockSize) //new Uint32Array(blockSize/4)
	    this._finalSize = finalSize
	    this._blockSize = blockSize
	    this._len = 0
	    this._s = 0
	  }
	
	  Hash.prototype.init = function () {
	    this._s = 0
	    this._len = 0
	  }
	
	  Hash.prototype.update = function (data, enc) {
	    if ("string" === typeof data) {
	      enc = enc || "utf8"
	      data = new Buffer(data, enc)
	    }
	
	    var l = this._len += data.length
	    var s = this._s = (this._s || 0)
	    var f = 0
	    var buffer = this._block
	
	    while (s < l) {
	      var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
	      var ch = (t - f)
	
	      for (var i = 0; i < ch; i++) {
	        buffer[(s % this._blockSize) + i] = data[i + f]
	      }
	
	      s += ch
	      f += ch
	
	      if ((s % this._blockSize) === 0) {
	        this._update(buffer)
	      }
	    }
	    this._s = s
	
	    return this
	  }
	
	  Hash.prototype.digest = function (enc) {
	    // Suppose the length of the message M, in bits, is l
	    var l = this._len * 8
	
	    // Append the bit 1 to the end of the message
	    this._block[this._len % this._blockSize] = 0x80
	
	    // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
	    this._block.fill(0, this._len % this._blockSize + 1)
	
	    if (l % (this._blockSize * 8) >= this._finalSize * 8) {
	      this._update(this._block)
	      this._block.fill(0)
	    }
	
	    // to this append the block which is equal to the number l written in binary
	    // TODO: handle case where l is > Math.pow(2, 29)
	    this._block.writeInt32BE(l, this._blockSize - 4)
	
	    var hash = this._update(this._block) || this._hash()
	
	    return enc ? hash.toString(enc) : hash
	  }
	
	  Hash.prototype._update = function () {
	    throw new Error('_update must be implemented by subclass')
	  }
	
	  return Hash
	}


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
	 * in FIPS PUB 180-1
	 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for details.
	 */
	
	var inherits = __webpack_require__(102).inherits
	
	module.exports = function (Buffer, Hash) {
	
	  var A = 0|0
	  var B = 4|0
	  var C = 8|0
	  var D = 12|0
	  var E = 16|0
	
	  var W = new (typeof Int32Array === 'undefined' ? Array : Int32Array)(80)
	
	  var POOL = []
	
	  function Sha1 () {
	    if(POOL.length)
	      return POOL.pop().init()
	
	    if(!(this instanceof Sha1)) return new Sha1()
	    this._w = W
	    Hash.call(this, 16*4, 14*4)
	
	    this._h = null
	    this.init()
	  }
	
	  inherits(Sha1, Hash)
	
	  Sha1.prototype.init = function () {
	    this._a = 0x67452301
	    this._b = 0xefcdab89
	    this._c = 0x98badcfe
	    this._d = 0x10325476
	    this._e = 0xc3d2e1f0
	
	    Hash.prototype.init.call(this)
	    return this
	  }
	
	  Sha1.prototype._POOL = POOL
	  Sha1.prototype._update = function (X) {
	
	    var a, b, c, d, e, _a, _b, _c, _d, _e
	
	    a = _a = this._a
	    b = _b = this._b
	    c = _c = this._c
	    d = _d = this._d
	    e = _e = this._e
	
	    var w = this._w
	
	    for(var j = 0; j < 80; j++) {
	      var W = w[j] = j < 16 ? X.readInt32BE(j*4)
	        : rol(w[j - 3] ^ w[j -  8] ^ w[j - 14] ^ w[j - 16], 1)
	
	      var t = add(
	        add(rol(a, 5), sha1_ft(j, b, c, d)),
	        add(add(e, W), sha1_kt(j))
	      )
	
	      e = d
	      d = c
	      c = rol(b, 30)
	      b = a
	      a = t
	    }
	
	    this._a = add(a, _a)
	    this._b = add(b, _b)
	    this._c = add(c, _c)
	    this._d = add(d, _d)
	    this._e = add(e, _e)
	  }
	
	  Sha1.prototype._hash = function () {
	    if(POOL.length < 100) POOL.push(this)
	    var H = new Buffer(20)
	    //console.log(this._a|0, this._b|0, this._c|0, this._d|0, this._e|0)
	    H.writeInt32BE(this._a|0, A)
	    H.writeInt32BE(this._b|0, B)
	    H.writeInt32BE(this._c|0, C)
	    H.writeInt32BE(this._d|0, D)
	    H.writeInt32BE(this._e|0, E)
	    return H
	  }
	
	  /*
	   * Perform the appropriate triplet combination function for the current
	   * iteration
	   */
	  function sha1_ft(t, b, c, d) {
	    if(t < 20) return (b & c) | ((~b) & d);
	    if(t < 40) return b ^ c ^ d;
	    if(t < 60) return (b & c) | (b & d) | (c & d);
	    return b ^ c ^ d;
	  }
	
	  /*
	   * Determine the appropriate additive constant for the current iteration
	   */
	  function sha1_kt(t) {
	    return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :
	           (t < 60) ? -1894007588 : -899497514;
	  }
	
	  /*
	   * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	   * to work around bugs in some JS interpreters.
	   * //dominictarr: this is 10 years old, so maybe this can be dropped?)
	   *
	   */
	  function add(x, y) {
	    return (x + y ) | 0
	  //lets see how this goes on testling.
	  //  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  //  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  //  return (msw << 16) | (lsw & 0xFFFF);
	  }
	
	  /*
	   * Bitwise rotate a 32-bit number to the left.
	   */
	  function rol(num, cnt) {
	    return (num << cnt) | (num >>> (32 - cnt));
	  }
	
	  return Sha1
	}


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }
	
	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};
	
	
	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }
	
	  if (process.noDeprecation === true) {
	    return fn;
	  }
	
	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }
	
	  return deprecated;
	};
	
	
	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};
	
	
	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;
	
	
	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};
	
	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};
	
	
	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];
	
	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}
	
	
	function stylizeNoColor(str, styleType) {
	  return str;
	}
	
	
	function arrayToHash(array) {
	  var hash = {};
	
	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });
	
	  return hash;
	}
	
	
	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }
	
	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }
	
	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);
	
	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }
	
	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }
	
	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }
	
	  var base = '', array = false, braces = ['{', '}'];
	
	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }
	
	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }
	
	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }
	
	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }
	
	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }
	
	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }
	
	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }
	
	  ctx.seen.push(value);
	
	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }
	
	  ctx.seen.pop();
	
	  return reduceToSingleString(output, base, braces);
	}
	
	
	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}
	
	
	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}
	
	
	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}
	
	
	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }
	
	  return name + ': ' + str;
	}
	
	
	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);
	
	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }
	
	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}
	
	
	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;
	
	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;
	
	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;
	
	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;
	
	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;
	
	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;
	
	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;
	
	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;
	
	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;
	
	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;
	
	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;
	
	exports.isBuffer = __webpack_require__(103);
	
	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	
	
	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}
	
	
	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];
	
	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}
	
	
	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};
	
	
	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(104);
	
	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;
	
	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};
	
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(90)))

/***/ }),
/* 103 */
/***/ (function(module, exports) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ }),
/* 104 */
/***/ (function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

	
	/**
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
	 * in FIPS 180-2
	 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 *
	 */
	
	var inherits = __webpack_require__(102).inherits
	
	module.exports = function (Buffer, Hash) {
	
	  var K = [
	      0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
	      0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
	      0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
	      0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
	      0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
	      0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
	      0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
	      0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
	      0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
	      0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
	      0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
	      0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
	      0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
	      0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
	      0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
	      0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
	    ]
	
	  var W = new Array(64)
	
	  function Sha256() {
	    this.init()
	
	    this._w = W //new Array(64)
	
	    Hash.call(this, 16*4, 14*4)
	  }
	
	  inherits(Sha256, Hash)
	
	  Sha256.prototype.init = function () {
	
	    this._a = 0x6a09e667|0
	    this._b = 0xbb67ae85|0
	    this._c = 0x3c6ef372|0
	    this._d = 0xa54ff53a|0
	    this._e = 0x510e527f|0
	    this._f = 0x9b05688c|0
	    this._g = 0x1f83d9ab|0
	    this._h = 0x5be0cd19|0
	
	    this._len = this._s = 0
	
	    return this
	  }
	
	  function S (X, n) {
	    return (X >>> n) | (X << (32 - n));
	  }
	
	  function R (X, n) {
	    return (X >>> n);
	  }
	
	  function Ch (x, y, z) {
	    return ((x & y) ^ ((~x) & z));
	  }
	
	  function Maj (x, y, z) {
	    return ((x & y) ^ (x & z) ^ (y & z));
	  }
	
	  function Sigma0256 (x) {
	    return (S(x, 2) ^ S(x, 13) ^ S(x, 22));
	  }
	
	  function Sigma1256 (x) {
	    return (S(x, 6) ^ S(x, 11) ^ S(x, 25));
	  }
	
	  function Gamma0256 (x) {
	    return (S(x, 7) ^ S(x, 18) ^ R(x, 3));
	  }
	
	  function Gamma1256 (x) {
	    return (S(x, 17) ^ S(x, 19) ^ R(x, 10));
	  }
	
	  Sha256.prototype._update = function(M) {
	
	    var W = this._w
	    var a, b, c, d, e, f, g, h
	    var T1, T2
	
	    a = this._a | 0
	    b = this._b | 0
	    c = this._c | 0
	    d = this._d | 0
	    e = this._e | 0
	    f = this._f | 0
	    g = this._g | 0
	    h = this._h | 0
	
	    for (var j = 0; j < 64; j++) {
	      var w = W[j] = j < 16
	        ? M.readInt32BE(j * 4)
	        : Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16]
	
	      T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w
	
	      T2 = Sigma0256(a) + Maj(a, b, c);
	      h = g; g = f; f = e; e = d + T1; d = c; c = b; b = a; a = T1 + T2;
	    }
	
	    this._a = (a + this._a) | 0
	    this._b = (b + this._b) | 0
	    this._c = (c + this._c) | 0
	    this._d = (d + this._d) | 0
	    this._e = (e + this._e) | 0
	    this._f = (f + this._f) | 0
	    this._g = (g + this._g) | 0
	    this._h = (h + this._h) | 0
	
	  };
	
	  Sha256.prototype._hash = function () {
	    var H = new Buffer(32)
	
	    H.writeInt32BE(this._a,  0)
	    H.writeInt32BE(this._b,  4)
	    H.writeInt32BE(this._c,  8)
	    H.writeInt32BE(this._d, 12)
	    H.writeInt32BE(this._e, 16)
	    H.writeInt32BE(this._f, 20)
	    H.writeInt32BE(this._g, 24)
	    H.writeInt32BE(this._h, 28)
	
	    return H
	  }
	
	  return Sha256
	
	}


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

	var inherits = __webpack_require__(102).inherits
	
	module.exports = function (Buffer, Hash) {
	  var K = [
	    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	  ]
	
	  var W = new Array(160)
	
	  function Sha512() {
	    this.init()
	    this._w = W
	
	    Hash.call(this, 128, 112)
	  }
	
	  inherits(Sha512, Hash)
	
	  Sha512.prototype.init = function () {
	
	    this._a = 0x6a09e667|0
	    this._b = 0xbb67ae85|0
	    this._c = 0x3c6ef372|0
	    this._d = 0xa54ff53a|0
	    this._e = 0x510e527f|0
	    this._f = 0x9b05688c|0
	    this._g = 0x1f83d9ab|0
	    this._h = 0x5be0cd19|0
	
	    this._al = 0xf3bcc908|0
	    this._bl = 0x84caa73b|0
	    this._cl = 0xfe94f82b|0
	    this._dl = 0x5f1d36f1|0
	    this._el = 0xade682d1|0
	    this._fl = 0x2b3e6c1f|0
	    this._gl = 0xfb41bd6b|0
	    this._hl = 0x137e2179|0
	
	    this._len = this._s = 0
	
	    return this
	  }
	
	  function S (X, Xl, n) {
	    return (X >>> n) | (Xl << (32 - n))
	  }
	
	  function Ch (x, y, z) {
	    return ((x & y) ^ ((~x) & z));
	  }
	
	  function Maj (x, y, z) {
	    return ((x & y) ^ (x & z) ^ (y & z));
	  }
	
	  Sha512.prototype._update = function(M) {
	
	    var W = this._w
	    var a, b, c, d, e, f, g, h
	    var al, bl, cl, dl, el, fl, gl, hl
	
	    a = this._a | 0
	    b = this._b | 0
	    c = this._c | 0
	    d = this._d | 0
	    e = this._e | 0
	    f = this._f | 0
	    g = this._g | 0
	    h = this._h | 0
	
	    al = this._al | 0
	    bl = this._bl | 0
	    cl = this._cl | 0
	    dl = this._dl | 0
	    el = this._el | 0
	    fl = this._fl | 0
	    gl = this._gl | 0
	    hl = this._hl | 0
	
	    for (var i = 0; i < 80; i++) {
	      var j = i * 2
	
	      var Wi, Wil
	
	      if (i < 16) {
	        Wi = W[j] = M.readInt32BE(j * 4)
	        Wil = W[j + 1] = M.readInt32BE(j * 4 + 4)
	
	      } else {
	        var x  = W[j - 15*2]
	        var xl = W[j - 15*2 + 1]
	        var gamma0  = S(x, xl, 1) ^ S(x, xl, 8) ^ (x >>> 7)
	        var gamma0l = S(xl, x, 1) ^ S(xl, x, 8) ^ S(xl, x, 7)
	
	        x  = W[j - 2*2]
	        xl = W[j - 2*2 + 1]
	        var gamma1  = S(x, xl, 19) ^ S(xl, x, 29) ^ (x >>> 6)
	        var gamma1l = S(xl, x, 19) ^ S(x, xl, 29) ^ S(xl, x, 6)
	
	        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
	        var Wi7  = W[j - 7*2]
	        var Wi7l = W[j - 7*2 + 1]
	
	        var Wi16  = W[j - 16*2]
	        var Wi16l = W[j - 16*2 + 1]
	
	        Wil = gamma0l + Wi7l
	        Wi  = gamma0  + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0)
	        Wil = Wil + gamma1l
	        Wi  = Wi  + gamma1  + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0)
	        Wil = Wil + Wi16l
	        Wi  = Wi  + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0)
	
	        W[j] = Wi
	        W[j + 1] = Wil
	      }
	
	      var maj = Maj(a, b, c)
	      var majl = Maj(al, bl, cl)
	
	      var sigma0h = S(a, al, 28) ^ S(al, a, 2) ^ S(al, a, 7)
	      var sigma0l = S(al, a, 28) ^ S(a, al, 2) ^ S(a, al, 7)
	      var sigma1h = S(e, el, 14) ^ S(e, el, 18) ^ S(el, e, 9)
	      var sigma1l = S(el, e, 14) ^ S(el, e, 18) ^ S(e, el, 9)
	
	      // t1 = h + sigma1 + ch + K[i] + W[i]
	      var Ki = K[j]
	      var Kil = K[j + 1]
	
	      var ch = Ch(e, f, g)
	      var chl = Ch(el, fl, gl)
	
	      var t1l = hl + sigma1l
	      var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0)
	      t1l = t1l + chl
	      t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0)
	      t1l = t1l + Kil
	      t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0)
	      t1l = t1l + Wil
	      t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0)
	
	      // t2 = sigma0 + maj
	      var t2l = sigma0l + majl
	      var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0)
	
	      h  = g
	      hl = gl
	      g  = f
	      gl = fl
	      f  = e
	      fl = el
	      el = (dl + t1l) | 0
	      e  = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
	      d  = c
	      dl = cl
	      c  = b
	      cl = bl
	      b  = a
	      bl = al
	      al = (t1l + t2l) | 0
	      a  = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0
	    }
	
	    this._al = (this._al + al) | 0
	    this._bl = (this._bl + bl) | 0
	    this._cl = (this._cl + cl) | 0
	    this._dl = (this._dl + dl) | 0
	    this._el = (this._el + el) | 0
	    this._fl = (this._fl + fl) | 0
	    this._gl = (this._gl + gl) | 0
	    this._hl = (this._hl + hl) | 0
	
	    this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0
	    this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0
	    this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0
	    this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
	    this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0
	    this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0
	    this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0
	    this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0
	  }
	
	  Sha512.prototype._hash = function () {
	    var H = new Buffer(64)
	
	    function writeInt64BE(h, l, offset) {
	      H.writeInt32BE(h, offset)
	      H.writeInt32BE(l, offset + 4)
	    }
	
	    writeInt64BE(this._a, this._al, 0)
	    writeInt64BE(this._b, this._bl, 8)
	    writeInt64BE(this._c, this._cl, 16)
	    writeInt64BE(this._d, this._dl, 24)
	    writeInt64BE(this._e, this._el, 32)
	    writeInt64BE(this._f, this._fl, 40)
	    writeInt64BE(this._g, this._gl, 48)
	    writeInt64BE(this._h, this._hl, 56)
	
	    return H
	  }
	
	  return Sha512
	
	}


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
	 * Digest Algorithm, as defined in RFC 1321.
	 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for more info.
	 */
	
	var helpers = __webpack_require__(108);
	
	/*
	 * Calculate the MD5 of an array of little-endian words, and a bit length
	 */
	function core_md5(x, len)
	{
	  /* append padding */
	  x[len >> 5] |= 0x80 << ((len) % 32);
	  x[(((len + 64) >>> 9) << 4) + 14] = len;
	
	  var a =  1732584193;
	  var b = -271733879;
	  var c = -1732584194;
	  var d =  271733878;
	
	  for(var i = 0; i < x.length; i += 16)
	  {
	    var olda = a;
	    var oldb = b;
	    var oldc = c;
	    var oldd = d;
	
	    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
	    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
	    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
	    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
	    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
	    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
	    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
	    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
	    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
	    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
	    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
	    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
	    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
	    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
	    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
	    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);
	
	    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
	    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
	    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
	    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
	    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
	    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
	    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
	    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
	    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
	    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
	    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
	    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
	    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
	    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
	    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
	    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);
	
	    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
	    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
	    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
	    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
	    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
	    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
	    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
	    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
	    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
	    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
	    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
	    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
	    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
	    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
	    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
	    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);
	
	    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
	    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
	    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
	    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
	    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
	    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
	    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
	    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
	    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
	    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
	    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
	    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
	    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
	    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
	    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
	    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);
	
	    a = safe_add(a, olda);
	    b = safe_add(b, oldb);
	    c = safe_add(c, oldc);
	    d = safe_add(d, oldd);
	  }
	  return Array(a, b, c, d);
	
	}
	
	/*
	 * These functions implement the four basic operations the algorithm uses.
	 */
	function md5_cmn(q, a, b, x, s, t)
	{
	  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
	}
	function md5_ff(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
	}
	function md5_gg(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
	}
	function md5_hh(a, b, c, d, x, s, t)
	{
	  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
	}
	function md5_ii(a, b, c, d, x, s, t)
	{
	  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
	}
	
	/*
	 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	 * to work around bugs in some JS interpreters.
	 */
	function safe_add(x, y)
	{
	  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  return (msw << 16) | (lsw & 0xFFFF);
	}
	
	/*
	 * Bitwise rotate a 32-bit number to the left.
	 */
	function bit_rol(num, cnt)
	{
	  return (num << cnt) | (num >>> (32 - cnt));
	}
	
	module.exports = function md5(buf) {
	  return helpers.hash(buf, core_md5, 16);
	};


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var intSize = 4;
	var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
	var chrsz = 8;
	
	function toArray(buf, bigEndian) {
	  if ((buf.length % intSize) !== 0) {
	    var len = buf.length + (intSize - (buf.length % intSize));
	    buf = Buffer.concat([buf, zeroBuffer], len);
	  }
	
	  var arr = [];
	  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
	  for (var i = 0; i < buf.length; i += intSize) {
	    arr.push(fn.call(buf, i));
	  }
	  return arr;
	}
	
	function toBuffer(arr, size, bigEndian) {
	  var buf = new Buffer(size);
	  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
	  for (var i = 0; i < arr.length; i++) {
	    fn.call(buf, arr[i], i * 4, true);
	  }
	  return buf;
	}
	
	function hash(buf, fn, hashSize, bigEndian) {
	  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
	  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
	  return toBuffer(arr, hashSize, bigEndian);
	}
	
	module.exports = { hash: hash };
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(92).Buffer))

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {
	module.exports = ripemd160
	
	
	
	/*
	CryptoJS v3.1.2
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	/** @preserve
	(c) 2012 by Cédric Mesnil. All rights reserved.
	
	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
	
	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
	
	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/
	
	// Constants table
	var zl = [
	    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
	    7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
	    3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
	    1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
	    4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13];
	var zr = [
	    5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
	    6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
	    15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
	    8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
	    12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11];
	var sl = [
	     11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
	    7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
	    11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
	      11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
	    9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ];
	var sr = [
	    8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
	    9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
	    9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
	    15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
	    8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ];
	
	var hl =  [ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E];
	var hr =  [ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000];
	
	var bytesToWords = function (bytes) {
	  var words = [];
	  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
	    words[b >>> 5] |= bytes[i] << (24 - b % 32);
	  }
	  return words;
	};
	
	var wordsToBytes = function (words) {
	  var bytes = [];
	  for (var b = 0; b < words.length * 32; b += 8) {
	    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
	  }
	  return bytes;
	};
	
	var processBlock = function (H, M, offset) {
	
	  // Swap endian
	  for (var i = 0; i < 16; i++) {
	    var offset_i = offset + i;
	    var M_offset_i = M[offset_i];
	
	    // Swap
	    M[offset_i] = (
	        (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
	        (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
	    );
	  }
	
	  // Working variables
	  var al, bl, cl, dl, el;
	  var ar, br, cr, dr, er;
	
	  ar = al = H[0];
	  br = bl = H[1];
	  cr = cl = H[2];
	  dr = dl = H[3];
	  er = el = H[4];
	  // Computation
	  var t;
	  for (var i = 0; i < 80; i += 1) {
	    t = (al +  M[offset+zl[i]])|0;
	    if (i<16){
	        t +=  f1(bl,cl,dl) + hl[0];
	    } else if (i<32) {
	        t +=  f2(bl,cl,dl) + hl[1];
	    } else if (i<48) {
	        t +=  f3(bl,cl,dl) + hl[2];
	    } else if (i<64) {
	        t +=  f4(bl,cl,dl) + hl[3];
	    } else {// if (i<80) {
	        t +=  f5(bl,cl,dl) + hl[4];
	    }
	    t = t|0;
	    t =  rotl(t,sl[i]);
	    t = (t+el)|0;
	    al = el;
	    el = dl;
	    dl = rotl(cl, 10);
	    cl = bl;
	    bl = t;
	
	    t = (ar + M[offset+zr[i]])|0;
	    if (i<16){
	        t +=  f5(br,cr,dr) + hr[0];
	    } else if (i<32) {
	        t +=  f4(br,cr,dr) + hr[1];
	    } else if (i<48) {
	        t +=  f3(br,cr,dr) + hr[2];
	    } else if (i<64) {
	        t +=  f2(br,cr,dr) + hr[3];
	    } else {// if (i<80) {
	        t +=  f1(br,cr,dr) + hr[4];
	    }
	    t = t|0;
	    t =  rotl(t,sr[i]) ;
	    t = (t+er)|0;
	    ar = er;
	    er = dr;
	    dr = rotl(cr, 10);
	    cr = br;
	    br = t;
	  }
	  // Intermediate hash value
	  t    = (H[1] + cl + dr)|0;
	  H[1] = (H[2] + dl + er)|0;
	  H[2] = (H[3] + el + ar)|0;
	  H[3] = (H[4] + al + br)|0;
	  H[4] = (H[0] + bl + cr)|0;
	  H[0] =  t;
	};
	
	function f1(x, y, z) {
	  return ((x) ^ (y) ^ (z));
	}
	
	function f2(x, y, z) {
	  return (((x)&(y)) | ((~x)&(z)));
	}
	
	function f3(x, y, z) {
	  return (((x) | (~(y))) ^ (z));
	}
	
	function f4(x, y, z) {
	  return (((x) & (z)) | ((y)&(~(z))));
	}
	
	function f5(x, y, z) {
	  return ((x) ^ ((y) |(~(z))));
	}
	
	function rotl(x,n) {
	  return (x<<n) | (x>>>(32-n));
	}
	
	function ripemd160(message) {
	  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0];
	
	  if (typeof message == 'string')
	    message = new Buffer(message, 'utf8');
	
	  var m = bytesToWords(message);
	
	  var nBitsLeft = message.length * 8;
	  var nBitsTotal = message.length * 8;
	
	  // Add padding
	  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	      (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
	      (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
	  );
	
	  for (var i=0 ; i<m.length; i += 16) {
	    processBlock(H, m, i);
	  }
	
	  // Swap endian
	  for (var i = 0; i < 5; i++) {
	      // Shortcut
	    var H_i = H[i];
	
	    // Swap
	    H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
	          (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
	  }
	
	  var digestbytes = wordsToBytes(H);
	  return new Buffer(digestbytes);
	}
	
	
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(92).Buffer))

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(98)
	
	var zeroBuffer = new Buffer(128)
	zeroBuffer.fill(0)
	
	module.exports = Hmac
	
	function Hmac (alg, key) {
	  if(!(this instanceof Hmac)) return new Hmac(alg, key)
	  this._opad = opad
	  this._alg = alg
	
	  var blocksize = (alg === 'sha512') ? 128 : 64
	
	  key = this._key = !Buffer.isBuffer(key) ? new Buffer(key) : key
	
	  if(key.length > blocksize) {
	    key = createHash(alg).update(key).digest()
	  } else if(key.length < blocksize) {
	    key = Buffer.concat([key, zeroBuffer], blocksize)
	  }
	
	  var ipad = this._ipad = new Buffer(blocksize)
	  var opad = this._opad = new Buffer(blocksize)
	
	  for(var i = 0; i < blocksize; i++) {
	    ipad[i] = key[i] ^ 0x36
	    opad[i] = key[i] ^ 0x5C
	  }
	
	  this._hash = createHash(alg).update(ipad)
	}
	
	Hmac.prototype.update = function (data, enc) {
	  this._hash.update(data, enc)
	  return this
	}
	
	Hmac.prototype.digest = function (enc) {
	  var h = this._hash.digest()
	  return createHash(this._alg).update(this._opad).update(h).digest(enc)
	}
	
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(92).Buffer))

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

	var pbkdf2Export = __webpack_require__(112)
	
	module.exports = function (crypto, exports) {
	  exports = exports || {}
	
	  var exported = pbkdf2Export(crypto)
	
	  exports.pbkdf2 = exported.pbkdf2
	  exports.pbkdf2Sync = exported.pbkdf2Sync
	
	  return exports
	}


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = function(crypto) {
	  function pbkdf2(password, salt, iterations, keylen, digest, callback) {
	    if ('function' === typeof digest) {
	      callback = digest
	      digest = undefined
	    }
	
	    if ('function' !== typeof callback)
	      throw new Error('No callback provided to pbkdf2')
	
	    setTimeout(function() {
	      var result
	
	      try {
	        result = pbkdf2Sync(password, salt, iterations, keylen, digest)
	      } catch (e) {
	        return callback(e)
	      }
	
	      callback(undefined, result)
	    })
	  }
	
	  function pbkdf2Sync(password, salt, iterations, keylen, digest) {
	    if ('number' !== typeof iterations)
	      throw new TypeError('Iterations not a number')
	
	    if (iterations < 0)
	      throw new TypeError('Bad iterations')
	
	    if ('number' !== typeof keylen)
	      throw new TypeError('Key length not a number')
	
	    if (keylen < 0)
	      throw new TypeError('Bad key length')
	
	    digest = digest || 'sha1'
	
	    if (!Buffer.isBuffer(password)) password = new Buffer(password)
	    if (!Buffer.isBuffer(salt)) salt = new Buffer(salt)
	
	    var hLen, l = 1, r, T
	    var DK = new Buffer(keylen)
	    var block1 = new Buffer(salt.length + 4)
	    salt.copy(block1, 0, 0, salt.length)
	
	    for (var i = 1; i <= l; i++) {
	      block1.writeUInt32BE(i, salt.length)
	
	      var U = crypto.createHmac(digest, password).update(block1).digest()
	
	      if (!hLen) {
	        hLen = U.length
	        T = new Buffer(hLen)
	        l = Math.ceil(keylen / hLen)
	        r = keylen - (l - 1) * hLen
	
	        if (keylen > (Math.pow(2, 32) - 1) * hLen)
	          throw new TypeError('keylen exceeds maximum length')
	      }
	
	      U.copy(T, 0, 0, hLen)
	
	      for (var j = 1; j < iterations; j++) {
	        U = crypto.createHmac(digest, password).update(U).digest()
	
	        for (var k = 0; k < hLen; k++) {
	          T[k] ^= U[k]
	        }
	      }
	
	      var destPos = (i - 1) * hLen
	      var len = (i == l ? r : hLen)
	      T.copy(DK, destPos, 0, len)
	    }
	
	    return DK
	  }
	
	  return {
	    pbkdf2: pbkdf2,
	    pbkdf2Sync: pbkdf2Sync
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(92).Buffer))

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = function (crypto, exports) {
	  exports = exports || {};
	  var ciphers = __webpack_require__(114)(crypto);
	  exports.createCipher = ciphers.createCipher;
	  exports.createCipheriv = ciphers.createCipheriv;
	  var deciphers = __webpack_require__(150)(crypto);
	  exports.createDecipher = deciphers.createDecipher;
	  exports.createDecipheriv = deciphers.createDecipheriv;
	  var modes = __webpack_require__(141);
	  function listCiphers () {
	    return Object.keys(modes);
	  }
	  exports.listCiphers = listCiphers;
	};
	


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var aes = __webpack_require__(115);
	var Transform = __webpack_require__(116);
	var inherits = __webpack_require__(104);
	var modes = __webpack_require__(141);
	var ebtk = __webpack_require__(142);
	var StreamCipher = __webpack_require__(143);
	inherits(Cipher, Transform);
	function Cipher(mode, key, iv) {
	  if (!(this instanceof Cipher)) {
	    return new Cipher(mode, key, iv);
	  }
	  Transform.call(this);
	  this._cache = new Splitter();
	  this._cipher = new aes.AES(key);
	  this._prev = new Buffer(iv.length);
	  iv.copy(this._prev);
	  this._mode = mode;
	}
	Cipher.prototype._transform = function (data, _, next) {
	  this._cache.add(data);
	  var chunk;
	  var thing;
	  while ((chunk = this._cache.get())) {
	    thing = this._mode.encrypt(this, chunk);
	    this.push(thing);
	  }
	  next();
	};
	Cipher.prototype._flush = function (next) {
	  var chunk = this._cache.flush();
	  this.push(this._mode.encrypt(this, chunk));
	  this._cipher.scrub();
	  next();
	};
	
	
	function Splitter() {
	   if (!(this instanceof Splitter)) {
	    return new Splitter();
	  }
	  this.cache = new Buffer('');
	}
	Splitter.prototype.add = function (data) {
	  this.cache = Buffer.concat([this.cache, data]);
	};
	
	Splitter.prototype.get = function () {
	  if (this.cache.length > 15) {
	    var out = this.cache.slice(0, 16);
	    this.cache = this.cache.slice(16);
	    return out;
	  }
	  return null;
	};
	Splitter.prototype.flush = function () {
	  var len = 16 - this.cache.length;
	  var padBuff = new Buffer(len);
	
	  var i = -1;
	  while (++i < len) {
	    padBuff.writeUInt8(len, i);
	  }
	  var out = Buffer.concat([this.cache, padBuff]);
	  return out;
	};
	var modelist = {
	  ECB: __webpack_require__(144),
	  CBC: __webpack_require__(145),
	  CFB: __webpack_require__(147),
	  OFB: __webpack_require__(148),
	  CTR: __webpack_require__(149)
	};
	module.exports = function (crypto) {
	  function createCipheriv(suite, password, iv) {
	    var config = modes[suite];
	    if (!config) {
	      throw new TypeError('invalid suite type');
	    }
	    if (typeof iv === 'string') {
	      iv = new Buffer(iv);
	    }
	    if (typeof password === 'string') {
	      password = new Buffer(password);
	    }
	    if (password.length !== config.key/8) {
	      throw new TypeError('invalid key length ' + password.length);
	    }
	    if (iv.length !== config.iv) {
	      throw new TypeError('invalid iv length ' + iv.length);
	    }
	    if (config.type === 'stream') {
	      return new StreamCipher(modelist[config.mode], password, iv);
	    }
	    return new Cipher(modelist[config.mode], password, iv);
	  }
	  function createCipher (suite, password) {
	    var config = modes[suite];
	    if (!config) {
	      throw new TypeError('invalid suite type');
	    }
	    var keys = ebtk(crypto, password, config.key, config.iv);
	    return createCipheriv(suite, keys.key, keys.iv);
	  }
	  return {
	    createCipher: createCipher,
	    createCipheriv: createCipheriv
	  };
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(92).Buffer))

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var uint_max = Math.pow(2, 32);
	function fixup_uint32(x) {
	    var ret, x_pos;
	    ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x;
	    return ret;
	}
	function scrub_vec(v) {
	  var i, _i, _ref;
	  for (i = _i = 0, _ref = v.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
	    v[i] = 0;
	  }
	  return false;
	}
	
	function Global() {
	  var i;
	  this.SBOX = [];
	  this.INV_SBOX = [];
	  this.SUB_MIX = (function() {
	    var _i, _results;
	    _results = [];
	    for (i = _i = 0; _i < 4; i = ++_i) {
	      _results.push([]);
	    }
	    return _results;
	  })();
	  this.INV_SUB_MIX = (function() {
	    var _i, _results;
	    _results = [];
	    for (i = _i = 0; _i < 4; i = ++_i) {
	      _results.push([]);
	    }
	    return _results;
	  })();
	  this.init();
	  this.RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];
	}
	
	Global.prototype.init = function() {
	  var d, i, sx, t, x, x2, x4, x8, xi, _i;
	  d = (function() {
	    var _i, _results;
	    _results = [];
	    for (i = _i = 0; _i < 256; i = ++_i) {
	      if (i < 128) {
	        _results.push(i << 1);
	      } else {
	        _results.push((i << 1) ^ 0x11b);
	      }
	    }
	    return _results;
	  })();
	  x = 0;
	  xi = 0;
	  for (i = _i = 0; _i < 256; i = ++_i) {
	    sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);
	    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
	    this.SBOX[x] = sx;
	    this.INV_SBOX[sx] = x;
	    x2 = d[x];
	    x4 = d[x2];
	    x8 = d[x4];
	    t = (d[sx] * 0x101) ^ (sx * 0x1010100);
	    this.SUB_MIX[0][x] = (t << 24) | (t >>> 8);
	    this.SUB_MIX[1][x] = (t << 16) | (t >>> 16);
	    this.SUB_MIX[2][x] = (t << 8) | (t >>> 24);
	    this.SUB_MIX[3][x] = t;
	    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);
	    this.INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8);
	    this.INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16);
	    this.INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24);
	    this.INV_SUB_MIX[3][sx] = t;
	    if (x === 0) {
	      x = xi = 1;
	    } else {
	      x = x2 ^ d[d[d[x8 ^ x2]]];
	      xi ^= d[d[xi]];
	    }
	  }
	  return true;
	};
	
	var G = new Global();
	
	
	AES.blockSize = 4 * 4;
	
	AES.prototype.blockSize = AES.blockSize;
	
	AES.keySize = 256 / 8;
	
	AES.prototype.keySize = AES.keySize;
	
	AES.ivSize = AES.blockSize;
	
	AES.prototype.ivSize = AES.ivSize;
	
	 function bufferToArray(buf) {
	  var len = buf.length/4;
	  var out = new Array(len);
	  var i = -1;
	  while (++i < len) {
	    out[i] = buf.readUInt32BE(i * 4);
	  }
	  return out;
	 }
	function AES(key) {
	  this._key = bufferToArray(key);
	  this._doReset();
	}
	
	AES.prototype._doReset = function() {
	  var invKsRow, keySize, keyWords, ksRow, ksRows, t, _i, _j;
	  keyWords = this._key;
	  keySize = keyWords.length;
	  this._nRounds = keySize + 6;
	  ksRows = (this._nRounds + 1) * 4;
	  this._keySchedule = [];
	  for (ksRow = _i = 0; 0 <= ksRows ? _i < ksRows : _i > ksRows; ksRow = 0 <= ksRows ? ++_i : --_i) {
	    this._keySchedule[ksRow] = ksRow < keySize ? keyWords[ksRow] : (t = this._keySchedule[ksRow - 1], (ksRow % keySize) === 0 ? (t = (t << 8) | (t >>> 24), t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff], t ^= G.RCON[(ksRow / keySize) | 0] << 24) : keySize > 6 && ksRow % keySize === 4 ? t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff] : void 0, this._keySchedule[ksRow - keySize] ^ t);
	  }
	  this._invKeySchedule = [];
	  for (invKsRow = _j = 0; 0 <= ksRows ? _j < ksRows : _j > ksRows; invKsRow = 0 <= ksRows ? ++_j : --_j) {
	    ksRow = ksRows - invKsRow;
	    t = this._keySchedule[ksRow - (invKsRow % 4 ? 0 : 4)];
	    this._invKeySchedule[invKsRow] = invKsRow < 4 || ksRow <= 4 ? t : G.INV_SUB_MIX[0][G.SBOX[t >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[(t >>> 16) & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[(t >>> 8) & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[t & 0xff]];
	  }
	  return true;
	};
	
	AES.prototype.encryptBlock = function(M) {
	  M = bufferToArray(new Buffer(M));
	  var out = this._doCryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX);
	  var buf = new Buffer(16);
	  buf.writeUInt32BE(out[0], 0);
	  buf.writeUInt32BE(out[1], 4);
	  buf.writeUInt32BE(out[2], 8);
	  buf.writeUInt32BE(out[3], 12);
	  return buf;
	};
	
	AES.prototype.decryptBlock = function(M) {
	  M = bufferToArray(new Buffer(M));
	  var temp = [M[3], M[1]];
	  M[1] = temp[0];
	  M[3] = temp[1];
	  var out = this._doCryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX);
	  var buf = new Buffer(16);
	  buf.writeUInt32BE(out[0], 0);
	  buf.writeUInt32BE(out[3], 4);
	  buf.writeUInt32BE(out[2], 8);
	  buf.writeUInt32BE(out[1], 12);
	  return buf;
	};
	
	AES.prototype.scrub = function() {
	  scrub_vec(this._keySchedule);
	  scrub_vec(this._invKeySchedule);
	  scrub_vec(this._key);
	};
	
	AES.prototype._doCryptBlock = function(M, keySchedule, SUB_MIX, SBOX) {
	  var ksRow, round, s0, s1, s2, s3, t0, t1, t2, t3, _i, _ref;
	
	  s0 = M[0] ^ keySchedule[0];
	  s1 = M[1] ^ keySchedule[1];
	  s2 = M[2] ^ keySchedule[2];
	  s3 = M[3] ^ keySchedule[3];
	  ksRow = 4;
	  for (round = _i = 1, _ref = this._nRounds; 1 <= _ref ? _i < _ref : _i > _ref; round = 1 <= _ref ? ++_i : --_i) {
	    t0 = SUB_MIX[0][s0 >>> 24] ^ SUB_MIX[1][(s1 >>> 16) & 0xff] ^ SUB_MIX[2][(s2 >>> 8) & 0xff] ^ SUB_MIX[3][s3 & 0xff] ^ keySchedule[ksRow++];
	    t1 = SUB_MIX[0][s1 >>> 24] ^ SUB_MIX[1][(s2 >>> 16) & 0xff] ^ SUB_MIX[2][(s3 >>> 8) & 0xff] ^ SUB_MIX[3][s0 & 0xff] ^ keySchedule[ksRow++];
	    t2 = SUB_MIX[0][s2 >>> 24] ^ SUB_MIX[1][(s3 >>> 16) & 0xff] ^ SUB_MIX[2][(s0 >>> 8) & 0xff] ^ SUB_MIX[3][s1 & 0xff] ^ keySchedule[ksRow++];
	    t3 = SUB_MIX[0][s3 >>> 24] ^ SUB_MIX[1][(s0 >>> 16) & 0xff] ^ SUB_MIX[2][(s1 >>> 8) & 0xff] ^ SUB_MIX[3][s2 & 0xff] ^ keySchedule[ksRow++];
	    s0 = t0;
	    s1 = t1;
	    s2 = t2;
	    s3 = t3;
	  }
	  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
	  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
	  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
	  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
	  return [
	    fixup_uint32(t0),
	    fixup_uint32(t1),
	    fixup_uint32(t2),
	    fixup_uint32(t3)
	  ];
	
	};
	
	
	
	
	  exports.AES = AES;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(92).Buffer))

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var Transform = __webpack_require__(117).Transform;
	var inherits = __webpack_require__(104);
	
	module.exports = CipherBase;
	inherits(CipherBase, Transform);
	function CipherBase() {
	  Transform.call(this);
	}
	CipherBase.prototype.update = function (data, inputEnd, outputEnc) {
	  this.write(data, inputEnd);
	  var outData = new Buffer('');
	  var chunk;
	  while ((chunk = this.read())) {
	    outData = Buffer.concat([outData, chunk]);
	  }
	  if (outputEnc) {
	    outData = outData.toString(outputEnc);
	  }
	  return outData;
	};
	CipherBase.prototype.final = function (outputEnc) {
	  this.end();
	  var outData = new Buffer('');
	  var chunk;
	  while ((chunk = this.read())) {
	    outData = Buffer.concat([outData, chunk]);
	  }
	  if (outputEnc) {
	    outData = outData.toString(outputEnc);
	  }
	  return outData;
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(92).Buffer))

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	module.exports = Stream;
	
	var EE = __webpack_require__(118).EventEmitter;
	var inherits = __webpack_require__(104);
	
	inherits(Stream, EE);
	Stream.Readable = __webpack_require__(119);
	Stream.Writable = __webpack_require__(137);
	Stream.Duplex = __webpack_require__(138);
	Stream.Transform = __webpack_require__(139);
	Stream.PassThrough = __webpack_require__(140);
	
	// Backwards-compat with node 0.4.x
	Stream.Stream = Stream;
	
	
	
	// old-style streams.  Note that the pipe method (the only relevant
	// part of this class) is overridden in the Readable class.
	
	function Stream() {
	  EE.call(this);
	}
	
	Stream.prototype.pipe = function(dest, options) {
	  var source = this;
	
	  function ondata(chunk) {
	    if (dest.writable) {
	      if (false === dest.write(chunk) && source.pause) {
	        source.pause();
	      }
	    }
	  }
	
	  source.on('data', ondata);
	
	  function ondrain() {
	    if (source.readable && source.resume) {
	      source.resume();
	    }
	  }
	
	  dest.on('drain', ondrain);
	
	  // If the 'end' option is not supplied, dest.end() will be called when
	  // source gets the 'end' or 'close' events.  Only dest.end() once.
	  if (!dest._isStdio && (!options || options.end !== false)) {
	    source.on('end', onend);
	    source.on('close', onclose);
	  }
	
	  var didOnEnd = false;
	  function onend() {
	    if (didOnEnd) return;
	    didOnEnd = true;
	
	    dest.end();
	  }
	
	
	  function onclose() {
	    if (didOnEnd) return;
	    didOnEnd = true;
	
	    if (typeof dest.destroy === 'function') dest.destroy();
	  }
	
	  // don't leave dangling pipes when there are errors.
	  function onerror(er) {
	    cleanup();
	    if (EE.listenerCount(this, 'error') === 0) {
	      throw er; // Unhandled stream error in pipe.
	    }
	  }
	
	  source.on('error', onerror);
	  dest.on('error', onerror);
	
	  // remove all the event listeners that were added.
	  function cleanup() {
	    source.removeListener('data', ondata);
	    dest.removeListener('drain', ondrain);
	
	    source.removeListener('end', onend);
	    source.removeListener('close', onclose);
	
	    source.removeListener('error', onerror);
	    dest.removeListener('error', onerror);
	
	    source.removeListener('end', cleanup);
	    source.removeListener('close', cleanup);
	
	    dest.removeListener('close', cleanup);
	  }
	
	  source.on('end', cleanup);
	  source.on('close', cleanup);
	
	  dest.on('close', cleanup);
	
	  dest.emit('pipe', source);
	
	  // Allow for unix-like usage: A.pipe(B).pipe(C)
	  return dest;
	};


/***/ }),
/* 118 */
/***/ (function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;
	
	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;
	
	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;
	
	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;
	
	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};
	
	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;
	
	  if (!this._events)
	    this._events = {};
	
	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      } else {
	        // At least give some kind of context to the user
	        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	        err.context = er;
	        throw err;
	      }
	    }
	  }
	
	  handler = this._events[type];
	
	  if (isUndefined(handler))
	    return false;
	
	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        args = Array.prototype.slice.call(arguments, 1);
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    args = Array.prototype.slice.call(arguments, 1);
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }
	
	  return true;
	};
	
	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;
	
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  if (!this._events)
	    this._events = {};
	
	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);
	
	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];
	
	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }
	
	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }
	
	  return this;
	};
	
	EventEmitter.prototype.on = EventEmitter.prototype.addListener;
	
	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  var fired = false;
	
	  function g() {
	    this.removeListener(type, g);
	
	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }
	
	  g.listener = listener;
	  this.on(type, g);
	
	  return this;
	};
	
	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;
	
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  if (!this._events || !this._events[type])
	    return this;
	
	  list = this._events[type];
	  length = list.length;
	  position = -1;
	
	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	
	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }
	
	    if (position < 0)
	      return this;
	
	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }
	
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }
	
	  return this;
	};
	
	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;
	
	  if (!this._events)
	    return this;
	
	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }
	
	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }
	
	  listeners = this._events[type];
	
	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];
	
	  return this;
	};
	
	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};
	
	EventEmitter.prototype.listenerCount = function(type) {
	  if (this._events) {
	    var evlistener = this._events[type];
	
	    if (isFunction(evlistener))
	      return 1;
	    else if (evlistener)
	      return evlistener.length;
	  }
	  return 0;
	};
	
	EventEmitter.listenerCount = function(emitter, type) {
	  return emitter.listenerCount(type);
	};
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	
	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(120);
	exports.Stream = exports;
	exports.Readable = exports;
	exports.Writable = __webpack_require__(130);
	exports.Duplex = __webpack_require__(129);
	exports.Transform = __webpack_require__(135);
	exports.PassThrough = __webpack_require__(136);


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	/*<replacement>*/
	
	var pna = __webpack_require__(121);
	/*</replacement>*/
	
	module.exports = Readable;
	
	/*<replacement>*/
	var isArray = __webpack_require__(95);
	/*</replacement>*/
	
	/*<replacement>*/
	var Duplex;
	/*</replacement>*/
	
	Readable.ReadableState = ReadableState;
	
	/*<replacement>*/
	var EE = __webpack_require__(118).EventEmitter;
	
	var EElistenerCount = function (emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/
	
	/*<replacement>*/
	var Stream = __webpack_require__(122);
	/*</replacement>*/
	
	/*<replacement>*/
	
	var Buffer = __webpack_require__(123).Buffer;
	var OurUint8Array = global.Uint8Array || function () {};
	function _uint8ArrayToBuffer(chunk) {
	  return Buffer.from(chunk);
	}
	function _isUint8Array(obj) {
	  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
	}
	
	/*</replacement>*/
	
	/*<replacement>*/
	var util = __webpack_require__(124);
	util.inherits = __webpack_require__(104);
	/*</replacement>*/
	
	/*<replacement>*/
	var debugUtil = __webpack_require__(125);
	var debug = void 0;
	if (debugUtil && debugUtil.debuglog) {
	  debug = debugUtil.debuglog('stream');
	} else {
	  debug = function () {};
	}
	/*</replacement>*/
	
	var BufferList = __webpack_require__(126);
	var destroyImpl = __webpack_require__(128);
	var StringDecoder;
	
	util.inherits(Readable, Stream);
	
	var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];
	
	function prependListener(emitter, event, fn) {
	  // Sadly this is not cacheable as some libraries bundle their own
	  // event emitter implementation with them.
	  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);
	
	  // This is a hack to make sure that our error handler is attached before any
	  // userland ones.  NEVER DO THIS. This is here only because this code needs
	  // to continue to work with older versions of Node.js that do not include
	  // the prependListener() method. The goal is to eventually remove this hack.
	  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
	}
	
	function ReadableState(options, stream) {
	  Duplex = Duplex || __webpack_require__(129);
	
	  options = options || {};
	
	  // Duplex streams are both readable and writable, but share
	  // the same options object.
	  // However, some cases require setting options to different
	  // values for the readable and the writable sides of the duplex stream.
	  // These options can be provided separately as readableXXX and writableXXX.
	  var isDuplex = stream instanceof Duplex;
	
	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;
	
	  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
	
	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var readableHwm = options.readableHighWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	
	  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;
	
	  // cast to ints.
	  this.highWaterMark = Math.floor(this.highWaterMark);
	
	  // A linked list is used to store data chunks instead of an array because the
	  // linked list can remove elements from the beginning faster than
	  // array.shift()
	  this.buffer = new BufferList();
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;
	
	  // a flag to be able to tell if the event 'readable'/'data' is emitted
	  // immediately, or on a later tick.  We set this to true at first, because
	  // any actions that shouldn't happen until "later" should generally also
	  // not happen before the first read call.
	  this.sync = true;
	
	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	  this.resumeScheduled = false;
	
	  // has it been destroyed
	  this.destroyed = false;
	
	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';
	
	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;
	
	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;
	
	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder) StringDecoder = __webpack_require__(134).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}
	
	function Readable(options) {
	  Duplex = Duplex || __webpack_require__(129);
	
	  if (!(this instanceof Readable)) return new Readable(options);
	
	  this._readableState = new ReadableState(options, this);
	
	  // legacy
	  this.readable = true;
	
	  if (options) {
	    if (typeof options.read === 'function') this._read = options.read;
	
	    if (typeof options.destroy === 'function') this._destroy = options.destroy;
	  }
	
	  Stream.call(this);
	}
	
	Object.defineProperty(Readable.prototype, 'destroyed', {
	  get: function () {
	    if (this._readableState === undefined) {
	      return false;
	    }
	    return this._readableState.destroyed;
	  },
	  set: function (value) {
	    // we ignore the value if the stream
	    // has not been initialized yet
	    if (!this._readableState) {
	      return;
	    }
	
	    // backward compatibility, the user is explicitly
	    // managing destroyed
	    this._readableState.destroyed = value;
	  }
	});
	
	Readable.prototype.destroy = destroyImpl.destroy;
	Readable.prototype._undestroy = destroyImpl.undestroy;
	Readable.prototype._destroy = function (err, cb) {
	  this.push(null);
	  cb(err);
	};
	
	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function (chunk, encoding) {
	  var state = this._readableState;
	  var skipChunkCheck;
	
	  if (!state.objectMode) {
	    if (typeof chunk === 'string') {
	      encoding = encoding || state.defaultEncoding;
	      if (encoding !== state.encoding) {
	        chunk = Buffer.from(chunk, encoding);
	        encoding = '';
	      }
	      skipChunkCheck = true;
	    }
	  } else {
	    skipChunkCheck = true;
	  }
	
	  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
	};
	
	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function (chunk) {
	  return readableAddChunk(this, chunk, null, true, false);
	};
	
	function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
	  var state = stream._readableState;
	  if (chunk === null) {
	    state.reading = false;
	    onEofChunk(stream, state);
	  } else {
	    var er;
	    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
	    if (er) {
	      stream.emit('error', er);
	    } else if (state.objectMode || chunk && chunk.length > 0) {
	      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
	        chunk = _uint8ArrayToBuffer(chunk);
	      }
	
	      if (addToFront) {
	        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
	      } else if (state.ended) {
	        stream.emit('error', new Error('stream.push() after EOF'));
	      } else {
	        state.reading = false;
	        if (state.decoder && !encoding) {
	          chunk = state.decoder.write(chunk);
	          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
	        } else {
	          addChunk(stream, state, chunk, false);
	        }
	      }
	    } else if (!addToFront) {
	      state.reading = false;
	    }
	  }
	
	  return needMoreData(state);
	}
	
	function addChunk(stream, state, chunk, addToFront) {
	  if (state.flowing && state.length === 0 && !state.sync) {
	    stream.emit('data', chunk);
	    stream.read(0);
	  } else {
	    // update the buffer info.
	    state.length += state.objectMode ? 1 : chunk.length;
	    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
	
	    if (state.needReadable) emitReadable(stream);
	  }
	  maybeReadMore(stream, state);
	}
	
	function chunkInvalid(state, chunk) {
	  var er;
	  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}
	
	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
	}
	
	Readable.prototype.isPaused = function () {
	  return this._readableState.flowing === false;
	};
	
	// backwards compatibility.
	Readable.prototype.setEncoding = function (enc) {
	  if (!StringDecoder) StringDecoder = __webpack_require__(134).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};
	
	// Don't raise the hwm > 8MB
	var MAX_HWM = 0x800000;
	function computeNewHighWaterMark(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2 to prevent increasing hwm excessively in
	    // tiny amounts
	    n--;
	    n |= n >>> 1;
	    n |= n >>> 2;
	    n |= n >>> 4;
	    n |= n >>> 8;
	    n |= n >>> 16;
	    n++;
	  }
	  return n;
	}
	
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function howMuchToRead(n, state) {
	  if (n <= 0 || state.length === 0 && state.ended) return 0;
	  if (state.objectMode) return 1;
	  if (n !== n) {
	    // Only flow one buffer at a time
	    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
	  }
	  // If we're asking for more than the current hwm, then raise the hwm.
	  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
	  if (n <= state.length) return n;
	  // Don't have enough
	  if (!state.ended) {
	    state.needReadable = true;
	    return 0;
	  }
	  return state.length;
	}
	
	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function (n) {
	  debug('read', n);
	  n = parseInt(n, 10);
	  var state = this._readableState;
	  var nOrig = n;
	
	  if (n !== 0) state.emittedReadable = false;
	
	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
	    return null;
	  }
	
	  n = howMuchToRead(n, state);
	
	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0) endReadable(this);
	    return null;
	  }
	
	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.
	
	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);
	
	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }
	
	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  } else if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0) state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	    // If _read pushed data synchronously, then `reading` will be false,
	    // and we need to re-evaluate how much data we can return to the user.
	    if (!state.reading) n = howMuchToRead(nOrig, state);
	  }
	
	  var ret;
	  if (n > 0) ret = fromList(n, state);else ret = null;
	
	  if (ret === null) {
	    state.needReadable = true;
	    n = 0;
	  } else {
	    state.length -= n;
	  }
	
	  if (state.length === 0) {
	    // If we have nothing in the buffer, then we want to know
	    // as soon as we *do* get something into the buffer.
	    if (!state.ended) state.needReadable = true;
	
	    // If we tried to read() past the EOF, then emit end on the next tick.
	    if (nOrig !== n && state.ended) endReadable(this);
	  }
	
	  if (ret !== null) this.emit('data', ret);
	
	  return ret;
	};
	
	function onEofChunk(stream, state) {
	  if (state.ended) return;
	  if (state.decoder) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;
	
	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}
	
	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
	  }
	}
	
	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}
	
	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    pna.nextTick(maybeReadMore_, stream, state);
	  }
	}
	
	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;else len = state.length;
	  }
	  state.readingMore = false;
	}
	
	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function (n) {
	  this.emit('error', new Error('_read() is not implemented'));
	};
	
	Readable.prototype.pipe = function (dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;
	
	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
	
	  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
	
	  var endFn = doEnd ? onend : unpipe;
	  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);
	
	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable, unpipeInfo) {
	    debug('onunpipe');
	    if (readable === src) {
	      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
	        unpipeInfo.hasUnpiped = true;
	        cleanup();
	      }
	    }
	  }
	
	  function onend() {
	    debug('onend');
	    dest.end();
	  }
	
	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);
	
	  var cleanedUp = false;
	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', unpipe);
	    src.removeListener('data', ondata);
	
	    cleanedUp = true;
	
	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
	  }
	
	  // If the user pushes more data while we're writing to dest then we'll end up
	  // in ondata again. However, we only want to increase awaitDrain once because
	  // dest will only emit one 'drain' event for the multiple writes.
	  // => Introduce a guard on increasing awaitDrain.
	  var increasedAwaitDrain = false;
	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    increasedAwaitDrain = false;
	    var ret = dest.write(chunk);
	    if (false === ret && !increasedAwaitDrain) {
	      // If the user unpiped during `dest.write()`, it is possible
	      // to get stuck in a permanently paused state if that write
	      // also returned false.
	      // => Check whether `dest` is still a piping destination.
	      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
	        debug('false write response, pause', src._readableState.awaitDrain);
	        src._readableState.awaitDrain++;
	        increasedAwaitDrain = true;
	      }
	      src.pause();
	    }
	  }
	
	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
	  }
	
	  // Make sure our error handler is attached before userland ones.
	  prependListener(dest, 'error', onerror);
	
	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);
	
	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }
	
	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);
	
	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }
	
	  return dest;
	};
	
	function pipeOnDrain(src) {
	  return function () {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain) state.awaitDrain--;
	    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}
	
	Readable.prototype.unpipe = function (dest) {
	  var state = this._readableState;
	  var unpipeInfo = { hasUnpiped: false };
	
	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0) return this;
	
	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes) return this;
	
	    if (!dest) dest = state.pipes;
	
	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest) dest.emit('unpipe', this, unpipeInfo);
	    return this;
	  }
	
	  // slow case. multiple pipe destinations.
	
	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	
	    for (var i = 0; i < len; i++) {
	      dests[i].emit('unpipe', this, unpipeInfo);
	    }return this;
	  }
	
	  // try to find the right one.
	  var index = indexOf(state.pipes, dest);
	  if (index === -1) return this;
	
	  state.pipes.splice(index, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1) state.pipes = state.pipes[0];
	
	  dest.emit('unpipe', this, unpipeInfo);
	
	  return this;
	};
	
	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function (ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);
	
	  if (ev === 'data') {
	    // Start flowing on next tick if stream isn't explicitly paused
	    if (this._readableState.flowing !== false) this.resume();
	  } else if (ev === 'readable') {
	    var state = this._readableState;
	    if (!state.endEmitted && !state.readableListening) {
	      state.readableListening = state.needReadable = true;
	      state.emittedReadable = false;
	      if (!state.reading) {
	        pna.nextTick(nReadingNextTick, this);
	      } else if (state.length) {
	        emitReadable(this);
	      }
	    }
	  }
	
	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;
	
	function nReadingNextTick(self) {
	  debug('readable nexttick read 0');
	  self.read(0);
	}
	
	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function () {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    resume(this, state);
	  }
	  return this;
	};
	
	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    pna.nextTick(resume_, stream, state);
	  }
	}
	
	function resume_(stream, state) {
	  if (!state.reading) {
	    debug('resume read 0');
	    stream.read(0);
	  }
	
	  state.resumeScheduled = false;
	  state.awaitDrain = 0;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading) stream.read(0);
	}
	
	Readable.prototype.pause = function () {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};
	
	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  while (state.flowing && stream.read() !== null) {}
	}
	
	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function (stream) {
	  var _this = this;
	
	  var state = this._readableState;
	  var paused = false;
	
	  stream.on('end', function () {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length) _this.push(chunk);
	    }
	
	    _this.push(null);
	  });
	
	  stream.on('data', function (chunk) {
	    debug('wrapped data');
	    if (state.decoder) chunk = state.decoder.write(chunk);
	
	    // don't skip over falsy values in objectMode
	    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
	
	    var ret = _this.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });
	
	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (this[i] === undefined && typeof stream[i] === 'function') {
	      this[i] = function (method) {
	        return function () {
	          return stream[method].apply(stream, arguments);
	        };
	      }(i);
	    }
	  }
	
	  // proxy certain important events.
	  for (var n = 0; n < kProxyEvents.length; n++) {
	    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
	  }
	
	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  this._read = function (n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };
	
	  return this;
	};
	
	Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function () {
	    return this._readableState.highWaterMark;
	  }
	});
	
	// exposed for testing purposes only.
	Readable._fromList = fromList;
	
	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromList(n, state) {
	  // nothing buffered
	  if (state.length === 0) return null;
	
	  var ret;
	  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
	    // read it all, truncate the list
	    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
	    state.buffer.clear();
	  } else {
	    // read part of list
	    ret = fromListPartial(n, state.buffer, state.decoder);
	  }
	
	  return ret;
	}
	
	// Extracts only enough buffered data to satisfy the amount requested.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromListPartial(n, list, hasStrings) {
	  var ret;
	  if (n < list.head.data.length) {
	    // slice is the same for buffers and strings
	    ret = list.head.data.slice(0, n);
	    list.head.data = list.head.data.slice(n);
	  } else if (n === list.head.data.length) {
	    // first chunk is a perfect match
	    ret = list.shift();
	  } else {
	    // result spans more than one buffer
	    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
	  }
	  return ret;
	}
	
	// Copies a specified amount of characters from the list of buffered data
	// chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBufferString(n, list) {
	  var p = list.head;
	  var c = 1;
	  var ret = p.data;
	  n -= ret.length;
	  while (p = p.next) {
	    var str = p.data;
	    var nb = n > str.length ? str.length : n;
	    if (nb === str.length) ret += str;else ret += str.slice(0, n);
	    n -= nb;
	    if (n === 0) {
	      if (nb === str.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = str.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}
	
	// Copies a specified amount of bytes from the list of buffered data chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBuffer(n, list) {
	  var ret = Buffer.allocUnsafe(n);
	  var p = list.head;
	  var c = 1;
	  p.data.copy(ret);
	  n -= p.data.length;
	  while (p = p.next) {
	    var buf = p.data;
	    var nb = n > buf.length ? buf.length : n;
	    buf.copy(ret, ret.length - n, 0, nb);
	    n -= nb;
	    if (n === 0) {
	      if (nb === buf.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = buf.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}
	
	function endReadable(stream) {
	  var state = stream._readableState;
	
	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');
	
	  if (!state.endEmitted) {
	    state.ended = true;
	    pna.nextTick(endReadableNT, state, stream);
	  }
	}
	
	function endReadableNT(state, stream) {
	  // Check that we didn't get one last unshift.
	  if (!state.endEmitted && state.length === 0) {
	    state.endEmitted = true;
	    stream.readable = false;
	    stream.emit('end');
	  }
	}
	
	function indexOf(xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(90)))

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	if (!process.version ||
	    process.version.indexOf('v0.') === 0 ||
	    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
	  module.exports = { nextTick: nextTick };
	} else {
	  module.exports = process
	}
	
	function nextTick(fn, arg1, arg2, arg3) {
	  if (typeof fn !== 'function') {
	    throw new TypeError('"callback" argument must be a function');
	  }
	  var len = arguments.length;
	  var args, i;
	  switch (len) {
	  case 0:
	  case 1:
	    return process.nextTick(fn);
	  case 2:
	    return process.nextTick(function afterTickOne() {
	      fn.call(null, arg1);
	    });
	  case 3:
	    return process.nextTick(function afterTickTwo() {
	      fn.call(null, arg1, arg2);
	    });
	  case 4:
	    return process.nextTick(function afterTickThree() {
	      fn.call(null, arg1, arg2, arg3);
	    });
	  default:
	    args = new Array(len - 1);
	    i = 0;
	    while (i < args.length) {
	      args[i++] = arguments[i];
	    }
	    return process.nextTick(function afterTick() {
	      fn.apply(null, args);
	    });
	  }
	}
	
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(118).EventEmitter;


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

	/* eslint-disable node/no-deprecated-api */
	var buffer = __webpack_require__(92)
	var Buffer = buffer.Buffer
	
	// alternative to using Object.keys for old browsers
	function copyProps (src, dst) {
	  for (var key in src) {
	    dst[key] = src[key]
	  }
	}
	if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
	  module.exports = buffer
	} else {
	  // Copy properties from require('buffer')
	  copyProps(buffer, exports)
	  exports.Buffer = SafeBuffer
	}
	
	function SafeBuffer (arg, encodingOrOffset, length) {
	  return Buffer(arg, encodingOrOffset, length)
	}
	
	// Copy static methods from Buffer
	copyProps(Buffer, SafeBuffer)
	
	SafeBuffer.from = function (arg, encodingOrOffset, length) {
	  if (typeof arg === 'number') {
	    throw new TypeError('Argument must not be a number')
	  }
	  return Buffer(arg, encodingOrOffset, length)
	}
	
	SafeBuffer.alloc = function (size, fill, encoding) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  var buf = Buffer(size)
	  if (fill !== undefined) {
	    if (typeof encoding === 'string') {
	      buf.fill(fill, encoding)
	    } else {
	      buf.fill(fill)
	    }
	  } else {
	    buf.fill(0)
	  }
	  return buf
	}
	
	SafeBuffer.allocUnsafe = function (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  return Buffer(size)
	}
	
	SafeBuffer.allocUnsafeSlow = function (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  return buffer.SlowBuffer(size)
	}


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	
	function isArray(arg) {
	  if (Array.isArray) {
	    return Array.isArray(arg);
	  }
	  return objectToString(arg) === '[object Array]';
	}
	exports.isArray = isArray;
	
	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;
	
	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;
	
	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;
	
	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;
	
	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;
	
	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;
	
	function isRegExp(re) {
	  return objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;
	
	function isDate(d) {
	  return objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;
	
	function isError(e) {
	  return (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;
	
	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;
	
	exports.isBuffer = Buffer.isBuffer;
	
	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(92).Buffer))

/***/ }),
/* 125 */
/***/ (function(module, exports) {

	/* (ignored) */

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Buffer = __webpack_require__(123).Buffer;
	var util = __webpack_require__(127);
	
	function copyBuffer(src, target, offset) {
	  src.copy(target, offset);
	}
	
	module.exports = function () {
	  function BufferList() {
	    _classCallCheck(this, BufferList);
	
	    this.head = null;
	    this.tail = null;
	    this.length = 0;
	  }
	
	  BufferList.prototype.push = function push(v) {
	    var entry = { data: v, next: null };
	    if (this.length > 0) this.tail.next = entry;else this.head = entry;
	    this.tail = entry;
	    ++this.length;
	  };
	
	  BufferList.prototype.unshift = function unshift(v) {
	    var entry = { data: v, next: this.head };
	    if (this.length === 0) this.tail = entry;
	    this.head = entry;
	    ++this.length;
	  };
	
	  BufferList.prototype.shift = function shift() {
	    if (this.length === 0) return;
	    var ret = this.head.data;
	    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
	    --this.length;
	    return ret;
	  };
	
	  BufferList.prototype.clear = function clear() {
	    this.head = this.tail = null;
	    this.length = 0;
	  };
	
	  BufferList.prototype.join = function join(s) {
	    if (this.length === 0) return '';
	    var p = this.head;
	    var ret = '' + p.data;
	    while (p = p.next) {
	      ret += s + p.data;
	    }return ret;
	  };
	
	  BufferList.prototype.concat = function concat(n) {
	    if (this.length === 0) return Buffer.alloc(0);
	    if (this.length === 1) return this.head.data;
	    var ret = Buffer.allocUnsafe(n >>> 0);
	    var p = this.head;
	    var i = 0;
	    while (p) {
	      copyBuffer(p.data, ret, i);
	      i += p.data.length;
	      p = p.next;
	    }
	    return ret;
	  };
	
	  return BufferList;
	}();
	
	if (util && util.inspect && util.inspect.custom) {
	  module.exports.prototype[util.inspect.custom] = function () {
	    var obj = util.inspect({ length: this.length });
	    return this.constructor.name + ' ' + obj;
	  };
	}

/***/ }),
/* 127 */
/***/ (function(module, exports) {

	/* (ignored) */

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	/*<replacement>*/
	
	var pna = __webpack_require__(121);
	/*</replacement>*/
	
	// undocumented cb() API, needed for core, not for public API
	function destroy(err, cb) {
	  var _this = this;
	
	  var readableDestroyed = this._readableState && this._readableState.destroyed;
	  var writableDestroyed = this._writableState && this._writableState.destroyed;
	
	  if (readableDestroyed || writableDestroyed) {
	    if (cb) {
	      cb(err);
	    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
	      pna.nextTick(emitErrorNT, this, err);
	    }
	    return this;
	  }
	
	  // we set destroyed to true before firing error callbacks in order
	  // to make it re-entrance safe in case destroy() is called within callbacks
	
	  if (this._readableState) {
	    this._readableState.destroyed = true;
	  }
	
	  // if this is a duplex stream mark the writable part as destroyed as well
	  if (this._writableState) {
	    this._writableState.destroyed = true;
	  }
	
	  this._destroy(err || null, function (err) {
	    if (!cb && err) {
	      pna.nextTick(emitErrorNT, _this, err);
	      if (_this._writableState) {
	        _this._writableState.errorEmitted = true;
	      }
	    } else if (cb) {
	      cb(err);
	    }
	  });
	
	  return this;
	}
	
	function undestroy() {
	  if (this._readableState) {
	    this._readableState.destroyed = false;
	    this._readableState.reading = false;
	    this._readableState.ended = false;
	    this._readableState.endEmitted = false;
	  }
	
	  if (this._writableState) {
	    this._writableState.destroyed = false;
	    this._writableState.ended = false;
	    this._writableState.ending = false;
	    this._writableState.finished = false;
	    this._writableState.errorEmitted = false;
	  }
	}
	
	function emitErrorNT(self, err) {
	  self.emit('error', err);
	}
	
	module.exports = {
	  destroy: destroy,
	  undestroy: undestroy
	};

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.
	
	'use strict';
	
	/*<replacement>*/
	
	var pna = __webpack_require__(121);
	/*</replacement>*/
	
	/*<replacement>*/
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    keys.push(key);
	  }return keys;
	};
	/*</replacement>*/
	
	module.exports = Duplex;
	
	/*<replacement>*/
	var util = __webpack_require__(124);
	util.inherits = __webpack_require__(104);
	/*</replacement>*/
	
	var Readable = __webpack_require__(120);
	var Writable = __webpack_require__(130);
	
	util.inherits(Duplex, Readable);
	
	{
	  // avoid scope creep, the keys array can then be collected
	  var keys = objectKeys(Writable.prototype);
	  for (var v = 0; v < keys.length; v++) {
	    var method = keys[v];
	    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
	  }
	}
	
	function Duplex(options) {
	  if (!(this instanceof Duplex)) return new Duplex(options);
	
	  Readable.call(this, options);
	  Writable.call(this, options);
	
	  if (options && options.readable === false) this.readable = false;
	
	  if (options && options.writable === false) this.writable = false;
	
	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
	
	  this.once('end', onend);
	}
	
	Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function () {
	    return this._writableState.highWaterMark;
	  }
	});
	
	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended) return;
	
	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  pna.nextTick(onEndNT, this);
	}
	
	function onEndNT(self) {
	  self.end();
	}
	
	Object.defineProperty(Duplex.prototype, 'destroyed', {
	  get: function () {
	    if (this._readableState === undefined || this._writableState === undefined) {
	      return false;
	    }
	    return this._readableState.destroyed && this._writableState.destroyed;
	  },
	  set: function (value) {
	    // we ignore the value if the stream
	    // has not been initialized yet
	    if (this._readableState === undefined || this._writableState === undefined) {
	      return;
	    }
	
	    // backward compatibility, the user is explicitly
	    // managing destroyed
	    this._readableState.destroyed = value;
	    this._writableState.destroyed = value;
	  }
	});
	
	Duplex.prototype._destroy = function (err, cb) {
	  this.push(null);
	  this.end();
	
	  pna.nextTick(cb, err);
	};

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, setImmediate, global) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	// A bit simpler than readable streams.
	// Implement an async ._write(chunk, encoding, cb), and it'll handle all
	// the drain event emission and buffering.
	
	'use strict';
	
	/*<replacement>*/
	
	var pna = __webpack_require__(121);
	/*</replacement>*/
	
	module.exports = Writable;
	
	/* <replacement> */
	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	  this.next = null;
	}
	
	// It seems a linked list but it is not
	// there will be only 2 of these for each stream
	function CorkedRequest(state) {
	  var _this = this;
	
	  this.next = null;
	  this.entry = null;
	  this.finish = function () {
	    onCorkedFinish(_this, state);
	  };
	}
	/* </replacement> */
	
	/*<replacement>*/
	var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
	/*</replacement>*/
	
	/*<replacement>*/
	var Duplex;
	/*</replacement>*/
	
	Writable.WritableState = WritableState;
	
	/*<replacement>*/
	var util = __webpack_require__(124);
	util.inherits = __webpack_require__(104);
	/*</replacement>*/
	
	/*<replacement>*/
	var internalUtil = {
	  deprecate: __webpack_require__(133)
	};
	/*</replacement>*/
	
	/*<replacement>*/
	var Stream = __webpack_require__(122);
	/*</replacement>*/
	
	/*<replacement>*/
	
	var Buffer = __webpack_require__(123).Buffer;
	var OurUint8Array = global.Uint8Array || function () {};
	function _uint8ArrayToBuffer(chunk) {
	  return Buffer.from(chunk);
	}
	function _isUint8Array(obj) {
	  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
	}
	
	/*</replacement>*/
	
	var destroyImpl = __webpack_require__(128);
	
	util.inherits(Writable, Stream);
	
	function nop() {}
	
	function WritableState(options, stream) {
	  Duplex = Duplex || __webpack_require__(129);
	
	  options = options || {};
	
	  // Duplex streams are both readable and writable, but share
	  // the same options object.
	  // However, some cases require setting options to different
	  // values for the readable and the writable sides of the duplex stream.
	  // These options can be provided separately as readableXXX and writableXXX.
	  var isDuplex = stream instanceof Duplex;
	
	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;
	
	  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
	
	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var writableHwm = options.writableHighWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	
	  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;
	
	  // cast to ints.
	  this.highWaterMark = Math.floor(this.highWaterMark);
	
	  // if _final has been called
	  this.finalCalled = false;
	
	  // drain event flag.
	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;
	
	  // has it been destroyed
	  this.destroyed = false;
	
	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;
	
	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';
	
	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;
	
	  // a flag to see when we're in the middle of a write.
	  this.writing = false;
	
	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;
	
	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;
	
	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;
	
	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function (er) {
	    onwrite(stream, er);
	  };
	
	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;
	
	  // the amount that is being written when _write is called.
	  this.writelen = 0;
	
	  this.bufferedRequest = null;
	  this.lastBufferedRequest = null;
	
	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;
	
	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;
	
	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;
	
	  // count buffered requests
	  this.bufferedRequestCount = 0;
	
	  // allocate the first CorkedRequest, there is always
	  // one allocated and free to use, and we maintain at most two
	  this.corkedRequestsFree = new CorkedRequest(this);
	}
	
	WritableState.prototype.getBuffer = function getBuffer() {
	  var current = this.bufferedRequest;
	  var out = [];
	  while (current) {
	    out.push(current);
	    current = current.next;
	  }
	  return out;
	};
	
	(function () {
	  try {
	    Object.defineProperty(WritableState.prototype, 'buffer', {
	      get: internalUtil.deprecate(function () {
	        return this.getBuffer();
	      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
	    });
	  } catch (_) {}
	})();
	
	// Test _writableState for inheritance to account for Duplex streams,
	// whose prototype chain only points to Readable.
	var realHasInstance;
	if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
	  realHasInstance = Function.prototype[Symbol.hasInstance];
	  Object.defineProperty(Writable, Symbol.hasInstance, {
	    value: function (object) {
	      if (realHasInstance.call(this, object)) return true;
	      if (this !== Writable) return false;
	
	      return object && object._writableState instanceof WritableState;
	    }
	  });
	} else {
	  realHasInstance = function (object) {
	    return object instanceof this;
	  };
	}
	
	function Writable(options) {
	  Duplex = Duplex || __webpack_require__(129);
	
	  // Writable ctor is applied to Duplexes, too.
	  // `realHasInstance` is necessary because using plain `instanceof`
	  // would return false, as no `_writableState` property is attached.
	
	  // Trying to use the custom `instanceof` for Writable here will also break the
	  // Node.js LazyTransform implementation, which has a non-trivial getter for
	  // `_writableState` that would lead to infinite recursion.
	  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
	    return new Writable(options);
	  }
	
	  this._writableState = new WritableState(options, this);
	
	  // legacy.
	  this.writable = true;
	
	  if (options) {
	    if (typeof options.write === 'function') this._write = options.write;
	
	    if (typeof options.writev === 'function') this._writev = options.writev;
	
	    if (typeof options.destroy === 'function') this._destroy = options.destroy;
	
	    if (typeof options.final === 'function') this._final = options.final;
	  }
	
	  Stream.call(this);
	}
	
	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function () {
	  this.emit('error', new Error('Cannot pipe, not readable'));
	};
	
	function writeAfterEnd(stream, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  pna.nextTick(cb, er);
	}
	
	// Checks that a user-supplied chunk is valid, especially for the particular
	// mode the stream is in. Currently this means that `null` is never accepted
	// and undefined/non-string values are only allowed in object mode.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  var er = false;
	
	  if (chunk === null) {
	    er = new TypeError('May not write null values to stream');
	  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  if (er) {
	    stream.emit('error', er);
	    pna.nextTick(cb, er);
	    valid = false;
	  }
	  return valid;
	}
	
	Writable.prototype.write = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;
	  var isBuf = !state.objectMode && _isUint8Array(chunk);
	
	  if (isBuf && !Buffer.isBuffer(chunk)) {
	    chunk = _uint8ArrayToBuffer(chunk);
	  }
	
	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }
	
	  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
	
	  if (typeof cb !== 'function') cb = nop;
	
	  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
	  }
	
	  return ret;
	};
	
	Writable.prototype.cork = function () {
	  var state = this._writableState;
	
	  state.corked++;
	};
	
	Writable.prototype.uncork = function () {
	  var state = this._writableState;
	
	  if (state.corked) {
	    state.corked--;
	
	    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
	  }
	};
	
	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
	  // node::ParseEncoding() requires lower case.
	  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
	  this._writableState.defaultEncoding = encoding;
	  return this;
	};
	
	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
	    chunk = Buffer.from(chunk, encoding);
	  }
	  return chunk;
	}
	
	Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function () {
	    return this._writableState.highWaterMark;
	  }
	});
	
	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
	  if (!isBuf) {
	    var newChunk = decodeChunk(state, chunk, encoding);
	    if (chunk !== newChunk) {
	      isBuf = true;
	      encoding = 'buffer';
	      chunk = newChunk;
	    }
	  }
	  var len = state.objectMode ? 1 : chunk.length;
	
	  state.length += len;
	
	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret) state.needDrain = true;
	
	  if (state.writing || state.corked) {
	    var last = state.lastBufferedRequest;
	    state.lastBufferedRequest = {
	      chunk: chunk,
	      encoding: encoding,
	      isBuf: isBuf,
	      callback: cb,
	      next: null
	    };
	    if (last) {
	      last.next = state.lastBufferedRequest;
	    } else {
	      state.bufferedRequest = state.lastBufferedRequest;
	    }
	    state.bufferedRequestCount += 1;
	  } else {
	    doWrite(stream, state, false, len, chunk, encoding, cb);
	  }
	
	  return ret;
	}
	
	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}
	
	function onwriteError(stream, state, sync, er, cb) {
	  --state.pendingcb;
	
	  if (sync) {
	    // defer the callback if we are being called synchronously
	    // to avoid piling up things on the stack
	    pna.nextTick(cb, er);
	    // this can emit finish, and it will always happen
	    // after error
	    pna.nextTick(finishMaybe, stream, state);
	    stream._writableState.errorEmitted = true;
	    stream.emit('error', er);
	  } else {
	    // the caller expect this to happen before if
	    // it is async
	    cb(er);
	    stream._writableState.errorEmitted = true;
	    stream.emit('error', er);
	    // this can emit finish, but finish must
	    // always follow error
	    finishMaybe(stream, state);
	  }
	}
	
	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}
	
	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;
	
	  onwriteStateUpdate(state);
	
	  if (er) onwriteError(stream, state, sync, er, cb);else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(state);
	
	    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
	      clearBuffer(stream, state);
	    }
	
	    if (sync) {
	      /*<replacement>*/
	      asyncWrite(afterWrite, stream, state, finished, cb);
	      /*</replacement>*/
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}
	
	function afterWrite(stream, state, finished, cb) {
	  if (!finished) onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}
	
	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}
	
	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	  var entry = state.bufferedRequest;
	
	  if (stream._writev && entry && entry.next) {
	    // Fast case, write everything using _writev()
	    var l = state.bufferedRequestCount;
	    var buffer = new Array(l);
	    var holder = state.corkedRequestsFree;
	    holder.entry = entry;
	
	    var count = 0;
	    var allBuffers = true;
	    while (entry) {
	      buffer[count] = entry;
	      if (!entry.isBuf) allBuffers = false;
	      entry = entry.next;
	      count += 1;
	    }
	    buffer.allBuffers = allBuffers;
	
	    doWrite(stream, state, true, state.length, buffer, '', holder.finish);
	
	    // doWrite is almost always async, defer these to save a bit of time
	    // as the hot path ends with doWrite
	    state.pendingcb++;
	    state.lastBufferedRequest = null;
	    if (holder.next) {
	      state.corkedRequestsFree = holder.next;
	      holder.next = null;
	    } else {
	      state.corkedRequestsFree = new CorkedRequest(state);
	    }
	    state.bufferedRequestCount = 0;
	  } else {
	    // Slow case, write chunks one-by-one
	    while (entry) {
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;
	
	      doWrite(stream, state, false, len, chunk, encoding, cb);
	      entry = entry.next;
	      state.bufferedRequestCount--;
	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        break;
	      }
	    }
	
	    if (entry === null) state.lastBufferedRequest = null;
	  }
	
	  state.bufferedRequest = entry;
	  state.bufferProcessing = false;
	}
	
	Writable.prototype._write = function (chunk, encoding, cb) {
	  cb(new Error('_write() is not implemented'));
	};
	
	Writable.prototype._writev = null;
	
	Writable.prototype.end = function (chunk, encoding, cb) {
	  var state = this._writableState;
	
	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }
	
	  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);
	
	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }
	
	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished) endWritable(this, state, cb);
	};
	
	function needFinish(state) {
	  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
	}
	function callFinal(stream, state) {
	  stream._final(function (err) {
	    state.pendingcb--;
	    if (err) {
	      stream.emit('error', err);
	    }
	    state.prefinished = true;
	    stream.emit('prefinish');
	    finishMaybe(stream, state);
	  });
	}
	function prefinish(stream, state) {
	  if (!state.prefinished && !state.finalCalled) {
	    if (typeof stream._final === 'function') {
	      state.pendingcb++;
	      state.finalCalled = true;
	      pna.nextTick(callFinal, stream, state);
	    } else {
	      state.prefinished = true;
	      stream.emit('prefinish');
	    }
	  }
	}
	
	function finishMaybe(stream, state) {
	  var need = needFinish(state);
	  if (need) {
	    prefinish(stream, state);
	    if (state.pendingcb === 0) {
	      state.finished = true;
	      stream.emit('finish');
	    }
	  }
	  return need;
	}
	
	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
	  }
	  state.ended = true;
	  stream.writable = false;
	}
	
	function onCorkedFinish(corkReq, state, err) {
	  var entry = corkReq.entry;
	  corkReq.entry = null;
	  while (entry) {
	    var cb = entry.callback;
	    state.pendingcb--;
	    cb(err);
	    entry = entry.next;
	  }
	  if (state.corkedRequestsFree) {
	    state.corkedRequestsFree.next = corkReq;
	  } else {
	    state.corkedRequestsFree = corkReq;
	  }
	}
	
	Object.defineProperty(Writable.prototype, 'destroyed', {
	  get: function () {
	    if (this._writableState === undefined) {
	      return false;
	    }
	    return this._writableState.destroyed;
	  },
	  set: function (value) {
	    // we ignore the value if the stream
	    // has not been initialized yet
	    if (!this._writableState) {
	      return;
	    }
	
	    // backward compatibility, the user is explicitly
	    // managing destroyed
	    this._writableState.destroyed = value;
	  }
	});
	
	Writable.prototype.destroy = destroyImpl.destroy;
	Writable.prototype._undestroy = destroyImpl.undestroy;
	Writable.prototype._destroy = function (err, cb) {
	  this.end();
	  cb(err);
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90), __webpack_require__(131).setImmediate, (function() { return this; }())))

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
	            (typeof self !== "undefined" && self) ||
	            window;
	var apply = Function.prototype.apply;
	
	// DOM APIs, for completeness
	
	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) {
	  if (timeout) {
	    timeout.close();
	  }
	};
	
	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(scope, this._id);
	};
	
	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};
	
	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};
	
	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);
	
	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};
	
	// setimmediate attaches itself to the global object
	__webpack_require__(132);
	// On some exotic environments, it's not clear which object `setimmediate` was
	// able to install onto.  Search each possibility in the same order as the
	// `setimmediate` library.
	exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
	                       (typeof global !== "undefined" && global.setImmediate) ||
	                       (this && this.setImmediate);
	exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
	                         (typeof global !== "undefined" && global.clearImmediate) ||
	                         (this && this.clearImmediate);
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
	    "use strict";
	
	    if (global.setImmediate) {
	        return;
	    }
	
	    var nextHandle = 1; // Spec says greater than zero
	    var tasksByHandle = {};
	    var currentlyRunningATask = false;
	    var doc = global.document;
	    var registerImmediate;
	
	    function setImmediate(callback) {
	      // Callback can either be a function or a string
	      if (typeof callback !== "function") {
	        callback = new Function("" + callback);
	      }
	      // Copy function arguments
	      var args = new Array(arguments.length - 1);
	      for (var i = 0; i < args.length; i++) {
	          args[i] = arguments[i + 1];
	      }
	      // Store and register the task
	      var task = { callback: callback, args: args };
	      tasksByHandle[nextHandle] = task;
	      registerImmediate(nextHandle);
	      return nextHandle++;
	    }
	
	    function clearImmediate(handle) {
	        delete tasksByHandle[handle];
	    }
	
	    function run(task) {
	        var callback = task.callback;
	        var args = task.args;
	        switch (args.length) {
	        case 0:
	            callback();
	            break;
	        case 1:
	            callback(args[0]);
	            break;
	        case 2:
	            callback(args[0], args[1]);
	            break;
	        case 3:
	            callback(args[0], args[1], args[2]);
	            break;
	        default:
	            callback.apply(undefined, args);
	            break;
	        }
	    }
	
	    function runIfPresent(handle) {
	        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
	        // So if we're currently running a task, we'll need to delay this invocation.
	        if (currentlyRunningATask) {
	            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
	            // "too much recursion" error.
	            setTimeout(runIfPresent, 0, handle);
	        } else {
	            var task = tasksByHandle[handle];
	            if (task) {
	                currentlyRunningATask = true;
	                try {
	                    run(task);
	                } finally {
	                    clearImmediate(handle);
	                    currentlyRunningATask = false;
	                }
	            }
	        }
	    }
	
	    function installNextTickImplementation() {
	        registerImmediate = function(handle) {
	            process.nextTick(function () { runIfPresent(handle); });
	        };
	    }
	
	    function canUsePostMessage() {
	        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
	        // where `global.postMessage` means something completely different and can't be used for this purpose.
	        if (global.postMessage && !global.importScripts) {
	            var postMessageIsAsynchronous = true;
	            var oldOnMessage = global.onmessage;
	            global.onmessage = function() {
	                postMessageIsAsynchronous = false;
	            };
	            global.postMessage("", "*");
	            global.onmessage = oldOnMessage;
	            return postMessageIsAsynchronous;
	        }
	    }
	
	    function installPostMessageImplementation() {
	        // Installs an event handler on `global` for the `message` event: see
	        // * https://developer.mozilla.org/en/DOM/window.postMessage
	        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages
	
	        var messagePrefix = "setImmediate$" + Math.random() + "$";
	        var onGlobalMessage = function(event) {
	            if (event.source === global &&
	                typeof event.data === "string" &&
	                event.data.indexOf(messagePrefix) === 0) {
	                runIfPresent(+event.data.slice(messagePrefix.length));
	            }
	        };
	
	        if (global.addEventListener) {
	            global.addEventListener("message", onGlobalMessage, false);
	        } else {
	            global.attachEvent("onmessage", onGlobalMessage);
	        }
	
	        registerImmediate = function(handle) {
	            global.postMessage(messagePrefix + handle, "*");
	        };
	    }
	
	    function installMessageChannelImplementation() {
	        var channel = new MessageChannel();
	        channel.port1.onmessage = function(event) {
	            var handle = event.data;
	            runIfPresent(handle);
	        };
	
	        registerImmediate = function(handle) {
	            channel.port2.postMessage(handle);
	        };
	    }
	
	    function installReadyStateChangeImplementation() {
	        var html = doc.documentElement;
	        registerImmediate = function(handle) {
	            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
	            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
	            var script = doc.createElement("script");
	            script.onreadystatechange = function () {
	                runIfPresent(handle);
	                script.onreadystatechange = null;
	                html.removeChild(script);
	                script = null;
	            };
	            html.appendChild(script);
	        };
	    }
	
	    function installSetTimeoutImplementation() {
	        registerImmediate = function(handle) {
	            setTimeout(runIfPresent, 0, handle);
	        };
	    }
	
	    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
	    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
	    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;
	
	    // Don't get fooled by e.g. browserify environments.
	    if ({}.toString.call(global.process) === "[object process]") {
	        // For Node.js before 0.9
	        installNextTickImplementation();
	
	    } else if (canUsePostMessage()) {
	        // For non-IE10 modern browsers
	        installPostMessageImplementation();
	
	    } else if (global.MessageChannel) {
	        // For web workers, where supported
	        installMessageChannelImplementation();
	
	    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
	        // For IE 6–8
	        installReadyStateChangeImplementation();
	
	    } else {
	        // For older browsers
	        installSetTimeoutImplementation();
	    }
	
	    attachTo.setImmediate = setImmediate;
	    attachTo.clearImmediate = clearImmediate;
	}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(90)))

/***/ }),
/* 133 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {
	/**
	 * Module exports.
	 */
	
	module.exports = deprecate;
	
	/**
	 * Mark that a method should not be used.
	 * Returns a modified function which warns once by default.
	 *
	 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
	 *
	 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
	 * will throw an Error when invoked.
	 *
	 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
	 * will invoke `console.trace()` instead of `console.error()`.
	 *
	 * @param {Function} fn - the function to deprecate
	 * @param {String} msg - the string to print to the console when `fn` is invoked
	 * @returns {Function} a new "deprecated" version of `fn`
	 * @api public
	 */
	
	function deprecate (fn, msg) {
	  if (config('noDeprecation')) {
	    return fn;
	  }
	
	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (config('throwDeprecation')) {
	        throw new Error(msg);
	      } else if (config('traceDeprecation')) {
	        console.trace(msg);
	      } else {
	        console.warn(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }
	
	  return deprecated;
	}
	
	/**
	 * Checks `localStorage` for boolean values for the given `name`.
	 *
	 * @param {String} name
	 * @returns {Boolean}
	 * @api private
	 */
	
	function config (name) {
	  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
	  try {
	    if (!global.localStorage) return false;
	  } catch (_) {
	    return false;
	  }
	  var val = global.localStorage[name];
	  if (null == val) return false;
	  return String(val).toLowerCase() === 'true';
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	/*<replacement>*/
	
	var Buffer = __webpack_require__(123).Buffer;
	/*</replacement>*/
	
	var isEncoding = Buffer.isEncoding || function (encoding) {
	  encoding = '' + encoding;
	  switch (encoding && encoding.toLowerCase()) {
	    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
	      return true;
	    default:
	      return false;
	  }
	};
	
	function _normalizeEncoding(enc) {
	  if (!enc) return 'utf8';
	  var retried;
	  while (true) {
	    switch (enc) {
	      case 'utf8':
	      case 'utf-8':
	        return 'utf8';
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return 'utf16le';
	      case 'latin1':
	      case 'binary':
	        return 'latin1';
	      case 'base64':
	      case 'ascii':
	      case 'hex':
	        return enc;
	      default:
	        if (retried) return; // undefined
	        enc = ('' + enc).toLowerCase();
	        retried = true;
	    }
	  }
	};
	
	// Do not cache `Buffer.isEncoding` when checking encoding names as some
	// modules monkey-patch it to support additional encodings
	function normalizeEncoding(enc) {
	  var nenc = _normalizeEncoding(enc);
	  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
	  return nenc || enc;
	}
	
	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters.
	exports.StringDecoder = StringDecoder;
	function StringDecoder(encoding) {
	  this.encoding = normalizeEncoding(encoding);
	  var nb;
	  switch (this.encoding) {
	    case 'utf16le':
	      this.text = utf16Text;
	      this.end = utf16End;
	      nb = 4;
	      break;
	    case 'utf8':
	      this.fillLast = utf8FillLast;
	      nb = 4;
	      break;
	    case 'base64':
	      this.text = base64Text;
	      this.end = base64End;
	      nb = 3;
	      break;
	    default:
	      this.write = simpleWrite;
	      this.end = simpleEnd;
	      return;
	  }
	  this.lastNeed = 0;
	  this.lastTotal = 0;
	  this.lastChar = Buffer.allocUnsafe(nb);
	}
	
	StringDecoder.prototype.write = function (buf) {
	  if (buf.length === 0) return '';
	  var r;
	  var i;
	  if (this.lastNeed) {
	    r = this.fillLast(buf);
	    if (r === undefined) return '';
	    i = this.lastNeed;
	    this.lastNeed = 0;
	  } else {
	    i = 0;
	  }
	  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
	  return r || '';
	};
	
	StringDecoder.prototype.end = utf8End;
	
	// Returns only complete characters in a Buffer
	StringDecoder.prototype.text = utf8Text;
	
	// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
	StringDecoder.prototype.fillLast = function (buf) {
	  if (this.lastNeed <= buf.length) {
	    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
	    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
	  }
	  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
	  this.lastNeed -= buf.length;
	};
	
	// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
	// continuation byte. If an invalid byte is detected, -2 is returned.
	function utf8CheckByte(byte) {
	  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
	  return byte >> 6 === 0x02 ? -1 : -2;
	}
	
	// Checks at most 3 bytes at the end of a Buffer in order to detect an
	// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
	// needed to complete the UTF-8 character (if applicable) are returned.
	function utf8CheckIncomplete(self, buf, i) {
	  var j = buf.length - 1;
	  if (j < i) return 0;
	  var nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) self.lastNeed = nb - 1;
	    return nb;
	  }
	  if (--j < i || nb === -2) return 0;
	  nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) self.lastNeed = nb - 2;
	    return nb;
	  }
	  if (--j < i || nb === -2) return 0;
	  nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) {
	      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
	    }
	    return nb;
	  }
	  return 0;
	}
	
	// Validates as many continuation bytes for a multi-byte UTF-8 character as
	// needed or are available. If we see a non-continuation byte where we expect
	// one, we "replace" the validated continuation bytes we've seen so far with
	// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
	// behavior. The continuation byte check is included three times in the case
	// where all of the continuation bytes for a character exist in the same buffer.
	// It is also done this way as a slight performance increase instead of using a
	// loop.
	function utf8CheckExtraBytes(self, buf, p) {
	  if ((buf[0] & 0xC0) !== 0x80) {
	    self.lastNeed = 0;
	    return '\ufffd';
	  }
	  if (self.lastNeed > 1 && buf.length > 1) {
	    if ((buf[1] & 0xC0) !== 0x80) {
	      self.lastNeed = 1;
	      return '\ufffd';
	    }
	    if (self.lastNeed > 2 && buf.length > 2) {
	      if ((buf[2] & 0xC0) !== 0x80) {
	        self.lastNeed = 2;
	        return '\ufffd';
	      }
	    }
	  }
	}
	
	// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
	function utf8FillLast(buf) {
	  var p = this.lastTotal - this.lastNeed;
	  var r = utf8CheckExtraBytes(this, buf, p);
	  if (r !== undefined) return r;
	  if (this.lastNeed <= buf.length) {
	    buf.copy(this.lastChar, p, 0, this.lastNeed);
	    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
	  }
	  buf.copy(this.lastChar, p, 0, buf.length);
	  this.lastNeed -= buf.length;
	}
	
	// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
	// partial character, the character's bytes are buffered until the required
	// number of bytes are available.
	function utf8Text(buf, i) {
	  var total = utf8CheckIncomplete(this, buf, i);
	  if (!this.lastNeed) return buf.toString('utf8', i);
	  this.lastTotal = total;
	  var end = buf.length - (total - this.lastNeed);
	  buf.copy(this.lastChar, 0, end);
	  return buf.toString('utf8', i, end);
	}
	
	// For UTF-8, a replacement character is added when ending on a partial
	// character.
	function utf8End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) return r + '\ufffd';
	  return r;
	}
	
	// UTF-16LE typically needs two bytes per character, but even if we have an even
	// number of bytes available, we need to check if we end on a leading/high
	// surrogate. In that case, we need to wait for the next two bytes in order to
	// decode the last character properly.
	function utf16Text(buf, i) {
	  if ((buf.length - i) % 2 === 0) {
	    var r = buf.toString('utf16le', i);
	    if (r) {
	      var c = r.charCodeAt(r.length - 1);
	      if (c >= 0xD800 && c <= 0xDBFF) {
	        this.lastNeed = 2;
	        this.lastTotal = 4;
	        this.lastChar[0] = buf[buf.length - 2];
	        this.lastChar[1] = buf[buf.length - 1];
	        return r.slice(0, -1);
	      }
	    }
	    return r;
	  }
	  this.lastNeed = 1;
	  this.lastTotal = 2;
	  this.lastChar[0] = buf[buf.length - 1];
	  return buf.toString('utf16le', i, buf.length - 1);
	}
	
	// For UTF-16LE we do not explicitly append special replacement characters if we
	// end on a partial character, we simply let v8 handle that.
	function utf16End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) {
	    var end = this.lastTotal - this.lastNeed;
	    return r + this.lastChar.toString('utf16le', 0, end);
	  }
	  return r;
	}
	
	function base64Text(buf, i) {
	  var n = (buf.length - i) % 3;
	  if (n === 0) return buf.toString('base64', i);
	  this.lastNeed = 3 - n;
	  this.lastTotal = 3;
	  if (n === 1) {
	    this.lastChar[0] = buf[buf.length - 1];
	  } else {
	    this.lastChar[0] = buf[buf.length - 2];
	    this.lastChar[1] = buf[buf.length - 1];
	  }
	  return buf.toString('base64', i, buf.length - n);
	}
	
	function base64End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
	  return r;
	}
	
	// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
	function simpleWrite(buf) {
	  return buf.toString(this.encoding);
	}
	
	function simpleEnd(buf) {
	  return buf && buf.length ? this.write(buf) : '';
	}

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.
	
	'use strict';
	
	module.exports = Transform;
	
	var Duplex = __webpack_require__(129);
	
	/*<replacement>*/
	var util = __webpack_require__(124);
	util.inherits = __webpack_require__(104);
	/*</replacement>*/
	
	util.inherits(Transform, Duplex);
	
	function afterTransform(er, data) {
	  var ts = this._transformState;
	  ts.transforming = false;
	
	  var cb = ts.writecb;
	
	  if (!cb) {
	    return this.emit('error', new Error('write callback called multiple times'));
	  }
	
	  ts.writechunk = null;
	  ts.writecb = null;
	
	  if (data != null) // single equals check for both `null` and `undefined`
	    this.push(data);
	
	  cb(er);
	
	  var rs = this._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    this._read(rs.highWaterMark);
	  }
	}
	
	function Transform(options) {
	  if (!(this instanceof Transform)) return new Transform(options);
	
	  Duplex.call(this, options);
	
	  this._transformState = {
	    afterTransform: afterTransform.bind(this),
	    needTransform: false,
	    transforming: false,
	    writecb: null,
	    writechunk: null,
	    writeencoding: null
	  };
	
	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;
	
	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;
	
	  if (options) {
	    if (typeof options.transform === 'function') this._transform = options.transform;
	
	    if (typeof options.flush === 'function') this._flush = options.flush;
	  }
	
	  // When the writable side finishes, then flush out anything remaining.
	  this.on('prefinish', prefinish);
	}
	
	function prefinish() {
	  var _this = this;
	
	  if (typeof this._flush === 'function') {
	    this._flush(function (er, data) {
	      done(_this, er, data);
	    });
	  } else {
	    done(this, null, null);
	  }
	}
	
	Transform.prototype.push = function (chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};
	
	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function (chunk, encoding, cb) {
	  throw new Error('_transform() is not implemented');
	};
	
	Transform.prototype._write = function (chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
	  }
	};
	
	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function (n) {
	  var ts = this._transformState;
	
	  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};
	
	Transform.prototype._destroy = function (err, cb) {
	  var _this2 = this;
	
	  Duplex.prototype._destroy.call(this, err, function (err2) {
	    cb(err2);
	    _this2.emit('close');
	  });
	};
	
	function done(stream, er, data) {
	  if (er) return stream.emit('error', er);
	
	  if (data != null) // single equals check for both `null` and `undefined`
	    stream.push(data);
	
	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');
	
	  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');
	
	  return stream.push(null);
	}

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.
	
	'use strict';
	
	module.exports = PassThrough;
	
	var Transform = __webpack_require__(135);
	
	/*<replacement>*/
	var util = __webpack_require__(124);
	util.inherits = __webpack_require__(104);
	/*</replacement>*/
	
	util.inherits(PassThrough, Transform);
	
	function PassThrough(options) {
	  if (!(this instanceof PassThrough)) return new PassThrough(options);
	
	  Transform.call(this, options);
	}
	
	PassThrough.prototype._transform = function (chunk, encoding, cb) {
	  cb(null, chunk);
	};

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(130);


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(129);


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(119).Transform


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(119).PassThrough


/***/ }),
/* 141 */
/***/ (function(module, exports) {

	exports['aes-128-ecb'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 0,
	  mode: 'ECB',
	  type: 'block'
	};
	exports['aes-192-ecb'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 0,
	  mode: 'ECB',
	  type: 'block'
	};
	exports['aes-256-ecb'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 0,
	  mode: 'ECB',
	  type: 'block'
	};
	exports['aes-128-cbc'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 16,
	  mode: 'CBC',
	  type: 'block'
	};
	exports['aes-192-cbc'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 16,
	  mode: 'CBC',
	  type: 'block'
	};
	exports['aes-256-cbc'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 16,
	  mode: 'CBC',
	  type: 'block'
	};
	exports['aes128'] = exports['aes-128-cbc'];
	exports['aes192'] = exports['aes-192-cbc'];
	exports['aes256'] = exports['aes-256-cbc'];
	exports['aes-128-cfb'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 16,
	  mode: 'CFB',
	  type: 'stream'
	};
	exports['aes-192-cfb'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 16,
	  mode: 'CFB',
	  type: 'stream'
	};
	exports['aes-256-cfb'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 16,
	  mode: 'CFB',
	  type: 'stream'
	};
	exports['aes-128-ofb'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 16,
	  mode: 'OFB',
	  type: 'stream'
	};
	exports['aes-192-ofb'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 16,
	  mode: 'OFB',
	  type: 'stream'
	};
	exports['aes-256-ofb'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 16,
	  mode: 'OFB',
	  type: 'stream'
	};
	exports['aes-128-ctr'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 16,
	  mode: 'CTR',
	  type: 'stream'
	};
	exports['aes-192-ctr'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 16,
	  mode: 'CTR',
	  type: 'stream'
	};
	exports['aes-256-ctr'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 16,
	  mode: 'CTR',
	  type: 'stream'
	};

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {
	module.exports = function (crypto, password, keyLen, ivLen) {
	  keyLen = keyLen/8;
	  ivLen = ivLen || 0;
	  var ki = 0;
	  var ii = 0;
	  var key = new Buffer(keyLen);
	  var iv = new Buffer(ivLen);
	  var addmd = 0;
	  var md, md_buf;
	  var i;
	  while (true) {
	    md = crypto.createHash('md5');
	    if(addmd++ > 0) {
	       md.update(md_buf);
	    }
	    md.update(password);
	    md_buf = md.digest();
	    i = 0;
	    if(keyLen > 0) {
	      while(true) {
	        if(keyLen === 0) {
	          break;
	        }
	        if(i === md_buf.length) {
	          break;
	        }
	        key[ki++] = md_buf[i];
	        keyLen--;
	        i++;
	       }
	    }
	    if(ivLen > 0 && i !== md_buf.length) {
	      while(true) {
	        if(ivLen === 0) {
	          break;
	        }
	        if(i === md_buf.length) {
	          break;
	        }
	       iv[ii++] = md_buf[i];
	       ivLen--;
	       i++;
	     }
	   }
	   if(keyLen === 0 && ivLen === 0) {
	      break;
	    }
	  }
	  for(i=0;i<md_buf.length;i++) {
	    md_buf[i] = 0;
	  }
	  return {
	    key: key,
	    iv: iv
	  };
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(92).Buffer))

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var aes = __webpack_require__(115);
	var Transform = __webpack_require__(116);
	var inherits = __webpack_require__(104);
	
	inherits(StreamCipher, Transform);
	module.exports = StreamCipher;
	function StreamCipher(mode, key, iv, decrypt) {
	  if (!(this instanceof StreamCipher)) {
	    return new StreamCipher(mode, key, iv);
	  }
	  Transform.call(this);
	  this._cipher = new aes.AES(key);
	  this._prev = new Buffer(iv.length);
	  this._cache = new Buffer('');
	  this._secCache = new Buffer('');
	  this._decrypt = decrypt;
	  iv.copy(this._prev);
	  this._mode = mode;
	}
	StreamCipher.prototype._transform = function (chunk, _, next) {
	  next(null, this._mode.encrypt(this, chunk, this._decrypt));
	};
	StreamCipher.prototype._flush = function (next) {
	  this._cipher.scrub();
	  next();
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(92).Buffer))

/***/ }),
/* 144 */
/***/ (function(module, exports) {

	exports.encrypt = function (self, block) {
	  return self._cipher.encryptBlock(block);
	};
	exports.decrypt = function (self, block) {
	  return self._cipher.decryptBlock(block);
	};

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

	var xor = __webpack_require__(146);
	exports.encrypt = function (self, block) {
	  var data = xor(block, self._prev);
	  self._prev = self._cipher.encryptBlock(data);
	  return self._prev;
	};
	exports.decrypt = function (self, block) {
	  var pad = self._prev;
	  self._prev = block;
	  var out = self._cipher.decryptBlock(block);
	  return xor(out, pad);
	};

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = xor;
	function xor(a, b) {
	  var len = Math.min(a.length, b.length);
	  var out = new Buffer(len);
	  var i = -1;
	  while (++i < len) {
	    out.writeUInt8(a[i] ^ b[i], i);
	  }
	  return out;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(92).Buffer))

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__(146);
	exports.encrypt = function (self, data, decrypt) {
	  var out = new Buffer('');
	  var len;
	  while (data.length) {
	    if (self._cache.length === 0) {
	      self._cache = self._cipher.encryptBlock(self._prev);
	      self._prev = new Buffer('');
	    }
	    if (self._cache.length <= data.length) {
	      len = self._cache.length;
	      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)]);
	      data = data.slice(len);
	    } else {
	      out = Buffer.concat([out, encryptStart(self, data, decrypt)]);
	      break;
	    }
	  }
	  return out;
	};
	function encryptStart(self, data, decrypt) {
	  var len = data.length;
	  var out = xor(data, self._cache);
	  self._cache = self._cache.slice(len);
	  self._prev = Buffer.concat([self._prev, decrypt?data:out]);
	  return out;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(92).Buffer))

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__(146);
	function getBlock(self) {
	  self._prev = self._cipher.encryptBlock(self._prev);
	  return self._prev;
	}
	exports.encrypt = function (self, chunk) {
	  while (self._cache.length < chunk.length) {
	    self._cache = Buffer.concat([self._cache, getBlock(self)]);
	  }
	  var pad = self._cache.slice(0, chunk.length);
	  self._cache = self._cache.slice(chunk.length);
	  return xor(chunk, pad);
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(92).Buffer))

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__(146);
	function getBlock(self) {
	  var out = self._cipher.encryptBlock(self._prev);
	  incr32(self._prev);
	  return out;
	}
	exports.encrypt = function (self, chunk) {
	  while (self._cache.length < chunk.length) {
	    self._cache = Buffer.concat([self._cache, getBlock(self)]);
	  }
	  var pad = self._cache.slice(0, chunk.length);
	  self._cache = self._cache.slice(chunk.length);
	  return xor(chunk, pad);
	};
	function incr32(iv) {
	  var len = iv.length;
	  var item;
	  while (len--) {
	    item = iv.readUInt8(len);
	    if (item === 255) {
	      iv.writeUInt8(0, len);
	    } else {
	      item++;
	      iv.writeUInt8(item, len);
	      break;
	    }
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(92).Buffer))

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var aes = __webpack_require__(115);
	var Transform = __webpack_require__(116);
	var inherits = __webpack_require__(104);
	var modes = __webpack_require__(141);
	var StreamCipher = __webpack_require__(143);
	var ebtk = __webpack_require__(142);
	
	inherits(Decipher, Transform);
	function Decipher(mode, key, iv) {
	  if (!(this instanceof Decipher)) {
	    return new Decipher(mode, key, iv);
	  }
	  Transform.call(this);
	  this._cache = new Splitter();
	  this._last = void 0;
	  this._cipher = new aes.AES(key);
	  this._prev = new Buffer(iv.length);
	  iv.copy(this._prev);
	  this._mode = mode;
	}
	Decipher.prototype._transform = function (data, _, next) {
	  this._cache.add(data);
	  var chunk;
	  var thing;
	  while ((chunk = this._cache.get())) {
	    thing = this._mode.decrypt(this, chunk);
	    this.push(thing);
	  }
	  next();
	};
	Decipher.prototype._flush = function (next) {
	  var chunk = this._cache.flush();
	  if (!chunk) {
	    return next;
	  }
	
	  this.push(unpad(this._mode.decrypt(this, chunk)));
	
	  next();
	};
	
	function Splitter() {
	   if (!(this instanceof Splitter)) {
	    return new Splitter();
	  }
	  this.cache = new Buffer('');
	}
	Splitter.prototype.add = function (data) {
	  this.cache = Buffer.concat([this.cache, data]);
	};
	
	Splitter.prototype.get = function () {
	  if (this.cache.length > 16) {
	    var out = this.cache.slice(0, 16);
	    this.cache = this.cache.slice(16);
	    return out;
	  }
	  return null;
	};
	Splitter.prototype.flush = function () {
	  if (this.cache.length) {
	    return this.cache;
	  }
	};
	function unpad(last) {
	  var padded = last[15];
	  if (padded === 16) {
	    return;
	  }
	  return last.slice(0, 16 - padded);
	}
	
	var modelist = {
	  ECB: __webpack_require__(144),
	  CBC: __webpack_require__(145),
	  CFB: __webpack_require__(147),
	  OFB: __webpack_require__(148),
	  CTR: __webpack_require__(149)
	};
	
	module.exports = function (crypto) {
	  function createDecipheriv(suite, password, iv) {
	    var config = modes[suite];
	    if (!config) {
	      throw new TypeError('invalid suite type');
	    }
	    if (typeof iv === 'string') {
	      iv = new Buffer(iv);
	    }
	    if (typeof password === 'string') {
	      password = new Buffer(password);
	    }
	    if (password.length !== config.key/8) {
	      throw new TypeError('invalid key length ' + password.length);
	    }
	    if (iv.length !== config.iv) {
	      throw new TypeError('invalid iv length ' + iv.length);
	    }
	    if (config.type === 'stream') {
	      return new StreamCipher(modelist[config.mode], password, iv, true);
	    }
	    return new Decipher(modelist[config.mode], password, iv);
	  }
	
	  function createDecipher (suite, password) {
	    var config = modes[suite];
	    if (!config) {
	      throw new TypeError('invalid suite type');
	    }
	    var keys = ebtk(crypto, password, config.key, config.iv);
	    return createDecipheriv(suite, keys.key, keys.iv);
	  }
	  return {
	    createDecipher: createDecipher,
	    createDecipheriv: createDecipheriv
	  };
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(92).Buffer))

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var ClientRequest = __webpack_require__(152)
	var response = __webpack_require__(154)
	var extend = __webpack_require__(156)
	var statusCodes = __webpack_require__(157)
	var url = __webpack_require__(158)
	
	var http = exports
	
	http.request = function (opts, cb) {
		if (typeof opts === 'string')
			opts = url.parse(opts)
		else
			opts = extend(opts)
	
		// Normally, the page is loaded from http or https, so not specifying a protocol
		// will result in a (valid) protocol-relative url. However, this won't work if
		// the protocol is something else, like 'file:'
		var defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : ''
	
		var protocol = opts.protocol || defaultProtocol
		var host = opts.hostname || opts.host
		var port = opts.port
		var path = opts.path || '/'
	
		// Necessary for IPv6 addresses
		if (host && host.indexOf(':') !== -1)
			host = '[' + host + ']'
	
		// This may be a relative url. The browser should always be able to interpret it correctly.
		opts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path
		opts.method = (opts.method || 'GET').toUpperCase()
		opts.headers = opts.headers || {}
	
		// Also valid opts.auth, opts.mode
	
		var req = new ClientRequest(opts)
		if (cb)
			req.on('response', cb)
		return req
	}
	
	http.get = function get (opts, cb) {
		var req = http.request(opts, cb)
		req.end()
		return req
	}
	
	http.ClientRequest = ClientRequest
	http.IncomingMessage = response.IncomingMessage
	
	http.Agent = function () {}
	http.Agent.defaultMaxSockets = 4
	
	http.globalAgent = new http.Agent()
	
	http.STATUS_CODES = statusCodes
	
	http.METHODS = [
		'CHECKOUT',
		'CONNECT',
		'COPY',
		'DELETE',
		'GET',
		'HEAD',
		'LOCK',
		'M-SEARCH',
		'MERGE',
		'MKACTIVITY',
		'MKCOL',
		'MOVE',
		'NOTIFY',
		'OPTIONS',
		'PATCH',
		'POST',
		'PROPFIND',
		'PROPPATCH',
		'PURGE',
		'PUT',
		'REPORT',
		'SEARCH',
		'SUBSCRIBE',
		'TRACE',
		'UNLOCK',
		'UNSUBSCRIBE'
	]
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, global, process) {var capability = __webpack_require__(153)
	var inherits = __webpack_require__(104)
	var response = __webpack_require__(154)
	var stream = __webpack_require__(119)
	var toArrayBuffer = __webpack_require__(155)
	
	var IncomingMessage = response.IncomingMessage
	var rStates = response.readyStates
	
	function decideMode (preferBinary, useFetch) {
		if (capability.fetch && useFetch) {
			return 'fetch'
		} else if (capability.mozchunkedarraybuffer) {
			return 'moz-chunked-arraybuffer'
		} else if (capability.msstream) {
			return 'ms-stream'
		} else if (capability.arraybuffer && preferBinary) {
			return 'arraybuffer'
		} else if (capability.vbArray && preferBinary) {
			return 'text:vbarray'
		} else {
			return 'text'
		}
	}
	
	var ClientRequest = module.exports = function (opts) {
		var self = this
		stream.Writable.call(self)
	
		self._opts = opts
		self._body = []
		self._headers = {}
		if (opts.auth)
			self.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64'))
		Object.keys(opts.headers).forEach(function (name) {
			self.setHeader(name, opts.headers[name])
		})
	
		var preferBinary
		var useFetch = true
		if (opts.mode === 'disable-fetch' || ('requestTimeout' in opts && !capability.abortController)) {
			// If the use of XHR should be preferred. Not typically needed.
			useFetch = false
			preferBinary = true
		} else if (opts.mode === 'prefer-streaming') {
			// If streaming is a high priority but binary compatibility and
			// the accuracy of the 'content-type' header aren't
			preferBinary = false
		} else if (opts.mode === 'allow-wrong-content-type') {
			// If streaming is more important than preserving the 'content-type' header
			preferBinary = !capability.overrideMimeType
		} else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {
			// Use binary if text streaming may corrupt data or the content-type header, or for speed
			preferBinary = true
		} else {
			throw new Error('Invalid value for opts.mode')
		}
		self._mode = decideMode(preferBinary, useFetch)
		self._fetchTimer = null
	
		self.on('finish', function () {
			self._onFinish()
		})
	}
	
	inherits(ClientRequest, stream.Writable)
	
	ClientRequest.prototype.setHeader = function (name, value) {
		var self = this
		var lowerName = name.toLowerCase()
		// This check is not necessary, but it prevents warnings from browsers about setting unsafe
		// headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
		// http-browserify did it, so I will too.
		if (unsafeHeaders.indexOf(lowerName) !== -1)
			return
	
		self._headers[lowerName] = {
			name: name,
			value: value
		}
	}
	
	ClientRequest.prototype.getHeader = function (name) {
		var header = this._headers[name.toLowerCase()]
		if (header)
			return header.value
		return null
	}
	
	ClientRequest.prototype.removeHeader = function (name) {
		var self = this
		delete self._headers[name.toLowerCase()]
	}
	
	ClientRequest.prototype._onFinish = function () {
		var self = this
	
		if (self._destroyed)
			return
		var opts = self._opts
	
		var headersObj = self._headers
		var body = null
		if (opts.method !== 'GET' && opts.method !== 'HEAD') {
			if (capability.arraybuffer) {
				body = toArrayBuffer(Buffer.concat(self._body))
			} else if (capability.blobConstructor) {
				body = new global.Blob(self._body.map(function (buffer) {
					return toArrayBuffer(buffer)
				}), {
					type: (headersObj['content-type'] || {}).value || ''
				})
			} else {
				// get utf8 string
				body = Buffer.concat(self._body).toString()
			}
		}
	
		// create flattened list of headers
		var headersList = []
		Object.keys(headersObj).forEach(function (keyName) {
			var name = headersObj[keyName].name
			var value = headersObj[keyName].value
			if (Array.isArray(value)) {
				value.forEach(function (v) {
					headersList.push([name, v])
				})
			} else {
				headersList.push([name, value])
			}
		})
	
		if (self._mode === 'fetch') {
			var signal = null
			var fetchTimer = null
			if (capability.abortController) {
				var controller = new AbortController()
				signal = controller.signal
				self._fetchAbortController = controller
	
				if ('requestTimeout' in opts && opts.requestTimeout !== 0) {
					self._fetchTimer = global.setTimeout(function () {
						self.emit('requestTimeout')
						if (self._fetchAbortController)
							self._fetchAbortController.abort()
					}, opts.requestTimeout)
				}
			}
	
			global.fetch(self._opts.url, {
				method: self._opts.method,
				headers: headersList,
				body: body || undefined,
				mode: 'cors',
				credentials: opts.withCredentials ? 'include' : 'same-origin',
				signal: signal
			}).then(function (response) {
				self._fetchResponse = response
				self._connect()
			}, function (reason) {
				global.clearTimeout(self._fetchTimer)
				if (!self._destroyed)
					self.emit('error', reason)
			})
		} else {
			var xhr = self._xhr = new global.XMLHttpRequest()
			try {
				xhr.open(self._opts.method, self._opts.url, true)
			} catch (err) {
				process.nextTick(function () {
					self.emit('error', err)
				})
				return
			}
	
			// Can't set responseType on really old browsers
			if ('responseType' in xhr)
				xhr.responseType = self._mode.split(':')[0]
	
			if ('withCredentials' in xhr)
				xhr.withCredentials = !!opts.withCredentials
	
			if (self._mode === 'text' && 'overrideMimeType' in xhr)
				xhr.overrideMimeType('text/plain; charset=x-user-defined')
	
			if ('requestTimeout' in opts) {
				xhr.timeout = opts.requestTimeout
				xhr.ontimeout = function () {
					self.emit('requestTimeout')
				}
			}
	
			headersList.forEach(function (header) {
				xhr.setRequestHeader(header[0], header[1])
			})
	
			self._response = null
			xhr.onreadystatechange = function () {
				switch (xhr.readyState) {
					case rStates.LOADING:
					case rStates.DONE:
						self._onXHRProgress()
						break
				}
			}
			// Necessary for streaming in Firefox, since xhr.response is ONLY defined
			// in onprogress, not in onreadystatechange with xhr.readyState = 3
			if (self._mode === 'moz-chunked-arraybuffer') {
				xhr.onprogress = function () {
					self._onXHRProgress()
				}
			}
	
			xhr.onerror = function () {
				if (self._destroyed)
					return
				self.emit('error', new Error('XHR error'))
			}
	
			try {
				xhr.send(body)
			} catch (err) {
				process.nextTick(function () {
					self.emit('error', err)
				})
				return
			}
		}
	}
	
	/**
	 * Checks if xhr.status is readable and non-zero, indicating no error.
	 * Even though the spec says it should be available in readyState 3,
	 * accessing it throws an exception in IE8
	 */
	function statusValid (xhr) {
		try {
			var status = xhr.status
			return (status !== null && status !== 0)
		} catch (e) {
			return false
		}
	}
	
	ClientRequest.prototype._onXHRProgress = function () {
		var self = this
	
		if (!statusValid(self._xhr) || self._destroyed)
			return
	
		if (!self._response)
			self._connect()
	
		self._response._onXHRProgress()
	}
	
	ClientRequest.prototype._connect = function () {
		var self = this
	
		if (self._destroyed)
			return
	
		self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode, self._fetchTimer)
		self._response.on('error', function(err) {
			self.emit('error', err)
		})
	
		self.emit('response', self._response)
	}
	
	ClientRequest.prototype._write = function (chunk, encoding, cb) {
		var self = this
	
		self._body.push(chunk)
		cb()
	}
	
	ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function () {
		var self = this
		self._destroyed = true
		global.clearTimeout(self._fetchTimer)
		if (self._response)
			self._response._destroyed = true
		if (self._xhr)
			self._xhr.abort()
		else if (self._fetchAbortController)
			self._fetchAbortController.abort()
	}
	
	ClientRequest.prototype.end = function (data, encoding, cb) {
		var self = this
		if (typeof data === 'function') {
			cb = data
			data = undefined
		}
	
		stream.Writable.prototype.end.call(self, data, encoding, cb)
	}
	
	ClientRequest.prototype.flushHeaders = function () {}
	ClientRequest.prototype.setTimeout = function () {}
	ClientRequest.prototype.setNoDelay = function () {}
	ClientRequest.prototype.setSocketKeepAlive = function () {}
	
	// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
	var unsafeHeaders = [
		'accept-charset',
		'accept-encoding',
		'access-control-request-headers',
		'access-control-request-method',
		'connection',
		'content-length',
		'cookie',
		'cookie2',
		'date',
		'dnt',
		'expect',
		'host',
		'keep-alive',
		'origin',
		'referer',
		'te',
		'trailer',
		'transfer-encoding',
		'upgrade',
		'via'
	]
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(92).Buffer, (function() { return this; }()), __webpack_require__(90)))

/***/ }),
/* 153 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream)
	
	exports.writableStream = isFunction(global.WritableStream)
	
	exports.abortController = isFunction(global.AbortController)
	
	exports.blobConstructor = false
	try {
		new Blob([new ArrayBuffer(1)])
		exports.blobConstructor = true
	} catch (e) {}
	
	// The xhr request to example.com may violate some restrictive CSP configurations,
	// so if we're running in a browser that supports `fetch`, avoid calling getXHR()
	// and assume support for certain features below.
	var xhr
	function getXHR () {
		// Cache the xhr value
		if (xhr !== undefined) return xhr
	
		if (global.XMLHttpRequest) {
			xhr = new global.XMLHttpRequest()
			// If XDomainRequest is available (ie only, where xhr might not work
			// cross domain), use the page location. Otherwise use example.com
			// Note: this doesn't actually make an http request.
			try {
				xhr.open('GET', global.XDomainRequest ? '/' : 'https://example.com')
			} catch(e) {
				xhr = null
			}
		} else {
			// Service workers don't have XHR
			xhr = null
		}
		return xhr
	}
	
	function checkTypeSupport (type) {
		var xhr = getXHR()
		if (!xhr) return false
		try {
			xhr.responseType = type
			return xhr.responseType === type
		} catch (e) {}
		return false
	}
	
	// For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.
	// Safari 7.1 appears to have fixed this bug.
	var haveArrayBuffer = typeof global.ArrayBuffer !== 'undefined'
	var haveSlice = haveArrayBuffer && isFunction(global.ArrayBuffer.prototype.slice)
	
	// If fetch is supported, then arraybuffer will be supported too. Skip calling
	// checkTypeSupport(), since that calls getXHR().
	exports.arraybuffer = exports.fetch || (haveArrayBuffer && checkTypeSupport('arraybuffer'))
	
	// These next two tests unavoidably show warnings in Chrome. Since fetch will always
	// be used if it's available, just return false for these to avoid the warnings.
	exports.msstream = !exports.fetch && haveSlice && checkTypeSupport('ms-stream')
	exports.mozchunkedarraybuffer = !exports.fetch && haveArrayBuffer &&
		checkTypeSupport('moz-chunked-arraybuffer')
	
	// If fetch is supported, then overrideMimeType will be supported too. Skip calling
	// getXHR().
	exports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false)
	
	exports.vbArray = isFunction(global.VBArray)
	
	function isFunction (value) {
		return typeof value === 'function'
	}
	
	xhr = null // Help gc
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer, global) {var capability = __webpack_require__(153)
	var inherits = __webpack_require__(104)
	var stream = __webpack_require__(119)
	
	var rStates = exports.readyStates = {
		UNSENT: 0,
		OPENED: 1,
		HEADERS_RECEIVED: 2,
		LOADING: 3,
		DONE: 4
	}
	
	var IncomingMessage = exports.IncomingMessage = function (xhr, response, mode, fetchTimer) {
		var self = this
		stream.Readable.call(self)
	
		self._mode = mode
		self.headers = {}
		self.rawHeaders = []
		self.trailers = {}
		self.rawTrailers = []
	
		// Fake the 'close' event, but only once 'end' fires
		self.on('end', function () {
			// The nextTick is necessary to prevent the 'request' module from causing an infinite loop
			process.nextTick(function () {
				self.emit('close')
			})
		})
	
		if (mode === 'fetch') {
			self._fetchResponse = response
	
			self.url = response.url
			self.statusCode = response.status
			self.statusMessage = response.statusText
			
			response.headers.forEach(function (header, key){
				self.headers[key.toLowerCase()] = header
				self.rawHeaders.push(key, header)
			})
	
			if (capability.writableStream) {
				var writable = new WritableStream({
					write: function (chunk) {
						return new Promise(function (resolve, reject) {
							if (self._destroyed) {
								reject()
							} else if(self.push(new Buffer(chunk))) {
								resolve()
							} else {
								self._resumeFetch = resolve
							}
						})
					},
					close: function () {
						global.clearTimeout(fetchTimer)
						if (!self._destroyed)
							self.push(null)
					},
					abort: function (err) {
						if (!self._destroyed)
							self.emit('error', err)
					}
				})
	
				try {
					response.body.pipeTo(writable).catch(function (err) {
						global.clearTimeout(fetchTimer)
						if (!self._destroyed)
							self.emit('error', err)
					})
					return
				} catch (e) {} // pipeTo method isn't defined. Can't find a better way to feature test this
			}
			// fallback for when writableStream or pipeTo aren't available
			var reader = response.body.getReader()
			function read () {
				reader.read().then(function (result) {
					if (self._destroyed)
						return
					if (result.done) {
						global.clearTimeout(fetchTimer)
						self.push(null)
						return
					}
					self.push(new Buffer(result.value))
					read()
				}).catch(function (err) {
					global.clearTimeout(fetchTimer)
					if (!self._destroyed)
						self.emit('error', err)
				})
			}
			read()
		} else {
			self._xhr = xhr
			self._pos = 0
	
			self.url = xhr.responseURL
			self.statusCode = xhr.status
			self.statusMessage = xhr.statusText
			var headers = xhr.getAllResponseHeaders().split(/\r?\n/)
			headers.forEach(function (header) {
				var matches = header.match(/^([^:]+):\s*(.*)/)
				if (matches) {
					var key = matches[1].toLowerCase()
					if (key === 'set-cookie') {
						if (self.headers[key] === undefined) {
							self.headers[key] = []
						}
						self.headers[key].push(matches[2])
					} else if (self.headers[key] !== undefined) {
						self.headers[key] += ', ' + matches[2]
					} else {
						self.headers[key] = matches[2]
					}
					self.rawHeaders.push(matches[1], matches[2])
				}
			})
	
			self._charset = 'x-user-defined'
			if (!capability.overrideMimeType) {
				var mimeType = self.rawHeaders['mime-type']
				if (mimeType) {
					var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/)
					if (charsetMatch) {
						self._charset = charsetMatch[1].toLowerCase()
					}
				}
				if (!self._charset)
					self._charset = 'utf-8' // best guess
			}
		}
	}
	
	inherits(IncomingMessage, stream.Readable)
	
	IncomingMessage.prototype._read = function () {
		var self = this
	
		var resolve = self._resumeFetch
		if (resolve) {
			self._resumeFetch = null
			resolve()
		}
	}
	
	IncomingMessage.prototype._onXHRProgress = function () {
		var self = this
	
		var xhr = self._xhr
	
		var response = null
		switch (self._mode) {
			case 'text:vbarray': // For IE9
				if (xhr.readyState !== rStates.DONE)
					break
				try {
					// This fails in IE8
					response = new global.VBArray(xhr.responseBody).toArray()
				} catch (e) {}
				if (response !== null) {
					self.push(new Buffer(response))
					break
				}
				// Falls through in IE8	
			case 'text':
				try { // This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4
					response = xhr.responseText
				} catch (e) {
					self._mode = 'text:vbarray'
					break
				}
				if (response.length > self._pos) {
					var newData = response.substr(self._pos)
					if (self._charset === 'x-user-defined') {
						var buffer = new Buffer(newData.length)
						for (var i = 0; i < newData.length; i++)
							buffer[i] = newData.charCodeAt(i) & 0xff
	
						self.push(buffer)
					} else {
						self.push(newData, self._charset)
					}
					self._pos = response.length
				}
				break
			case 'arraybuffer':
				if (xhr.readyState !== rStates.DONE || !xhr.response)
					break
				response = xhr.response
				self.push(new Buffer(new Uint8Array(response)))
				break
			case 'moz-chunked-arraybuffer': // take whole
				response = xhr.response
				if (xhr.readyState !== rStates.LOADING || !response)
					break
				self.push(new Buffer(new Uint8Array(response)))
				break
			case 'ms-stream':
				response = xhr.response
				if (xhr.readyState !== rStates.LOADING)
					break
				var reader = new global.MSStreamReader()
				reader.onprogress = function () {
					if (reader.result.byteLength > self._pos) {
						self.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))))
						self._pos = reader.result.byteLength
					}
				}
				reader.onload = function () {
					self.push(null)
				}
				// reader.onerror = ??? // TODO: this
				reader.readAsArrayBuffer(response)
				break
		}
	
		// The ms-stream case handles end separately in reader.onload()
		if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {
			self.push(null)
		}
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90), __webpack_require__(92).Buffer, (function() { return this; }())))

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

	var Buffer = __webpack_require__(92).Buffer
	
	module.exports = function (buf) {
		// If the buffer is backed by a Uint8Array, a faster version will work
		if (buf instanceof Uint8Array) {
			// If the buffer isn't a subarray, return the underlying ArrayBuffer
			if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {
				return buf.buffer
			} else if (typeof buf.buffer.slice === 'function') {
				// Otherwise we need to get a proper copy
				return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength)
			}
		}
	
		if (Buffer.isBuffer(buf)) {
			// This is the slow version that will work with any Buffer
			// implementation (even in old browsers)
			var arrayCopy = new Uint8Array(buf.length)
			var len = buf.length
			for (var i = 0; i < len; i++) {
				arrayCopy[i] = buf[i]
			}
			return arrayCopy.buffer
		} else {
			throw new Error('Argument must be a Buffer')
		}
	}


/***/ }),
/* 156 */
/***/ (function(module, exports) {

	module.exports = extend
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	function extend() {
	    var target = {}
	
	    for (var i = 0; i < arguments.length; i++) {
	        var source = arguments[i]
	
	        for (var key in source) {
	            if (hasOwnProperty.call(source, key)) {
	                target[key] = source[key]
	            }
	        }
	    }
	
	    return target
	}


/***/ }),
/* 157 */
/***/ (function(module, exports) {

	module.exports = {
	  "100": "Continue",
	  "101": "Switching Protocols",
	  "102": "Processing",
	  "200": "OK",
	  "201": "Created",
	  "202": "Accepted",
	  "203": "Non-Authoritative Information",
	  "204": "No Content",
	  "205": "Reset Content",
	  "206": "Partial Content",
	  "207": "Multi-Status",
	  "208": "Already Reported",
	  "226": "IM Used",
	  "300": "Multiple Choices",
	  "301": "Moved Permanently",
	  "302": "Found",
	  "303": "See Other",
	  "304": "Not Modified",
	  "305": "Use Proxy",
	  "307": "Temporary Redirect",
	  "308": "Permanent Redirect",
	  "400": "Bad Request",
	  "401": "Unauthorized",
	  "402": "Payment Required",
	  "403": "Forbidden",
	  "404": "Not Found",
	  "405": "Method Not Allowed",
	  "406": "Not Acceptable",
	  "407": "Proxy Authentication Required",
	  "408": "Request Timeout",
	  "409": "Conflict",
	  "410": "Gone",
	  "411": "Length Required",
	  "412": "Precondition Failed",
	  "413": "Payload Too Large",
	  "414": "URI Too Long",
	  "415": "Unsupported Media Type",
	  "416": "Range Not Satisfiable",
	  "417": "Expectation Failed",
	  "418": "I'm a teapot",
	  "421": "Misdirected Request",
	  "422": "Unprocessable Entity",
	  "423": "Locked",
	  "424": "Failed Dependency",
	  "425": "Unordered Collection",
	  "426": "Upgrade Required",
	  "428": "Precondition Required",
	  "429": "Too Many Requests",
	  "431": "Request Header Fields Too Large",
	  "451": "Unavailable For Legal Reasons",
	  "500": "Internal Server Error",
	  "501": "Not Implemented",
	  "502": "Bad Gateway",
	  "503": "Service Unavailable",
	  "504": "Gateway Timeout",
	  "505": "HTTP Version Not Supported",
	  "506": "Variant Also Negotiates",
	  "507": "Insufficient Storage",
	  "508": "Loop Detected",
	  "509": "Bandwidth Limit Exceeded",
	  "510": "Not Extended",
	  "511": "Network Authentication Required"
	}


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	var punycode = __webpack_require__(159);
	var util = __webpack_require__(161);
	
	exports.parse = urlParse;
	exports.resolve = urlResolve;
	exports.resolveObject = urlResolveObject;
	exports.format = urlFormat;
	
	exports.Url = Url;
	
	function Url() {
	  this.protocol = null;
	  this.slashes = null;
	  this.auth = null;
	  this.host = null;
	  this.port = null;
	  this.hostname = null;
	  this.hash = null;
	  this.search = null;
	  this.query = null;
	  this.pathname = null;
	  this.path = null;
	  this.href = null;
	}
	
	// Reference: RFC 3986, RFC 1808, RFC 2396
	
	// define these here so at least they only have to be
	// compiled once on the first module load.
	var protocolPattern = /^([a-z0-9.+-]+:)/i,
	    portPattern = /:[0-9]*$/,
	
	    // Special case for a simple path URL
	    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
	
	    // RFC 2396: characters reserved for delimiting URLs.
	    // We actually just auto-escape these.
	    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
	
	    // RFC 2396: characters not allowed for various reasons.
	    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),
	
	    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
	    autoEscape = ['\''].concat(unwise),
	    // Characters that are never ever allowed in a hostname.
	    // Note that any invalid chars are also handled, but these
	    // are the ones that are *expected* to be seen, so we fast-path
	    // them.
	    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
	    hostEndingChars = ['/', '?', '#'],
	    hostnameMaxLen = 255,
	    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
	    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
	    // protocols that can allow "unsafe" and "unwise" chars.
	    unsafeProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that never have a hostname.
	    hostlessProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that always contain a // bit.
	    slashedProtocol = {
	      'http': true,
	      'https': true,
	      'ftp': true,
	      'gopher': true,
	      'file': true,
	      'http:': true,
	      'https:': true,
	      'ftp:': true,
	      'gopher:': true,
	      'file:': true
	    },
	    querystring = __webpack_require__(162);
	
	function urlParse(url, parseQueryString, slashesDenoteHost) {
	  if (url && util.isObject(url) && url instanceof Url) return url;
	
	  var u = new Url;
	  u.parse(url, parseQueryString, slashesDenoteHost);
	  return u;
	}
	
	Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
	  if (!util.isString(url)) {
	    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
	  }
	
	  // Copy chrome, IE, opera backslash-handling behavior.
	  // Back slashes before the query string get converted to forward slashes
	  // See: https://code.google.com/p/chromium/issues/detail?id=25916
	  var queryIndex = url.indexOf('?'),
	      splitter =
	          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
	      uSplit = url.split(splitter),
	      slashRegex = /\\/g;
	  uSplit[0] = uSplit[0].replace(slashRegex, '/');
	  url = uSplit.join(splitter);
	
	  var rest = url;
	
	  // trim before proceeding.
	  // This is to support parse stuff like "  http://foo.com  \n"
	  rest = rest.trim();
	
	  if (!slashesDenoteHost && url.split('#').length === 1) {
	    // Try fast path regexp
	    var simplePath = simplePathPattern.exec(rest);
	    if (simplePath) {
	      this.path = rest;
	      this.href = rest;
	      this.pathname = simplePath[1];
	      if (simplePath[2]) {
	        this.search = simplePath[2];
	        if (parseQueryString) {
	          this.query = querystring.parse(this.search.substr(1));
	        } else {
	          this.query = this.search.substr(1);
	        }
	      } else if (parseQueryString) {
	        this.search = '';
	        this.query = {};
	      }
	      return this;
	    }
	  }
	
	  var proto = protocolPattern.exec(rest);
	  if (proto) {
	    proto = proto[0];
	    var lowerProto = proto.toLowerCase();
	    this.protocol = lowerProto;
	    rest = rest.substr(proto.length);
	  }
	
	  // figure out if it's got a host
	  // user@server is *always* interpreted as a hostname, and url
	  // resolution will treat //foo/bar as host=foo,path=bar because that's
	  // how the browser resolves relative URLs.
	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	    var slashes = rest.substr(0, 2) === '//';
	    if (slashes && !(proto && hostlessProtocol[proto])) {
	      rest = rest.substr(2);
	      this.slashes = true;
	    }
	  }
	
	  if (!hostlessProtocol[proto] &&
	      (slashes || (proto && !slashedProtocol[proto]))) {
	
	    // there's a hostname.
	    // the first instance of /, ?, ;, or # ends the host.
	    //
	    // If there is an @ in the hostname, then non-host chars *are* allowed
	    // to the left of the last @ sign, unless some host-ending character
	    // comes *before* the @-sign.
	    // URLs are obnoxious.
	    //
	    // ex:
	    // http://a@b@c/ => user:a@b host:c
	    // http://a@b?@c => user:a host:c path:/?@c
	
	    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
	    // Review our test case against browsers more comprehensively.
	
	    // find the first instance of any hostEndingChars
	    var hostEnd = -1;
	    for (var i = 0; i < hostEndingChars.length; i++) {
	      var hec = rest.indexOf(hostEndingChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	
	    // at this point, either we have an explicit point where the
	    // auth portion cannot go past, or the last @ char is the decider.
	    var auth, atSign;
	    if (hostEnd === -1) {
	      // atSign can be anywhere.
	      atSign = rest.lastIndexOf('@');
	    } else {
	      // atSign must be in auth portion.
	      // http://a@b/c@d => host:b auth:a path:/c@d
	      atSign = rest.lastIndexOf('@', hostEnd);
	    }
	
	    // Now we have a portion which is definitely the auth.
	    // Pull that off.
	    if (atSign !== -1) {
	      auth = rest.slice(0, atSign);
	      rest = rest.slice(atSign + 1);
	      this.auth = decodeURIComponent(auth);
	    }
	
	    // the host is the remaining to the left of the first non-host char
	    hostEnd = -1;
	    for (var i = 0; i < nonHostChars.length; i++) {
	      var hec = rest.indexOf(nonHostChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	    // if we still have not hit it, then the entire thing is a host.
	    if (hostEnd === -1)
	      hostEnd = rest.length;
	
	    this.host = rest.slice(0, hostEnd);
	    rest = rest.slice(hostEnd);
	
	    // pull out port.
	    this.parseHost();
	
	    // we've indicated that there is a hostname,
	    // so even if it's empty, it has to be present.
	    this.hostname = this.hostname || '';
	
	    // if hostname begins with [ and ends with ]
	    // assume that it's an IPv6 address.
	    var ipv6Hostname = this.hostname[0] === '[' &&
	        this.hostname[this.hostname.length - 1] === ']';
	
	    // validate a little.
	    if (!ipv6Hostname) {
	      var hostparts = this.hostname.split(/\./);
	      for (var i = 0, l = hostparts.length; i < l; i++) {
	        var part = hostparts[i];
	        if (!part) continue;
	        if (!part.match(hostnamePartPattern)) {
	          var newpart = '';
	          for (var j = 0, k = part.length; j < k; j++) {
	            if (part.charCodeAt(j) > 127) {
	              // we replace non-ASCII char with a temporary placeholder
	              // we need this to make sure size of hostname is not
	              // broken by replacing non-ASCII by nothing
	              newpart += 'x';
	            } else {
	              newpart += part[j];
	            }
	          }
	          // we test again with ASCII char only
	          if (!newpart.match(hostnamePartPattern)) {
	            var validParts = hostparts.slice(0, i);
	            var notHost = hostparts.slice(i + 1);
	            var bit = part.match(hostnamePartStart);
	            if (bit) {
	              validParts.push(bit[1]);
	              notHost.unshift(bit[2]);
	            }
	            if (notHost.length) {
	              rest = '/' + notHost.join('.') + rest;
	            }
	            this.hostname = validParts.join('.');
	            break;
	          }
	        }
	      }
	    }
	
	    if (this.hostname.length > hostnameMaxLen) {
	      this.hostname = '';
	    } else {
	      // hostnames are always lower case.
	      this.hostname = this.hostname.toLowerCase();
	    }
	
	    if (!ipv6Hostname) {
	      // IDNA Support: Returns a punycoded representation of "domain".
	      // It only converts parts of the domain name that
	      // have non-ASCII characters, i.e. it doesn't matter if
	      // you call it with a domain that already is ASCII-only.
	      this.hostname = punycode.toASCII(this.hostname);
	    }
	
	    var p = this.port ? ':' + this.port : '';
	    var h = this.hostname || '';
	    this.host = h + p;
	    this.href += this.host;
	
	    // strip [ and ] from the hostname
	    // the host field still retains them, though
	    if (ipv6Hostname) {
	      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
	      if (rest[0] !== '/') {
	        rest = '/' + rest;
	      }
	    }
	  }
	
	  // now rest is set to the post-host stuff.
	  // chop off any delim chars.
	  if (!unsafeProtocol[lowerProto]) {
	
	    // First, make 100% sure that any "autoEscape" chars get
	    // escaped, even if encodeURIComponent doesn't think they
	    // need to be.
	    for (var i = 0, l = autoEscape.length; i < l; i++) {
	      var ae = autoEscape[i];
	      if (rest.indexOf(ae) === -1)
	        continue;
	      var esc = encodeURIComponent(ae);
	      if (esc === ae) {
	        esc = escape(ae);
	      }
	      rest = rest.split(ae).join(esc);
	    }
	  }
	
	
	  // chop off from the tail first.
	  var hash = rest.indexOf('#');
	  if (hash !== -1) {
	    // got a fragment string.
	    this.hash = rest.substr(hash);
	    rest = rest.slice(0, hash);
	  }
	  var qm = rest.indexOf('?');
	  if (qm !== -1) {
	    this.search = rest.substr(qm);
	    this.query = rest.substr(qm + 1);
	    if (parseQueryString) {
	      this.query = querystring.parse(this.query);
	    }
	    rest = rest.slice(0, qm);
	  } else if (parseQueryString) {
	    // no query string, but parseQueryString still requested
	    this.search = '';
	    this.query = {};
	  }
	  if (rest) this.pathname = rest;
	  if (slashedProtocol[lowerProto] &&
	      this.hostname && !this.pathname) {
	    this.pathname = '/';
	  }
	
	  //to support http.request
	  if (this.pathname || this.search) {
	    var p = this.pathname || '';
	    var s = this.search || '';
	    this.path = p + s;
	  }
	
	  // finally, reconstruct the href based on what has been validated.
	  this.href = this.format();
	  return this;
	};
	
	// format a parsed object into a url string
	function urlFormat(obj) {
	  // ensure it's an object, and not a string url.
	  // If it's an obj, this is a no-op.
	  // this way, you can call url_format() on strings
	  // to clean up potentially wonky urls.
	  if (util.isString(obj)) obj = urlParse(obj);
	  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
	  return obj.format();
	}
	
	Url.prototype.format = function() {
	  var auth = this.auth || '';
	  if (auth) {
	    auth = encodeURIComponent(auth);
	    auth = auth.replace(/%3A/i, ':');
	    auth += '@';
	  }
	
	  var protocol = this.protocol || '',
	      pathname = this.pathname || '',
	      hash = this.hash || '',
	      host = false,
	      query = '';
	
	  if (this.host) {
	    host = auth + this.host;
	  } else if (this.hostname) {
	    host = auth + (this.hostname.indexOf(':') === -1 ?
	        this.hostname :
	        '[' + this.hostname + ']');
	    if (this.port) {
	      host += ':' + this.port;
	    }
	  }
	
	  if (this.query &&
	      util.isObject(this.query) &&
	      Object.keys(this.query).length) {
	    query = querystring.stringify(this.query);
	  }
	
	  var search = this.search || (query && ('?' + query)) || '';
	
	  if (protocol && protocol.substr(-1) !== ':') protocol += ':';
	
	  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	  // unless they had them to begin with.
	  if (this.slashes ||
	      (!protocol || slashedProtocol[protocol]) && host !== false) {
	    host = '//' + (host || '');
	    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	  } else if (!host) {
	    host = '';
	  }
	
	  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	  if (search && search.charAt(0) !== '?') search = '?' + search;
	
	  pathname = pathname.replace(/[?#]/g, function(match) {
	    return encodeURIComponent(match);
	  });
	  search = search.replace('#', '%23');
	
	  return protocol + host + pathname + search + hash;
	};
	
	function urlResolve(source, relative) {
	  return urlParse(source, false, true).resolve(relative);
	}
	
	Url.prototype.resolve = function(relative) {
	  return this.resolveObject(urlParse(relative, false, true)).format();
	};
	
	function urlResolveObject(source, relative) {
	  if (!source) return relative;
	  return urlParse(source, false, true).resolveObject(relative);
	}
	
	Url.prototype.resolveObject = function(relative) {
	  if (util.isString(relative)) {
	    var rel = new Url();
	    rel.parse(relative, false, true);
	    relative = rel;
	  }
	
	  var result = new Url();
	  var tkeys = Object.keys(this);
	  for (var tk = 0; tk < tkeys.length; tk++) {
	    var tkey = tkeys[tk];
	    result[tkey] = this[tkey];
	  }
	
	  // hash is always overridden, no matter what.
	  // even href="" will remove it.
	  result.hash = relative.hash;
	
	  // if the relative url is empty, then there's nothing left to do here.
	  if (relative.href === '') {
	    result.href = result.format();
	    return result;
	  }
	
	  // hrefs like //foo/bar always cut to the protocol.
	  if (relative.slashes && !relative.protocol) {
	    // take everything except the protocol from relative
	    var rkeys = Object.keys(relative);
	    for (var rk = 0; rk < rkeys.length; rk++) {
	      var rkey = rkeys[rk];
	      if (rkey !== 'protocol')
	        result[rkey] = relative[rkey];
	    }
	
	    //urlParse appends trailing / to urls like http://www.example.com
	    if (slashedProtocol[result.protocol] &&
	        result.hostname && !result.pathname) {
	      result.path = result.pathname = '/';
	    }
	
	    result.href = result.format();
	    return result;
	  }
	
	  if (relative.protocol && relative.protocol !== result.protocol) {
	    // if it's a known url protocol, then changing
	    // the protocol does weird things
	    // first, if it's not file:, then we MUST have a host,
	    // and if there was a path
	    // to begin with, then we MUST have a path.
	    // if it is file:, then the host is dropped,
	    // because that's known to be hostless.
	    // anything else is assumed to be absolute.
	    if (!slashedProtocol[relative.protocol]) {
	      var keys = Object.keys(relative);
	      for (var v = 0; v < keys.length; v++) {
	        var k = keys[v];
	        result[k] = relative[k];
	      }
	      result.href = result.format();
	      return result;
	    }
	
	    result.protocol = relative.protocol;
	    if (!relative.host && !hostlessProtocol[relative.protocol]) {
	      var relPath = (relative.pathname || '').split('/');
	      while (relPath.length && !(relative.host = relPath.shift()));
	      if (!relative.host) relative.host = '';
	      if (!relative.hostname) relative.hostname = '';
	      if (relPath[0] !== '') relPath.unshift('');
	      if (relPath.length < 2) relPath.unshift('');
	      result.pathname = relPath.join('/');
	    } else {
	      result.pathname = relative.pathname;
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    result.host = relative.host || '';
	    result.auth = relative.auth;
	    result.hostname = relative.hostname || relative.host;
	    result.port = relative.port;
	    // to support http.request
	    if (result.pathname || result.search) {
	      var p = result.pathname || '';
	      var s = result.search || '';
	      result.path = p + s;
	    }
	    result.slashes = result.slashes || relative.slashes;
	    result.href = result.format();
	    return result;
	  }
	
	  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
	      isRelAbs = (
	          relative.host ||
	          relative.pathname && relative.pathname.charAt(0) === '/'
	      ),
	      mustEndAbs = (isRelAbs || isSourceAbs ||
	                    (result.host && relative.pathname)),
	      removeAllDots = mustEndAbs,
	      srcPath = result.pathname && result.pathname.split('/') || [],
	      relPath = relative.pathname && relative.pathname.split('/') || [],
	      psychotic = result.protocol && !slashedProtocol[result.protocol];
	
	  // if the url is a non-slashed url, then relative
	  // links like ../.. should be able
	  // to crawl up to the hostname, as well.  This is strange.
	  // result.protocol has already been set by now.
	  // Later on, put the first path part into the host field.
	  if (psychotic) {
	    result.hostname = '';
	    result.port = null;
	    if (result.host) {
	      if (srcPath[0] === '') srcPath[0] = result.host;
	      else srcPath.unshift(result.host);
	    }
	    result.host = '';
	    if (relative.protocol) {
	      relative.hostname = null;
	      relative.port = null;
	      if (relative.host) {
	        if (relPath[0] === '') relPath[0] = relative.host;
	        else relPath.unshift(relative.host);
	      }
	      relative.host = null;
	    }
	    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	  }
	
	  if (isRelAbs) {
	    // it's absolute.
	    result.host = (relative.host || relative.host === '') ?
	                  relative.host : result.host;
	    result.hostname = (relative.hostname || relative.hostname === '') ?
	                      relative.hostname : result.hostname;
	    result.search = relative.search;
	    result.query = relative.query;
	    srcPath = relPath;
	    // fall through to the dot-handling below.
	  } else if (relPath.length) {
	    // it's relative
	    // throw away the existing file, and take the new path instead.
	    if (!srcPath) srcPath = [];
	    srcPath.pop();
	    srcPath = srcPath.concat(relPath);
	    result.search = relative.search;
	    result.query = relative.query;
	  } else if (!util.isNullOrUndefined(relative.search)) {
	    // just pull out the search.
	    // like href='?foo'.
	    // Put this after the other two cases because it simplifies the booleans
	    if (psychotic) {
	      result.hostname = result.host = srcPath.shift();
	      //occationaly the auth can get stuck only in host
	      //this especially happens in cases like
	      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	      var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                       result.host.split('@') : false;
	      if (authInHost) {
	        result.auth = authInHost.shift();
	        result.host = result.hostname = authInHost.shift();
	      }
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    //to support http.request
	    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
	      result.path = (result.pathname ? result.pathname : '') +
	                    (result.search ? result.search : '');
	    }
	    result.href = result.format();
	    return result;
	  }
	
	  if (!srcPath.length) {
	    // no path at all.  easy.
	    // we've already handled the other stuff above.
	    result.pathname = null;
	    //to support http.request
	    if (result.search) {
	      result.path = '/' + result.search;
	    } else {
	      result.path = null;
	    }
	    result.href = result.format();
	    return result;
	  }
	
	  // if a url ENDs in . or .., then it must get a trailing slash.
	  // however, if it ends in anything else non-slashy,
	  // then it must NOT get a trailing slash.
	  var last = srcPath.slice(-1)[0];
	  var hasTrailingSlash = (
	      (result.host || relative.host || srcPath.length > 1) &&
	      (last === '.' || last === '..') || last === '');
	
	  // strip single dots, resolve double dots to parent dir
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = srcPath.length; i >= 0; i--) {
	    last = srcPath[i];
	    if (last === '.') {
	      srcPath.splice(i, 1);
	    } else if (last === '..') {
	      srcPath.splice(i, 1);
	      up++;
	    } else if (up) {
	      srcPath.splice(i, 1);
	      up--;
	    }
	  }
	
	  // if the path is allowed to go above the root, restore leading ..s
	  if (!mustEndAbs && !removeAllDots) {
	    for (; up--; up) {
	      srcPath.unshift('..');
	    }
	  }
	
	  if (mustEndAbs && srcPath[0] !== '' &&
	      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
	    srcPath.unshift('');
	  }
	
	  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
	    srcPath.push('');
	  }
	
	  var isAbsolute = srcPath[0] === '' ||
	      (srcPath[0] && srcPath[0].charAt(0) === '/');
	
	  // put the host back
	  if (psychotic) {
	    result.hostname = result.host = isAbsolute ? '' :
	                                    srcPath.length ? srcPath.shift() : '';
	    //occationaly the auth can get stuck only in host
	    //this especially happens in cases like
	    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	    var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                     result.host.split('@') : false;
	    if (authInHost) {
	      result.auth = authInHost.shift();
	      result.host = result.hostname = authInHost.shift();
	    }
	  }
	
	  mustEndAbs = mustEndAbs || (result.host && srcPath.length);
	
	  if (mustEndAbs && !isAbsolute) {
	    srcPath.unshift('');
	  }
	
	  if (!srcPath.length) {
	    result.pathname = null;
	    result.path = null;
	  } else {
	    result.pathname = srcPath.join('/');
	  }
	
	  //to support request.http
	  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
	    result.path = (result.pathname ? result.pathname : '') +
	                  (result.search ? result.search : '');
	  }
	  result.auth = relative.auth || result.auth;
	  result.slashes = result.slashes || relative.slashes;
	  result.href = result.format();
	  return result;
	};
	
	Url.prototype.parseHost = function() {
	  var host = this.host;
	  var port = portPattern.exec(host);
	  if (port) {
	    port = port[0];
	    if (port !== ':') {
	      this.port = port.substr(1);
	    }
	    host = host.substr(0, host.length - port.length);
	  }
	  if (host) this.hostname = host;
	};


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/punycode v1.3.2 by @mathias */
	;(function(root) {
	
		/** Detect free variables */
		var freeExports = typeof exports == 'object' && exports &&
			!exports.nodeType && exports;
		var freeModule = typeof module == 'object' && module &&
			!module.nodeType && module;
		var freeGlobal = typeof global == 'object' && global;
		if (
			freeGlobal.global === freeGlobal ||
			freeGlobal.window === freeGlobal ||
			freeGlobal.self === freeGlobal
		) {
			root = freeGlobal;
		}
	
		/**
		 * The `punycode` object.
		 * @name punycode
		 * @type Object
		 */
		var punycode,
	
		/** Highest positive signed 32-bit float value */
		maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1
	
		/** Bootstring parameters */
		base = 36,
		tMin = 1,
		tMax = 26,
		skew = 38,
		damp = 700,
		initialBias = 72,
		initialN = 128, // 0x80
		delimiter = '-', // '\x2D'
	
		/** Regular expressions */
		regexPunycode = /^xn--/,
		regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
		regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators
	
		/** Error messages */
		errors = {
			'overflow': 'Overflow: input needs wider integers to process',
			'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
			'invalid-input': 'Invalid input'
		},
	
		/** Convenience shortcuts */
		baseMinusTMin = base - tMin,
		floor = Math.floor,
		stringFromCharCode = String.fromCharCode,
	
		/** Temporary variable */
		key;
	
		/*--------------------------------------------------------------------------*/
	
		/**
		 * A generic error utility function.
		 * @private
		 * @param {String} type The error type.
		 * @returns {Error} Throws a `RangeError` with the applicable error message.
		 */
		function error(type) {
			throw RangeError(errors[type]);
		}
	
		/**
		 * A generic `Array#map` utility function.
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} callback The function that gets called for every array
		 * item.
		 * @returns {Array} A new array of values returned by the callback function.
		 */
		function map(array, fn) {
			var length = array.length;
			var result = [];
			while (length--) {
				result[length] = fn(array[length]);
			}
			return result;
		}
	
		/**
		 * A simple `Array#map`-like wrapper to work with domain name strings or email
		 * addresses.
		 * @private
		 * @param {String} domain The domain name or email address.
		 * @param {Function} callback The function that gets called for every
		 * character.
		 * @returns {Array} A new string of characters returned by the callback
		 * function.
		 */
		function mapDomain(string, fn) {
			var parts = string.split('@');
			var result = '';
			if (parts.length > 1) {
				// In email addresses, only the domain name should be punycoded. Leave
				// the local part (i.e. everything up to `@`) intact.
				result = parts[0] + '@';
				string = parts[1];
			}
			// Avoid `split(regex)` for IE8 compatibility. See #17.
			string = string.replace(regexSeparators, '\x2E');
			var labels = string.split('.');
			var encoded = map(labels, fn).join('.');
			return result + encoded;
		}
	
		/**
		 * Creates an array containing the numeric code points of each Unicode
		 * character in the string. While JavaScript uses UCS-2 internally,
		 * this function will convert a pair of surrogate halves (each of which
		 * UCS-2 exposes as separate characters) into a single code point,
		 * matching UTF-16.
		 * @see `punycode.ucs2.encode`
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode.ucs2
		 * @name decode
		 * @param {String} string The Unicode input string (UCS-2).
		 * @returns {Array} The new array of code points.
		 */
		function ucs2decode(string) {
			var output = [],
			    counter = 0,
			    length = string.length,
			    value,
			    extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}
	
		/**
		 * Creates a string based on an array of numeric code points.
		 * @see `punycode.ucs2.decode`
		 * @memberOf punycode.ucs2
		 * @name encode
		 * @param {Array} codePoints The array of numeric code points.
		 * @returns {String} The new Unicode string (UCS-2).
		 */
		function ucs2encode(array) {
			return map(array, function(value) {
				var output = '';
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
				return output;
			}).join('');
		}
	
		/**
		 * Converts a basic code point into a digit/integer.
		 * @see `digitToBasic()`
		 * @private
		 * @param {Number} codePoint The basic numeric code point value.
		 * @returns {Number} The numeric value of a basic code point (for use in
		 * representing integers) in the range `0` to `base - 1`, or `base` if
		 * the code point does not represent a value.
		 */
		function basicToDigit(codePoint) {
			if (codePoint - 48 < 10) {
				return codePoint - 22;
			}
			if (codePoint - 65 < 26) {
				return codePoint - 65;
			}
			if (codePoint - 97 < 26) {
				return codePoint - 97;
			}
			return base;
		}
	
		/**
		 * Converts a digit/integer into a basic code point.
		 * @see `basicToDigit()`
		 * @private
		 * @param {Number} digit The numeric value of a basic code point.
		 * @returns {Number} The basic code point whose value (when used for
		 * representing integers) is `digit`, which needs to be in the range
		 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
		 * used; else, the lowercase form is used. The behavior is undefined
		 * if `flag` is non-zero and `digit` has no uppercase form.
		 */
		function digitToBasic(digit, flag) {
			//  0..25 map to ASCII a..z or A..Z
			// 26..35 map to ASCII 0..9
			return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
		}
	
		/**
		 * Bias adaptation function as per section 3.4 of RFC 3492.
		 * http://tools.ietf.org/html/rfc3492#section-3.4
		 * @private
		 */
		function adapt(delta, numPoints, firstTime) {
			var k = 0;
			delta = firstTime ? floor(delta / damp) : delta >> 1;
			delta += floor(delta / numPoints);
			for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
				delta = floor(delta / baseMinusTMin);
			}
			return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
		}
	
		/**
		 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
		 * symbols.
		 * @memberOf punycode
		 * @param {String} input The Punycode string of ASCII-only symbols.
		 * @returns {String} The resulting string of Unicode symbols.
		 */
		function decode(input) {
			// Don't use UCS-2
			var output = [],
			    inputLength = input.length,
			    out,
			    i = 0,
			    n = initialN,
			    bias = initialBias,
			    basic,
			    j,
			    index,
			    oldi,
			    w,
			    k,
			    digit,
			    t,
			    /** Cached calculation results */
			    baseMinusT;
	
			// Handle the basic code points: let `basic` be the number of input code
			// points before the last delimiter, or `0` if there is none, then copy
			// the first basic code points to the output.
	
			basic = input.lastIndexOf(delimiter);
			if (basic < 0) {
				basic = 0;
			}
	
			for (j = 0; j < basic; ++j) {
				// if it's not a basic code point
				if (input.charCodeAt(j) >= 0x80) {
					error('not-basic');
				}
				output.push(input.charCodeAt(j));
			}
	
			// Main decoding loop: start just after the last delimiter if any basic code
			// points were copied; start at the beginning otherwise.
	
			for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {
	
				// `index` is the index of the next character to be consumed.
				// Decode a generalized variable-length integer into `delta`,
				// which gets added to `i`. The overflow checking is easier
				// if we increase `i` as we go, then subtract off its starting
				// value at the end to obtain `delta`.
				for (oldi = i, w = 1, k = base; /* no condition */; k += base) {
	
					if (index >= inputLength) {
						error('invalid-input');
					}
	
					digit = basicToDigit(input.charCodeAt(index++));
	
					if (digit >= base || digit > floor((maxInt - i) / w)) {
						error('overflow');
					}
	
					i += digit * w;
					t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
	
					if (digit < t) {
						break;
					}
	
					baseMinusT = base - t;
					if (w > floor(maxInt / baseMinusT)) {
						error('overflow');
					}
	
					w *= baseMinusT;
	
				}
	
				out = output.length + 1;
				bias = adapt(i - oldi, out, oldi == 0);
	
				// `i` was supposed to wrap around from `out` to `0`,
				// incrementing `n` each time, so we'll fix that now:
				if (floor(i / out) > maxInt - n) {
					error('overflow');
				}
	
				n += floor(i / out);
				i %= out;
	
				// Insert `n` at position `i` of the output
				output.splice(i++, 0, n);
	
			}
	
			return ucs2encode(output);
		}
	
		/**
		 * Converts a string of Unicode symbols (e.g. a domain name label) to a
		 * Punycode string of ASCII-only symbols.
		 * @memberOf punycode
		 * @param {String} input The string of Unicode symbols.
		 * @returns {String} The resulting Punycode string of ASCII-only symbols.
		 */
		function encode(input) {
			var n,
			    delta,
			    handledCPCount,
			    basicLength,
			    bias,
			    j,
			    m,
			    q,
			    k,
			    t,
			    currentValue,
			    output = [],
			    /** `inputLength` will hold the number of code points in `input`. */
			    inputLength,
			    /** Cached calculation results */
			    handledCPCountPlusOne,
			    baseMinusT,
			    qMinusT;
	
			// Convert the input in UCS-2 to Unicode
			input = ucs2decode(input);
	
			// Cache the length
			inputLength = input.length;
	
			// Initialize the state
			n = initialN;
			delta = 0;
			bias = initialBias;
	
			// Handle the basic code points
			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue < 0x80) {
					output.push(stringFromCharCode(currentValue));
				}
			}
	
			handledCPCount = basicLength = output.length;
	
			// `handledCPCount` is the number of code points that have been handled;
			// `basicLength` is the number of basic code points.
	
			// Finish the basic string - if it is not empty - with a delimiter
			if (basicLength) {
				output.push(delimiter);
			}
	
			// Main encoding loop:
			while (handledCPCount < inputLength) {
	
				// All non-basic code points < n have been handled already. Find the next
				// larger one:
				for (m = maxInt, j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue >= n && currentValue < m) {
						m = currentValue;
					}
				}
	
				// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
				// but guard against overflow
				handledCPCountPlusOne = handledCPCount + 1;
				if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
					error('overflow');
				}
	
				delta += (m - n) * handledCPCountPlusOne;
				n = m;
	
				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];
	
					if (currentValue < n && ++delta > maxInt) {
						error('overflow');
					}
	
					if (currentValue == n) {
						// Represent delta as a generalized variable-length integer
						for (q = delta, k = base; /* no condition */; k += base) {
							t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
							if (q < t) {
								break;
							}
							qMinusT = q - t;
							baseMinusT = base - t;
							output.push(
								stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
							);
							q = floor(qMinusT / baseMinusT);
						}
	
						output.push(stringFromCharCode(digitToBasic(q, 0)));
						bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
						delta = 0;
						++handledCPCount;
					}
				}
	
				++delta;
				++n;
	
			}
			return output.join('');
		}
	
		/**
		 * Converts a Punycode string representing a domain name or an email address
		 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
		 * it doesn't matter if you call it on a string that has already been
		 * converted to Unicode.
		 * @memberOf punycode
		 * @param {String} input The Punycoded domain name or email address to
		 * convert to Unicode.
		 * @returns {String} The Unicode representation of the given Punycode
		 * string.
		 */
		function toUnicode(input) {
			return mapDomain(input, function(string) {
				return regexPunycode.test(string)
					? decode(string.slice(4).toLowerCase())
					: string;
			});
		}
	
		/**
		 * Converts a Unicode string representing a domain name or an email address to
		 * Punycode. Only the non-ASCII parts of the domain name will be converted,
		 * i.e. it doesn't matter if you call it with a domain that's already in
		 * ASCII.
		 * @memberOf punycode
		 * @param {String} input The domain name or email address to convert, as a
		 * Unicode string.
		 * @returns {String} The Punycode representation of the given domain name or
		 * email address.
		 */
		function toASCII(input) {
			return mapDomain(input, function(string) {
				return regexNonASCII.test(string)
					? 'xn--' + encode(string)
					: string;
			});
		}
	
		/*--------------------------------------------------------------------------*/
	
		/** Define the public API */
		punycode = {
			/**
			 * A string representing the current Punycode.js version number.
			 * @memberOf punycode
			 * @type String
			 */
			'version': '1.3.2',
			/**
			 * An object of methods to convert from JavaScript's internal character
			 * representation (UCS-2) to Unicode code points, and back.
			 * @see <https://mathiasbynens.be/notes/javascript-encoding>
			 * @memberOf punycode
			 * @type Object
			 */
			'ucs2': {
				'decode': ucs2decode,
				'encode': ucs2encode
			},
			'decode': decode,
			'encode': encode,
			'toASCII': toASCII,
			'toUnicode': toUnicode
		};
	
		/** Expose `punycode` */
		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return punycode;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (freeExports && freeModule) {
			if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
				freeModule.exports = punycode;
			} else { // in Narwhal or RingoJS v0.7.0-
				for (key in punycode) {
					punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
				}
			}
		} else { // in Rhino or a web browser
			root.punycode = punycode;
		}
	
	}(this));
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(160)(module), (function() { return this; }())))

/***/ }),
/* 160 */
/***/ (function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ }),
/* 161 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = {
	  isString: function(arg) {
	    return typeof(arg) === 'string';
	  },
	  isObject: function(arg) {
	    return typeof(arg) === 'object' && arg !== null;
	  },
	  isNull: function(arg) {
	    return arg === null;
	  },
	  isNullOrUndefined: function(arg) {
	    return arg == null;
	  }
	};


/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.decode = exports.parse = __webpack_require__(163);
	exports.encode = exports.stringify = __webpack_require__(164);


/***/ }),
/* 163 */
/***/ (function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	
	module.exports = function(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};
	
	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }
	
	  var regexp = /\+/g;
	  qs = qs.split(sep);
	
	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }
	
	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }
	
	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;
	
	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }
	
	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);
	
	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (Array.isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }
	
	  return obj;
	};


/***/ }),
/* 164 */
/***/ (function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	var stringifyPrimitive = function(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;
	
	    case 'boolean':
	      return v ? 'true' : 'false';
	
	    case 'number':
	      return isFinite(v) ? v : '';
	
	    default:
	      return '';
	  }
	};
	
	module.exports = function(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }
	
	  if (typeof obj === 'object') {
	    return Object.keys(obj).map(function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (Array.isArray(obj[k])) {
	        return obj[k].map(function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);
	
	  }
	
	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	};


/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

	var http = __webpack_require__(151);
	
	var https = module.exports;
	
	for (var key in http) {
	    if (http.hasOwnProperty(key)) https[key] = http[key];
	};
	
	https.request = function (params, cb) {
	    if (!params) params = {};
	    params.scheme = 'https';
	    params.protocol = 'https:';
	    return http.request.call(this, params, cb);
	}


/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var Transform = __webpack_require__(139);
	
	var binding = __webpack_require__(167);
	var util = __webpack_require__(102);
	var assert = __webpack_require__(179).ok;
	
	// zlib doesn't provide these, so kludge them in following the same
	// const naming scheme zlib uses.
	binding.Z_MIN_WINDOWBITS = 8;
	binding.Z_MAX_WINDOWBITS = 15;
	binding.Z_DEFAULT_WINDOWBITS = 15;
	
	// fewer than 64 bytes per chunk is stupid.
	// technically it could work with as few as 8, but even 64 bytes
	// is absurdly low.  Usually a MB or more is best.
	binding.Z_MIN_CHUNK = 64;
	binding.Z_MAX_CHUNK = Infinity;
	binding.Z_DEFAULT_CHUNK = (16 * 1024);
	
	binding.Z_MIN_MEMLEVEL = 1;
	binding.Z_MAX_MEMLEVEL = 9;
	binding.Z_DEFAULT_MEMLEVEL = 8;
	
	binding.Z_MIN_LEVEL = -1;
	binding.Z_MAX_LEVEL = 9;
	binding.Z_DEFAULT_LEVEL = binding.Z_DEFAULT_COMPRESSION;
	
	// expose all the zlib constants
	Object.keys(binding).forEach(function(k) {
	  if (k.match(/^Z/)) exports[k] = binding[k];
	});
	
	// translation table for return codes.
	exports.codes = {
	  Z_OK: binding.Z_OK,
	  Z_STREAM_END: binding.Z_STREAM_END,
	  Z_NEED_DICT: binding.Z_NEED_DICT,
	  Z_ERRNO: binding.Z_ERRNO,
	  Z_STREAM_ERROR: binding.Z_STREAM_ERROR,
	  Z_DATA_ERROR: binding.Z_DATA_ERROR,
	  Z_MEM_ERROR: binding.Z_MEM_ERROR,
	  Z_BUF_ERROR: binding.Z_BUF_ERROR,
	  Z_VERSION_ERROR: binding.Z_VERSION_ERROR
	};
	
	Object.keys(exports.codes).forEach(function(k) {
	  exports.codes[exports.codes[k]] = k;
	});
	
	exports.Deflate = Deflate;
	exports.Inflate = Inflate;
	exports.Gzip = Gzip;
	exports.Gunzip = Gunzip;
	exports.DeflateRaw = DeflateRaw;
	exports.InflateRaw = InflateRaw;
	exports.Unzip = Unzip;
	
	exports.createDeflate = function(o) {
	  return new Deflate(o);
	};
	
	exports.createInflate = function(o) {
	  return new Inflate(o);
	};
	
	exports.createDeflateRaw = function(o) {
	  return new DeflateRaw(o);
	};
	
	exports.createInflateRaw = function(o) {
	  return new InflateRaw(o);
	};
	
	exports.createGzip = function(o) {
	  return new Gzip(o);
	};
	
	exports.createGunzip = function(o) {
	  return new Gunzip(o);
	};
	
	exports.createUnzip = function(o) {
	  return new Unzip(o);
	};
	
	
	// Convenience methods.
	// compress/decompress a string or buffer in one step.
	exports.deflate = function(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Deflate(opts), buffer, callback);
	};
	
	exports.deflateSync = function(buffer, opts) {
	  return zlibBufferSync(new Deflate(opts), buffer);
	};
	
	exports.gzip = function(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Gzip(opts), buffer, callback);
	};
	
	exports.gzipSync = function(buffer, opts) {
	  return zlibBufferSync(new Gzip(opts), buffer);
	};
	
	exports.deflateRaw = function(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new DeflateRaw(opts), buffer, callback);
	};
	
	exports.deflateRawSync = function(buffer, opts) {
	  return zlibBufferSync(new DeflateRaw(opts), buffer);
	};
	
	exports.unzip = function(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Unzip(opts), buffer, callback);
	};
	
	exports.unzipSync = function(buffer, opts) {
	  return zlibBufferSync(new Unzip(opts), buffer);
	};
	
	exports.inflate = function(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Inflate(opts), buffer, callback);
	};
	
	exports.inflateSync = function(buffer, opts) {
	  return zlibBufferSync(new Inflate(opts), buffer);
	};
	
	exports.gunzip = function(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Gunzip(opts), buffer, callback);
	};
	
	exports.gunzipSync = function(buffer, opts) {
	  return zlibBufferSync(new Gunzip(opts), buffer);
	};
	
	exports.inflateRaw = function(buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new InflateRaw(opts), buffer, callback);
	};
	
	exports.inflateRawSync = function(buffer, opts) {
	  return zlibBufferSync(new InflateRaw(opts), buffer);
	};
	
	function zlibBuffer(engine, buffer, callback) {
	  var buffers = [];
	  var nread = 0;
	
	  engine.on('error', onError);
	  engine.on('end', onEnd);
	
	  engine.end(buffer);
	  flow();
	
	  function flow() {
	    var chunk;
	    while (null !== (chunk = engine.read())) {
	      buffers.push(chunk);
	      nread += chunk.length;
	    }
	    engine.once('readable', flow);
	  }
	
	  function onError(err) {
	    engine.removeListener('end', onEnd);
	    engine.removeListener('readable', flow);
	    callback(err);
	  }
	
	  function onEnd() {
	    var buf = Buffer.concat(buffers, nread);
	    buffers = [];
	    callback(null, buf);
	    engine.close();
	  }
	}
	
	function zlibBufferSync(engine, buffer) {
	  if (typeof buffer === 'string')
	    buffer = new Buffer(buffer);
	  if (!Buffer.isBuffer(buffer))
	    throw new TypeError('Not a string or buffer');
	
	  var flushFlag = binding.Z_FINISH;
	
	  return engine._processChunk(buffer, flushFlag);
	}
	
	// generic zlib
	// minimal 2-byte header
	function Deflate(opts) {
	  if (!(this instanceof Deflate)) return new Deflate(opts);
	  Zlib.call(this, opts, binding.DEFLATE);
	}
	
	function Inflate(opts) {
	  if (!(this instanceof Inflate)) return new Inflate(opts);
	  Zlib.call(this, opts, binding.INFLATE);
	}
	
	
	
	// gzip - bigger header, same deflate compression
	function Gzip(opts) {
	  if (!(this instanceof Gzip)) return new Gzip(opts);
	  Zlib.call(this, opts, binding.GZIP);
	}
	
	function Gunzip(opts) {
	  if (!(this instanceof Gunzip)) return new Gunzip(opts);
	  Zlib.call(this, opts, binding.GUNZIP);
	}
	
	
	
	// raw - no header
	function DeflateRaw(opts) {
	  if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);
	  Zlib.call(this, opts, binding.DEFLATERAW);
	}
	
	function InflateRaw(opts) {
	  if (!(this instanceof InflateRaw)) return new InflateRaw(opts);
	  Zlib.call(this, opts, binding.INFLATERAW);
	}
	
	
	// auto-detect header.
	function Unzip(opts) {
	  if (!(this instanceof Unzip)) return new Unzip(opts);
	  Zlib.call(this, opts, binding.UNZIP);
	}
	
	
	// the Zlib class they all inherit from
	// This thing manages the queue of requests, and returns
	// true or false if there is anything in the queue when
	// you call the .write() method.
	
	function Zlib(opts, mode) {
	  this._opts = opts = opts || {};
	  this._chunkSize = opts.chunkSize || exports.Z_DEFAULT_CHUNK;
	
	  Transform.call(this, opts);
	
	  if (opts.flush) {
	    if (opts.flush !== binding.Z_NO_FLUSH &&
	        opts.flush !== binding.Z_PARTIAL_FLUSH &&
	        opts.flush !== binding.Z_SYNC_FLUSH &&
	        opts.flush !== binding.Z_FULL_FLUSH &&
	        opts.flush !== binding.Z_FINISH &&
	        opts.flush !== binding.Z_BLOCK) {
	      throw new Error('Invalid flush flag: ' + opts.flush);
	    }
	  }
	  this._flushFlag = opts.flush || binding.Z_NO_FLUSH;
	
	  if (opts.chunkSize) {
	    if (opts.chunkSize < exports.Z_MIN_CHUNK ||
	        opts.chunkSize > exports.Z_MAX_CHUNK) {
	      throw new Error('Invalid chunk size: ' + opts.chunkSize);
	    }
	  }
	
	  if (opts.windowBits) {
	    if (opts.windowBits < exports.Z_MIN_WINDOWBITS ||
	        opts.windowBits > exports.Z_MAX_WINDOWBITS) {
	      throw new Error('Invalid windowBits: ' + opts.windowBits);
	    }
	  }
	
	  if (opts.level) {
	    if (opts.level < exports.Z_MIN_LEVEL ||
	        opts.level > exports.Z_MAX_LEVEL) {
	      throw new Error('Invalid compression level: ' + opts.level);
	    }
	  }
	
	  if (opts.memLevel) {
	    if (opts.memLevel < exports.Z_MIN_MEMLEVEL ||
	        opts.memLevel > exports.Z_MAX_MEMLEVEL) {
	      throw new Error('Invalid memLevel: ' + opts.memLevel);
	    }
	  }
	
	  if (opts.strategy) {
	    if (opts.strategy != exports.Z_FILTERED &&
	        opts.strategy != exports.Z_HUFFMAN_ONLY &&
	        opts.strategy != exports.Z_RLE &&
	        opts.strategy != exports.Z_FIXED &&
	        opts.strategy != exports.Z_DEFAULT_STRATEGY) {
	      throw new Error('Invalid strategy: ' + opts.strategy);
	    }
	  }
	
	  if (opts.dictionary) {
	    if (!Buffer.isBuffer(opts.dictionary)) {
	      throw new Error('Invalid dictionary: it should be a Buffer instance');
	    }
	  }
	
	  this._binding = new binding.Zlib(mode);
	
	  var self = this;
	  this._hadError = false;
	  this._binding.onerror = function(message, errno) {
	    // there is no way to cleanly recover.
	    // continuing only obscures problems.
	    self._binding = null;
	    self._hadError = true;
	
	    var error = new Error(message);
	    error.errno = errno;
	    error.code = exports.codes[errno];
	    self.emit('error', error);
	  };
	
	  var level = exports.Z_DEFAULT_COMPRESSION;
	  if (typeof opts.level === 'number') level = opts.level;
	
	  var strategy = exports.Z_DEFAULT_STRATEGY;
	  if (typeof opts.strategy === 'number') strategy = opts.strategy;
	
	  this._binding.init(opts.windowBits || exports.Z_DEFAULT_WINDOWBITS,
	                     level,
	                     opts.memLevel || exports.Z_DEFAULT_MEMLEVEL,
	                     strategy,
	                     opts.dictionary);
	
	  this._buffer = new Buffer(this._chunkSize);
	  this._offset = 0;
	  this._closed = false;
	  this._level = level;
	  this._strategy = strategy;
	
	  this.once('end', this.close);
	}
	
	util.inherits(Zlib, Transform);
	
	Zlib.prototype.params = function(level, strategy, callback) {
	  if (level < exports.Z_MIN_LEVEL ||
	      level > exports.Z_MAX_LEVEL) {
	    throw new RangeError('Invalid compression level: ' + level);
	  }
	  if (strategy != exports.Z_FILTERED &&
	      strategy != exports.Z_HUFFMAN_ONLY &&
	      strategy != exports.Z_RLE &&
	      strategy != exports.Z_FIXED &&
	      strategy != exports.Z_DEFAULT_STRATEGY) {
	    throw new TypeError('Invalid strategy: ' + strategy);
	  }
	
	  if (this._level !== level || this._strategy !== strategy) {
	    var self = this;
	    this.flush(binding.Z_SYNC_FLUSH, function() {
	      self._binding.params(level, strategy);
	      if (!self._hadError) {
	        self._level = level;
	        self._strategy = strategy;
	        if (callback) callback();
	      }
	    });
	  } else {
	    process.nextTick(callback);
	  }
	};
	
	Zlib.prototype.reset = function() {
	  return this._binding.reset();
	};
	
	// This is the _flush function called by the transform class,
	// internally, when the last chunk has been written.
	Zlib.prototype._flush = function(callback) {
	  this._transform(new Buffer(0), '', callback);
	};
	
	Zlib.prototype.flush = function(kind, callback) {
	  var ws = this._writableState;
	
	  if (typeof kind === 'function' || (kind === void 0 && !callback)) {
	    callback = kind;
	    kind = binding.Z_FULL_FLUSH;
	  }
	
	  if (ws.ended) {
	    if (callback)
	      process.nextTick(callback);
	  } else if (ws.ending) {
	    if (callback)
	      this.once('end', callback);
	  } else if (ws.needDrain) {
	    var self = this;
	    this.once('drain', function() {
	      self.flush(callback);
	    });
	  } else {
	    this._flushFlag = kind;
	    this.write(new Buffer(0), '', callback);
	  }
	};
	
	Zlib.prototype.close = function(callback) {
	  if (callback)
	    process.nextTick(callback);
	
	  if (this._closed)
	    return;
	
	  this._closed = true;
	
	  this._binding.close();
	
	  var self = this;
	  process.nextTick(function() {
	    self.emit('close');
	  });
	};
	
	Zlib.prototype._transform = function(chunk, encoding, cb) {
	  var flushFlag;
	  var ws = this._writableState;
	  var ending = ws.ending || ws.ended;
	  var last = ending && (!chunk || ws.length === chunk.length);
	
	  if (!chunk === null && !Buffer.isBuffer(chunk))
	    return cb(new Error('invalid input'));
	
	  // If it's the last chunk, or a final flush, we use the Z_FINISH flush flag.
	  // If it's explicitly flushing at some other time, then we use
	  // Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression
	  // goodness.
	  if (last)
	    flushFlag = binding.Z_FINISH;
	  else {
	    flushFlag = this._flushFlag;
	    // once we've flushed the last of the queue, stop flushing and
	    // go back to the normal behavior.
	    if (chunk.length >= ws.length) {
	      this._flushFlag = this._opts.flush || binding.Z_NO_FLUSH;
	    }
	  }
	
	  var self = this;
	  this._processChunk(chunk, flushFlag, cb);
	};
	
	Zlib.prototype._processChunk = function(chunk, flushFlag, cb) {
	  var availInBefore = chunk && chunk.length;
	  var availOutBefore = this._chunkSize - this._offset;
	  var inOff = 0;
	
	  var self = this;
	
	  var async = typeof cb === 'function';
	
	  if (!async) {
	    var buffers = [];
	    var nread = 0;
	
	    var error;
	    this.on('error', function(er) {
	      error = er;
	    });
	
	    do {
	      var res = this._binding.writeSync(flushFlag,
	                                        chunk, // in
	                                        inOff, // in_off
	                                        availInBefore, // in_len
	                                        this._buffer, // out
	                                        this._offset, //out_off
	                                        availOutBefore); // out_len
	    } while (!this._hadError && callback(res[0], res[1]));
	
	    if (this._hadError) {
	      throw error;
	    }
	
	    var buf = Buffer.concat(buffers, nread);
	    this.close();
	
	    return buf;
	  }
	
	  var req = this._binding.write(flushFlag,
	                                chunk, // in
	                                inOff, // in_off
	                                availInBefore, // in_len
	                                this._buffer, // out
	                                this._offset, //out_off
	                                availOutBefore); // out_len
	
	  req.buffer = chunk;
	  req.callback = callback;
	
	  function callback(availInAfter, availOutAfter) {
	    if (self._hadError)
	      return;
	
	    var have = availOutBefore - availOutAfter;
	    assert(have >= 0, 'have should not go down');
	
	    if (have > 0) {
	      var out = self._buffer.slice(self._offset, self._offset + have);
	      self._offset += have;
	      // serve some output to the consumer.
	      if (async) {
	        self.push(out);
	      } else {
	        buffers.push(out);
	        nread += out.length;
	      }
	    }
	
	    // exhausted the output buffer, or used all the input create a new one.
	    if (availOutAfter === 0 || self._offset >= self._chunkSize) {
	      availOutBefore = self._chunkSize;
	      self._offset = 0;
	      self._buffer = new Buffer(self._chunkSize);
	    }
	
	    if (availOutAfter === 0) {
	      // Not actually done.  Need to reprocess.
	      // Also, update the availInBefore to the availInAfter value,
	      // so that if we have to hit it a third (fourth, etc.) time,
	      // it'll have the correct byte counts.
	      inOff += (availInBefore - availInAfter);
	      availInBefore = availInAfter;
	
	      if (!async)
	        return true;
	
	      var newReq = self._binding.write(flushFlag,
	                                       chunk,
	                                       inOff,
	                                       availInBefore,
	                                       self._buffer,
	                                       self._offset,
	                                       self._chunkSize);
	      newReq.callback = callback; // this same function
	      newReq.buffer = chunk;
	      return;
	    }
	
	    if (!async)
	      return false;
	
	    // finished with the chunk.
	    cb();
	  }
	};
	
	util.inherits(Deflate, Zlib);
	util.inherits(Inflate, Zlib);
	util.inherits(Gzip, Zlib);
	util.inherits(Gunzip, Zlib);
	util.inherits(DeflateRaw, Zlib);
	util.inherits(InflateRaw, Zlib);
	util.inherits(Unzip, Zlib);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(92).Buffer, __webpack_require__(90)))

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer) {var msg = __webpack_require__(168);
	var zstream = __webpack_require__(169);
	var zlib_deflate = __webpack_require__(170);
	var zlib_inflate = __webpack_require__(175);
	var constants = __webpack_require__(178);
	
	for (var key in constants) {
	  exports[key] = constants[key];
	}
	
	// zlib modes
	exports.NONE = 0;
	exports.DEFLATE = 1;
	exports.INFLATE = 2;
	exports.GZIP = 3;
	exports.GUNZIP = 4;
	exports.DEFLATERAW = 5;
	exports.INFLATERAW = 6;
	exports.UNZIP = 7;
	
	/**
	 * Emulate Node's zlib C++ layer for use by the JS layer in index.js
	 */
	function Zlib(mode) {
	  if (mode < exports.DEFLATE || mode > exports.UNZIP)
	    throw new TypeError("Bad argument");
	    
	  this.mode = mode;
	  this.init_done = false;
	  this.write_in_progress = false;
	  this.pending_close = false;
	  this.windowBits = 0;
	  this.level = 0;
	  this.memLevel = 0;
	  this.strategy = 0;
	  this.dictionary = null;
	}
	
	Zlib.prototype.init = function(windowBits, level, memLevel, strategy, dictionary) {
	  this.windowBits = windowBits;
	  this.level = level;
	  this.memLevel = memLevel;
	  this.strategy = strategy;
	  // dictionary not supported.
	  
	  if (this.mode === exports.GZIP || this.mode === exports.GUNZIP)
	    this.windowBits += 16;
	    
	  if (this.mode === exports.UNZIP)
	    this.windowBits += 32;
	    
	  if (this.mode === exports.DEFLATERAW || this.mode === exports.INFLATERAW)
	    this.windowBits = -this.windowBits;
	    
	  this.strm = new zstream();
	  
	  switch (this.mode) {
	    case exports.DEFLATE:
	    case exports.GZIP:
	    case exports.DEFLATERAW:
	      var status = zlib_deflate.deflateInit2(
	        this.strm,
	        this.level,
	        exports.Z_DEFLATED,
	        this.windowBits,
	        this.memLevel,
	        this.strategy
	      );
	      break;
	    case exports.INFLATE:
	    case exports.GUNZIP:
	    case exports.INFLATERAW:
	    case exports.UNZIP:
	      var status  = zlib_inflate.inflateInit2(
	        this.strm,
	        this.windowBits
	      );
	      break;
	    default:
	      throw new Error("Unknown mode " + this.mode);
	  }
	  
	  if (status !== exports.Z_OK) {
	    this._error(status);
	    return;
	  }
	  
	  this.write_in_progress = false;
	  this.init_done = true;
	};
	
	Zlib.prototype.params = function() {
	  throw new Error("deflateParams Not supported");
	};
	
	Zlib.prototype._writeCheck = function() {
	  if (!this.init_done)
	    throw new Error("write before init");
	    
	  if (this.mode === exports.NONE)
	    throw new Error("already finalized");
	    
	  if (this.write_in_progress)
	    throw new Error("write already in progress");
	    
	  if (this.pending_close)
	    throw new Error("close is pending");
	};
	
	Zlib.prototype.write = function(flush, input, in_off, in_len, out, out_off, out_len) {    
	  this._writeCheck();
	  this.write_in_progress = true;
	  
	  var self = this;
	  process.nextTick(function() {
	    self.write_in_progress = false;
	    var res = self._write(flush, input, in_off, in_len, out, out_off, out_len);
	    self.callback(res[0], res[1]);
	    
	    if (self.pending_close)
	      self.close();
	  });
	  
	  return this;
	};
	
	// set method for Node buffers, used by pako
	function bufferSet(data, offset) {
	  for (var i = 0; i < data.length; i++) {
	    this[offset + i] = data[i];
	  }
	}
	
	Zlib.prototype.writeSync = function(flush, input, in_off, in_len, out, out_off, out_len) {
	  this._writeCheck();
	  return this._write(flush, input, in_off, in_len, out, out_off, out_len);
	};
	
	Zlib.prototype._write = function(flush, input, in_off, in_len, out, out_off, out_len) {
	  this.write_in_progress = true;
	  
	  if (flush !== exports.Z_NO_FLUSH &&
	      flush !== exports.Z_PARTIAL_FLUSH &&
	      flush !== exports.Z_SYNC_FLUSH &&
	      flush !== exports.Z_FULL_FLUSH &&
	      flush !== exports.Z_FINISH &&
	      flush !== exports.Z_BLOCK) {
	    throw new Error("Invalid flush value");
	  }
	  
	  if (input == null) {
	    input = new Buffer(0);
	    in_len = 0;
	    in_off = 0;
	  }
	  
	  if (out._set)
	    out.set = out._set;
	  else
	    out.set = bufferSet;
	  
	  var strm = this.strm;
	  strm.avail_in = in_len;
	  strm.input = input;
	  strm.next_in = in_off;
	  strm.avail_out = out_len;
	  strm.output = out;
	  strm.next_out = out_off;
	  
	  switch (this.mode) {
	    case exports.DEFLATE:
	    case exports.GZIP:
	    case exports.DEFLATERAW:
	      var status = zlib_deflate.deflate(strm, flush);
	      break;
	    case exports.UNZIP:
	    case exports.INFLATE:
	    case exports.GUNZIP:
	    case exports.INFLATERAW:
	      var status = zlib_inflate.inflate(strm, flush);
	      break;
	    default:
	      throw new Error("Unknown mode " + this.mode);
	  }
	  
	  if (status !== exports.Z_STREAM_END && status !== exports.Z_OK) {
	    this._error(status);
	  }
	  
	  this.write_in_progress = false;
	  return [strm.avail_in, strm.avail_out];
	};
	
	Zlib.prototype.close = function() {
	  if (this.write_in_progress) {
	    this.pending_close = true;
	    return;
	  }
	  
	  this.pending_close = false;
	  
	  if (this.mode === exports.DEFLATE || this.mode === exports.GZIP || this.mode === exports.DEFLATERAW) {
	    zlib_deflate.deflateEnd(this.strm);
	  } else {
	    zlib_inflate.inflateEnd(this.strm);
	  }
	  
	  this.mode = exports.NONE;
	};
	
	Zlib.prototype.reset = function() {
	  switch (this.mode) {
	    case exports.DEFLATE:
	    case exports.DEFLATERAW:
	      var status = zlib_deflate.deflateReset(this.strm);
	      break;
	    case exports.INFLATE:
	    case exports.INFLATERAW:
	      var status = zlib_inflate.inflateReset(this.strm);
	      break;
	  }
	  
	  if (status !== exports.Z_OK) {
	    this._error(status);
	  }
	};
	
	Zlib.prototype._error = function(status) {
	  this.onerror(msg[status] + ': ' + this.strm.msg, status);
	  
	  this.write_in_progress = false;
	  if (this.pending_close)
	    this.close();
	};
	
	exports.Zlib = Zlib;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90), __webpack_require__(92).Buffer))

/***/ }),
/* 168 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = {
	  2:      'need dictionary',     /* Z_NEED_DICT       2  */
	  1:      'stream end',          /* Z_STREAM_END      1  */
	  0:      '',                    /* Z_OK              0  */
	  '-1':   'file error',          /* Z_ERRNO         (-1) */
	  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
	  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
	  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
	  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
	  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
	};


/***/ }),
/* 169 */
/***/ (function(module, exports) {

	'use strict';
	
	
	function ZStream() {
	  /* next input byte */
	  this.input = null; // JS specific, because we have no pointers
	  this.next_in = 0;
	  /* number of bytes available at input */
	  this.avail_in = 0;
	  /* total number of input bytes read so far */
	  this.total_in = 0;
	  /* next output byte should be put there */
	  this.output = null; // JS specific, because we have no pointers
	  this.next_out = 0;
	  /* remaining free space at output */
	  this.avail_out = 0;
	  /* total number of bytes output so far */
	  this.total_out = 0;
	  /* last error message, NULL if no error */
	  this.msg = ''/*Z_NULL*/;
	  /* not visible by applications */
	  this.state = null;
	  /* best guess about the data type: binary or text */
	  this.data_type = 2/*Z_UNKNOWN*/;
	  /* adler32 value of the uncompressed data */
	  this.adler = 0;
	}
	
	module.exports = ZStream;


/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils   = __webpack_require__(171);
	var trees   = __webpack_require__(172);
	var adler32 = __webpack_require__(173);
	var crc32   = __webpack_require__(174);
	var msg     = __webpack_require__(168);
	
	/* Public constants ==========================================================*/
	/* ===========================================================================*/
	
	
	/* Allowed flush values; see deflate() and inflate() below for details */
	var Z_NO_FLUSH      = 0;
	var Z_PARTIAL_FLUSH = 1;
	//var Z_SYNC_FLUSH    = 2;
	var Z_FULL_FLUSH    = 3;
	var Z_FINISH        = 4;
	var Z_BLOCK         = 5;
	//var Z_TREES         = 6;
	
	
	/* Return codes for the compression/decompression functions. Negative values
	 * are errors, positive values are used for special but normal events.
	 */
	var Z_OK            = 0;
	var Z_STREAM_END    = 1;
	//var Z_NEED_DICT     = 2;
	//var Z_ERRNO         = -1;
	var Z_STREAM_ERROR  = -2;
	var Z_DATA_ERROR    = -3;
	//var Z_MEM_ERROR     = -4;
	var Z_BUF_ERROR     = -5;
	//var Z_VERSION_ERROR = -6;
	
	
	/* compression levels */
	//var Z_NO_COMPRESSION      = 0;
	//var Z_BEST_SPEED          = 1;
	//var Z_BEST_COMPRESSION    = 9;
	var Z_DEFAULT_COMPRESSION = -1;
	
	
	var Z_FILTERED            = 1;
	var Z_HUFFMAN_ONLY        = 2;
	var Z_RLE                 = 3;
	var Z_FIXED               = 4;
	var Z_DEFAULT_STRATEGY    = 0;
	
	/* Possible values of the data_type field (though see inflate()) */
	//var Z_BINARY              = 0;
	//var Z_TEXT                = 1;
	//var Z_ASCII               = 1; // = Z_TEXT
	var Z_UNKNOWN             = 2;
	
	
	/* The deflate compression method */
	var Z_DEFLATED  = 8;
	
	/*============================================================================*/
	
	
	var MAX_MEM_LEVEL = 9;
	/* Maximum value for memLevel in deflateInit2 */
	var MAX_WBITS = 15;
	/* 32K LZ77 window */
	var DEF_MEM_LEVEL = 8;
	
	
	var LENGTH_CODES  = 29;
	/* number of length codes, not counting the special END_BLOCK code */
	var LITERALS      = 256;
	/* number of literal bytes 0..255 */
	var L_CODES       = LITERALS + 1 + LENGTH_CODES;
	/* number of Literal or Length codes, including the END_BLOCK code */
	var D_CODES       = 30;
	/* number of distance codes */
	var BL_CODES      = 19;
	/* number of codes used to transfer the bit lengths */
	var HEAP_SIZE     = 2 * L_CODES + 1;
	/* maximum heap size */
	var MAX_BITS  = 15;
	/* All codes must not exceed MAX_BITS bits */
	
	var MIN_MATCH = 3;
	var MAX_MATCH = 258;
	var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);
	
	var PRESET_DICT = 0x20;
	
	var INIT_STATE = 42;
	var EXTRA_STATE = 69;
	var NAME_STATE = 73;
	var COMMENT_STATE = 91;
	var HCRC_STATE = 103;
	var BUSY_STATE = 113;
	var FINISH_STATE = 666;
	
	var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
	var BS_BLOCK_DONE     = 2; /* block flush performed */
	var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
	var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */
	
	var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.
	
	function err(strm, errorCode) {
	  strm.msg = msg[errorCode];
	  return errorCode;
	}
	
	function rank(f) {
	  return ((f) << 1) - ((f) > 4 ? 9 : 0);
	}
	
	function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }
	
	
	/* =========================================================================
	 * Flush as much pending output as possible. All deflate() output goes
	 * through this function so some applications may wish to modify it
	 * to avoid allocating a large strm->output buffer and copying into it.
	 * (See also read_buf()).
	 */
	function flush_pending(strm) {
	  var s = strm.state;
	
	  //_tr_flush_bits(s);
	  var len = s.pending;
	  if (len > strm.avail_out) {
	    len = strm.avail_out;
	  }
	  if (len === 0) { return; }
	
	  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
	  strm.next_out += len;
	  s.pending_out += len;
	  strm.total_out += len;
	  strm.avail_out -= len;
	  s.pending -= len;
	  if (s.pending === 0) {
	    s.pending_out = 0;
	  }
	}
	
	
	function flush_block_only(s, last) {
	  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
	  s.block_start = s.strstart;
	  flush_pending(s.strm);
	}
	
	
	function put_byte(s, b) {
	  s.pending_buf[s.pending++] = b;
	}
	
	
	/* =========================================================================
	 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
	 * IN assertion: the stream state is correct and there is enough room in
	 * pending_buf.
	 */
	function putShortMSB(s, b) {
	//  put_byte(s, (Byte)(b >> 8));
	//  put_byte(s, (Byte)(b & 0xff));
	  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
	  s.pending_buf[s.pending++] = b & 0xff;
	}
	
	
	/* ===========================================================================
	 * Read a new buffer from the current input stream, update the adler32
	 * and total number of bytes read.  All deflate() input goes through
	 * this function so some applications may wish to modify it to avoid
	 * allocating a large strm->input buffer and copying from it.
	 * (See also flush_pending()).
	 */
	function read_buf(strm, buf, start, size) {
	  var len = strm.avail_in;
	
	  if (len > size) { len = size; }
	  if (len === 0) { return 0; }
	
	  strm.avail_in -= len;
	
	  // zmemcpy(buf, strm->next_in, len);
	  utils.arraySet(buf, strm.input, strm.next_in, len, start);
	  if (strm.state.wrap === 1) {
	    strm.adler = adler32(strm.adler, buf, len, start);
	  }
	
	  else if (strm.state.wrap === 2) {
	    strm.adler = crc32(strm.adler, buf, len, start);
	  }
	
	  strm.next_in += len;
	  strm.total_in += len;
	
	  return len;
	}
	
	
	/* ===========================================================================
	 * Set match_start to the longest match starting at the given string and
	 * return its length. Matches shorter or equal to prev_length are discarded,
	 * in which case the result is equal to prev_length and match_start is
	 * garbage.
	 * IN assertions: cur_match is the head of the hash chain for the current
	 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
	 * OUT assertion: the match length is not greater than s->lookahead.
	 */
	function longest_match(s, cur_match) {
	  var chain_length = s.max_chain_length;      /* max hash chain length */
	  var scan = s.strstart; /* current string */
	  var match;                       /* matched string */
	  var len;                           /* length of current match */
	  var best_len = s.prev_length;              /* best match length so far */
	  var nice_match = s.nice_match;             /* stop if match long enough */
	  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
	      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;
	
	  var _win = s.window; // shortcut
	
	  var wmask = s.w_mask;
	  var prev  = s.prev;
	
	  /* Stop when cur_match becomes <= limit. To simplify the code,
	   * we prevent matches with the string of window index 0.
	   */
	
	  var strend = s.strstart + MAX_MATCH;
	  var scan_end1  = _win[scan + best_len - 1];
	  var scan_end   = _win[scan + best_len];
	
	  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
	   * It is easy to get rid of this optimization if necessary.
	   */
	  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");
	
	  /* Do not waste too much time if we already have a good match: */
	  if (s.prev_length >= s.good_match) {
	    chain_length >>= 2;
	  }
	  /* Do not look for matches beyond the end of the input. This is necessary
	   * to make deflate deterministic.
	   */
	  if (nice_match > s.lookahead) { nice_match = s.lookahead; }
	
	  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");
	
	  do {
	    // Assert(cur_match < s->strstart, "no future");
	    match = cur_match;
	
	    /* Skip to next match if the match length cannot increase
	     * or if the match length is less than 2.  Note that the checks below
	     * for insufficient lookahead only occur occasionally for performance
	     * reasons.  Therefore uninitialized memory will be accessed, and
	     * conditional jumps will be made that depend on those values.
	     * However the length of the match is limited to the lookahead, so
	     * the output of deflate is not affected by the uninitialized values.
	     */
	
	    if (_win[match + best_len]     !== scan_end  ||
	        _win[match + best_len - 1] !== scan_end1 ||
	        _win[match]                !== _win[scan] ||
	        _win[++match]              !== _win[scan + 1]) {
	      continue;
	    }
	
	    /* The check at best_len-1 can be removed because it will be made
	     * again later. (This heuristic is not always a win.)
	     * It is not necessary to compare scan[2] and match[2] since they
	     * are always equal when the other bytes match, given that
	     * the hash keys are equal and that HASH_BITS >= 8.
	     */
	    scan += 2;
	    match++;
	    // Assert(*scan == *match, "match[2]?");
	
	    /* We check for insufficient lookahead only every 8th comparison;
	     * the 256th check will be made at strstart+258.
	     */
	    do {
	      /*jshint noempty:false*/
	    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             scan < strend);
	
	    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");
	
	    len = MAX_MATCH - (strend - scan);
	    scan = strend - MAX_MATCH;
	
	    if (len > best_len) {
	      s.match_start = cur_match;
	      best_len = len;
	      if (len >= nice_match) {
	        break;
	      }
	      scan_end1  = _win[scan + best_len - 1];
	      scan_end   = _win[scan + best_len];
	    }
	  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);
	
	  if (best_len <= s.lookahead) {
	    return best_len;
	  }
	  return s.lookahead;
	}
	
	
	/* ===========================================================================
	 * Fill the window when the lookahead becomes insufficient.
	 * Updates strstart and lookahead.
	 *
	 * IN assertion: lookahead < MIN_LOOKAHEAD
	 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
	 *    At least one byte has been read, or avail_in == 0; reads are
	 *    performed for at least two bytes (required for the zip translate_eol
	 *    option -- not supported here).
	 */
	function fill_window(s) {
	  var _w_size = s.w_size;
	  var p, n, m, more, str;
	
	  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");
	
	  do {
	    more = s.window_size - s.lookahead - s.strstart;
	
	    // JS ints have 32 bit, block below not needed
	    /* Deal with !@#$% 64K limit: */
	    //if (sizeof(int) <= 2) {
	    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
	    //        more = wsize;
	    //
	    //  } else if (more == (unsigned)(-1)) {
	    //        /* Very unlikely, but possible on 16 bit machine if
	    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
	    //         */
	    //        more--;
	    //    }
	    //}
	
	
	    /* If the window is almost full and there is insufficient lookahead,
	     * move the upper half to the lower one to make room in the upper half.
	     */
	    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {
	
	      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
	      s.match_start -= _w_size;
	      s.strstart -= _w_size;
	      /* we now have strstart >= MAX_DIST */
	      s.block_start -= _w_size;
	
	      /* Slide the hash table (could be avoided with 32 bit values
	       at the expense of memory usage). We slide even when level == 0
	       to keep the hash table consistent if we switch back to level > 0
	       later. (Using level 0 permanently is not an optimal usage of
	       zlib, so we don't care about this pathological case.)
	       */
	
	      n = s.hash_size;
	      p = n;
	      do {
	        m = s.head[--p];
	        s.head[p] = (m >= _w_size ? m - _w_size : 0);
	      } while (--n);
	
	      n = _w_size;
	      p = n;
	      do {
	        m = s.prev[--p];
	        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
	        /* If n is not on any hash chain, prev[n] is garbage but
	         * its value will never be used.
	         */
	      } while (--n);
	
	      more += _w_size;
	    }
	    if (s.strm.avail_in === 0) {
	      break;
	    }
	
	    /* If there was no sliding:
	     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
	     *    more == window_size - lookahead - strstart
	     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
	     * => more >= window_size - 2*WSIZE + 2
	     * In the BIG_MEM or MMAP case (not yet supported),
	     *   window_size == input_size + MIN_LOOKAHEAD  &&
	     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
	     * Otherwise, window_size == 2*WSIZE so more >= 2.
	     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
	     */
	    //Assert(more >= 2, "more < 2");
	    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
	    s.lookahead += n;
	
	    /* Initialize the hash value now that we have some input: */
	    if (s.lookahead + s.insert >= MIN_MATCH) {
	      str = s.strstart - s.insert;
	      s.ins_h = s.window[str];
	
	      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
	//#if MIN_MATCH != 3
	//        Call update_hash() MIN_MATCH-3 more times
	//#endif
	      while (s.insert) {
	        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
	        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;
	
	        s.prev[str & s.w_mask] = s.head[s.ins_h];
	        s.head[s.ins_h] = str;
	        str++;
	        s.insert--;
	        if (s.lookahead + s.insert < MIN_MATCH) {
	          break;
	        }
	      }
	    }
	    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
	     * but this is not important since only literal bytes will be emitted.
	     */
	
	  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);
	
	  /* If the WIN_INIT bytes after the end of the current data have never been
	   * written, then zero those bytes in order to avoid memory check reports of
	   * the use of uninitialized (or uninitialised as Julian writes) bytes by
	   * the longest match routines.  Update the high water mark for the next
	   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
	   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
	   */
	//  if (s.high_water < s.window_size) {
	//    var curr = s.strstart + s.lookahead;
	//    var init = 0;
	//
	//    if (s.high_water < curr) {
	//      /* Previous high water mark below current data -- zero WIN_INIT
	//       * bytes or up to end of window, whichever is less.
	//       */
	//      init = s.window_size - curr;
	//      if (init > WIN_INIT)
	//        init = WIN_INIT;
	//      zmemzero(s->window + curr, (unsigned)init);
	//      s->high_water = curr + init;
	//    }
	//    else if (s->high_water < (ulg)curr + WIN_INIT) {
	//      /* High water mark at or above current data, but below current data
	//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
	//       * to end of window, whichever is less.
	//       */
	//      init = (ulg)curr + WIN_INIT - s->high_water;
	//      if (init > s->window_size - s->high_water)
	//        init = s->window_size - s->high_water;
	//      zmemzero(s->window + s->high_water, (unsigned)init);
	//      s->high_water += init;
	//    }
	//  }
	//
	//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
	//    "not enough room for search");
	}
	
	/* ===========================================================================
	 * Copy without compression as much as possible from the input stream, return
	 * the current block state.
	 * This function does not insert new strings in the dictionary since
	 * uncompressible data is probably not useful. This function is used
	 * only for the level=0 compression option.
	 * NOTE: this function should be optimized to avoid extra copying from
	 * window to pending_buf.
	 */
	function deflate_stored(s, flush) {
	  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
	   * to pending_buf_size, and each stored block has a 5 byte header:
	   */
	  var max_block_size = 0xffff;
	
	  if (max_block_size > s.pending_buf_size - 5) {
	    max_block_size = s.pending_buf_size - 5;
	  }
	
	  /* Copy as much as possible from input to output: */
	  for (;;) {
	    /* Fill the window as much as possible: */
	    if (s.lookahead <= 1) {
	
	      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
	      //  s->block_start >= (long)s->w_size, "slide too late");
	//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
	//        s.block_start >= s.w_size)) {
	//        throw  new Error("slide too late");
	//      }
	
	      fill_window(s);
	      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }
	
	      if (s.lookahead === 0) {
	        break;
	      }
	      /* flush the current block */
	    }
	    //Assert(s->block_start >= 0L, "block gone");
	//    if (s.block_start < 0) throw new Error("block gone");
	
	    s.strstart += s.lookahead;
	    s.lookahead = 0;
	
	    /* Emit a stored block if pending_buf will be full: */
	    var max_start = s.block_start + max_block_size;
	
	    if (s.strstart === 0 || s.strstart >= max_start) {
	      /* strstart == 0 is possible when wraparound on 16-bit machine */
	      s.lookahead = s.strstart - max_start;
	      s.strstart = max_start;
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	
	
	    }
	    /* Flush if we may have to slide, otherwise block_start may become
	     * negative and the data will be gone:
	     */
	    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	
	  s.insert = 0;
	
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	
	  if (s.strstart > s.block_start) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	
	  return BS_NEED_MORE;
	}
	
	/* ===========================================================================
	 * Compress as much as possible from the input stream, return the current
	 * block state.
	 * This function does not perform lazy evaluation of matches and inserts
	 * new strings in the dictionary only for unmatched strings or for short
	 * matches. It is used only for the fast compression options.
	 */
	function deflate_fast(s, flush) {
	  var hash_head;        /* head of the hash chain */
	  var bflush;           /* set if current block must be flushed */
	
	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the next match, plus MIN_MATCH bytes to insert the
	     * string following the next match.
	     */
	    if (s.lookahead < MIN_LOOKAHEAD) {
	      fill_window(s);
	      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) {
	        break; /* flush the current block */
	      }
	    }
	
	    /* Insert the string window[strstart .. strstart+2] in the
	     * dictionary, and set hash_head to the head of the hash chain:
	     */
	    hash_head = 0/*NIL*/;
	    if (s.lookahead >= MIN_MATCH) {
	      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	      s.head[s.ins_h] = s.strstart;
	      /***/
	    }
	
	    /* Find the longest match, discarding those <= prev_length.
	     * At this point we have always match_length < MIN_MATCH
	     */
	    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
	      /* To simplify the code, we prevent matches with the string
	       * of window index 0 (in particular we have to avoid a match
	       * of the string with itself at the start of the input file).
	       */
	      s.match_length = longest_match(s, hash_head);
	      /* longest_match() sets match_start */
	    }
	    if (s.match_length >= MIN_MATCH) {
	      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only
	
	      /*** _tr_tally_dist(s, s.strstart - s.match_start,
	                     s.match_length - MIN_MATCH, bflush); ***/
	      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);
	
	      s.lookahead -= s.match_length;
	
	      /* Insert new strings in the hash table only if the match length
	       * is not too large. This saves time but degrades compression.
	       */
	      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
	        s.match_length--; /* string at strstart already in table */
	        do {
	          s.strstart++;
	          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	          s.head[s.ins_h] = s.strstart;
	          /***/
	          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
	           * always MIN_MATCH bytes ahead.
	           */
	        } while (--s.match_length !== 0);
	        s.strstart++;
	      } else
	      {
	        s.strstart += s.match_length;
	        s.match_length = 0;
	        s.ins_h = s.window[s.strstart];
	        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
	        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;
	
	//#if MIN_MATCH != 3
	//                Call UPDATE_HASH() MIN_MATCH-3 more times
	//#endif
	        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
	         * matter since it will be recomputed at next deflate call.
	         */
	      }
	    } else {
	      /* No match, output a literal byte */
	      //Tracevv((stderr,"%c", s.window[s.strstart]));
	      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
	
	      s.lookahead--;
	      s.strstart++;
	    }
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}
	
	/* ===========================================================================
	 * Same as above, but achieves better compression. We use a lazy
	 * evaluation for matches: a match is finally adopted only if there is
	 * no better match at the next window position.
	 */
	function deflate_slow(s, flush) {
	  var hash_head;          /* head of hash chain */
	  var bflush;              /* set if current block must be flushed */
	
	  var max_insert;
	
	  /* Process the input block. */
	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the next match, plus MIN_MATCH bytes to insert the
	     * string following the next match.
	     */
	    if (s.lookahead < MIN_LOOKAHEAD) {
	      fill_window(s);
	      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) { break; } /* flush the current block */
	    }
	
	    /* Insert the string window[strstart .. strstart+2] in the
	     * dictionary, and set hash_head to the head of the hash chain:
	     */
	    hash_head = 0/*NIL*/;
	    if (s.lookahead >= MIN_MATCH) {
	      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	      s.head[s.ins_h] = s.strstart;
	      /***/
	    }
	
	    /* Find the longest match, discarding those <= prev_length.
	     */
	    s.prev_length = s.match_length;
	    s.prev_match = s.match_start;
	    s.match_length = MIN_MATCH - 1;
	
	    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
	        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
	      /* To simplify the code, we prevent matches with the string
	       * of window index 0 (in particular we have to avoid a match
	       * of the string with itself at the start of the input file).
	       */
	      s.match_length = longest_match(s, hash_head);
	      /* longest_match() sets match_start */
	
	      if (s.match_length <= 5 &&
	         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {
	
	        /* If prev_match is also MIN_MATCH, match_start is garbage
	         * but we will ignore the current match anyway.
	         */
	        s.match_length = MIN_MATCH - 1;
	      }
	    }
	    /* If there was a match at the previous step and the current
	     * match is not better, output the previous match:
	     */
	    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
	      max_insert = s.strstart + s.lookahead - MIN_MATCH;
	      /* Do not insert strings in hash table beyond this. */
	
	      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);
	
	      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
	                     s.prev_length - MIN_MATCH, bflush);***/
	      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
	      /* Insert in hash table all strings up to the end of the match.
	       * strstart-1 and strstart are already inserted. If there is not
	       * enough lookahead, the last two strings are not inserted in
	       * the hash table.
	       */
	      s.lookahead -= s.prev_length - 1;
	      s.prev_length -= 2;
	      do {
	        if (++s.strstart <= max_insert) {
	          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	          s.head[s.ins_h] = s.strstart;
	          /***/
	        }
	      } while (--s.prev_length !== 0);
	      s.match_available = 0;
	      s.match_length = MIN_MATCH - 1;
	      s.strstart++;
	
	      if (bflush) {
	        /*** FLUSH_BLOCK(s, 0); ***/
	        flush_block_only(s, false);
	        if (s.strm.avail_out === 0) {
	          return BS_NEED_MORE;
	        }
	        /***/
	      }
	
	    } else if (s.match_available) {
	      /* If there was no match at the previous position, output a
	       * single literal. If there was a match but the current match
	       * is longer, truncate the previous match to a single literal.
	       */
	      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
	      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
	      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);
	
	      if (bflush) {
	        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
	        flush_block_only(s, false);
	        /***/
	      }
	      s.strstart++;
	      s.lookahead--;
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	    } else {
	      /* There is no previous match to compare with, wait for
	       * the next step to decide.
	       */
	      s.match_available = 1;
	      s.strstart++;
	      s.lookahead--;
	    }
	  }
	  //Assert (flush != Z_NO_FLUSH, "no flush?");
	  if (s.match_available) {
	    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
	    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
	    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);
	
	    s.match_available = 0;
	  }
	  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	
	  return BS_BLOCK_DONE;
	}
	
	
	/* ===========================================================================
	 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
	 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
	 * deflate switches away from Z_RLE.)
	 */
	function deflate_rle(s, flush) {
	  var bflush;            /* set if current block must be flushed */
	  var prev;              /* byte at distance one to match */
	  var scan, strend;      /* scan goes up to strend for length of run */
	
	  var _win = s.window;
	
	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the longest run, plus one for the unrolled loop.
	     */
	    if (s.lookahead <= MAX_MATCH) {
	      fill_window(s);
	      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) { break; } /* flush the current block */
	    }
	
	    /* See how many times the previous byte repeats */
	    s.match_length = 0;
	    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
	      scan = s.strstart - 1;
	      prev = _win[scan];
	      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
	        strend = s.strstart + MAX_MATCH;
	        do {
	          /*jshint noempty:false*/
	        } while (prev === _win[++scan] && prev === _win[++scan] &&
	                 prev === _win[++scan] && prev === _win[++scan] &&
	                 prev === _win[++scan] && prev === _win[++scan] &&
	                 prev === _win[++scan] && prev === _win[++scan] &&
	                 scan < strend);
	        s.match_length = MAX_MATCH - (strend - scan);
	        if (s.match_length > s.lookahead) {
	          s.match_length = s.lookahead;
	        }
	      }
	      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
	    }
	
	    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
	    if (s.match_length >= MIN_MATCH) {
	      //check_match(s, s.strstart, s.strstart - 1, s.match_length);
	
	      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
	      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);
	
	      s.lookahead -= s.match_length;
	      s.strstart += s.match_length;
	      s.match_length = 0;
	    } else {
	      /* No match, output a literal byte */
	      //Tracevv((stderr,"%c", s->window[s->strstart]));
	      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
	
	      s.lookahead--;
	      s.strstart++;
	    }
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = 0;
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}
	
	/* ===========================================================================
	 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
	 * (It will be regenerated if this run of deflate switches away from Huffman.)
	 */
	function deflate_huff(s, flush) {
	  var bflush;             /* set if current block must be flushed */
	
	  for (;;) {
	    /* Make sure that we have a literal to write. */
	    if (s.lookahead === 0) {
	      fill_window(s);
	      if (s.lookahead === 0) {
	        if (flush === Z_NO_FLUSH) {
	          return BS_NEED_MORE;
	        }
	        break;      /* flush the current block */
	      }
	    }
	
	    /* Output a literal byte */
	    s.match_length = 0;
	    //Tracevv((stderr,"%c", s->window[s->strstart]));
	    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
	    s.lookahead--;
	    s.strstart++;
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = 0;
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}
	
	/* Values for max_lazy_match, good_match and max_chain_length, depending on
	 * the desired pack level (0..9). The values given below have been tuned to
	 * exclude worst case performance for pathological files. Better values may be
	 * found for specific files.
	 */
	function Config(good_length, max_lazy, nice_length, max_chain, func) {
	  this.good_length = good_length;
	  this.max_lazy = max_lazy;
	  this.nice_length = nice_length;
	  this.max_chain = max_chain;
	  this.func = func;
	}
	
	var configuration_table;
	
	configuration_table = [
	  /*      good lazy nice chain */
	  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
	  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
	  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
	  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */
	
	  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
	  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
	  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
	  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
	  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
	  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
	];
	
	
	/* ===========================================================================
	 * Initialize the "longest match" routines for a new zlib stream
	 */
	function lm_init(s) {
	  s.window_size = 2 * s.w_size;
	
	  /*** CLEAR_HASH(s); ***/
	  zero(s.head); // Fill with NIL (= 0);
	
	  /* Set the default configuration parameters:
	   */
	  s.max_lazy_match = configuration_table[s.level].max_lazy;
	  s.good_match = configuration_table[s.level].good_length;
	  s.nice_match = configuration_table[s.level].nice_length;
	  s.max_chain_length = configuration_table[s.level].max_chain;
	
	  s.strstart = 0;
	  s.block_start = 0;
	  s.lookahead = 0;
	  s.insert = 0;
	  s.match_length = s.prev_length = MIN_MATCH - 1;
	  s.match_available = 0;
	  s.ins_h = 0;
	}
	
	
	function DeflateState() {
	  this.strm = null;            /* pointer back to this zlib stream */
	  this.status = 0;            /* as the name implies */
	  this.pending_buf = null;      /* output still pending */
	  this.pending_buf_size = 0;  /* size of pending_buf */
	  this.pending_out = 0;       /* next pending byte to output to the stream */
	  this.pending = 0;           /* nb of bytes in the pending buffer */
	  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
	  this.gzhead = null;         /* gzip header information to write */
	  this.gzindex = 0;           /* where in extra, name, or comment */
	  this.method = Z_DEFLATED; /* can only be DEFLATED */
	  this.last_flush = -1;   /* value of flush param for previous deflate call */
	
	  this.w_size = 0;  /* LZ77 window size (32K by default) */
	  this.w_bits = 0;  /* log2(w_size)  (8..16) */
	  this.w_mask = 0;  /* w_size - 1 */
	
	  this.window = null;
	  /* Sliding window. Input bytes are read into the second half of the window,
	   * and move to the first half later to keep a dictionary of at least wSize
	   * bytes. With this organization, matches are limited to a distance of
	   * wSize-MAX_MATCH bytes, but this ensures that IO is always
	   * performed with a length multiple of the block size.
	   */
	
	  this.window_size = 0;
	  /* Actual size of window: 2*wSize, except when the user input buffer
	   * is directly used as sliding window.
	   */
	
	  this.prev = null;
	  /* Link to older string with same hash index. To limit the size of this
	   * array to 64K, this link is maintained only for the last 32K strings.
	   * An index in this array is thus a window index modulo 32K.
	   */
	
	  this.head = null;   /* Heads of the hash chains or NIL. */
	
	  this.ins_h = 0;       /* hash index of string to be inserted */
	  this.hash_size = 0;   /* number of elements in hash table */
	  this.hash_bits = 0;   /* log2(hash_size) */
	  this.hash_mask = 0;   /* hash_size-1 */
	
	  this.hash_shift = 0;
	  /* Number of bits by which ins_h must be shifted at each input
	   * step. It must be such that after MIN_MATCH steps, the oldest
	   * byte no longer takes part in the hash key, that is:
	   *   hash_shift * MIN_MATCH >= hash_bits
	   */
	
	  this.block_start = 0;
	  /* Window position at the beginning of the current output block. Gets
	   * negative when the window is moved backwards.
	   */
	
	  this.match_length = 0;      /* length of best match */
	  this.prev_match = 0;        /* previous match */
	  this.match_available = 0;   /* set if previous match exists */
	  this.strstart = 0;          /* start of string to insert */
	  this.match_start = 0;       /* start of matching string */
	  this.lookahead = 0;         /* number of valid bytes ahead in window */
	
	  this.prev_length = 0;
	  /* Length of the best match at previous step. Matches not greater than this
	   * are discarded. This is used in the lazy match evaluation.
	   */
	
	  this.max_chain_length = 0;
	  /* To speed up deflation, hash chains are never searched beyond this
	   * length.  A higher limit improves compression ratio but degrades the
	   * speed.
	   */
	
	  this.max_lazy_match = 0;
	  /* Attempt to find a better match only when the current match is strictly
	   * smaller than this value. This mechanism is used only for compression
	   * levels >= 4.
	   */
	  // That's alias to max_lazy_match, don't use directly
	  //this.max_insert_length = 0;
	  /* Insert new strings in the hash table only if the match length is not
	   * greater than this length. This saves time but degrades compression.
	   * max_insert_length is used only for compression levels <= 3.
	   */
	
	  this.level = 0;     /* compression level (1..9) */
	  this.strategy = 0;  /* favor or force Huffman coding*/
	
	  this.good_match = 0;
	  /* Use a faster search when the previous match is longer than this */
	
	  this.nice_match = 0; /* Stop searching when current match exceeds this */
	
	              /* used by trees.c: */
	
	  /* Didn't use ct_data typedef below to suppress compiler warning */
	
	  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
	  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
	  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */
	
	  // Use flat array of DOUBLE size, with interleaved fata,
	  // because JS does not support effective
	  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
	  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);
	  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);
	  zero(this.dyn_ltree);
	  zero(this.dyn_dtree);
	  zero(this.bl_tree);
	
	  this.l_desc   = null;         /* desc. for literal tree */
	  this.d_desc   = null;         /* desc. for distance tree */
	  this.bl_desc  = null;         /* desc. for bit length tree */
	
	  //ush bl_count[MAX_BITS+1];
	  this.bl_count = new utils.Buf16(MAX_BITS + 1);
	  /* number of codes at each bit length for an optimal tree */
	
	  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
	  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
	  zero(this.heap);
	
	  this.heap_len = 0;               /* number of elements in the heap */
	  this.heap_max = 0;               /* element of largest frequency */
	  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
	   * The same heap array is used to build all trees.
	   */
	
	  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
	  zero(this.depth);
	  /* Depth of each subtree used as tie breaker for trees of equal frequency
	   */
	
	  this.l_buf = 0;          /* buffer index for literals or lengths */
	
	  this.lit_bufsize = 0;
	  /* Size of match buffer for literals/lengths.  There are 4 reasons for
	   * limiting lit_bufsize to 64K:
	   *   - frequencies can be kept in 16 bit counters
	   *   - if compression is not successful for the first block, all input
	   *     data is still in the window so we can still emit a stored block even
	   *     when input comes from standard input.  (This can also be done for
	   *     all blocks if lit_bufsize is not greater than 32K.)
	   *   - if compression is not successful for a file smaller than 64K, we can
	   *     even emit a stored file instead of a stored block (saving 5 bytes).
	   *     This is applicable only for zip (not gzip or zlib).
	   *   - creating new Huffman trees less frequently may not provide fast
	   *     adaptation to changes in the input data statistics. (Take for
	   *     example a binary file with poorly compressible code followed by
	   *     a highly compressible string table.) Smaller buffer sizes give
	   *     fast adaptation but have of course the overhead of transmitting
	   *     trees more frequently.
	   *   - I can't count above 4
	   */
	
	  this.last_lit = 0;      /* running index in l_buf */
	
	  this.d_buf = 0;
	  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
	   * the same number of elements. To use different lengths, an extra flag
	   * array would be necessary.
	   */
	
	  this.opt_len = 0;       /* bit length of current block with optimal trees */
	  this.static_len = 0;    /* bit length of current block with static trees */
	  this.matches = 0;       /* number of string matches in current block */
	  this.insert = 0;        /* bytes at end of window left to insert */
	
	
	  this.bi_buf = 0;
	  /* Output buffer. bits are inserted starting at the bottom (least
	   * significant bits).
	   */
	  this.bi_valid = 0;
	  /* Number of valid bits in bi_buf.  All bits above the last valid bit
	   * are always zero.
	   */
	
	  // Used for window memory init. We safely ignore it for JS. That makes
	  // sense only for pointers and memory check tools.
	  //this.high_water = 0;
	  /* High water mark offset in window for initialized bytes -- bytes above
	   * this are set to zero in order to avoid memory check warnings when
	   * longest match routines access bytes past the input.  This is then
	   * updated to the new high water mark.
	   */
	}
	
	
	function deflateResetKeep(strm) {
	  var s;
	
	  if (!strm || !strm.state) {
	    return err(strm, Z_STREAM_ERROR);
	  }
	
	  strm.total_in = strm.total_out = 0;
	  strm.data_type = Z_UNKNOWN;
	
	  s = strm.state;
	  s.pending = 0;
	  s.pending_out = 0;
	
	  if (s.wrap < 0) {
	    s.wrap = -s.wrap;
	    /* was made negative by deflate(..., Z_FINISH); */
	  }
	  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
	  strm.adler = (s.wrap === 2) ?
	    0  // crc32(0, Z_NULL, 0)
	  :
	    1; // adler32(0, Z_NULL, 0)
	  s.last_flush = Z_NO_FLUSH;
	  trees._tr_init(s);
	  return Z_OK;
	}
	
	
	function deflateReset(strm) {
	  var ret = deflateResetKeep(strm);
	  if (ret === Z_OK) {
	    lm_init(strm.state);
	  }
	  return ret;
	}
	
	
	function deflateSetHeader(strm, head) {
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
	  strm.state.gzhead = head;
	  return Z_OK;
	}
	
	
	function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
	  if (!strm) { // === Z_NULL
	    return Z_STREAM_ERROR;
	  }
	  var wrap = 1;
	
	  if (level === Z_DEFAULT_COMPRESSION) {
	    level = 6;
	  }
	
	  if (windowBits < 0) { /* suppress zlib wrapper */
	    wrap = 0;
	    windowBits = -windowBits;
	  }
	
	  else if (windowBits > 15) {
	    wrap = 2;           /* write gzip wrapper instead */
	    windowBits -= 16;
	  }
	
	
	  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
	    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
	    strategy < 0 || strategy > Z_FIXED) {
	    return err(strm, Z_STREAM_ERROR);
	  }
	
	
	  if (windowBits === 8) {
	    windowBits = 9;
	  }
	  /* until 256-byte window bug fixed */
	
	  var s = new DeflateState();
	
	  strm.state = s;
	  s.strm = strm;
	
	  s.wrap = wrap;
	  s.gzhead = null;
	  s.w_bits = windowBits;
	  s.w_size = 1 << s.w_bits;
	  s.w_mask = s.w_size - 1;
	
	  s.hash_bits = memLevel + 7;
	  s.hash_size = 1 << s.hash_bits;
	  s.hash_mask = s.hash_size - 1;
	  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);
	
	  s.window = new utils.Buf8(s.w_size * 2);
	  s.head = new utils.Buf16(s.hash_size);
	  s.prev = new utils.Buf16(s.w_size);
	
	  // Don't need mem init magic for JS.
	  //s.high_water = 0;  /* nothing written to s->window yet */
	
	  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */
	
	  s.pending_buf_size = s.lit_bufsize * 4;
	
	  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
	  //s->pending_buf = (uchf *) overlay;
	  s.pending_buf = new utils.Buf8(s.pending_buf_size);
	
	  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
	  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
	  s.d_buf = 1 * s.lit_bufsize;
	
	  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
	  s.l_buf = (1 + 2) * s.lit_bufsize;
	
	  s.level = level;
	  s.strategy = strategy;
	  s.method = method;
	
	  return deflateReset(strm);
	}
	
	function deflateInit(strm, level) {
	  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
	}
	
	
	function deflate(strm, flush) {
	  var old_flush, s;
	  var beg, val; // for gzip header write only
	
	  if (!strm || !strm.state ||
	    flush > Z_BLOCK || flush < 0) {
	    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
	  }
	
	  s = strm.state;
	
	  if (!strm.output ||
	      (!strm.input && strm.avail_in !== 0) ||
	      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
	    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
	  }
	
	  s.strm = strm; /* just in case */
	  old_flush = s.last_flush;
	  s.last_flush = flush;
	
	  /* Write the header */
	  if (s.status === INIT_STATE) {
	
	    if (s.wrap === 2) { // GZIP header
	      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
	      put_byte(s, 31);
	      put_byte(s, 139);
	      put_byte(s, 8);
	      if (!s.gzhead) { // s->gzhead == Z_NULL
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, s.level === 9 ? 2 :
	                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
	                     4 : 0));
	        put_byte(s, OS_CODE);
	        s.status = BUSY_STATE;
	      }
	      else {
	        put_byte(s, (s.gzhead.text ? 1 : 0) +
	                    (s.gzhead.hcrc ? 2 : 0) +
	                    (!s.gzhead.extra ? 0 : 4) +
	                    (!s.gzhead.name ? 0 : 8) +
	                    (!s.gzhead.comment ? 0 : 16)
	                );
	        put_byte(s, s.gzhead.time & 0xff);
	        put_byte(s, (s.gzhead.time >> 8) & 0xff);
	        put_byte(s, (s.gzhead.time >> 16) & 0xff);
	        put_byte(s, (s.gzhead.time >> 24) & 0xff);
	        put_byte(s, s.level === 9 ? 2 :
	                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
	                     4 : 0));
	        put_byte(s, s.gzhead.os & 0xff);
	        if (s.gzhead.extra && s.gzhead.extra.length) {
	          put_byte(s, s.gzhead.extra.length & 0xff);
	          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
	        }
	        if (s.gzhead.hcrc) {
	          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
	        }
	        s.gzindex = 0;
	        s.status = EXTRA_STATE;
	      }
	    }
	    else // DEFLATE header
	    {
	      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
	      var level_flags = -1;
	
	      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
	        level_flags = 0;
	      } else if (s.level < 6) {
	        level_flags = 1;
	      } else if (s.level === 6) {
	        level_flags = 2;
	      } else {
	        level_flags = 3;
	      }
	      header |= (level_flags << 6);
	      if (s.strstart !== 0) { header |= PRESET_DICT; }
	      header += 31 - (header % 31);
	
	      s.status = BUSY_STATE;
	      putShortMSB(s, header);
	
	      /* Save the adler32 of the preset dictionary: */
	      if (s.strstart !== 0) {
	        putShortMSB(s, strm.adler >>> 16);
	        putShortMSB(s, strm.adler & 0xffff);
	      }
	      strm.adler = 1; // adler32(0L, Z_NULL, 0);
	    }
	  }
	
	//#ifdef GZIP
	  if (s.status === EXTRA_STATE) {
	    if (s.gzhead.extra/* != Z_NULL*/) {
	      beg = s.pending;  /* start of bytes to update crc */
	
	      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
	        if (s.pending === s.pending_buf_size) {
	          if (s.gzhead.hcrc && s.pending > beg) {
	            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	          }
	          flush_pending(strm);
	          beg = s.pending;
	          if (s.pending === s.pending_buf_size) {
	            break;
	          }
	        }
	        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
	        s.gzindex++;
	      }
	      if (s.gzhead.hcrc && s.pending > beg) {
	        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	      }
	      if (s.gzindex === s.gzhead.extra.length) {
	        s.gzindex = 0;
	        s.status = NAME_STATE;
	      }
	    }
	    else {
	      s.status = NAME_STATE;
	    }
	  }
	  if (s.status === NAME_STATE) {
	    if (s.gzhead.name/* != Z_NULL*/) {
	      beg = s.pending;  /* start of bytes to update crc */
	      //int val;
	
	      do {
	        if (s.pending === s.pending_buf_size) {
	          if (s.gzhead.hcrc && s.pending > beg) {
	            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	          }
	          flush_pending(strm);
	          beg = s.pending;
	          if (s.pending === s.pending_buf_size) {
	            val = 1;
	            break;
	          }
	        }
	        // JS specific: little magic to add zero terminator to end of string
	        if (s.gzindex < s.gzhead.name.length) {
	          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
	        } else {
	          val = 0;
	        }
	        put_byte(s, val);
	      } while (val !== 0);
	
	      if (s.gzhead.hcrc && s.pending > beg) {
	        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	      }
	      if (val === 0) {
	        s.gzindex = 0;
	        s.status = COMMENT_STATE;
	      }
	    }
	    else {
	      s.status = COMMENT_STATE;
	    }
	  }
	  if (s.status === COMMENT_STATE) {
	    if (s.gzhead.comment/* != Z_NULL*/) {
	      beg = s.pending;  /* start of bytes to update crc */
	      //int val;
	
	      do {
	        if (s.pending === s.pending_buf_size) {
	          if (s.gzhead.hcrc && s.pending > beg) {
	            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	          }
	          flush_pending(strm);
	          beg = s.pending;
	          if (s.pending === s.pending_buf_size) {
	            val = 1;
	            break;
	          }
	        }
	        // JS specific: little magic to add zero terminator to end of string
	        if (s.gzindex < s.gzhead.comment.length) {
	          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
	        } else {
	          val = 0;
	        }
	        put_byte(s, val);
	      } while (val !== 0);
	
	      if (s.gzhead.hcrc && s.pending > beg) {
	        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	      }
	      if (val === 0) {
	        s.status = HCRC_STATE;
	      }
	    }
	    else {
	      s.status = HCRC_STATE;
	    }
	  }
	  if (s.status === HCRC_STATE) {
	    if (s.gzhead.hcrc) {
	      if (s.pending + 2 > s.pending_buf_size) {
	        flush_pending(strm);
	      }
	      if (s.pending + 2 <= s.pending_buf_size) {
	        put_byte(s, strm.adler & 0xff);
	        put_byte(s, (strm.adler >> 8) & 0xff);
	        strm.adler = 0; //crc32(0L, Z_NULL, 0);
	        s.status = BUSY_STATE;
	      }
	    }
	    else {
	      s.status = BUSY_STATE;
	    }
	  }
	//#endif
	
	  /* Flush as much pending output as possible */
	  if (s.pending !== 0) {
	    flush_pending(strm);
	    if (strm.avail_out === 0) {
	      /* Since avail_out is 0, deflate will be called again with
	       * more output space, but possibly with both pending and
	       * avail_in equal to zero. There won't be anything to do,
	       * but this is not an error situation so make sure we
	       * return OK instead of BUF_ERROR at next call of deflate:
	       */
	      s.last_flush = -1;
	      return Z_OK;
	    }
	
	    /* Make sure there is something to do and avoid duplicate consecutive
	     * flushes. For repeated and useless calls with Z_FINISH, we keep
	     * returning Z_STREAM_END instead of Z_BUF_ERROR.
	     */
	  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
	    flush !== Z_FINISH) {
	    return err(strm, Z_BUF_ERROR);
	  }
	
	  /* User must not provide more input after the first FINISH: */
	  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
	    return err(strm, Z_BUF_ERROR);
	  }
	
	  /* Start a new block or continue the current one.
	   */
	  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
	    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
	    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
	      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
	        configuration_table[s.level].func(s, flush));
	
	    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
	      s.status = FINISH_STATE;
	    }
	    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
	      if (strm.avail_out === 0) {
	        s.last_flush = -1;
	        /* avoid BUF_ERROR next call, see above */
	      }
	      return Z_OK;
	      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
	       * of deflate should use the same flush parameter to make sure
	       * that the flush is complete. So we don't have to output an
	       * empty block here, this will be done at next call. This also
	       * ensures that for a very small output buffer, we emit at most
	       * one empty block.
	       */
	    }
	    if (bstate === BS_BLOCK_DONE) {
	      if (flush === Z_PARTIAL_FLUSH) {
	        trees._tr_align(s);
	      }
	      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */
	
	        trees._tr_stored_block(s, 0, 0, false);
	        /* For a full flush, this empty block will be recognized
	         * as a special marker by inflate_sync().
	         */
	        if (flush === Z_FULL_FLUSH) {
	          /*** CLEAR_HASH(s); ***/             /* forget history */
	          zero(s.head); // Fill with NIL (= 0);
	
	          if (s.lookahead === 0) {
	            s.strstart = 0;
	            s.block_start = 0;
	            s.insert = 0;
	          }
	        }
	      }
	      flush_pending(strm);
	      if (strm.avail_out === 0) {
	        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
	        return Z_OK;
	      }
	    }
	  }
	  //Assert(strm->avail_out > 0, "bug2");
	  //if (strm.avail_out <= 0) { throw new Error("bug2");}
	
	  if (flush !== Z_FINISH) { return Z_OK; }
	  if (s.wrap <= 0) { return Z_STREAM_END; }
	
	  /* Write the trailer */
	  if (s.wrap === 2) {
	    put_byte(s, strm.adler & 0xff);
	    put_byte(s, (strm.adler >> 8) & 0xff);
	    put_byte(s, (strm.adler >> 16) & 0xff);
	    put_byte(s, (strm.adler >> 24) & 0xff);
	    put_byte(s, strm.total_in & 0xff);
	    put_byte(s, (strm.total_in >> 8) & 0xff);
	    put_byte(s, (strm.total_in >> 16) & 0xff);
	    put_byte(s, (strm.total_in >> 24) & 0xff);
	  }
	  else
	  {
	    putShortMSB(s, strm.adler >>> 16);
	    putShortMSB(s, strm.adler & 0xffff);
	  }
	
	  flush_pending(strm);
	  /* If avail_out is zero, the application will call deflate again
	   * to flush the rest.
	   */
	  if (s.wrap > 0) { s.wrap = -s.wrap; }
	  /* write the trailer only once! */
	  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
	}
	
	function deflateEnd(strm) {
	  var status;
	
	  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
	    return Z_STREAM_ERROR;
	  }
	
	  status = strm.state.status;
	  if (status !== INIT_STATE &&
	    status !== EXTRA_STATE &&
	    status !== NAME_STATE &&
	    status !== COMMENT_STATE &&
	    status !== HCRC_STATE &&
	    status !== BUSY_STATE &&
	    status !== FINISH_STATE
	  ) {
	    return err(strm, Z_STREAM_ERROR);
	  }
	
	  strm.state = null;
	
	  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
	}
	
	
	/* =========================================================================
	 * Initializes the compression dictionary from the given byte
	 * sequence without producing any compressed output.
	 */
	function deflateSetDictionary(strm, dictionary) {
	  var dictLength = dictionary.length;
	
	  var s;
	  var str, n;
	  var wrap;
	  var avail;
	  var next;
	  var input;
	  var tmpDict;
	
	  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
	    return Z_STREAM_ERROR;
	  }
	
	  s = strm.state;
	  wrap = s.wrap;
	
	  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
	    return Z_STREAM_ERROR;
	  }
	
	  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
	  if (wrap === 1) {
	    /* adler32(strm->adler, dictionary, dictLength); */
	    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
	  }
	
	  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */
	
	  /* if dictionary would fill window, just replace the history */
	  if (dictLength >= s.w_size) {
	    if (wrap === 0) {            /* already empty otherwise */
	      /*** CLEAR_HASH(s); ***/
	      zero(s.head); // Fill with NIL (= 0);
	      s.strstart = 0;
	      s.block_start = 0;
	      s.insert = 0;
	    }
	    /* use the tail */
	    // dictionary = dictionary.slice(dictLength - s.w_size);
	    tmpDict = new utils.Buf8(s.w_size);
	    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
	    dictionary = tmpDict;
	    dictLength = s.w_size;
	  }
	  /* insert dictionary into window and hash */
	  avail = strm.avail_in;
	  next = strm.next_in;
	  input = strm.input;
	  strm.avail_in = dictLength;
	  strm.next_in = 0;
	  strm.input = dictionary;
	  fill_window(s);
	  while (s.lookahead >= MIN_MATCH) {
	    str = s.strstart;
	    n = s.lookahead - (MIN_MATCH - 1);
	    do {
	      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;
	
	      s.prev[str & s.w_mask] = s.head[s.ins_h];
	
	      s.head[s.ins_h] = str;
	      str++;
	    } while (--n);
	    s.strstart = str;
	    s.lookahead = MIN_MATCH - 1;
	    fill_window(s);
	  }
	  s.strstart += s.lookahead;
	  s.block_start = s.strstart;
	  s.insert = s.lookahead;
	  s.lookahead = 0;
	  s.match_length = s.prev_length = MIN_MATCH - 1;
	  s.match_available = 0;
	  strm.next_in = next;
	  strm.input = input;
	  strm.avail_in = avail;
	  s.wrap = wrap;
	  return Z_OK;
	}
	
	
	exports.deflateInit = deflateInit;
	exports.deflateInit2 = deflateInit2;
	exports.deflateReset = deflateReset;
	exports.deflateResetKeep = deflateResetKeep;
	exports.deflateSetHeader = deflateSetHeader;
	exports.deflate = deflate;
	exports.deflateEnd = deflateEnd;
	exports.deflateSetDictionary = deflateSetDictionary;
	exports.deflateInfo = 'pako deflate (from Nodeca project)';
	
	/* Not implemented
	exports.deflateBound = deflateBound;
	exports.deflateCopy = deflateCopy;
	exports.deflateParams = deflateParams;
	exports.deflatePending = deflatePending;
	exports.deflatePrime = deflatePrime;
	exports.deflateTune = deflateTune;
	*/


/***/ }),
/* 171 */
/***/ (function(module, exports) {

	'use strict';
	
	
	var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
	                (typeof Uint16Array !== 'undefined') &&
	                (typeof Int32Array !== 'undefined');
	
	
	exports.assign = function (obj /*from1, from2, from3, ...*/) {
	  var sources = Array.prototype.slice.call(arguments, 1);
	  while (sources.length) {
	    var source = sources.shift();
	    if (!source) { continue; }
	
	    if (typeof source !== 'object') {
	      throw new TypeError(source + 'must be non-object');
	    }
	
	    for (var p in source) {
	      if (source.hasOwnProperty(p)) {
	        obj[p] = source[p];
	      }
	    }
	  }
	
	  return obj;
	};
	
	
	// reduce buffer size, avoiding mem copy
	exports.shrinkBuf = function (buf, size) {
	  if (buf.length === size) { return buf; }
	  if (buf.subarray) { return buf.subarray(0, size); }
	  buf.length = size;
	  return buf;
	};
	
	
	var fnTyped = {
	  arraySet: function (dest, src, src_offs, len, dest_offs) {
	    if (src.subarray && dest.subarray) {
	      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
	      return;
	    }
	    // Fallback to ordinary array
	    for (var i = 0; i < len; i++) {
	      dest[dest_offs + i] = src[src_offs + i];
	    }
	  },
	  // Join array of chunks to single array.
	  flattenChunks: function (chunks) {
	    var i, l, len, pos, chunk, result;
	
	    // calculate data length
	    len = 0;
	    for (i = 0, l = chunks.length; i < l; i++) {
	      len += chunks[i].length;
	    }
	
	    // join chunks
	    result = new Uint8Array(len);
	    pos = 0;
	    for (i = 0, l = chunks.length; i < l; i++) {
	      chunk = chunks[i];
	      result.set(chunk, pos);
	      pos += chunk.length;
	    }
	
	    return result;
	  }
	};
	
	var fnUntyped = {
	  arraySet: function (dest, src, src_offs, len, dest_offs) {
	    for (var i = 0; i < len; i++) {
	      dest[dest_offs + i] = src[src_offs + i];
	    }
	  },
	  // Join array of chunks to single array.
	  flattenChunks: function (chunks) {
	    return [].concat.apply([], chunks);
	  }
	};
	
	
	// Enable/Disable typed arrays use, for testing
	//
	exports.setTyped = function (on) {
	  if (on) {
	    exports.Buf8  = Uint8Array;
	    exports.Buf16 = Uint16Array;
	    exports.Buf32 = Int32Array;
	    exports.assign(exports, fnTyped);
	  } else {
	    exports.Buf8  = Array;
	    exports.Buf16 = Array;
	    exports.Buf32 = Array;
	    exports.assign(exports, fnUntyped);
	  }
	};
	
	exports.setTyped(TYPED_OK);


/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	
	var utils = __webpack_require__(171);
	
	/* Public constants ==========================================================*/
	/* ===========================================================================*/
	
	
	//var Z_FILTERED          = 1;
	//var Z_HUFFMAN_ONLY      = 2;
	//var Z_RLE               = 3;
	var Z_FIXED               = 4;
	//var Z_DEFAULT_STRATEGY  = 0;
	
	/* Possible values of the data_type field (though see inflate()) */
	var Z_BINARY              = 0;
	var Z_TEXT                = 1;
	//var Z_ASCII             = 1; // = Z_TEXT
	var Z_UNKNOWN             = 2;
	
	/*============================================================================*/
	
	
	function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }
	
	// From zutil.h
	
	var STORED_BLOCK = 0;
	var STATIC_TREES = 1;
	var DYN_TREES    = 2;
	/* The three kinds of block type */
	
	var MIN_MATCH    = 3;
	var MAX_MATCH    = 258;
	/* The minimum and maximum match lengths */
	
	// From deflate.h
	/* ===========================================================================
	 * Internal compression state.
	 */
	
	var LENGTH_CODES  = 29;
	/* number of length codes, not counting the special END_BLOCK code */
	
	var LITERALS      = 256;
	/* number of literal bytes 0..255 */
	
	var L_CODES       = LITERALS + 1 + LENGTH_CODES;
	/* number of Literal or Length codes, including the END_BLOCK code */
	
	var D_CODES       = 30;
	/* number of distance codes */
	
	var BL_CODES      = 19;
	/* number of codes used to transfer the bit lengths */
	
	var HEAP_SIZE     = 2 * L_CODES + 1;
	/* maximum heap size */
	
	var MAX_BITS      = 15;
	/* All codes must not exceed MAX_BITS bits */
	
	var Buf_size      = 16;
	/* size of bit buffer in bi_buf */
	
	
	/* ===========================================================================
	 * Constants
	 */
	
	var MAX_BL_BITS = 7;
	/* Bit length codes must not exceed MAX_BL_BITS bits */
	
	var END_BLOCK   = 256;
	/* end of block literal code */
	
	var REP_3_6     = 16;
	/* repeat previous bit length 3-6 times (2 bits of repeat count) */
	
	var REPZ_3_10   = 17;
	/* repeat a zero length 3-10 times  (3 bits of repeat count) */
	
	var REPZ_11_138 = 18;
	/* repeat a zero length 11-138 times  (7 bits of repeat count) */
	
	/* eslint-disable comma-spacing,array-bracket-spacing */
	var extra_lbits =   /* extra bits for each length code */
	  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];
	
	var extra_dbits =   /* extra bits for each distance code */
	  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];
	
	var extra_blbits =  /* extra bits for each bit length code */
	  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];
	
	var bl_order =
	  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
	/* eslint-enable comma-spacing,array-bracket-spacing */
	
	/* The lengths of the bit length codes are sent in order of decreasing
	 * probability, to avoid transmitting the lengths for unused bit length codes.
	 */
	
	/* ===========================================================================
	 * Local data. These are initialized only once.
	 */
	
	// We pre-fill arrays with 0 to avoid uninitialized gaps
	
	var DIST_CODE_LEN = 512; /* see definition of array dist_code below */
	
	// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1
	var static_ltree  = new Array((L_CODES + 2) * 2);
	zero(static_ltree);
	/* The static literal tree. Since the bit lengths are imposed, there is no
	 * need for the L_CODES extra codes used during heap construction. However
	 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
	 * below).
	 */
	
	var static_dtree  = new Array(D_CODES * 2);
	zero(static_dtree);
	/* The static distance tree. (Actually a trivial tree since all codes use
	 * 5 bits.)
	 */
	
	var _dist_code    = new Array(DIST_CODE_LEN);
	zero(_dist_code);
	/* Distance codes. The first 256 values correspond to the distances
	 * 3 .. 258, the last 256 values correspond to the top 8 bits of
	 * the 15 bit distances.
	 */
	
	var _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);
	zero(_length_code);
	/* length code for each normalized match length (0 == MIN_MATCH) */
	
	var base_length   = new Array(LENGTH_CODES);
	zero(base_length);
	/* First normalized length for each code (0 = MIN_MATCH) */
	
	var base_dist     = new Array(D_CODES);
	zero(base_dist);
	/* First normalized distance for each code (0 = distance of 1) */
	
	
	function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {
	
	  this.static_tree  = static_tree;  /* static tree or NULL */
	  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
	  this.extra_base   = extra_base;   /* base index for extra_bits */
	  this.elems        = elems;        /* max number of elements in the tree */
	  this.max_length   = max_length;   /* max bit length for the codes */
	
	  // show if `static_tree` has data or dummy - needed for monomorphic objects
	  this.has_stree    = static_tree && static_tree.length;
	}
	
	
	var static_l_desc;
	var static_d_desc;
	var static_bl_desc;
	
	
	function TreeDesc(dyn_tree, stat_desc) {
	  this.dyn_tree = dyn_tree;     /* the dynamic tree */
	  this.max_code = 0;            /* largest code with non zero frequency */
	  this.stat_desc = stat_desc;   /* the corresponding static tree */
	}
	
	
	
	function d_code(dist) {
	  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
	}
	
	
	/* ===========================================================================
	 * Output a short LSB first on the stream.
	 * IN assertion: there is enough room in pendingBuf.
	 */
	function put_short(s, w) {
	//    put_byte(s, (uch)((w) & 0xff));
	//    put_byte(s, (uch)((ush)(w) >> 8));
	  s.pending_buf[s.pending++] = (w) & 0xff;
	  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
	}
	
	
	/* ===========================================================================
	 * Send a value on a given number of bits.
	 * IN assertion: length <= 16 and value fits in length bits.
	 */
	function send_bits(s, value, length) {
	  if (s.bi_valid > (Buf_size - length)) {
	    s.bi_buf |= (value << s.bi_valid) & 0xffff;
	    put_short(s, s.bi_buf);
	    s.bi_buf = value >> (Buf_size - s.bi_valid);
	    s.bi_valid += length - Buf_size;
	  } else {
	    s.bi_buf |= (value << s.bi_valid) & 0xffff;
	    s.bi_valid += length;
	  }
	}
	
	
	function send_code(s, c, tree) {
	  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
	}
	
	
	/* ===========================================================================
	 * Reverse the first len bits of a code, using straightforward code (a faster
	 * method would use a table)
	 * IN assertion: 1 <= len <= 15
	 */
	function bi_reverse(code, len) {
	  var res = 0;
	  do {
	    res |= code & 1;
	    code >>>= 1;
	    res <<= 1;
	  } while (--len > 0);
	  return res >>> 1;
	}
	
	
	/* ===========================================================================
	 * Flush the bit buffer, keeping at most 7 bits in it.
	 */
	function bi_flush(s) {
	  if (s.bi_valid === 16) {
	    put_short(s, s.bi_buf);
	    s.bi_buf = 0;
	    s.bi_valid = 0;
	
	  } else if (s.bi_valid >= 8) {
	    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
	    s.bi_buf >>= 8;
	    s.bi_valid -= 8;
	  }
	}
	
	
	/* ===========================================================================
	 * Compute the optimal bit lengths for a tree and update the total bit length
	 * for the current block.
	 * IN assertion: the fields freq and dad are set, heap[heap_max] and
	 *    above are the tree nodes sorted by increasing frequency.
	 * OUT assertions: the field len is set to the optimal bit length, the
	 *     array bl_count contains the frequencies for each bit length.
	 *     The length opt_len is updated; static_len is also updated if stree is
	 *     not null.
	 */
	function gen_bitlen(s, desc)
	//    deflate_state *s;
	//    tree_desc *desc;    /* the tree descriptor */
	{
	  var tree            = desc.dyn_tree;
	  var max_code        = desc.max_code;
	  var stree           = desc.stat_desc.static_tree;
	  var has_stree       = desc.stat_desc.has_stree;
	  var extra           = desc.stat_desc.extra_bits;
	  var base            = desc.stat_desc.extra_base;
	  var max_length      = desc.stat_desc.max_length;
	  var h;              /* heap index */
	  var n, m;           /* iterate over the tree elements */
	  var bits;           /* bit length */
	  var xbits;          /* extra bits */
	  var f;              /* frequency */
	  var overflow = 0;   /* number of elements with bit length too large */
	
	  for (bits = 0; bits <= MAX_BITS; bits++) {
	    s.bl_count[bits] = 0;
	  }
	
	  /* In a first pass, compute the optimal bit lengths (which may
	   * overflow in the case of the bit length tree).
	   */
	  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */
	
	  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
	    n = s.heap[h];
	    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
	    if (bits > max_length) {
	      bits = max_length;
	      overflow++;
	    }
	    tree[n * 2 + 1]/*.Len*/ = bits;
	    /* We overwrite tree[n].Dad which is no longer needed */
	
	    if (n > max_code) { continue; } /* not a leaf node */
	
	    s.bl_count[bits]++;
	    xbits = 0;
	    if (n >= base) {
	      xbits = extra[n - base];
	    }
	    f = tree[n * 2]/*.Freq*/;
	    s.opt_len += f * (bits + xbits);
	    if (has_stree) {
	      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
	    }
	  }
	  if (overflow === 0) { return; }
	
	  // Trace((stderr,"\nbit length overflow\n"));
	  /* This happens for example on obj2 and pic of the Calgary corpus */
	
	  /* Find the first bit length which could increase: */
	  do {
	    bits = max_length - 1;
	    while (s.bl_count[bits] === 0) { bits--; }
	    s.bl_count[bits]--;      /* move one leaf down the tree */
	    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
	    s.bl_count[max_length]--;
	    /* The brother of the overflow item also moves one step up,
	     * but this does not affect bl_count[max_length]
	     */
	    overflow -= 2;
	  } while (overflow > 0);
	
	  /* Now recompute all bit lengths, scanning in increasing frequency.
	   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
	   * lengths instead of fixing only the wrong ones. This idea is taken
	   * from 'ar' written by Haruhiko Okumura.)
	   */
	  for (bits = max_length; bits !== 0; bits--) {
	    n = s.bl_count[bits];
	    while (n !== 0) {
	      m = s.heap[--h];
	      if (m > max_code) { continue; }
	      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
	        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
	        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
	        tree[m * 2 + 1]/*.Len*/ = bits;
	      }
	      n--;
	    }
	  }
	}
	
	
	/* ===========================================================================
	 * Generate the codes for a given tree and bit counts (which need not be
	 * optimal).
	 * IN assertion: the array bl_count contains the bit length statistics for
	 * the given tree and the field len is set for all tree elements.
	 * OUT assertion: the field code is set for all tree elements of non
	 *     zero code length.
	 */
	function gen_codes(tree, max_code, bl_count)
	//    ct_data *tree;             /* the tree to decorate */
	//    int max_code;              /* largest code with non zero frequency */
	//    ushf *bl_count;            /* number of codes at each bit length */
	{
	  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
	  var code = 0;              /* running code value */
	  var bits;                  /* bit index */
	  var n;                     /* code index */
	
	  /* The distribution counts are first used to generate the code values
	   * without bit reversal.
	   */
	  for (bits = 1; bits <= MAX_BITS; bits++) {
	    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
	  }
	  /* Check that the bit counts in bl_count are consistent. The last code
	   * must be all ones.
	   */
	  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
	  //        "inconsistent bit counts");
	  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
	
	  for (n = 0;  n <= max_code; n++) {
	    var len = tree[n * 2 + 1]/*.Len*/;
	    if (len === 0) { continue; }
	    /* Now reverse the bits */
	    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);
	
	    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
	    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
	  }
	}
	
	
	/* ===========================================================================
	 * Initialize the various 'constant' tables.
	 */
	function tr_static_init() {
	  var n;        /* iterates over tree elements */
	  var bits;     /* bit counter */
	  var length;   /* length value */
	  var code;     /* code value */
	  var dist;     /* distance index */
	  var bl_count = new Array(MAX_BITS + 1);
	  /* number of codes at each bit length for an optimal tree */
	
	  // do check in _tr_init()
	  //if (static_init_done) return;
	
	  /* For some embedded targets, global variables are not initialized: */
	/*#ifdef NO_INIT_GLOBAL_POINTERS
	  static_l_desc.static_tree = static_ltree;
	  static_l_desc.extra_bits = extra_lbits;
	  static_d_desc.static_tree = static_dtree;
	  static_d_desc.extra_bits = extra_dbits;
	  static_bl_desc.extra_bits = extra_blbits;
	#endif*/
	
	  /* Initialize the mapping length (0..255) -> length code (0..28) */
	  length = 0;
	  for (code = 0; code < LENGTH_CODES - 1; code++) {
	    base_length[code] = length;
	    for (n = 0; n < (1 << extra_lbits[code]); n++) {
	      _length_code[length++] = code;
	    }
	  }
	  //Assert (length == 256, "tr_static_init: length != 256");
	  /* Note that the length 255 (match length 258) can be represented
	   * in two different ways: code 284 + 5 bits or code 285, so we
	   * overwrite length_code[255] to use the best encoding:
	   */
	  _length_code[length - 1] = code;
	
	  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
	  dist = 0;
	  for (code = 0; code < 16; code++) {
	    base_dist[code] = dist;
	    for (n = 0; n < (1 << extra_dbits[code]); n++) {
	      _dist_code[dist++] = code;
	    }
	  }
	  //Assert (dist == 256, "tr_static_init: dist != 256");
	  dist >>= 7; /* from now on, all distances are divided by 128 */
	  for (; code < D_CODES; code++) {
	    base_dist[code] = dist << 7;
	    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
	      _dist_code[256 + dist++] = code;
	    }
	  }
	  //Assert (dist == 256, "tr_static_init: 256+dist != 512");
	
	  /* Construct the codes of the static literal tree */
	  for (bits = 0; bits <= MAX_BITS; bits++) {
	    bl_count[bits] = 0;
	  }
	
	  n = 0;
	  while (n <= 143) {
	    static_ltree[n * 2 + 1]/*.Len*/ = 8;
	    n++;
	    bl_count[8]++;
	  }
	  while (n <= 255) {
	    static_ltree[n * 2 + 1]/*.Len*/ = 9;
	    n++;
	    bl_count[9]++;
	  }
	  while (n <= 279) {
	    static_ltree[n * 2 + 1]/*.Len*/ = 7;
	    n++;
	    bl_count[7]++;
	  }
	  while (n <= 287) {
	    static_ltree[n * 2 + 1]/*.Len*/ = 8;
	    n++;
	    bl_count[8]++;
	  }
	  /* Codes 286 and 287 do not exist, but we must include them in the
	   * tree construction to get a canonical Huffman tree (longest code
	   * all ones)
	   */
	  gen_codes(static_ltree, L_CODES + 1, bl_count);
	
	  /* The static distance tree is trivial: */
	  for (n = 0; n < D_CODES; n++) {
	    static_dtree[n * 2 + 1]/*.Len*/ = 5;
	    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
	  }
	
	  // Now data ready and we can init static trees
	  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
	  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
	  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);
	
	  //static_init_done = true;
	}
	
	
	/* ===========================================================================
	 * Initialize a new block.
	 */
	function init_block(s) {
	  var n; /* iterates over tree elements */
	
	  /* Initialize the trees. */
	  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
	  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
	  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }
	
	  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
	  s.opt_len = s.static_len = 0;
	  s.last_lit = s.matches = 0;
	}
	
	
	/* ===========================================================================
	 * Flush the bit buffer and align the output on a byte boundary
	 */
	function bi_windup(s)
	{
	  if (s.bi_valid > 8) {
	    put_short(s, s.bi_buf);
	  } else if (s.bi_valid > 0) {
	    //put_byte(s, (Byte)s->bi_buf);
	    s.pending_buf[s.pending++] = s.bi_buf;
	  }
	  s.bi_buf = 0;
	  s.bi_valid = 0;
	}
	
	/* ===========================================================================
	 * Copy a stored block, storing first the length and its
	 * one's complement if requested.
	 */
	function copy_block(s, buf, len, header)
	//DeflateState *s;
	//charf    *buf;    /* the input data */
	//unsigned len;     /* its length */
	//int      header;  /* true if block header must be written */
	{
	  bi_windup(s);        /* align on byte boundary */
	
	  if (header) {
	    put_short(s, len);
	    put_short(s, ~len);
	  }
	//  while (len--) {
	//    put_byte(s, *buf++);
	//  }
	  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
	  s.pending += len;
	}
	
	/* ===========================================================================
	 * Compares to subtrees, using the tree depth as tie breaker when
	 * the subtrees have equal frequency. This minimizes the worst case length.
	 */
	function smaller(tree, n, m, depth) {
	  var _n2 = n * 2;
	  var _m2 = m * 2;
	  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
	         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
	}
	
	/* ===========================================================================
	 * Restore the heap property by moving down the tree starting at node k,
	 * exchanging a node with the smallest of its two sons if necessary, stopping
	 * when the heap property is re-established (each father smaller than its
	 * two sons).
	 */
	function pqdownheap(s, tree, k)
	//    deflate_state *s;
	//    ct_data *tree;  /* the tree to restore */
	//    int k;               /* node to move down */
	{
	  var v = s.heap[k];
	  var j = k << 1;  /* left son of k */
	  while (j <= s.heap_len) {
	    /* Set j to the smallest of the two sons: */
	    if (j < s.heap_len &&
	      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
	      j++;
	    }
	    /* Exit if v is smaller than both sons */
	    if (smaller(tree, v, s.heap[j], s.depth)) { break; }
	
	    /* Exchange v with the smallest son */
	    s.heap[k] = s.heap[j];
	    k = j;
	
	    /* And continue down the tree, setting j to the left son of k */
	    j <<= 1;
	  }
	  s.heap[k] = v;
	}
	
	
	// inlined manually
	// var SMALLEST = 1;
	
	/* ===========================================================================
	 * Send the block data compressed using the given Huffman trees
	 */
	function compress_block(s, ltree, dtree)
	//    deflate_state *s;
	//    const ct_data *ltree; /* literal tree */
	//    const ct_data *dtree; /* distance tree */
	{
	  var dist;           /* distance of matched string */
	  var lc;             /* match length or unmatched char (if dist == 0) */
	  var lx = 0;         /* running index in l_buf */
	  var code;           /* the code to send */
	  var extra;          /* number of extra bits to send */
	
	  if (s.last_lit !== 0) {
	    do {
	      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
	      lc = s.pending_buf[s.l_buf + lx];
	      lx++;
	
	      if (dist === 0) {
	        send_code(s, lc, ltree); /* send a literal byte */
	        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
	      } else {
	        /* Here, lc is the match length - MIN_MATCH */
	        code = _length_code[lc];
	        send_code(s, code + LITERALS + 1, ltree); /* send the length code */
	        extra = extra_lbits[code];
	        if (extra !== 0) {
	          lc -= base_length[code];
	          send_bits(s, lc, extra);       /* send the extra length bits */
	        }
	        dist--; /* dist is now the match distance - 1 */
	        code = d_code(dist);
	        //Assert (code < D_CODES, "bad d_code");
	
	        send_code(s, code, dtree);       /* send the distance code */
	        extra = extra_dbits[code];
	        if (extra !== 0) {
	          dist -= base_dist[code];
	          send_bits(s, dist, extra);   /* send the extra distance bits */
	        }
	      } /* literal or match pair ? */
	
	      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
	      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
	      //       "pendingBuf overflow");
	
	    } while (lx < s.last_lit);
	  }
	
	  send_code(s, END_BLOCK, ltree);
	}
	
	
	/* ===========================================================================
	 * Construct one Huffman tree and assigns the code bit strings and lengths.
	 * Update the total bit length for the current block.
	 * IN assertion: the field freq is set for all tree elements.
	 * OUT assertions: the fields len and code are set to the optimal bit length
	 *     and corresponding code. The length opt_len is updated; static_len is
	 *     also updated if stree is not null. The field max_code is set.
	 */
	function build_tree(s, desc)
	//    deflate_state *s;
	//    tree_desc *desc; /* the tree descriptor */
	{
	  var tree     = desc.dyn_tree;
	  var stree    = desc.stat_desc.static_tree;
	  var has_stree = desc.stat_desc.has_stree;
	  var elems    = desc.stat_desc.elems;
	  var n, m;          /* iterate over heap elements */
	  var max_code = -1; /* largest code with non zero frequency */
	  var node;          /* new node being created */
	
	  /* Construct the initial heap, with least frequent element in
	   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
	   * heap[0] is not used.
	   */
	  s.heap_len = 0;
	  s.heap_max = HEAP_SIZE;
	
	  for (n = 0; n < elems; n++) {
	    if (tree[n * 2]/*.Freq*/ !== 0) {
	      s.heap[++s.heap_len] = max_code = n;
	      s.depth[n] = 0;
	
	    } else {
	      tree[n * 2 + 1]/*.Len*/ = 0;
	    }
	  }
	
	  /* The pkzip format requires that at least one distance code exists,
	   * and that at least one bit should be sent even if there is only one
	   * possible code. So to avoid special checks later on we force at least
	   * two codes of non zero frequency.
	   */
	  while (s.heap_len < 2) {
	    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
	    tree[node * 2]/*.Freq*/ = 1;
	    s.depth[node] = 0;
	    s.opt_len--;
	
	    if (has_stree) {
	      s.static_len -= stree[node * 2 + 1]/*.Len*/;
	    }
	    /* node is 0 or 1 so it does not have extra bits */
	  }
	  desc.max_code = max_code;
	
	  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
	   * establish sub-heaps of increasing lengths:
	   */
	  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }
	
	  /* Construct the Huffman tree by repeatedly combining the least two
	   * frequent nodes.
	   */
	  node = elems;              /* next internal node of the tree */
	  do {
	    //pqremove(s, tree, n);  /* n = node of least frequency */
	    /*** pqremove ***/
	    n = s.heap[1/*SMALLEST*/];
	    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
	    pqdownheap(s, tree, 1/*SMALLEST*/);
	    /***/
	
	    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */
	
	    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
	    s.heap[--s.heap_max] = m;
	
	    /* Create a new node father of n and m */
	    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
	    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
	    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;
	
	    /* and insert the new node in the heap */
	    s.heap[1/*SMALLEST*/] = node++;
	    pqdownheap(s, tree, 1/*SMALLEST*/);
	
	  } while (s.heap_len >= 2);
	
	  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];
	
	  /* At this point, the fields freq and dad are set. We can now
	   * generate the bit lengths.
	   */
	  gen_bitlen(s, desc);
	
	  /* The field len is now set, we can generate the bit codes */
	  gen_codes(tree, max_code, s.bl_count);
	}
	
	
	/* ===========================================================================
	 * Scan a literal or distance tree to determine the frequencies of the codes
	 * in the bit length tree.
	 */
	function scan_tree(s, tree, max_code)
	//    deflate_state *s;
	//    ct_data *tree;   /* the tree to be scanned */
	//    int max_code;    /* and its largest code of non zero frequency */
	{
	  var n;                     /* iterates over all tree elements */
	  var prevlen = -1;          /* last emitted length */
	  var curlen;                /* length of current code */
	
	  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */
	
	  var count = 0;             /* repeat count of the current code */
	  var max_count = 7;         /* max repeat count */
	  var min_count = 4;         /* min repeat count */
	
	  if (nextlen === 0) {
	    max_count = 138;
	    min_count = 3;
	  }
	  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */
	
	  for (n = 0; n <= max_code; n++) {
	    curlen = nextlen;
	    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;
	
	    if (++count < max_count && curlen === nextlen) {
	      continue;
	
	    } else if (count < min_count) {
	      s.bl_tree[curlen * 2]/*.Freq*/ += count;
	
	    } else if (curlen !== 0) {
	
	      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
	      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;
	
	    } else if (count <= 10) {
	      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;
	
	    } else {
	      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
	    }
	
	    count = 0;
	    prevlen = curlen;
	
	    if (nextlen === 0) {
	      max_count = 138;
	      min_count = 3;
	
	    } else if (curlen === nextlen) {
	      max_count = 6;
	      min_count = 3;
	
	    } else {
	      max_count = 7;
	      min_count = 4;
	    }
	  }
	}
	
	
	/* ===========================================================================
	 * Send a literal or distance tree in compressed form, using the codes in
	 * bl_tree.
	 */
	function send_tree(s, tree, max_code)
	//    deflate_state *s;
	//    ct_data *tree; /* the tree to be scanned */
	//    int max_code;       /* and its largest code of non zero frequency */
	{
	  var n;                     /* iterates over all tree elements */
	  var prevlen = -1;          /* last emitted length */
	  var curlen;                /* length of current code */
	
	  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */
	
	  var count = 0;             /* repeat count of the current code */
	  var max_count = 7;         /* max repeat count */
	  var min_count = 4;         /* min repeat count */
	
	  /* tree[max_code+1].Len = -1; */  /* guard already set */
	  if (nextlen === 0) {
	    max_count = 138;
	    min_count = 3;
	  }
	
	  for (n = 0; n <= max_code; n++) {
	    curlen = nextlen;
	    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;
	
	    if (++count < max_count && curlen === nextlen) {
	      continue;
	
	    } else if (count < min_count) {
	      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);
	
	    } else if (curlen !== 0) {
	      if (curlen !== prevlen) {
	        send_code(s, curlen, s.bl_tree);
	        count--;
	      }
	      //Assert(count >= 3 && count <= 6, " 3_6?");
	      send_code(s, REP_3_6, s.bl_tree);
	      send_bits(s, count - 3, 2);
	
	    } else if (count <= 10) {
	      send_code(s, REPZ_3_10, s.bl_tree);
	      send_bits(s, count - 3, 3);
	
	    } else {
	      send_code(s, REPZ_11_138, s.bl_tree);
	      send_bits(s, count - 11, 7);
	    }
	
	    count = 0;
	    prevlen = curlen;
	    if (nextlen === 0) {
	      max_count = 138;
	      min_count = 3;
	
	    } else if (curlen === nextlen) {
	      max_count = 6;
	      min_count = 3;
	
	    } else {
	      max_count = 7;
	      min_count = 4;
	    }
	  }
	}
	
	
	/* ===========================================================================
	 * Construct the Huffman tree for the bit lengths and return the index in
	 * bl_order of the last bit length code to send.
	 */
	function build_bl_tree(s) {
	  var max_blindex;  /* index of last bit length code of non zero freq */
	
	  /* Determine the bit length frequencies for literal and distance trees */
	  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
	  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);
	
	  /* Build the bit length tree: */
	  build_tree(s, s.bl_desc);
	  /* opt_len now includes the length of the tree representations, except
	   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
	   */
	
	  /* Determine the number of bit length codes to send. The pkzip format
	   * requires that at least 4 bit length codes be sent. (appnote.txt says
	   * 3 but the actual value used is 4.)
	   */
	  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
	    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
	      break;
	    }
	  }
	  /* Update opt_len to include the bit length tree and counts */
	  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
	  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
	  //        s->opt_len, s->static_len));
	
	  return max_blindex;
	}
	
	
	/* ===========================================================================
	 * Send the header for a block using dynamic Huffman trees: the counts, the
	 * lengths of the bit length codes, the literal tree and the distance tree.
	 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
	 */
	function send_all_trees(s, lcodes, dcodes, blcodes)
	//    deflate_state *s;
	//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
	{
	  var rank;                    /* index in bl_order */
	
	  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
	  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
	  //        "too many codes");
	  //Tracev((stderr, "\nbl counts: "));
	  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
	  send_bits(s, dcodes - 1,   5);
	  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
	  for (rank = 0; rank < blcodes; rank++) {
	    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
	    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
	  }
	  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));
	
	  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
	  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));
	
	  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
	  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
	}
	
	
	/* ===========================================================================
	 * Check if the data type is TEXT or BINARY, using the following algorithm:
	 * - TEXT if the two conditions below are satisfied:
	 *    a) There are no non-portable control characters belonging to the
	 *       "black list" (0..6, 14..25, 28..31).
	 *    b) There is at least one printable character belonging to the
	 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
	 * - BINARY otherwise.
	 * - The following partially-portable control characters form a
	 *   "gray list" that is ignored in this detection algorithm:
	 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
	 * IN assertion: the fields Freq of dyn_ltree are set.
	 */
	function detect_data_type(s) {
	  /* black_mask is the bit mask of black-listed bytes
	   * set bits 0..6, 14..25, and 28..31
	   * 0xf3ffc07f = binary 11110011111111111100000001111111
	   */
	  var black_mask = 0xf3ffc07f;
	  var n;
	
	  /* Check for non-textual ("black-listed") bytes. */
	  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
	    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
	      return Z_BINARY;
	    }
	  }
	
	  /* Check for textual ("white-listed") bytes. */
	  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
	      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
	    return Z_TEXT;
	  }
	  for (n = 32; n < LITERALS; n++) {
	    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
	      return Z_TEXT;
	    }
	  }
	
	  /* There are no "black-listed" or "white-listed" bytes:
	   * this stream either is empty or has tolerated ("gray-listed") bytes only.
	   */
	  return Z_BINARY;
	}
	
	
	var static_init_done = false;
	
	/* ===========================================================================
	 * Initialize the tree data structures for a new zlib stream.
	 */
	function _tr_init(s)
	{
	
	  if (!static_init_done) {
	    tr_static_init();
	    static_init_done = true;
	  }
	
	  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
	  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
	  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);
	
	  s.bi_buf = 0;
	  s.bi_valid = 0;
	
	  /* Initialize the first block of the first file: */
	  init_block(s);
	}
	
	
	/* ===========================================================================
	 * Send a stored block
	 */
	function _tr_stored_block(s, buf, stored_len, last)
	//DeflateState *s;
	//charf *buf;       /* input block */
	//ulg stored_len;   /* length of input block */
	//int last;         /* one if this is the last block for a file */
	{
	  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
	  copy_block(s, buf, stored_len, true); /* with header */
	}
	
	
	/* ===========================================================================
	 * Send one empty static block to give enough lookahead for inflate.
	 * This takes 10 bits, of which 7 may remain in the bit buffer.
	 */
	function _tr_align(s) {
	  send_bits(s, STATIC_TREES << 1, 3);
	  send_code(s, END_BLOCK, static_ltree);
	  bi_flush(s);
	}
	
	
	/* ===========================================================================
	 * Determine the best encoding for the current block: dynamic trees, static
	 * trees or store, and output the encoded block to the zip file.
	 */
	function _tr_flush_block(s, buf, stored_len, last)
	//DeflateState *s;
	//charf *buf;       /* input block, or NULL if too old */
	//ulg stored_len;   /* length of input block */
	//int last;         /* one if this is the last block for a file */
	{
	  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
	  var max_blindex = 0;        /* index of last bit length code of non zero freq */
	
	  /* Build the Huffman trees unless a stored block is forced */
	  if (s.level > 0) {
	
	    /* Check if the file is binary or text */
	    if (s.strm.data_type === Z_UNKNOWN) {
	      s.strm.data_type = detect_data_type(s);
	    }
	
	    /* Construct the literal and distance trees */
	    build_tree(s, s.l_desc);
	    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
	    //        s->static_len));
	
	    build_tree(s, s.d_desc);
	    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
	    //        s->static_len));
	    /* At this point, opt_len and static_len are the total bit lengths of
	     * the compressed block data, excluding the tree representations.
	     */
	
	    /* Build the bit length tree for the above two trees, and get the index
	     * in bl_order of the last bit length code to send.
	     */
	    max_blindex = build_bl_tree(s);
	
	    /* Determine the best encoding. Compute the block lengths in bytes. */
	    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
	    static_lenb = (s.static_len + 3 + 7) >>> 3;
	
	    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
	    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
	    //        s->last_lit));
	
	    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }
	
	  } else {
	    // Assert(buf != (char*)0, "lost buf");
	    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
	  }
	
	  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
	    /* 4: two words for the lengths */
	
	    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
	     * Otherwise we can't have processed more than WSIZE input bytes since
	     * the last block flush, because compression would have been
	     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
	     * transform a block into a stored block.
	     */
	    _tr_stored_block(s, buf, stored_len, last);
	
	  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {
	
	    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
	    compress_block(s, static_ltree, static_dtree);
	
	  } else {
	    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
	    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
	    compress_block(s, s.dyn_ltree, s.dyn_dtree);
	  }
	  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
	  /* The above check is made mod 2^32, for files larger than 512 MB
	   * and uLong implemented on 32 bits.
	   */
	  init_block(s);
	
	  if (last) {
	    bi_windup(s);
	  }
	  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
	  //       s->compressed_len-7*last));
	}
	
	/* ===========================================================================
	 * Save the match info and tally the frequency counts. Return true if
	 * the current block must be flushed.
	 */
	function _tr_tally(s, dist, lc)
	//    deflate_state *s;
	//    unsigned dist;  /* distance of matched string */
	//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
	{
	  //var out_length, in_length, dcode;
	
	  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
	  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;
	
	  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
	  s.last_lit++;
	
	  if (dist === 0) {
	    /* lc is the unmatched char */
	    s.dyn_ltree[lc * 2]/*.Freq*/++;
	  } else {
	    s.matches++;
	    /* Here, lc is the match length - MIN_MATCH */
	    dist--;             /* dist = match distance - 1 */
	    //Assert((ush)dist < (ush)MAX_DIST(s) &&
	    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
	    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");
	
	    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;
	    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
	  }
	
	// (!) This block is disabled in zlib defailts,
	// don't enable it for binary compatibility
	
	//#ifdef TRUNCATE_BLOCK
	//  /* Try to guess if it is profitable to stop the current block here */
	//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
	//    /* Compute an upper bound for the compressed length */
	//    out_length = s.last_lit*8;
	//    in_length = s.strstart - s.block_start;
	//
	//    for (dcode = 0; dcode < D_CODES; dcode++) {
	//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
	//    }
	//    out_length >>>= 3;
	//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
	//    //       s->last_lit, in_length, out_length,
	//    //       100L - out_length*100L/in_length));
	//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
	//      return true;
	//    }
	//  }
	//#endif
	
	  return (s.last_lit === s.lit_bufsize - 1);
	  /* We avoid equality with lit_bufsize because of wraparound at 64K
	   * on 16 bit machines and because stored blocks are restricted to
	   * 64K-1 bytes.
	   */
	}
	
	exports._tr_init  = _tr_init;
	exports._tr_stored_block = _tr_stored_block;
	exports._tr_flush_block  = _tr_flush_block;
	exports._tr_tally = _tr_tally;
	exports._tr_align = _tr_align;


/***/ }),
/* 173 */
/***/ (function(module, exports) {

	'use strict';
	
	// Note: adler32 takes 12% for level 0 and 2% for level 6.
	// It doesn't worth to make additional optimizationa as in original.
	// Small size is preferable.
	
	function adler32(adler, buf, len, pos) {
	  var s1 = (adler & 0xffff) |0,
	      s2 = ((adler >>> 16) & 0xffff) |0,
	      n = 0;
	
	  while (len !== 0) {
	    // Set limit ~ twice less than 5552, to keep
	    // s2 in 31-bits, because we force signed ints.
	    // in other case %= will fail.
	    n = len > 2000 ? 2000 : len;
	    len -= n;
	
	    do {
	      s1 = (s1 + buf[pos++]) |0;
	      s2 = (s2 + s1) |0;
	    } while (--n);
	
	    s1 %= 65521;
	    s2 %= 65521;
	  }
	
	  return (s1 | (s2 << 16)) |0;
	}
	
	
	module.exports = adler32;


/***/ }),
/* 174 */
/***/ (function(module, exports) {

	'use strict';
	
	// Note: we can't get significant speed boost here.
	// So write code to minimize size - no pregenerated tables
	// and array tools dependencies.
	
	
	// Use ordinary array, since untyped makes no boost here
	function makeTable() {
	  var c, table = [];
	
	  for (var n = 0; n < 256; n++) {
	    c = n;
	    for (var k = 0; k < 8; k++) {
	      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
	    }
	    table[n] = c;
	  }
	
	  return table;
	}
	
	// Create table on load. Just 255 signed longs. Not a problem.
	var crcTable = makeTable();
	
	
	function crc32(crc, buf, len, pos) {
	  var t = crcTable,
	      end = pos + len;
	
	  crc ^= -1;
	
	  for (var i = pos; i < end; i++) {
	    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
	  }
	
	  return (crc ^ (-1)); // >>> 0;
	}
	
	
	module.exports = crc32;


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	
	var utils         = __webpack_require__(171);
	var adler32       = __webpack_require__(173);
	var crc32         = __webpack_require__(174);
	var inflate_fast  = __webpack_require__(176);
	var inflate_table = __webpack_require__(177);
	
	var CODES = 0;
	var LENS = 1;
	var DISTS = 2;
	
	/* Public constants ==========================================================*/
	/* ===========================================================================*/
	
	
	/* Allowed flush values; see deflate() and inflate() below for details */
	//var Z_NO_FLUSH      = 0;
	//var Z_PARTIAL_FLUSH = 1;
	//var Z_SYNC_FLUSH    = 2;
	//var Z_FULL_FLUSH    = 3;
	var Z_FINISH        = 4;
	var Z_BLOCK         = 5;
	var Z_TREES         = 6;
	
	
	/* Return codes for the compression/decompression functions. Negative values
	 * are errors, positive values are used for special but normal events.
	 */
	var Z_OK            = 0;
	var Z_STREAM_END    = 1;
	var Z_NEED_DICT     = 2;
	//var Z_ERRNO         = -1;
	var Z_STREAM_ERROR  = -2;
	var Z_DATA_ERROR    = -3;
	var Z_MEM_ERROR     = -4;
	var Z_BUF_ERROR     = -5;
	//var Z_VERSION_ERROR = -6;
	
	/* The deflate compression method */
	var Z_DEFLATED  = 8;
	
	
	/* STATES ====================================================================*/
	/* ===========================================================================*/
	
	
	var    HEAD = 1;       /* i: waiting for magic header */
	var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
	var    TIME = 3;       /* i: waiting for modification time (gzip) */
	var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
	var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
	var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
	var    NAME = 7;       /* i: waiting for end of file name (gzip) */
	var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
	var    HCRC = 9;       /* i: waiting for header crc (gzip) */
	var    DICTID = 10;    /* i: waiting for dictionary check value */
	var    DICT = 11;      /* waiting for inflateSetDictionary() call */
	var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
	var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
	var        STORED = 14;    /* i: waiting for stored size (length and complement) */
	var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
	var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
	var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
	var        LENLENS = 18;   /* i: waiting for code length code lengths */
	var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
	var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
	var            LEN = 21;       /* i: waiting for length/lit/eob code */
	var            LENEXT = 22;    /* i: waiting for length extra bits */
	var            DIST = 23;      /* i: waiting for distance code */
	var            DISTEXT = 24;   /* i: waiting for distance extra bits */
	var            MATCH = 25;     /* o: waiting for output space to copy string */
	var            LIT = 26;       /* o: waiting for output space to write literal */
	var    CHECK = 27;     /* i: waiting for 32-bit check value */
	var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
	var    DONE = 29;      /* finished check, done -- remain here until reset */
	var    BAD = 30;       /* got a data error -- remain here until reset */
	var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
	var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */
	
	/* ===========================================================================*/
	
	
	
	var ENOUGH_LENS = 852;
	var ENOUGH_DISTS = 592;
	//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);
	
	var MAX_WBITS = 15;
	/* 32K LZ77 window */
	var DEF_WBITS = MAX_WBITS;
	
	
	function zswap32(q) {
	  return  (((q >>> 24) & 0xff) +
	          ((q >>> 8) & 0xff00) +
	          ((q & 0xff00) << 8) +
	          ((q & 0xff) << 24));
	}
	
	
	function InflateState() {
	  this.mode = 0;             /* current inflate mode */
	  this.last = false;          /* true if processing last block */
	  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
	  this.havedict = false;      /* true if dictionary provided */
	  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
	  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
	  this.check = 0;             /* protected copy of check value */
	  this.total = 0;             /* protected copy of output count */
	  // TODO: may be {}
	  this.head = null;           /* where to save gzip header information */
	
	  /* sliding window */
	  this.wbits = 0;             /* log base 2 of requested window size */
	  this.wsize = 0;             /* window size or zero if not using window */
	  this.whave = 0;             /* valid bytes in the window */
	  this.wnext = 0;             /* window write index */
	  this.window = null;         /* allocated sliding window, if needed */
	
	  /* bit accumulator */
	  this.hold = 0;              /* input bit accumulator */
	  this.bits = 0;              /* number of bits in "in" */
	
	  /* for string and stored block copying */
	  this.length = 0;            /* literal or length of data to copy */
	  this.offset = 0;            /* distance back to copy string from */
	
	  /* for table and code decoding */
	  this.extra = 0;             /* extra bits needed */
	
	  /* fixed and dynamic code tables */
	  this.lencode = null;          /* starting table for length/literal codes */
	  this.distcode = null;         /* starting table for distance codes */
	  this.lenbits = 0;           /* index bits for lencode */
	  this.distbits = 0;          /* index bits for distcode */
	
	  /* dynamic table building */
	  this.ncode = 0;             /* number of code length code lengths */
	  this.nlen = 0;              /* number of length code lengths */
	  this.ndist = 0;             /* number of distance code lengths */
	  this.have = 0;              /* number of code lengths in lens[] */
	  this.next = null;              /* next available space in codes[] */
	
	  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
	  this.work = new utils.Buf16(288); /* work area for code table building */
	
	  /*
	   because we don't have pointers in js, we use lencode and distcode directly
	   as buffers so we don't need codes
	  */
	  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
	  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
	  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
	  this.sane = 0;                   /* if false, allow invalid distance too far */
	  this.back = 0;                   /* bits back of last unprocessed length/lit */
	  this.was = 0;                    /* initial length of match */
	}
	
	function inflateResetKeep(strm) {
	  var state;
	
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  strm.total_in = strm.total_out = state.total = 0;
	  strm.msg = ''; /*Z_NULL*/
	  if (state.wrap) {       /* to support ill-conceived Java test suite */
	    strm.adler = state.wrap & 1;
	  }
	  state.mode = HEAD;
	  state.last = 0;
	  state.havedict = 0;
	  state.dmax = 32768;
	  state.head = null/*Z_NULL*/;
	  state.hold = 0;
	  state.bits = 0;
	  //state.lencode = state.distcode = state.next = state.codes;
	  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
	  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);
	
	  state.sane = 1;
	  state.back = -1;
	  //Tracev((stderr, "inflate: reset\n"));
	  return Z_OK;
	}
	
	function inflateReset(strm) {
	  var state;
	
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  state.wsize = 0;
	  state.whave = 0;
	  state.wnext = 0;
	  return inflateResetKeep(strm);
	
	}
	
	function inflateReset2(strm, windowBits) {
	  var wrap;
	  var state;
	
	  /* get the state */
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	
	  /* extract wrap request from windowBits parameter */
	  if (windowBits < 0) {
	    wrap = 0;
	    windowBits = -windowBits;
	  }
	  else {
	    wrap = (windowBits >> 4) + 1;
	    if (windowBits < 48) {
	      windowBits &= 15;
	    }
	  }
	
	  /* set number of window bits, free window if different */
	  if (windowBits && (windowBits < 8 || windowBits > 15)) {
	    return Z_STREAM_ERROR;
	  }
	  if (state.window !== null && state.wbits !== windowBits) {
	    state.window = null;
	  }
	
	  /* update state and reset the rest of it */
	  state.wrap = wrap;
	  state.wbits = windowBits;
	  return inflateReset(strm);
	}
	
	function inflateInit2(strm, windowBits) {
	  var ret;
	  var state;
	
	  if (!strm) { return Z_STREAM_ERROR; }
	  //strm.msg = Z_NULL;                 /* in case we return an error */
	
	  state = new InflateState();
	
	  //if (state === Z_NULL) return Z_MEM_ERROR;
	  //Tracev((stderr, "inflate: allocated\n"));
	  strm.state = state;
	  state.window = null/*Z_NULL*/;
	  ret = inflateReset2(strm, windowBits);
	  if (ret !== Z_OK) {
	    strm.state = null/*Z_NULL*/;
	  }
	  return ret;
	}
	
	function inflateInit(strm) {
	  return inflateInit2(strm, DEF_WBITS);
	}
	
	
	/*
	 Return state with length and distance decoding tables and index sizes set to
	 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
	 If BUILDFIXED is defined, then instead this routine builds the tables the
	 first time it's called, and returns those tables the first time and
	 thereafter.  This reduces the size of the code by about 2K bytes, in
	 exchange for a little execution time.  However, BUILDFIXED should not be
	 used for threaded applications, since the rewriting of the tables and virgin
	 may not be thread-safe.
	 */
	var virgin = true;
	
	var lenfix, distfix; // We have no pointers in JS, so keep tables separate
	
	function fixedtables(state) {
	  /* build fixed huffman tables if first call (may not be thread safe) */
	  if (virgin) {
	    var sym;
	
	    lenfix = new utils.Buf32(512);
	    distfix = new utils.Buf32(32);
	
	    /* literal/length table */
	    sym = 0;
	    while (sym < 144) { state.lens[sym++] = 8; }
	    while (sym < 256) { state.lens[sym++] = 9; }
	    while (sym < 280) { state.lens[sym++] = 7; }
	    while (sym < 288) { state.lens[sym++] = 8; }
	
	    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });
	
	    /* distance table */
	    sym = 0;
	    while (sym < 32) { state.lens[sym++] = 5; }
	
	    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });
	
	    /* do this just once */
	    virgin = false;
	  }
	
	  state.lencode = lenfix;
	  state.lenbits = 9;
	  state.distcode = distfix;
	  state.distbits = 5;
	}
	
	
	/*
	 Update the window with the last wsize (normally 32K) bytes written before
	 returning.  If window does not exist yet, create it.  This is only called
	 when a window is already in use, or when output has been written during this
	 inflate call, but the end of the deflate stream has not been reached yet.
	 It is also called to create a window for dictionary data when a dictionary
	 is loaded.
	
	 Providing output buffers larger than 32K to inflate() should provide a speed
	 advantage, since only the last 32K of output is copied to the sliding window
	 upon return from inflate(), and since all distances after the first 32K of
	 output will fall in the output data, making match copies simpler and faster.
	 The advantage may be dependent on the size of the processor's data caches.
	 */
	function updatewindow(strm, src, end, copy) {
	  var dist;
	  var state = strm.state;
	
	  /* if it hasn't been done already, allocate space for the window */
	  if (state.window === null) {
	    state.wsize = 1 << state.wbits;
	    state.wnext = 0;
	    state.whave = 0;
	
	    state.window = new utils.Buf8(state.wsize);
	  }
	
	  /* copy state->wsize or less output bytes into the circular window */
	  if (copy >= state.wsize) {
	    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
	    state.wnext = 0;
	    state.whave = state.wsize;
	  }
	  else {
	    dist = state.wsize - state.wnext;
	    if (dist > copy) {
	      dist = copy;
	    }
	    //zmemcpy(state->window + state->wnext, end - copy, dist);
	    utils.arraySet(state.window, src, end - copy, dist, state.wnext);
	    copy -= dist;
	    if (copy) {
	      //zmemcpy(state->window, end - copy, copy);
	      utils.arraySet(state.window, src, end - copy, copy, 0);
	      state.wnext = copy;
	      state.whave = state.wsize;
	    }
	    else {
	      state.wnext += dist;
	      if (state.wnext === state.wsize) { state.wnext = 0; }
	      if (state.whave < state.wsize) { state.whave += dist; }
	    }
	  }
	  return 0;
	}
	
	function inflate(strm, flush) {
	  var state;
	  var input, output;          // input/output buffers
	  var next;                   /* next input INDEX */
	  var put;                    /* next output INDEX */
	  var have, left;             /* available input and output */
	  var hold;                   /* bit buffer */
	  var bits;                   /* bits in bit buffer */
	  var _in, _out;              /* save starting available input and output */
	  var copy;                   /* number of stored or match bytes to copy */
	  var from;                   /* where to copy match bytes from */
	  var from_source;
	  var here = 0;               /* current decoding table entry */
	  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
	  //var last;                   /* parent table entry */
	  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
	  var len;                    /* length to copy for repeats, bits to drop */
	  var ret;                    /* return code */
	  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
	  var opts;
	
	  var n; // temporary var for NEED_BITS
	
	  var order = /* permutation of code lengths */
	    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];
	
	
	  if (!strm || !strm.state || !strm.output ||
	      (!strm.input && strm.avail_in !== 0)) {
	    return Z_STREAM_ERROR;
	  }
	
	  state = strm.state;
	  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */
	
	
	  //--- LOAD() ---
	  put = strm.next_out;
	  output = strm.output;
	  left = strm.avail_out;
	  next = strm.next_in;
	  input = strm.input;
	  have = strm.avail_in;
	  hold = state.hold;
	  bits = state.bits;
	  //---
	
	  _in = have;
	  _out = left;
	  ret = Z_OK;
	
	  inf_leave: // goto emulation
	  for (;;) {
	    switch (state.mode) {
	    case HEAD:
	      if (state.wrap === 0) {
	        state.mode = TYPEDO;
	        break;
	      }
	      //=== NEEDBITS(16);
	      while (bits < 16) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
	        state.check = 0/*crc32(0L, Z_NULL, 0)*/;
	        //=== CRC2(state.check, hold);
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        state.check = crc32(state.check, hbuf, 2, 0);
	        //===//
	
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = FLAGS;
	        break;
	      }
	      state.flags = 0;           /* expect zlib header */
	      if (state.head) {
	        state.head.done = false;
	      }
	      if (!(state.wrap & 1) ||   /* check if zlib header allowed */
	        (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
	        strm.msg = 'incorrect header check';
	        state.mode = BAD;
	        break;
	      }
	      if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
	        strm.msg = 'unknown compression method';
	        state.mode = BAD;
	        break;
	      }
	      //--- DROPBITS(4) ---//
	      hold >>>= 4;
	      bits -= 4;
	      //---//
	      len = (hold & 0x0f)/*BITS(4)*/ + 8;
	      if (state.wbits === 0) {
	        state.wbits = len;
	      }
	      else if (len > state.wbits) {
	        strm.msg = 'invalid window size';
	        state.mode = BAD;
	        break;
	      }
	      state.dmax = 1 << len;
	      //Tracev((stderr, "inflate:   zlib header ok\n"));
	      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
	      state.mode = hold & 0x200 ? DICTID : TYPE;
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      break;
	    case FLAGS:
	      //=== NEEDBITS(16); */
	      while (bits < 16) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      state.flags = hold;
	      if ((state.flags & 0xff) !== Z_DEFLATED) {
	        strm.msg = 'unknown compression method';
	        state.mode = BAD;
	        break;
	      }
	      if (state.flags & 0xe000) {
	        strm.msg = 'unknown header flags set';
	        state.mode = BAD;
	        break;
	      }
	      if (state.head) {
	        state.head.text = ((hold >> 8) & 1);
	      }
	      if (state.flags & 0x0200) {
	        //=== CRC2(state.check, hold);
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        state.check = crc32(state.check, hbuf, 2, 0);
	        //===//
	      }
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = TIME;
	      /* falls through */
	    case TIME:
	      //=== NEEDBITS(32); */
	      while (bits < 32) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if (state.head) {
	        state.head.time = hold;
	      }
	      if (state.flags & 0x0200) {
	        //=== CRC4(state.check, hold)
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        hbuf[2] = (hold >>> 16) & 0xff;
	        hbuf[3] = (hold >>> 24) & 0xff;
	        state.check = crc32(state.check, hbuf, 4, 0);
	        //===
	      }
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = OS;
	      /* falls through */
	    case OS:
	      //=== NEEDBITS(16); */
	      while (bits < 16) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if (state.head) {
	        state.head.xflags = (hold & 0xff);
	        state.head.os = (hold >> 8);
	      }
	      if (state.flags & 0x0200) {
	        //=== CRC2(state.check, hold);
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        state.check = crc32(state.check, hbuf, 2, 0);
	        //===//
	      }
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = EXLEN;
	      /* falls through */
	    case EXLEN:
	      if (state.flags & 0x0400) {
	        //=== NEEDBITS(16); */
	        while (bits < 16) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.length = hold;
	        if (state.head) {
	          state.head.extra_len = hold;
	        }
	        if (state.flags & 0x0200) {
	          //=== CRC2(state.check, hold);
	          hbuf[0] = hold & 0xff;
	          hbuf[1] = (hold >>> 8) & 0xff;
	          state.check = crc32(state.check, hbuf, 2, 0);
	          //===//
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	      }
	      else if (state.head) {
	        state.head.extra = null/*Z_NULL*/;
	      }
	      state.mode = EXTRA;
	      /* falls through */
	    case EXTRA:
	      if (state.flags & 0x0400) {
	        copy = state.length;
	        if (copy > have) { copy = have; }
	        if (copy) {
	          if (state.head) {
	            len = state.head.extra_len - state.length;
	            if (!state.head.extra) {
	              // Use untyped array for more conveniend processing later
	              state.head.extra = new Array(state.head.extra_len);
	            }
	            utils.arraySet(
	              state.head.extra,
	              input,
	              next,
	              // extra field is limited to 65536 bytes
	              // - no need for additional size check
	              copy,
	              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
	              len
	            );
	            //zmemcpy(state.head.extra + len, next,
	            //        len + copy > state.head.extra_max ?
	            //        state.head.extra_max - len : copy);
	          }
	          if (state.flags & 0x0200) {
	            state.check = crc32(state.check, input, copy, next);
	          }
	          have -= copy;
	          next += copy;
	          state.length -= copy;
	        }
	        if (state.length) { break inf_leave; }
	      }
	      state.length = 0;
	      state.mode = NAME;
	      /* falls through */
	    case NAME:
	      if (state.flags & 0x0800) {
	        if (have === 0) { break inf_leave; }
	        copy = 0;
	        do {
	          // TODO: 2 or 1 bytes?
	          len = input[next + copy++];
	          /* use constant limit because in js we should not preallocate memory */
	          if (state.head && len &&
	              (state.length < 65536 /*state.head.name_max*/)) {
	            state.head.name += String.fromCharCode(len);
	          }
	        } while (len && copy < have);
	
	        if (state.flags & 0x0200) {
	          state.check = crc32(state.check, input, copy, next);
	        }
	        have -= copy;
	        next += copy;
	        if (len) { break inf_leave; }
	      }
	      else if (state.head) {
	        state.head.name = null;
	      }
	      state.length = 0;
	      state.mode = COMMENT;
	      /* falls through */
	    case COMMENT:
	      if (state.flags & 0x1000) {
	        if (have === 0) { break inf_leave; }
	        copy = 0;
	        do {
	          len = input[next + copy++];
	          /* use constant limit because in js we should not preallocate memory */
	          if (state.head && len &&
	              (state.length < 65536 /*state.head.comm_max*/)) {
	            state.head.comment += String.fromCharCode(len);
	          }
	        } while (len && copy < have);
	        if (state.flags & 0x0200) {
	          state.check = crc32(state.check, input, copy, next);
	        }
	        have -= copy;
	        next += copy;
	        if (len) { break inf_leave; }
	      }
	      else if (state.head) {
	        state.head.comment = null;
	      }
	      state.mode = HCRC;
	      /* falls through */
	    case HCRC:
	      if (state.flags & 0x0200) {
	        //=== NEEDBITS(16); */
	        while (bits < 16) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if (hold !== (state.check & 0xffff)) {
	          strm.msg = 'header crc mismatch';
	          state.mode = BAD;
	          break;
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	      }
	      if (state.head) {
	        state.head.hcrc = ((state.flags >> 9) & 1);
	        state.head.done = true;
	      }
	      strm.adler = state.check = 0;
	      state.mode = TYPE;
	      break;
	    case DICTID:
	      //=== NEEDBITS(32); */
	      while (bits < 32) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      strm.adler = state.check = zswap32(hold);
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = DICT;
	      /* falls through */
	    case DICT:
	      if (state.havedict === 0) {
	        //--- RESTORE() ---
	        strm.next_out = put;
	        strm.avail_out = left;
	        strm.next_in = next;
	        strm.avail_in = have;
	        state.hold = hold;
	        state.bits = bits;
	        //---
	        return Z_NEED_DICT;
	      }
	      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
	      state.mode = TYPE;
	      /* falls through */
	    case TYPE:
	      if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
	      /* falls through */
	    case TYPEDO:
	      if (state.last) {
	        //--- BYTEBITS() ---//
	        hold >>>= bits & 7;
	        bits -= bits & 7;
	        //---//
	        state.mode = CHECK;
	        break;
	      }
	      //=== NEEDBITS(3); */
	      while (bits < 3) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      state.last = (hold & 0x01)/*BITS(1)*/;
	      //--- DROPBITS(1) ---//
	      hold >>>= 1;
	      bits -= 1;
	      //---//
	
	      switch ((hold & 0x03)/*BITS(2)*/) {
	      case 0:                             /* stored block */
	        //Tracev((stderr, "inflate:     stored block%s\n",
	        //        state.last ? " (last)" : ""));
	        state.mode = STORED;
	        break;
	      case 1:                             /* fixed block */
	        fixedtables(state);
	        //Tracev((stderr, "inflate:     fixed codes block%s\n",
	        //        state.last ? " (last)" : ""));
	        state.mode = LEN_;             /* decode codes */
	        if (flush === Z_TREES) {
	          //--- DROPBITS(2) ---//
	          hold >>>= 2;
	          bits -= 2;
	          //---//
	          break inf_leave;
	        }
	        break;
	      case 2:                             /* dynamic block */
	        //Tracev((stderr, "inflate:     dynamic codes block%s\n",
	        //        state.last ? " (last)" : ""));
	        state.mode = TABLE;
	        break;
	      case 3:
	        strm.msg = 'invalid block type';
	        state.mode = BAD;
	      }
	      //--- DROPBITS(2) ---//
	      hold >>>= 2;
	      bits -= 2;
	      //---//
	      break;
	    case STORED:
	      //--- BYTEBITS() ---// /* go to byte boundary */
	      hold >>>= bits & 7;
	      bits -= bits & 7;
	      //---//
	      //=== NEEDBITS(32); */
	      while (bits < 32) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
	        strm.msg = 'invalid stored block lengths';
	        state.mode = BAD;
	        break;
	      }
	      state.length = hold & 0xffff;
	      //Tracev((stderr, "inflate:       stored length %u\n",
	      //        state.length));
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = COPY_;
	      if (flush === Z_TREES) { break inf_leave; }
	      /* falls through */
	    case COPY_:
	      state.mode = COPY;
	      /* falls through */
	    case COPY:
	      copy = state.length;
	      if (copy) {
	        if (copy > have) { copy = have; }
	        if (copy > left) { copy = left; }
	        if (copy === 0) { break inf_leave; }
	        //--- zmemcpy(put, next, copy); ---
	        utils.arraySet(output, input, next, copy, put);
	        //---//
	        have -= copy;
	        next += copy;
	        left -= copy;
	        put += copy;
	        state.length -= copy;
	        break;
	      }
	      //Tracev((stderr, "inflate:       stored end\n"));
	      state.mode = TYPE;
	      break;
	    case TABLE:
	      //=== NEEDBITS(14); */
	      while (bits < 14) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
	      //--- DROPBITS(5) ---//
	      hold >>>= 5;
	      bits -= 5;
	      //---//
	      state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
	      //--- DROPBITS(5) ---//
	      hold >>>= 5;
	      bits -= 5;
	      //---//
	      state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
	      //--- DROPBITS(4) ---//
	      hold >>>= 4;
	      bits -= 4;
	      //---//
	//#ifndef PKZIP_BUG_WORKAROUND
	      if (state.nlen > 286 || state.ndist > 30) {
	        strm.msg = 'too many length or distance symbols';
	        state.mode = BAD;
	        break;
	      }
	//#endif
	      //Tracev((stderr, "inflate:       table sizes ok\n"));
	      state.have = 0;
	      state.mode = LENLENS;
	      /* falls through */
	    case LENLENS:
	      while (state.have < state.ncode) {
	        //=== NEEDBITS(3);
	        while (bits < 3) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
	        //--- DROPBITS(3) ---//
	        hold >>>= 3;
	        bits -= 3;
	        //---//
	      }
	      while (state.have < 19) {
	        state.lens[order[state.have++]] = 0;
	      }
	      // We have separate tables & no pointers. 2 commented lines below not needed.
	      //state.next = state.codes;
	      //state.lencode = state.next;
	      // Switch to use dynamic table
	      state.lencode = state.lendyn;
	      state.lenbits = 7;
	
	      opts = { bits: state.lenbits };
	      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
	      state.lenbits = opts.bits;
	
	      if (ret) {
	        strm.msg = 'invalid code lengths set';
	        state.mode = BAD;
	        break;
	      }
	      //Tracev((stderr, "inflate:       code lengths ok\n"));
	      state.have = 0;
	      state.mode = CODELENS;
	      /* falls through */
	    case CODELENS:
	      while (state.have < state.nlen + state.ndist) {
	        for (;;) {
	          here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;
	
	          if ((here_bits) <= bits) { break; }
	          //--- PULLBYTE() ---//
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        if (here_val < 16) {
	          //--- DROPBITS(here.bits) ---//
	          hold >>>= here_bits;
	          bits -= here_bits;
	          //---//
	          state.lens[state.have++] = here_val;
	        }
	        else {
	          if (here_val === 16) {
	            //=== NEEDBITS(here.bits + 2);
	            n = here_bits + 2;
	            while (bits < n) {
	              if (have === 0) { break inf_leave; }
	              have--;
	              hold += input[next++] << bits;
	              bits += 8;
	            }
	            //===//
	            //--- DROPBITS(here.bits) ---//
	            hold >>>= here_bits;
	            bits -= here_bits;
	            //---//
	            if (state.have === 0) {
	              strm.msg = 'invalid bit length repeat';
	              state.mode = BAD;
	              break;
	            }
	            len = state.lens[state.have - 1];
	            copy = 3 + (hold & 0x03);//BITS(2);
	            //--- DROPBITS(2) ---//
	            hold >>>= 2;
	            bits -= 2;
	            //---//
	          }
	          else if (here_val === 17) {
	            //=== NEEDBITS(here.bits + 3);
	            n = here_bits + 3;
	            while (bits < n) {
	              if (have === 0) { break inf_leave; }
	              have--;
	              hold += input[next++] << bits;
	              bits += 8;
	            }
	            //===//
	            //--- DROPBITS(here.bits) ---//
	            hold >>>= here_bits;
	            bits -= here_bits;
	            //---//
	            len = 0;
	            copy = 3 + (hold & 0x07);//BITS(3);
	            //--- DROPBITS(3) ---//
	            hold >>>= 3;
	            bits -= 3;
	            //---//
	          }
	          else {
	            //=== NEEDBITS(here.bits + 7);
	            n = here_bits + 7;
	            while (bits < n) {
	              if (have === 0) { break inf_leave; }
	              have--;
	              hold += input[next++] << bits;
	              bits += 8;
	            }
	            //===//
	            //--- DROPBITS(here.bits) ---//
	            hold >>>= here_bits;
	            bits -= here_bits;
	            //---//
	            len = 0;
	            copy = 11 + (hold & 0x7f);//BITS(7);
	            //--- DROPBITS(7) ---//
	            hold >>>= 7;
	            bits -= 7;
	            //---//
	          }
	          if (state.have + copy > state.nlen + state.ndist) {
	            strm.msg = 'invalid bit length repeat';
	            state.mode = BAD;
	            break;
	          }
	          while (copy--) {
	            state.lens[state.have++] = len;
	          }
	        }
	      }
	
	      /* handle error breaks in while */
	      if (state.mode === BAD) { break; }
	
	      /* check for end-of-block code (better have one) */
	      if (state.lens[256] === 0) {
	        strm.msg = 'invalid code -- missing end-of-block';
	        state.mode = BAD;
	        break;
	      }
	
	      /* build code tables -- note: do not change the lenbits or distbits
	         values here (9 and 6) without reading the comments in inftrees.h
	         concerning the ENOUGH constants, which depend on those values */
	      state.lenbits = 9;
	
	      opts = { bits: state.lenbits };
	      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
	      // We have separate tables & no pointers. 2 commented lines below not needed.
	      // state.next_index = opts.table_index;
	      state.lenbits = opts.bits;
	      // state.lencode = state.next;
	
	      if (ret) {
	        strm.msg = 'invalid literal/lengths set';
	        state.mode = BAD;
	        break;
	      }
	
	      state.distbits = 6;
	      //state.distcode.copy(state.codes);
	      // Switch to use dynamic table
	      state.distcode = state.distdyn;
	      opts = { bits: state.distbits };
	      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
	      // We have separate tables & no pointers. 2 commented lines below not needed.
	      // state.next_index = opts.table_index;
	      state.distbits = opts.bits;
	      // state.distcode = state.next;
	
	      if (ret) {
	        strm.msg = 'invalid distances set';
	        state.mode = BAD;
	        break;
	      }
	      //Tracev((stderr, 'inflate:       codes ok\n'));
	      state.mode = LEN_;
	      if (flush === Z_TREES) { break inf_leave; }
	      /* falls through */
	    case LEN_:
	      state.mode = LEN;
	      /* falls through */
	    case LEN:
	      if (have >= 6 && left >= 258) {
	        //--- RESTORE() ---
	        strm.next_out = put;
	        strm.avail_out = left;
	        strm.next_in = next;
	        strm.avail_in = have;
	        state.hold = hold;
	        state.bits = bits;
	        //---
	        inflate_fast(strm, _out);
	        //--- LOAD() ---
	        put = strm.next_out;
	        output = strm.output;
	        left = strm.avail_out;
	        next = strm.next_in;
	        input = strm.input;
	        have = strm.avail_in;
	        hold = state.hold;
	        bits = state.bits;
	        //---
	
	        if (state.mode === TYPE) {
	          state.back = -1;
	        }
	        break;
	      }
	      state.back = 0;
	      for (;;) {
	        here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
	        here_bits = here >>> 24;
	        here_op = (here >>> 16) & 0xff;
	        here_val = here & 0xffff;
	
	        if (here_bits <= bits) { break; }
	        //--- PULLBYTE() ---//
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	        //---//
	      }
	      if (here_op && (here_op & 0xf0) === 0) {
	        last_bits = here_bits;
	        last_op = here_op;
	        last_val = here_val;
	        for (;;) {
	          here = state.lencode[last_val +
	                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;
	
	          if ((last_bits + here_bits) <= bits) { break; }
	          //--- PULLBYTE() ---//
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        //--- DROPBITS(last.bits) ---//
	        hold >>>= last_bits;
	        bits -= last_bits;
	        //---//
	        state.back += last_bits;
	      }
	      //--- DROPBITS(here.bits) ---//
	      hold >>>= here_bits;
	      bits -= here_bits;
	      //---//
	      state.back += here_bits;
	      state.length = here_val;
	      if (here_op === 0) {
	        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
	        //        "inflate:         literal '%c'\n" :
	        //        "inflate:         literal 0x%02x\n", here.val));
	        state.mode = LIT;
	        break;
	      }
	      if (here_op & 32) {
	        //Tracevv((stderr, "inflate:         end of block\n"));
	        state.back = -1;
	        state.mode = TYPE;
	        break;
	      }
	      if (here_op & 64) {
	        strm.msg = 'invalid literal/length code';
	        state.mode = BAD;
	        break;
	      }
	      state.extra = here_op & 15;
	      state.mode = LENEXT;
	      /* falls through */
	    case LENEXT:
	      if (state.extra) {
	        //=== NEEDBITS(state.extra);
	        n = state.extra;
	        while (bits < n) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
	        //--- DROPBITS(state.extra) ---//
	        hold >>>= state.extra;
	        bits -= state.extra;
	        //---//
	        state.back += state.extra;
	      }
	      //Tracevv((stderr, "inflate:         length %u\n", state.length));
	      state.was = state.length;
	      state.mode = DIST;
	      /* falls through */
	    case DIST:
	      for (;;) {
	        here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
	        here_bits = here >>> 24;
	        here_op = (here >>> 16) & 0xff;
	        here_val = here & 0xffff;
	
	        if ((here_bits) <= bits) { break; }
	        //--- PULLBYTE() ---//
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	        //---//
	      }
	      if ((here_op & 0xf0) === 0) {
	        last_bits = here_bits;
	        last_op = here_op;
	        last_val = here_val;
	        for (;;) {
	          here = state.distcode[last_val +
	                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;
	
	          if ((last_bits + here_bits) <= bits) { break; }
	          //--- PULLBYTE() ---//
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        //--- DROPBITS(last.bits) ---//
	        hold >>>= last_bits;
	        bits -= last_bits;
	        //---//
	        state.back += last_bits;
	      }
	      //--- DROPBITS(here.bits) ---//
	      hold >>>= here_bits;
	      bits -= here_bits;
	      //---//
	      state.back += here_bits;
	      if (here_op & 64) {
	        strm.msg = 'invalid distance code';
	        state.mode = BAD;
	        break;
	      }
	      state.offset = here_val;
	      state.extra = (here_op) & 15;
	      state.mode = DISTEXT;
	      /* falls through */
	    case DISTEXT:
	      if (state.extra) {
	        //=== NEEDBITS(state.extra);
	        n = state.extra;
	        while (bits < n) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
	        //--- DROPBITS(state.extra) ---//
	        hold >>>= state.extra;
	        bits -= state.extra;
	        //---//
	        state.back += state.extra;
	      }
	//#ifdef INFLATE_STRICT
	      if (state.offset > state.dmax) {
	        strm.msg = 'invalid distance too far back';
	        state.mode = BAD;
	        break;
	      }
	//#endif
	      //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
	      state.mode = MATCH;
	      /* falls through */
	    case MATCH:
	      if (left === 0) { break inf_leave; }
	      copy = _out - left;
	      if (state.offset > copy) {         /* copy from window */
	        copy = state.offset - copy;
	        if (copy > state.whave) {
	          if (state.sane) {
	            strm.msg = 'invalid distance too far back';
	            state.mode = BAD;
	            break;
	          }
	// (!) This block is disabled in zlib defailts,
	// don't enable it for binary compatibility
	//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
	//          Trace((stderr, "inflate.c too far\n"));
	//          copy -= state.whave;
	//          if (copy > state.length) { copy = state.length; }
	//          if (copy > left) { copy = left; }
	//          left -= copy;
	//          state.length -= copy;
	//          do {
	//            output[put++] = 0;
	//          } while (--copy);
	//          if (state.length === 0) { state.mode = LEN; }
	//          break;
	//#endif
	        }
	        if (copy > state.wnext) {
	          copy -= state.wnext;
	          from = state.wsize - copy;
	        }
	        else {
	          from = state.wnext - copy;
	        }
	        if (copy > state.length) { copy = state.length; }
	        from_source = state.window;
	      }
	      else {                              /* copy from output */
	        from_source = output;
	        from = put - state.offset;
	        copy = state.length;
	      }
	      if (copy > left) { copy = left; }
	      left -= copy;
	      state.length -= copy;
	      do {
	        output[put++] = from_source[from++];
	      } while (--copy);
	      if (state.length === 0) { state.mode = LEN; }
	      break;
	    case LIT:
	      if (left === 0) { break inf_leave; }
	      output[put++] = state.length;
	      left--;
	      state.mode = LEN;
	      break;
	    case CHECK:
	      if (state.wrap) {
	        //=== NEEDBITS(32);
	        while (bits < 32) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          // Use '|' insdead of '+' to make sure that result is signed
	          hold |= input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        _out -= left;
	        strm.total_out += _out;
	        state.total += _out;
	        if (_out) {
	          strm.adler = state.check =
	              /*UPDATE(state.check, put - _out, _out);*/
	              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));
	
	        }
	        _out = left;
	        // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
	        if ((state.flags ? hold : zswap32(hold)) !== state.check) {
	          strm.msg = 'incorrect data check';
	          state.mode = BAD;
	          break;
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        //Tracev((stderr, "inflate:   check matches trailer\n"));
	      }
	      state.mode = LENGTH;
	      /* falls through */
	    case LENGTH:
	      if (state.wrap && state.flags) {
	        //=== NEEDBITS(32);
	        while (bits < 32) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if (hold !== (state.total & 0xffffffff)) {
	          strm.msg = 'incorrect length check';
	          state.mode = BAD;
	          break;
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        //Tracev((stderr, "inflate:   length matches trailer\n"));
	      }
	      state.mode = DONE;
	      /* falls through */
	    case DONE:
	      ret = Z_STREAM_END;
	      break inf_leave;
	    case BAD:
	      ret = Z_DATA_ERROR;
	      break inf_leave;
	    case MEM:
	      return Z_MEM_ERROR;
	    case SYNC:
	      /* falls through */
	    default:
	      return Z_STREAM_ERROR;
	    }
	  }
	
	  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"
	
	  /*
	     Return from inflate(), updating the total counts and the check value.
	     If there was no progress during the inflate() call, return a buffer
	     error.  Call updatewindow() to create and/or update the window state.
	     Note: a memory error from inflate() is non-recoverable.
	   */
	
	  //--- RESTORE() ---
	  strm.next_out = put;
	  strm.avail_out = left;
	  strm.next_in = next;
	  strm.avail_in = have;
	  state.hold = hold;
	  state.bits = bits;
	  //---
	
	  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
	                      (state.mode < CHECK || flush !== Z_FINISH))) {
	    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
	      state.mode = MEM;
	      return Z_MEM_ERROR;
	    }
	  }
	  _in -= strm.avail_in;
	  _out -= strm.avail_out;
	  strm.total_in += _in;
	  strm.total_out += _out;
	  state.total += _out;
	  if (state.wrap && _out) {
	    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
	      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
	  }
	  strm.data_type = state.bits + (state.last ? 64 : 0) +
	                    (state.mode === TYPE ? 128 : 0) +
	                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
	  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
	    ret = Z_BUF_ERROR;
	  }
	  return ret;
	}
	
	function inflateEnd(strm) {
	
	  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
	    return Z_STREAM_ERROR;
	  }
	
	  var state = strm.state;
	  if (state.window) {
	    state.window = null;
	  }
	  strm.state = null;
	  return Z_OK;
	}
	
	function inflateGetHeader(strm, head) {
	  var state;
	
	  /* check state */
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }
	
	  /* save header structure */
	  state.head = head;
	  head.done = false;
	  return Z_OK;
	}
	
	function inflateSetDictionary(strm, dictionary) {
	  var dictLength = dictionary.length;
	
	  var state;
	  var dictid;
	  var ret;
	
	  /* check state */
	  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
	  state = strm.state;
	
	  if (state.wrap !== 0 && state.mode !== DICT) {
	    return Z_STREAM_ERROR;
	  }
	
	  /* check for correct dictionary identifier */
	  if (state.mode === DICT) {
	    dictid = 1; /* adler32(0, null, 0)*/
	    /* dictid = adler32(dictid, dictionary, dictLength); */
	    dictid = adler32(dictid, dictionary, dictLength, 0);
	    if (dictid !== state.check) {
	      return Z_DATA_ERROR;
	    }
	  }
	  /* copy dictionary to window using updatewindow(), which will amend the
	   existing dictionary if appropriate */
	  ret = updatewindow(strm, dictionary, dictLength, dictLength);
	  if (ret) {
	    state.mode = MEM;
	    return Z_MEM_ERROR;
	  }
	  state.havedict = 1;
	  // Tracev((stderr, "inflate:   dictionary set\n"));
	  return Z_OK;
	}
	
	exports.inflateReset = inflateReset;
	exports.inflateReset2 = inflateReset2;
	exports.inflateResetKeep = inflateResetKeep;
	exports.inflateInit = inflateInit;
	exports.inflateInit2 = inflateInit2;
	exports.inflate = inflate;
	exports.inflateEnd = inflateEnd;
	exports.inflateGetHeader = inflateGetHeader;
	exports.inflateSetDictionary = inflateSetDictionary;
	exports.inflateInfo = 'pako inflate (from Nodeca project)';
	
	/* Not implemented
	exports.inflateCopy = inflateCopy;
	exports.inflateGetDictionary = inflateGetDictionary;
	exports.inflateMark = inflateMark;
	exports.inflatePrime = inflatePrime;
	exports.inflateSync = inflateSync;
	exports.inflateSyncPoint = inflateSyncPoint;
	exports.inflateUndermine = inflateUndermine;
	*/


/***/ }),
/* 176 */
/***/ (function(module, exports) {

	'use strict';
	
	// See state defs from inflate.js
	var BAD = 30;       /* got a data error -- remain here until reset */
	var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
	
	/*
	   Decode literal, length, and distance codes and write out the resulting
	   literal and match bytes until either not enough input or output is
	   available, an end-of-block is encountered, or a data error is encountered.
	   When large enough input and output buffers are supplied to inflate(), for
	   example, a 16K input buffer and a 64K output buffer, more than 95% of the
	   inflate execution time is spent in this routine.
	
	   Entry assumptions:
	
	        state.mode === LEN
	        strm.avail_in >= 6
	        strm.avail_out >= 258
	        start >= strm.avail_out
	        state.bits < 8
	
	   On return, state.mode is one of:
	
	        LEN -- ran out of enough output space or enough available input
	        TYPE -- reached end of block code, inflate() to interpret next block
	        BAD -- error in block data
	
	   Notes:
	
	    - The maximum input bits used by a length/distance pair is 15 bits for the
	      length code, 5 bits for the length extra, 15 bits for the distance code,
	      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
	      Therefore if strm.avail_in >= 6, then there is enough input to avoid
	      checking for available input while decoding.
	
	    - The maximum bytes that a single length/distance pair can output is 258
	      bytes, which is the maximum length that can be coded.  inflate_fast()
	      requires strm.avail_out >= 258 for each loop to avoid checking for
	      output space.
	 */
	module.exports = function inflate_fast(strm, start) {
	  var state;
	  var _in;                    /* local strm.input */
	  var last;                   /* have enough input while in < last */
	  var _out;                   /* local strm.output */
	  var beg;                    /* inflate()'s initial strm.output */
	  var end;                    /* while out < end, enough space available */
	//#ifdef INFLATE_STRICT
	  var dmax;                   /* maximum distance from zlib header */
	//#endif
	  var wsize;                  /* window size or zero if not using window */
	  var whave;                  /* valid bytes in the window */
	  var wnext;                  /* window write index */
	  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
	  var s_window;               /* allocated sliding window, if wsize != 0 */
	  var hold;                   /* local strm.hold */
	  var bits;                   /* local strm.bits */
	  var lcode;                  /* local strm.lencode */
	  var dcode;                  /* local strm.distcode */
	  var lmask;                  /* mask for first level of length codes */
	  var dmask;                  /* mask for first level of distance codes */
	  var here;                   /* retrieved table entry */
	  var op;                     /* code bits, operation, extra bits, or */
	                              /*  window position, window bytes to copy */
	  var len;                    /* match length, unused bytes */
	  var dist;                   /* match distance */
	  var from;                   /* where to copy match from */
	  var from_source;
	
	
	  var input, output; // JS specific, because we have no pointers
	
	  /* copy state to local variables */
	  state = strm.state;
	  //here = state.here;
	  _in = strm.next_in;
	  input = strm.input;
	  last = _in + (strm.avail_in - 5);
	  _out = strm.next_out;
	  output = strm.output;
	  beg = _out - (start - strm.avail_out);
	  end = _out + (strm.avail_out - 257);
	//#ifdef INFLATE_STRICT
	  dmax = state.dmax;
	//#endif
	  wsize = state.wsize;
	  whave = state.whave;
	  wnext = state.wnext;
	  s_window = state.window;
	  hold = state.hold;
	  bits = state.bits;
	  lcode = state.lencode;
	  dcode = state.distcode;
	  lmask = (1 << state.lenbits) - 1;
	  dmask = (1 << state.distbits) - 1;
	
	
	  /* decode literals and length/distances until end-of-block or not enough
	     input data or output space */
	
	  top:
	  do {
	    if (bits < 15) {
	      hold += input[_in++] << bits;
	      bits += 8;
	      hold += input[_in++] << bits;
	      bits += 8;
	    }
	
	    here = lcode[hold & lmask];
	
	    dolen:
	    for (;;) { // Goto emulation
	      op = here >>> 24/*here.bits*/;
	      hold >>>= op;
	      bits -= op;
	      op = (here >>> 16) & 0xff/*here.op*/;
	      if (op === 0) {                          /* literal */
	        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
	        //        "inflate:         literal '%c'\n" :
	        //        "inflate:         literal 0x%02x\n", here.val));
	        output[_out++] = here & 0xffff/*here.val*/;
	      }
	      else if (op & 16) {                     /* length base */
	        len = here & 0xffff/*here.val*/;
	        op &= 15;                           /* number of extra bits */
	        if (op) {
	          if (bits < op) {
	            hold += input[_in++] << bits;
	            bits += 8;
	          }
	          len += hold & ((1 << op) - 1);
	          hold >>>= op;
	          bits -= op;
	        }
	        //Tracevv((stderr, "inflate:         length %u\n", len));
	        if (bits < 15) {
	          hold += input[_in++] << bits;
	          bits += 8;
	          hold += input[_in++] << bits;
	          bits += 8;
	        }
	        here = dcode[hold & dmask];
	
	        dodist:
	        for (;;) { // goto emulation
	          op = here >>> 24/*here.bits*/;
	          hold >>>= op;
	          bits -= op;
	          op = (here >>> 16) & 0xff/*here.op*/;
	
	          if (op & 16) {                      /* distance base */
	            dist = here & 0xffff/*here.val*/;
	            op &= 15;                       /* number of extra bits */
	            if (bits < op) {
	              hold += input[_in++] << bits;
	              bits += 8;
	              if (bits < op) {
	                hold += input[_in++] << bits;
	                bits += 8;
	              }
	            }
	            dist += hold & ((1 << op) - 1);
	//#ifdef INFLATE_STRICT
	            if (dist > dmax) {
	              strm.msg = 'invalid distance too far back';
	              state.mode = BAD;
	              break top;
	            }
	//#endif
	            hold >>>= op;
	            bits -= op;
	            //Tracevv((stderr, "inflate:         distance %u\n", dist));
	            op = _out - beg;                /* max distance in output */
	            if (dist > op) {                /* see if copy from window */
	              op = dist - op;               /* distance back in window */
	              if (op > whave) {
	                if (state.sane) {
	                  strm.msg = 'invalid distance too far back';
	                  state.mode = BAD;
	                  break top;
	                }
	
	// (!) This block is disabled in zlib defailts,
	// don't enable it for binary compatibility
	//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
	//                if (len <= op - whave) {
	//                  do {
	//                    output[_out++] = 0;
	//                  } while (--len);
	//                  continue top;
	//                }
	//                len -= op - whave;
	//                do {
	//                  output[_out++] = 0;
	//                } while (--op > whave);
	//                if (op === 0) {
	//                  from = _out - dist;
	//                  do {
	//                    output[_out++] = output[from++];
	//                  } while (--len);
	//                  continue top;
	//                }
	//#endif
	              }
	              from = 0; // window index
	              from_source = s_window;
	              if (wnext === 0) {           /* very common case */
	                from += wsize - op;
	                if (op < len) {         /* some from window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = _out - dist;  /* rest from output */
	                  from_source = output;
	                }
	              }
	              else if (wnext < op) {      /* wrap around window */
	                from += wsize + wnext - op;
	                op -= wnext;
	                if (op < len) {         /* some from end of window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = 0;
	                  if (wnext < len) {  /* some from start of window */
	                    op = wnext;
	                    len -= op;
	                    do {
	                      output[_out++] = s_window[from++];
	                    } while (--op);
	                    from = _out - dist;      /* rest from output */
	                    from_source = output;
	                  }
	                }
	              }
	              else {                      /* contiguous in window */
	                from += wnext - op;
	                if (op < len) {         /* some from window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = _out - dist;  /* rest from output */
	                  from_source = output;
	                }
	              }
	              while (len > 2) {
	                output[_out++] = from_source[from++];
	                output[_out++] = from_source[from++];
	                output[_out++] = from_source[from++];
	                len -= 3;
	              }
	              if (len) {
	                output[_out++] = from_source[from++];
	                if (len > 1) {
	                  output[_out++] = from_source[from++];
	                }
	              }
	            }
	            else {
	              from = _out - dist;          /* copy direct from output */
	              do {                        /* minimum length is three */
	                output[_out++] = output[from++];
	                output[_out++] = output[from++];
	                output[_out++] = output[from++];
	                len -= 3;
	              } while (len > 2);
	              if (len) {
	                output[_out++] = output[from++];
	                if (len > 1) {
	                  output[_out++] = output[from++];
	                }
	              }
	            }
	          }
	          else if ((op & 64) === 0) {          /* 2nd level distance code */
	            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
	            continue dodist;
	          }
	          else {
	            strm.msg = 'invalid distance code';
	            state.mode = BAD;
	            break top;
	          }
	
	          break; // need to emulate goto via "continue"
	        }
	      }
	      else if ((op & 64) === 0) {              /* 2nd level length code */
	        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
	        continue dolen;
	      }
	      else if (op & 32) {                     /* end-of-block */
	        //Tracevv((stderr, "inflate:         end of block\n"));
	        state.mode = TYPE;
	        break top;
	      }
	      else {
	        strm.msg = 'invalid literal/length code';
	        state.mode = BAD;
	        break top;
	      }
	
	      break; // need to emulate goto via "continue"
	    }
	  } while (_in < last && _out < end);
	
	  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
	  len = bits >> 3;
	  _in -= len;
	  bits -= len << 3;
	  hold &= (1 << bits) - 1;
	
	  /* update state and return */
	  strm.next_in = _in;
	  strm.next_out = _out;
	  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
	  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
	  state.hold = hold;
	  state.bits = bits;
	  return;
	};


/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	
	var utils = __webpack_require__(171);
	
	var MAXBITS = 15;
	var ENOUGH_LENS = 852;
	var ENOUGH_DISTS = 592;
	//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);
	
	var CODES = 0;
	var LENS = 1;
	var DISTS = 2;
	
	var lbase = [ /* Length codes 257..285 base */
	  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
	  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
	];
	
	var lext = [ /* Length codes 257..285 extra */
	  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
	  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
	];
	
	var dbase = [ /* Distance codes 0..29 base */
	  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
	  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
	  8193, 12289, 16385, 24577, 0, 0
	];
	
	var dext = [ /* Distance codes 0..29 extra */
	  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
	  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
	  28, 28, 29, 29, 64, 64
	];
	
	module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
	{
	  var bits = opts.bits;
	      //here = opts.here; /* table entry for duplication */
	
	  var len = 0;               /* a code's length in bits */
	  var sym = 0;               /* index of code symbols */
	  var min = 0, max = 0;          /* minimum and maximum code lengths */
	  var root = 0;              /* number of index bits for root table */
	  var curr = 0;              /* number of index bits for current table */
	  var drop = 0;              /* code bits to drop for sub-table */
	  var left = 0;                   /* number of prefix codes available */
	  var used = 0;              /* code entries in table used */
	  var huff = 0;              /* Huffman code */
	  var incr;              /* for incrementing code, index */
	  var fill;              /* index for replicating entries */
	  var low;               /* low bits for current root entry */
	  var mask;              /* mask for low root bits */
	  var next;             /* next available space in table */
	  var base = null;     /* base value table to use */
	  var base_index = 0;
	//  var shoextra;    /* extra bits table to use */
	  var end;                    /* use base and extra for symbol > end */
	  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
	  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
	  var extra = null;
	  var extra_index = 0;
	
	  var here_bits, here_op, here_val;
	
	  /*
	   Process a set of code lengths to create a canonical Huffman code.  The
	   code lengths are lens[0..codes-1].  Each length corresponds to the
	   symbols 0..codes-1.  The Huffman code is generated by first sorting the
	   symbols by length from short to long, and retaining the symbol order
	   for codes with equal lengths.  Then the code starts with all zero bits
	   for the first code of the shortest length, and the codes are integer
	   increments for the same length, and zeros are appended as the length
	   increases.  For the deflate format, these bits are stored backwards
	   from their more natural integer increment ordering, and so when the
	   decoding tables are built in the large loop below, the integer codes
	   are incremented backwards.
	
	   This routine assumes, but does not check, that all of the entries in
	   lens[] are in the range 0..MAXBITS.  The caller must assure this.
	   1..MAXBITS is interpreted as that code length.  zero means that that
	   symbol does not occur in this code.
	
	   The codes are sorted by computing a count of codes for each length,
	   creating from that a table of starting indices for each length in the
	   sorted table, and then entering the symbols in order in the sorted
	   table.  The sorted table is work[], with that space being provided by
	   the caller.
	
	   The length counts are used for other purposes as well, i.e. finding
	   the minimum and maximum length codes, determining if there are any
	   codes at all, checking for a valid set of lengths, and looking ahead
	   at length counts to determine sub-table sizes when building the
	   decoding tables.
	   */
	
	  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
	  for (len = 0; len <= MAXBITS; len++) {
	    count[len] = 0;
	  }
	  for (sym = 0; sym < codes; sym++) {
	    count[lens[lens_index + sym]]++;
	  }
	
	  /* bound code lengths, force root to be within code lengths */
	  root = bits;
	  for (max = MAXBITS; max >= 1; max--) {
	    if (count[max] !== 0) { break; }
	  }
	  if (root > max) {
	    root = max;
	  }
	  if (max === 0) {                     /* no symbols to code at all */
	    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
	    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
	    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
	    table[table_index++] = (1 << 24) | (64 << 16) | 0;
	
	
	    //table.op[opts.table_index] = 64;
	    //table.bits[opts.table_index] = 1;
	    //table.val[opts.table_index++] = 0;
	    table[table_index++] = (1 << 24) | (64 << 16) | 0;
	
	    opts.bits = 1;
	    return 0;     /* no symbols, but wait for decoding to report error */
	  }
	  for (min = 1; min < max; min++) {
	    if (count[min] !== 0) { break; }
	  }
	  if (root < min) {
	    root = min;
	  }
	
	  /* check for an over-subscribed or incomplete set of lengths */
	  left = 1;
	  for (len = 1; len <= MAXBITS; len++) {
	    left <<= 1;
	    left -= count[len];
	    if (left < 0) {
	      return -1;
	    }        /* over-subscribed */
	  }
	  if (left > 0 && (type === CODES || max !== 1)) {
	    return -1;                      /* incomplete set */
	  }
	
	  /* generate offsets into symbol table for each length for sorting */
	  offs[1] = 0;
	  for (len = 1; len < MAXBITS; len++) {
	    offs[len + 1] = offs[len] + count[len];
	  }
	
	  /* sort symbols by length, by symbol order within each length */
	  for (sym = 0; sym < codes; sym++) {
	    if (lens[lens_index + sym] !== 0) {
	      work[offs[lens[lens_index + sym]]++] = sym;
	    }
	  }
	
	  /*
	   Create and fill in decoding tables.  In this loop, the table being
	   filled is at next and has curr index bits.  The code being used is huff
	   with length len.  That code is converted to an index by dropping drop
	   bits off of the bottom.  For codes where len is less than drop + curr,
	   those top drop + curr - len bits are incremented through all values to
	   fill the table with replicated entries.
	
	   root is the number of index bits for the root table.  When len exceeds
	   root, sub-tables are created pointed to by the root entry with an index
	   of the low root bits of huff.  This is saved in low to check for when a
	   new sub-table should be started.  drop is zero when the root table is
	   being filled, and drop is root when sub-tables are being filled.
	
	   When a new sub-table is needed, it is necessary to look ahead in the
	   code lengths to determine what size sub-table is needed.  The length
	   counts are used for this, and so count[] is decremented as codes are
	   entered in the tables.
	
	   used keeps track of how many table entries have been allocated from the
	   provided *table space.  It is checked for LENS and DIST tables against
	   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
	   the initial root table size constants.  See the comments in inftrees.h
	   for more information.
	
	   sym increments through all symbols, and the loop terminates when
	   all codes of length max, i.e. all codes, have been processed.  This
	   routine permits incomplete codes, so another loop after this one fills
	   in the rest of the decoding tables with invalid code markers.
	   */
	
	  /* set up for code type */
	  // poor man optimization - use if-else instead of switch,
	  // to avoid deopts in old v8
	  if (type === CODES) {
	    base = extra = work;    /* dummy value--not used */
	    end = 19;
	
	  } else if (type === LENS) {
	    base = lbase;
	    base_index -= 257;
	    extra = lext;
	    extra_index -= 257;
	    end = 256;
	
	  } else {                    /* DISTS */
	    base = dbase;
	    extra = dext;
	    end = -1;
	  }
	
	  /* initialize opts for loop */
	  huff = 0;                   /* starting code */
	  sym = 0;                    /* starting code symbol */
	  len = min;                  /* starting code length */
	  next = table_index;              /* current table to fill in */
	  curr = root;                /* current table index bits */
	  drop = 0;                   /* current bits to drop from code for index */
	  low = -1;                   /* trigger new sub-table when len > root */
	  used = 1 << root;          /* use root table entries */
	  mask = used - 1;            /* mask for comparing low */
	
	  /* check available table space */
	  if ((type === LENS && used > ENOUGH_LENS) ||
	    (type === DISTS && used > ENOUGH_DISTS)) {
	    return 1;
	  }
	
	  var i = 0;
	  /* process all codes and make table entries */
	  for (;;) {
	    i++;
	    /* create table entry */
	    here_bits = len - drop;
	    if (work[sym] < end) {
	      here_op = 0;
	      here_val = work[sym];
	    }
	    else if (work[sym] > end) {
	      here_op = extra[extra_index + work[sym]];
	      here_val = base[base_index + work[sym]];
	    }
	    else {
	      here_op = 32 + 64;         /* end of block */
	      here_val = 0;
	    }
	
	    /* replicate for those indices with low len bits equal to huff */
	    incr = 1 << (len - drop);
	    fill = 1 << curr;
	    min = fill;                 /* save offset to next table */
	    do {
	      fill -= incr;
	      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
	    } while (fill !== 0);
	
	    /* backwards increment the len-bit code huff */
	    incr = 1 << (len - 1);
	    while (huff & incr) {
	      incr >>= 1;
	    }
	    if (incr !== 0) {
	      huff &= incr - 1;
	      huff += incr;
	    } else {
	      huff = 0;
	    }
	
	    /* go to next symbol, update count, len */
	    sym++;
	    if (--count[len] === 0) {
	      if (len === max) { break; }
	      len = lens[lens_index + work[sym]];
	    }
	
	    /* create new sub-table if needed */
	    if (len > root && (huff & mask) !== low) {
	      /* if first time, transition to sub-tables */
	      if (drop === 0) {
	        drop = root;
	      }
	
	      /* increment past last table */
	      next += min;            /* here min is 1 << curr */
	
	      /* determine length of next table */
	      curr = len - drop;
	      left = 1 << curr;
	      while (curr + drop < max) {
	        left -= count[curr + drop];
	        if (left <= 0) { break; }
	        curr++;
	        left <<= 1;
	      }
	
	      /* check for enough space */
	      used += 1 << curr;
	      if ((type === LENS && used > ENOUGH_LENS) ||
	        (type === DISTS && used > ENOUGH_DISTS)) {
	        return 1;
	      }
	
	      /* point entry in root table to sub-table */
	      low = huff & mask;
	      /*table.op[low] = curr;
	      table.bits[low] = root;
	      table.val[low] = next - opts.table_index;*/
	      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
	    }
	  }
	
	  /* fill in remaining table entry if code is incomplete (guaranteed to have
	   at most one remaining entry, since if the code is incomplete, the
	   maximum code length that was allowed to get this far is one bit) */
	  if (huff !== 0) {
	    //table.op[next + huff] = 64;            /* invalid code marker */
	    //table.bits[next + huff] = len - drop;
	    //table.val[next + huff] = 0;
	    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
	  }
	
	  /* set return parameters */
	  //opts.table_index += used;
	  opts.bits = root;
	  return 0;
	};


/***/ }),
/* 178 */
/***/ (function(module, exports) {

	'use strict';
	
	
	module.exports = {
	
	  /* Allowed flush values; see deflate() and inflate() below for details */
	  Z_NO_FLUSH:         0,
	  Z_PARTIAL_FLUSH:    1,
	  Z_SYNC_FLUSH:       2,
	  Z_FULL_FLUSH:       3,
	  Z_FINISH:           4,
	  Z_BLOCK:            5,
	  Z_TREES:            6,
	
	  /* Return codes for the compression/decompression functions. Negative values
	  * are errors, positive values are used for special but normal events.
	  */
	  Z_OK:               0,
	  Z_STREAM_END:       1,
	  Z_NEED_DICT:        2,
	  Z_ERRNO:           -1,
	  Z_STREAM_ERROR:    -2,
	  Z_DATA_ERROR:      -3,
	  //Z_MEM_ERROR:     -4,
	  Z_BUF_ERROR:       -5,
	  //Z_VERSION_ERROR: -6,
	
	  /* compression levels */
	  Z_NO_COMPRESSION:         0,
	  Z_BEST_SPEED:             1,
	  Z_BEST_COMPRESSION:       9,
	  Z_DEFAULT_COMPRESSION:   -1,
	
	
	  Z_FILTERED:               1,
	  Z_HUFFMAN_ONLY:           2,
	  Z_RLE:                    3,
	  Z_FIXED:                  4,
	  Z_DEFAULT_STRATEGY:       0,
	
	  /* Possible values of the data_type field (though see inflate()) */
	  Z_BINARY:                 0,
	  Z_TEXT:                   1,
	  //Z_ASCII:                1, // = Z_TEXT (deprecated)
	  Z_UNKNOWN:                2,
	
	  /* The deflate compression method */
	  Z_DEFLATED:               8
	  //Z_NULL:                 null // Use -1 or null inline, depending on var type
	};


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
	// original notice:
	
	/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	function compare(a, b) {
	  if (a === b) {
	    return 0;
	  }
	
	  var x = a.length;
	  var y = b.length;
	
	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i];
	      y = b[i];
	      break;
	    }
	  }
	
	  if (x < y) {
	    return -1;
	  }
	  if (y < x) {
	    return 1;
	  }
	  return 0;
	}
	function isBuffer(b) {
	  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
	    return global.Buffer.isBuffer(b);
	  }
	  return !!(b != null && b._isBuffer);
	}
	
	// based on node assert, original notice:
	
	// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
	//
	// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
	//
	// Originally from narwhal.js (http://narwhaljs.org)
	// Copyright (c) 2009 Thomas Robinson <280north.com>
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the 'Software'), to
	// deal in the Software without restriction, including without limitation the
	// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	// sell copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
	// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var util = __webpack_require__(180);
	var hasOwn = Object.prototype.hasOwnProperty;
	var pSlice = Array.prototype.slice;
	var functionsHaveNames = (function () {
	  return function foo() {}.name === 'foo';
	}());
	function pToString (obj) {
	  return Object.prototype.toString.call(obj);
	}
	function isView(arrbuf) {
	  if (isBuffer(arrbuf)) {
	    return false;
	  }
	  if (typeof global.ArrayBuffer !== 'function') {
	    return false;
	  }
	  if (typeof ArrayBuffer.isView === 'function') {
	    return ArrayBuffer.isView(arrbuf);
	  }
	  if (!arrbuf) {
	    return false;
	  }
	  if (arrbuf instanceof DataView) {
	    return true;
	  }
	  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
	    return true;
	  }
	  return false;
	}
	// 1. The assert module provides functions that throw
	// AssertionError's when particular conditions are not met. The
	// assert module must conform to the following interface.
	
	var assert = module.exports = ok;
	
	// 2. The AssertionError is defined in assert.
	// new assert.AssertionError({ message: message,
	//                             actual: actual,
	//                             expected: expected })
	
	var regex = /\s*function\s+([^\(\s]*)\s*/;
	// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
	function getName(func) {
	  if (!util.isFunction(func)) {
	    return;
	  }
	  if (functionsHaveNames) {
	    return func.name;
	  }
	  var str = func.toString();
	  var match = str.match(regex);
	  return match && match[1];
	}
	assert.AssertionError = function AssertionError(options) {
	  this.name = 'AssertionError';
	  this.actual = options.actual;
	  this.expected = options.expected;
	  this.operator = options.operator;
	  if (options.message) {
	    this.message = options.message;
	    this.generatedMessage = false;
	  } else {
	    this.message = getMessage(this);
	    this.generatedMessage = true;
	  }
	  var stackStartFunction = options.stackStartFunction || fail;
	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, stackStartFunction);
	  } else {
	    // non v8 browsers so we can have a stacktrace
	    var err = new Error();
	    if (err.stack) {
	      var out = err.stack;
	
	      // try to strip useless frames
	      var fn_name = getName(stackStartFunction);
	      var idx = out.indexOf('\n' + fn_name);
	      if (idx >= 0) {
	        // once we have located the function frame
	        // we need to strip out everything before it (and its line)
	        var next_line = out.indexOf('\n', idx + 1);
	        out = out.substring(next_line + 1);
	      }
	
	      this.stack = out;
	    }
	  }
	};
	
	// assert.AssertionError instanceof Error
	util.inherits(assert.AssertionError, Error);
	
	function truncate(s, n) {
	  if (typeof s === 'string') {
	    return s.length < n ? s : s.slice(0, n);
	  } else {
	    return s;
	  }
	}
	function inspect(something) {
	  if (functionsHaveNames || !util.isFunction(something)) {
	    return util.inspect(something);
	  }
	  var rawname = getName(something);
	  var name = rawname ? ': ' + rawname : '';
	  return '[Function' +  name + ']';
	}
	function getMessage(self) {
	  return truncate(inspect(self.actual), 128) + ' ' +
	         self.operator + ' ' +
	         truncate(inspect(self.expected), 128);
	}
	
	// At present only the three keys mentioned above are used and
	// understood by the spec. Implementations or sub modules can pass
	// other keys to the AssertionError's constructor - they will be
	// ignored.
	
	// 3. All of the following functions must throw an AssertionError
	// when a corresponding condition is not met, with a message that
	// may be undefined if not provided.  All assertion methods provide
	// both the actual and expected values to the assertion error for
	// display purposes.
	
	function fail(actual, expected, message, operator, stackStartFunction) {
	  throw new assert.AssertionError({
	    message: message,
	    actual: actual,
	    expected: expected,
	    operator: operator,
	    stackStartFunction: stackStartFunction
	  });
	}
	
	// EXTENSION! allows for well behaved errors defined elsewhere.
	assert.fail = fail;
	
	// 4. Pure assertion tests whether a value is truthy, as determined
	// by !!guard.
	// assert.ok(guard, message_opt);
	// This statement is equivalent to assert.equal(true, !!guard,
	// message_opt);. To test strictly for the value true, use
	// assert.strictEqual(true, guard, message_opt);.
	
	function ok(value, message) {
	  if (!value) fail(value, true, message, '==', assert.ok);
	}
	assert.ok = ok;
	
	// 5. The equality assertion tests shallow, coercive equality with
	// ==.
	// assert.equal(actual, expected, message_opt);
	
	assert.equal = function equal(actual, expected, message) {
	  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
	};
	
	// 6. The non-equality assertion tests for whether two objects are not equal
	// with != assert.notEqual(actual, expected, message_opt);
	
	assert.notEqual = function notEqual(actual, expected, message) {
	  if (actual == expected) {
	    fail(actual, expected, message, '!=', assert.notEqual);
	  }
	};
	
	// 7. The equivalence assertion tests a deep equality relation.
	// assert.deepEqual(actual, expected, message_opt);
	
	assert.deepEqual = function deepEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected, false)) {
	    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
	  }
	};
	
	assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected, true)) {
	    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
	  }
	};
	
	function _deepEqual(actual, expected, strict, memos) {
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
	    return true;
	  } else if (isBuffer(actual) && isBuffer(expected)) {
	    return compare(actual, expected) === 0;
	
	  // 7.2. If the expected value is a Date object, the actual value is
	  // equivalent if it is also a Date object that refers to the same time.
	  } else if (util.isDate(actual) && util.isDate(expected)) {
	    return actual.getTime() === expected.getTime();
	
	  // 7.3 If the expected value is a RegExp object, the actual value is
	  // equivalent if it is also a RegExp object with the same source and
	  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
	  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
	    return actual.source === expected.source &&
	           actual.global === expected.global &&
	           actual.multiline === expected.multiline &&
	           actual.lastIndex === expected.lastIndex &&
	           actual.ignoreCase === expected.ignoreCase;
	
	  // 7.4. Other pairs that do not both pass typeof value == 'object',
	  // equivalence is determined by ==.
	  } else if ((actual === null || typeof actual !== 'object') &&
	             (expected === null || typeof expected !== 'object')) {
	    return strict ? actual === expected : actual == expected;
	
	  // If both values are instances of typed arrays, wrap their underlying
	  // ArrayBuffers in a Buffer each to increase performance
	  // This optimization requires the arrays to have the same type as checked by
	  // Object.prototype.toString (aka pToString). Never perform binary
	  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
	  // bit patterns are not identical.
	  } else if (isView(actual) && isView(expected) &&
	             pToString(actual) === pToString(expected) &&
	             !(actual instanceof Float32Array ||
	               actual instanceof Float64Array)) {
	    return compare(new Uint8Array(actual.buffer),
	                   new Uint8Array(expected.buffer)) === 0;
	
	  // 7.5 For all other Object pairs, including Array objects, equivalence is
	  // determined by having the same number of owned properties (as verified
	  // with Object.prototype.hasOwnProperty.call), the same set of keys
	  // (although not necessarily the same order), equivalent values for every
	  // corresponding key, and an identical 'prototype' property. Note: this
	  // accounts for both named and indexed properties on Arrays.
	  } else if (isBuffer(actual) !== isBuffer(expected)) {
	    return false;
	  } else {
	    memos = memos || {actual: [], expected: []};
	
	    var actualIndex = memos.actual.indexOf(actual);
	    if (actualIndex !== -1) {
	      if (actualIndex === memos.expected.indexOf(expected)) {
	        return true;
	      }
	    }
	
	    memos.actual.push(actual);
	    memos.expected.push(expected);
	
	    return objEquiv(actual, expected, strict, memos);
	  }
	}
	
	function isArguments(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	}
	
	function objEquiv(a, b, strict, actualVisitedObjects) {
	  if (a === null || a === undefined || b === null || b === undefined)
	    return false;
	  // if one is a primitive, the other must be same
	  if (util.isPrimitive(a) || util.isPrimitive(b))
	    return a === b;
	  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
	    return false;
	  var aIsArgs = isArguments(a);
	  var bIsArgs = isArguments(b);
	  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
	    return false;
	  if (aIsArgs) {
	    a = pSlice.call(a);
	    b = pSlice.call(b);
	    return _deepEqual(a, b, strict);
	  }
	  var ka = objectKeys(a);
	  var kb = objectKeys(b);
	  var key, i;
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length !== kb.length)
	    return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] !== kb[i])
	      return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
	      return false;
	  }
	  return true;
	}
	
	// 8. The non-equivalence assertion tests for any deep inequality.
	// assert.notDeepEqual(actual, expected, message_opt);
	
	assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected, false)) {
	    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
	  }
	};
	
	assert.notDeepStrictEqual = notDeepStrictEqual;
	function notDeepStrictEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected, true)) {
	    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
	  }
	}
	
	
	// 9. The strict equality assertion tests strict equality, as determined by ===.
	// assert.strictEqual(actual, expected, message_opt);
	
	assert.strictEqual = function strictEqual(actual, expected, message) {
	  if (actual !== expected) {
	    fail(actual, expected, message, '===', assert.strictEqual);
	  }
	};
	
	// 10. The strict non-equality assertion tests for strict inequality, as
	// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);
	
	assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
	  if (actual === expected) {
	    fail(actual, expected, message, '!==', assert.notStrictEqual);
	  }
	};
	
	function expectedException(actual, expected) {
	  if (!actual || !expected) {
	    return false;
	  }
	
	  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
	    return expected.test(actual);
	  }
	
	  try {
	    if (actual instanceof expected) {
	      return true;
	    }
	  } catch (e) {
	    // Ignore.  The instanceof check doesn't work for arrow functions.
	  }
	
	  if (Error.isPrototypeOf(expected)) {
	    return false;
	  }
	
	  return expected.call({}, actual) === true;
	}
	
	function _tryBlock(block) {
	  var error;
	  try {
	    block();
	  } catch (e) {
	    error = e;
	  }
	  return error;
	}
	
	function _throws(shouldThrow, block, expected, message) {
	  var actual;
	
	  if (typeof block !== 'function') {
	    throw new TypeError('"block" argument must be a function');
	  }
	
	  if (typeof expected === 'string') {
	    message = expected;
	    expected = null;
	  }
	
	  actual = _tryBlock(block);
	
	  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
	            (message ? ' ' + message : '.');
	
	  if (shouldThrow && !actual) {
	    fail(actual, expected, 'Missing expected exception' + message);
	  }
	
	  var userProvidedMessage = typeof message === 'string';
	  var isUnwantedException = !shouldThrow && util.isError(actual);
	  var isUnexpectedException = !shouldThrow && actual && !expected;
	
	  if ((isUnwantedException &&
	      userProvidedMessage &&
	      expectedException(actual, expected)) ||
	      isUnexpectedException) {
	    fail(actual, expected, 'Got unwanted exception' + message);
	  }
	
	  if ((shouldThrow && actual && expected &&
	      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
	    throw actual;
	  }
	}
	
	// 11. Expected to throw an error:
	// assert.throws(block, Error_opt, message_opt);
	
	assert.throws = function(block, /*optional*/error, /*optional*/message) {
	  _throws(true, block, error, message);
	};
	
	// EXTENSION! This is annoying to write outside this module.
	assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
	  _throws(false, block, error, message);
	};
	
	assert.ifError = function(err) { if (err) throw err; };
	
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    if (hasOwn.call(obj, key)) keys.push(key);
	  }
	  return keys;
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }
	
	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};
	
	
	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }
	
	  if (process.noDeprecation === true) {
	    return fn;
	  }
	
	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }
	
	  return deprecated;
	};
	
	
	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};
	
	
	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;
	
	
	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};
	
	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};
	
	
	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];
	
	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}
	
	
	function stylizeNoColor(str, styleType) {
	  return str;
	}
	
	
	function arrayToHash(array) {
	  var hash = {};
	
	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });
	
	  return hash;
	}
	
	
	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }
	
	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }
	
	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);
	
	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }
	
	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }
	
	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }
	
	  var base = '', array = false, braces = ['{', '}'];
	
	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }
	
	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }
	
	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }
	
	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }
	
	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }
	
	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }
	
	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }
	
	  ctx.seen.push(value);
	
	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }
	
	  ctx.seen.pop();
	
	  return reduceToSingleString(output, base, braces);
	}
	
	
	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}
	
	
	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}
	
	
	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}
	
	
	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }
	
	  return name + ': ' + str;
	}
	
	
	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);
	
	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }
	
	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}
	
	
	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;
	
	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;
	
	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;
	
	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;
	
	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;
	
	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;
	
	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;
	
	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;
	
	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;
	
	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;
	
	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;
	
	exports.isBuffer = __webpack_require__(181);
	
	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	
	
	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}
	
	
	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];
	
	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}
	
	
	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};
	
	
	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(182);
	
	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;
	
	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};
	
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(90)))

/***/ }),
/* 181 */
/***/ (function(module, exports) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ }),
/* 182 */
/***/ (function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Buffer, process, module) {'use strict';var _getIterator2=__webpack_require__(184);var _getIterator3=_interopRequireDefault(_getIterator2);var _assign=__webpack_require__(187);var _assign2=_interopRequireDefault(_assign);var _defineProperties=__webpack_require__(193);var _defineProperties2=_interopRequireDefault(_defineProperties);var _getOwnPropertySymbols=__webpack_require__(196);var _getOwnPropertySymbols2=_interopRequireDefault(_getOwnPropertySymbols);var _getPrototypeOf=__webpack_require__(207);var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _weakMap=__webpack_require__(211);var _weakMap2=_interopRequireDefault(_weakMap);var _isExtensible=__webpack_require__(224);var _isExtensible2=_interopRequireDefault(_isExtensible);var _imul=__webpack_require__(227);var _imul2=_interopRequireDefault(_imul);var _iterator4=__webpack_require__(230);var _iterator5=_interopRequireDefault(_iterator4);var _symbol=__webpack_require__(232);var _symbol2=_interopRequireDefault(_symbol);var _promise=__webpack_require__(1);var _promise2=_interopRequireDefault(_promise);var _map=__webpack_require__(236);var _map2=_interopRequireDefault(_map);var _set=__webpack_require__(245);var _set2=_interopRequireDefault(_set);var _slicedToArray2=__webpack_require__(251);var _slicedToArray3=_interopRequireDefault(_slicedToArray2);var _stringify=__webpack_require__(81);var _stringify2=_interopRequireDefault(_stringify);var _keys=__webpack_require__(255);var _keys2=_interopRequireDefault(_keys);var _classCallCheck2=__webpack_require__(84);var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=__webpack_require__(85);var _createClass3=_interopRequireDefault(_createClass2);var _create=__webpack_require__(258);var _create2=_interopRequireDefault(_create);var _defineProperty=__webpack_require__(86);var _defineProperty2=_interopRequireDefault(_defineProperty);var _typeof2=__webpack_require__(261);var _typeof3=_interopRequireDefault(_typeof2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}(function webpackUniversalModuleDefinition(root,factory){if(( false?'undefined':(0,_typeof3.default)(exports))==='object'&&( false?'undefined':(0,_typeof3.default)(module))==='object')module.exports=factory(__webpack_require__(262));else if(true)!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(262)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else if((typeof exports==='undefined'?'undefined':(0,_typeof3.default)(exports))==='object')exports["cybexjs"]=factory(require("cybexjs-ws"));else root["cybexjs"]=factory(root["cybexjs-ws"]);})(typeof self!=='undefined'?self:undefined,function(__WEBPACK_EXTERNAL_MODULE_4__){return(/******/function(modules){// webpackBootstrap
	/******/// The module cache
	/******/var installedModules={};/******//******/// The require function
	/******/function __webpack_require__(moduleId){/******//******/// Check if module is in cache
	/******/if(installedModules[moduleId]){/******/return installedModules[moduleId].exports;/******/}/******/// Create a new module (and put it into the cache)
	/******/var module=installedModules[moduleId]={/******/i:moduleId,/******/l:false,/******/exports:{}/******/};/******//******/// Execute the module function
	/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******//******/// Flag the module as loaded
	/******/module.l=true;/******//******/// Return the exports of the module
	/******/return module.exports;/******/}/******//******//******/// expose the modules object (__webpack_modules__)
	/******/__webpack_require__.m=modules;/******//******/// expose the module cache
	/******/__webpack_require__.c=installedModules;/******//******/// define getter function for harmony exports
	/******/__webpack_require__.d=function(exports,name,getter){/******/if(!__webpack_require__.o(exports,name)){/******/(0,_defineProperty2.default)(exports,name,{/******/configurable:false,/******/enumerable:true,/******/get:getter/******/});/******/}/******/};/******//******/// getDefaultExport function for compatibility with non-harmony modules
	/******/__webpack_require__.n=function(module){/******/var getter=module&&module.__esModule?/******/function getDefault(){return module['default'];}:/******/function getModuleExports(){return module;};/******/__webpack_require__.d(getter,'a',getter);/******/return getter;/******/};/******//******/// Object.prototype.hasOwnProperty.call
	/******/__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property);};/******//******/// __webpack_public_path__
	/******/__webpack_require__.p="";/******//******/// Load entry module and return exports
	/******/return __webpack_require__(__webpack_require__.s=39);/******/}(/************************************************************************//******/[/* 0 *//***/function(module,exports){module.exports=__webpack_require__(179);/***/},/* 1 *//***/function(module,exports,__webpack_require__){var BigInteger=__webpack_require__(24);//addons
	__webpack_require__(43);module.exports=BigInteger;/***/},/* 2 *//***/function(module,__webpack_exports__,__webpack_require__){"use strict";Object.defineProperty(__webpack_exports__,"__esModule",{value:true});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"sha1",function(){return sha1;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"sha256",function(){return sha256;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"sha512",function(){return sha512;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"HmacSHA256",function(){return HmacSHA256;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"ripemd160",function(){return ripemd160;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_create_hash__=__webpack_require__(47);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_create_hash___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_create_hash__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_create_hmac__=__webpack_require__(48);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_create_hmac___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_create_hmac__);/** @arg {string|Buffer} data
	    @arg {string} [digest = null] - 'hex', 'binary' or 'base64'
	    @return {string|Buffer} - Buffer when digest is null, or string
	*/function sha1(data,encoding){return __WEBPACK_IMPORTED_MODULE_0_create_hash___default()('sha1').update(data).digest(encoding);}/** @arg {string|Buffer} data
	    @arg {string} [digest = null] - 'hex', 'binary' or 'base64'
	    @return {string|Buffer} - Buffer when digest is null, or string
	*/function sha256(data,encoding){return __WEBPACK_IMPORTED_MODULE_0_create_hash___default()('sha256').update(data).digest(encoding);}/** @arg {string|Buffer} data
	    @arg {string} [digest = null] - 'hex', 'binary' or 'base64'
	    @return {string|Buffer} - Buffer when digest is null, or string
	*/function sha512(data,encoding){return __WEBPACK_IMPORTED_MODULE_0_create_hash___default()('sha512').update(data).digest(encoding);}function HmacSHA256(buffer,secret){return __WEBPACK_IMPORTED_MODULE_1_create_hmac___default()('sha256',secret).update(buffer).digest();}function ripemd160(data){return __WEBPACK_IMPORTED_MODULE_0_create_hash___default()('rmd160').update(data).digest();}// function hash160(buffer) {
	//   return ripemd160(sha256(buffer))
	// }
	//
	// function hash256(buffer) {
	//   return sha256(sha256(buffer))
	// }
	//
	// function HmacSHA512(buffer, secret) {
	//   return crypto.createHmac('sha512', secret).update(buffer).digest()
	// }
	/***/},/* 3 *//***/function(module,exports,__webpack_require__){;(function(root,factory){if(true){// CommonJS
	module.exports=exports=factory();}else if(typeof define==="function"&&define.amd){// AMD
	define([],factory);}else{// Global (browser)
	root.CryptoJS=factory();}})(this,function(){/**
		 * CryptoJS core components.
		 */var CryptoJS=CryptoJS||function(Math,undefined){/*
		     * Local polyfil of Object.create
		     */var create=_create2.default||function(){function F(){};return function(obj){var subtype;F.prototype=obj;subtype=new F();F.prototype=null;return subtype;};}();/**
		     * CryptoJS namespace.
		     */var C={};/**
		     * Library namespace.
		     */var C_lib=C.lib={};/**
		     * Base object for prototypal inheritance.
		     */var Base=C_lib.Base=function(){return{/**
		             * Creates a new object that inherits from this object.
		             *
		             * @param {Object} overrides Properties to copy into the new object.
		             *
		             * @return {Object} The new object.
		             *
		             * @static
		             *
		             * @example
		             *
		             *     var MyType = CryptoJS.lib.Base.extend({
		             *         field: 'value',
		             *
		             *         method: function () {
		             *         }
		             *     });
		             */extend:function extend(overrides){// Spawn
	var subtype=create(this);// Augment
	if(overrides){subtype.mixIn(overrides);}// Create default initializer
	if(!subtype.hasOwnProperty('init')||this.init===subtype.init){subtype.init=function(){subtype.$super.init.apply(this,arguments);};}// Initializer's prototype is the subtype object
	subtype.init.prototype=subtype;// Reference supertype
	subtype.$super=this;return subtype;},/**
		             * Extends this object and runs the init method.
		             * Arguments to create() will be passed to init().
		             *
		             * @return {Object} The new object.
		             *
		             * @static
		             *
		             * @example
		             *
		             *     var instance = MyType.create();
		             */create:function create(){var instance=this.extend();instance.init.apply(instance,arguments);return instance;},/**
		             * Initializes a newly created object.
		             * Override this method to add some logic when your objects are created.
		             *
		             * @example
		             *
		             *     var MyType = CryptoJS.lib.Base.extend({
		             *         init: function () {
		             *             // ...
		             *         }
		             *     });
		             */init:function init(){},/**
		             * Copies properties into this object.
		             *
		             * @param {Object} properties The properties to mix in.
		             *
		             * @example
		             *
		             *     MyType.mixIn({
		             *         field: 'value'
		             *     });
		             */mixIn:function mixIn(properties){for(var propertyName in properties){if(properties.hasOwnProperty(propertyName)){this[propertyName]=properties[propertyName];}}// IE won't copy toString using the loop above
	if(properties.hasOwnProperty('toString')){this.toString=properties.toString;}},/**
		             * Creates a copy of this object.
		             *
		             * @return {Object} The clone.
		             *
		             * @example
		             *
		             *     var clone = instance.clone();
		             */clone:function clone(){return this.init.prototype.extend(this);}};}();/**
		     * An array of 32-bit words.
		     *
		     * @property {Array} words The array of 32-bit words.
		     * @property {number} sigBytes The number of significant bytes in this word array.
		     */var WordArray=C_lib.WordArray=Base.extend({/**
		         * Initializes a newly created word array.
		         *
		         * @param {Array} words (Optional) An array of 32-bit words.
		         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.lib.WordArray.create();
		         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
		         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
		         */init:function init(words,sigBytes){words=this.words=words||[];if(sigBytes!=undefined){this.sigBytes=sigBytes;}else{this.sigBytes=words.length*4;}},/**
		         * Converts this word array to a string.
		         *
		         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
		         *
		         * @return {string} The stringified word array.
		         *
		         * @example
		         *
		         *     var string = wordArray + '';
		         *     var string = wordArray.toString();
		         *     var string = wordArray.toString(CryptoJS.enc.Utf8);
		         */toString:function toString(encoder){return(encoder||Hex).stringify(this);},/**
		         * Concatenates a word array to this word array.
		         *
		         * @param {WordArray} wordArray The word array to append.
		         *
		         * @return {WordArray} This word array.
		         *
		         * @example
		         *
		         *     wordArray1.concat(wordArray2);
		         */concat:function concat(wordArray){// Shortcuts
	var thisWords=this.words;var thatWords=wordArray.words;var thisSigBytes=this.sigBytes;var thatSigBytes=wordArray.sigBytes;// Clamp excess bits
	this.clamp();// Concat
	if(thisSigBytes%4){// Copy one byte at a time
	for(var i=0;i<thatSigBytes;i++){var thatByte=thatWords[i>>>2]>>>24-i%4*8&0xff;thisWords[thisSigBytes+i>>>2]|=thatByte<<24-(thisSigBytes+i)%4*8;}}else{// Copy one word at a time
	for(var i=0;i<thatSigBytes;i+=4){thisWords[thisSigBytes+i>>>2]=thatWords[i>>>2];}}this.sigBytes+=thatSigBytes;// Chainable
	return this;},/**
		         * Removes insignificant bits.
		         *
		         * @example
		         *
		         *     wordArray.clamp();
		         */clamp:function clamp(){// Shortcuts
	var words=this.words;var sigBytes=this.sigBytes;// Clamp
	words[sigBytes>>>2]&=0xffffffff<<32-sigBytes%4*8;words.length=Math.ceil(sigBytes/4);},/**
		         * Creates a copy of this word array.
		         *
		         * @return {WordArray} The clone.
		         *
		         * @example
		         *
		         *     var clone = wordArray.clone();
		         */clone:function clone(){var clone=Base.clone.call(this);clone.words=this.words.slice(0);return clone;},/**
		         * Creates a word array filled with random bytes.
		         *
		         * @param {number} nBytes The number of random bytes to generate.
		         *
		         * @return {WordArray} The random word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.lib.WordArray.random(16);
		         */random:function random(nBytes){var words=[];var r=function r(m_w){var m_w=m_w;var m_z=0x3ade68b1;var mask=0xffffffff;return function(){m_z=0x9069*(m_z&0xFFFF)+(m_z>>0x10)&mask;m_w=0x4650*(m_w&0xFFFF)+(m_w>>0x10)&mask;var result=(m_z<<0x10)+m_w&mask;result/=0x100000000;result+=0.5;return result*(Math.random()>.5?1:-1);};};for(var i=0,rcache;i<nBytes;i+=4){var _r=r((rcache||Math.random())*0x100000000);rcache=_r()*0x3ade67b7;words.push(_r()*0x100000000|0);}return new WordArray.init(words,nBytes);}});/**
		     * Encoder namespace.
		     */var C_enc=C.enc={};/**
		     * Hex encoding strategy.
		     */var Hex=C_enc.Hex={/**
		         * Converts a word array to a hex string.
		         *
		         * @param {WordArray} wordArray The word array.
		         *
		         * @return {string} The hex string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
		         */stringify:function stringify(wordArray){// Shortcuts
	var words=wordArray.words;var sigBytes=wordArray.sigBytes;// Convert
	var hexChars=[];for(var i=0;i<sigBytes;i++){var bite=words[i>>>2]>>>24-i%4*8&0xff;hexChars.push((bite>>>4).toString(16));hexChars.push((bite&0x0f).toString(16));}return hexChars.join('');},/**
		         * Converts a hex string to a word array.
		         *
		         * @param {string} hexStr The hex string.
		         *
		         * @return {WordArray} The word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
		         */parse:function parse(hexStr){// Shortcut
	var hexStrLength=hexStr.length;// Convert
	var words=[];for(var i=0;i<hexStrLength;i+=2){words[i>>>3]|=parseInt(hexStr.substr(i,2),16)<<24-i%8*4;}return new WordArray.init(words,hexStrLength/2);}};/**
		     * Latin1 encoding strategy.
		     */var Latin1=C_enc.Latin1={/**
		         * Converts a word array to a Latin1 string.
		         *
		         * @param {WordArray} wordArray The word array.
		         *
		         * @return {string} The Latin1 string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
		         */stringify:function stringify(wordArray){// Shortcuts
	var words=wordArray.words;var sigBytes=wordArray.sigBytes;// Convert
	var latin1Chars=[];for(var i=0;i<sigBytes;i++){var bite=words[i>>>2]>>>24-i%4*8&0xff;latin1Chars.push(String.fromCharCode(bite));}return latin1Chars.join('');},/**
		         * Converts a Latin1 string to a word array.
		         *
		         * @param {string} latin1Str The Latin1 string.
		         *
		         * @return {WordArray} The word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
		         */parse:function parse(latin1Str){// Shortcut
	var latin1StrLength=latin1Str.length;// Convert
	var words=[];for(var i=0;i<latin1StrLength;i++){words[i>>>2]|=(latin1Str.charCodeAt(i)&0xff)<<24-i%4*8;}return new WordArray.init(words,latin1StrLength);}};/**
		     * UTF-8 encoding strategy.
		     */var Utf8=C_enc.Utf8={/**
		         * Converts a word array to a UTF-8 string.
		         *
		         * @param {WordArray} wordArray The word array.
		         *
		         * @return {string} The UTF-8 string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
		         */stringify:function stringify(wordArray){try{return decodeURIComponent(escape(Latin1.stringify(wordArray)));}catch(e){throw new Error('Malformed UTF-8 data');}},/**
		         * Converts a UTF-8 string to a word array.
		         *
		         * @param {string} utf8Str The UTF-8 string.
		         *
		         * @return {WordArray} The word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
		         */parse:function parse(utf8Str){return Latin1.parse(unescape(encodeURIComponent(utf8Str)));}};/**
		     * Abstract buffered block algorithm template.
		     *
		     * The property blockSize must be implemented in a concrete subtype.
		     *
		     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
		     */var BufferedBlockAlgorithm=C_lib.BufferedBlockAlgorithm=Base.extend({/**
		         * Resets this block algorithm's data buffer to its initial state.
		         *
		         * @example
		         *
		         *     bufferedBlockAlgorithm.reset();
		         */reset:function reset(){// Initial values
	this._data=new WordArray.init();this._nDataBytes=0;},/**
		         * Adds new data to this block algorithm's buffer.
		         *
		         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
		         *
		         * @example
		         *
		         *     bufferedBlockAlgorithm._append('data');
		         *     bufferedBlockAlgorithm._append(wordArray);
		         */_append:function _append(data){// Convert string to WordArray, else assume WordArray already
	if(typeof data=='string'){data=Utf8.parse(data);}// Append
	this._data.concat(data);this._nDataBytes+=data.sigBytes;},/**
		         * Processes available data blocks.
		         *
		         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
		         *
		         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
		         *
		         * @return {WordArray} The processed data.
		         *
		         * @example
		         *
		         *     var processedData = bufferedBlockAlgorithm._process();
		         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
		         */_process:function _process(doFlush){// Shortcuts
	var data=this._data;var dataWords=data.words;var dataSigBytes=data.sigBytes;var blockSize=this.blockSize;var blockSizeBytes=blockSize*4;// Count blocks ready
	var nBlocksReady=dataSigBytes/blockSizeBytes;if(doFlush){// Round up to include partial blocks
	nBlocksReady=Math.ceil(nBlocksReady);}else{// Round down to include only full blocks,
	// less the number of blocks that must remain in the buffer
	nBlocksReady=Math.max((nBlocksReady|0)-this._minBufferSize,0);}// Count words ready
	var nWordsReady=nBlocksReady*blockSize;// Count bytes ready
	var nBytesReady=Math.min(nWordsReady*4,dataSigBytes);// Process blocks
	if(nWordsReady){for(var offset=0;offset<nWordsReady;offset+=blockSize){// Perform concrete-algorithm logic
	this._doProcessBlock(dataWords,offset);}// Remove processed words
	var processedWords=dataWords.splice(0,nWordsReady);data.sigBytes-=nBytesReady;}// Return processed words
	return new WordArray.init(processedWords,nBytesReady);},/**
		         * Creates a copy of this object.
		         *
		         * @return {Object} The clone.
		         *
		         * @example
		         *
		         *     var clone = bufferedBlockAlgorithm.clone();
		         */clone:function clone(){var clone=Base.clone.call(this);clone._data=this._data.clone();return clone;},_minBufferSize:0});/**
		     * Abstract hasher template.
		     *
		     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
		     */var Hasher=C_lib.Hasher=BufferedBlockAlgorithm.extend({/**
		         * Configuration options.
		         */cfg:Base.extend(),/**
		         * Initializes a newly created hasher.
		         *
		         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
		         *
		         * @example
		         *
		         *     var hasher = CryptoJS.algo.SHA256.create();
		         */init:function init(cfg){// Apply config defaults
	this.cfg=this.cfg.extend(cfg);// Set initial values
	this.reset();},/**
		         * Resets this hasher to its initial state.
		         *
		         * @example
		         *
		         *     hasher.reset();
		         */reset:function reset(){// Reset data buffer
	BufferedBlockAlgorithm.reset.call(this);// Perform concrete-hasher logic
	this._doReset();},/**
		         * Updates this hasher with a message.
		         *
		         * @param {WordArray|string} messageUpdate The message to append.
		         *
		         * @return {Hasher} This hasher.
		         *
		         * @example
		         *
		         *     hasher.update('message');
		         *     hasher.update(wordArray);
		         */update:function update(messageUpdate){// Append
	this._append(messageUpdate);// Update the hash
	this._process();// Chainable
	return this;},/**
		         * Finalizes the hash computation.
		         * Note that the finalize operation is effectively a destructive, read-once operation.
		         *
		         * @param {WordArray|string} messageUpdate (Optional) A final message update.
		         *
		         * @return {WordArray} The hash.
		         *
		         * @example
		         *
		         *     var hash = hasher.finalize();
		         *     var hash = hasher.finalize('message');
		         *     var hash = hasher.finalize(wordArray);
		         */finalize:function finalize(messageUpdate){// Final message update
	if(messageUpdate){this._append(messageUpdate);}// Perform concrete-hasher logic
	var hash=this._doFinalize();return hash;},blockSize:512/32,/**
		         * Creates a shortcut function to a hasher's object interface.
		         *
		         * @param {Hasher} hasher The hasher to create a helper for.
		         *
		         * @return {Function} The shortcut function.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
		         */_createHelper:function _createHelper(hasher){return function(message,cfg){return new hasher.init(cfg).finalize(message);};},/**
		         * Creates a shortcut function to the HMAC's object interface.
		         *
		         * @param {Hasher} hasher The hasher to use in this HMAC helper.
		         *
		         * @return {Function} The shortcut function.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
		         */_createHmacHelper:function _createHmacHelper(hasher){return function(message,key){return new C_algo.HMAC.init(hasher,key).finalize(message);};}});/**
		     * Algorithm namespace.
		     */var C_algo=C.algo={};return C;}(Math);return CryptoJS;});/***/},/* 4 *//***/function(module,exports){module.exports=__WEBPACK_EXTERNAL_MODULE_4__;/***/},/* 5 *//***/function(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_bigi__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_bigi___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_bigi__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_ecurve__=__webpack_require__(8);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_ecurve___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_ecurve__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2_bs58__=__webpack_require__(13);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2_bs58___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_bs58__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__hash__=__webpack_require__(2);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4_cybexjs_ws__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4_cybexjs_ws___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_cybexjs_ws__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5_assert__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5_assert___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_assert__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_6_deep_equal__=__webpack_require__(15);/* harmony import */var __WEBPACK_IMPORTED_MODULE_6_deep_equal___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_deep_equal__);var secp256k1=Object(__WEBPACK_IMPORTED_MODULE_1_ecurve__["getCurveByName"])('secp256k1');var G=secp256k1.G,n=secp256k1.n;var PublicKey=function(){/** @param {Point} public key */function PublicKey(Q){(0,_classCallCheck3.default)(this,PublicKey);this.Q=Q;}(0,_createClass3.default)(PublicKey,[{key:'toBuffer',value:function toBuffer(){var compressed=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.Q?this.Q.compressed:null;if(this.Q===null)return new Buffer('000000000000000000000000000000000000000000000000000000000000000000','hex');return this.Q.getEncoded(compressed);}},{key:'toUncompressed',value:function toUncompressed(){var buf=this.Q.getEncoded(false);var point=__WEBPACK_IMPORTED_MODULE_1_ecurve__["Point"].decodeFrom(secp256k1,buf);return PublicKey.fromPoint(point);}/** cyb::blockchain::address (unique but not a full public key) */},{key:'toBlockchainAddress',value:function toBlockchainAddress(){var pub_buf=this.toBuffer();var pub_sha=Object(__WEBPACK_IMPORTED_MODULE_3__hash__["sha512"])(pub_buf);return Object(__WEBPACK_IMPORTED_MODULE_3__hash__["ripemd160"])(pub_sha);}/** Alias for {@link toPublicKeyString} */},{key:'toString',value:function toString(){var address_prefix=arguments.length>0&&arguments[0]!==undefined?arguments[0]:__WEBPACK_IMPORTED_MODULE_4_cybexjs_ws__["ChainConfig"].address_prefix;return this.toPublicKeyString(address_prefix);}/**
	        Full public key
	        {return} string
	    */},{key:'toPublicKeyString',value:function toPublicKeyString(){var address_prefix=arguments.length>0&&arguments[0]!==undefined?arguments[0]:__WEBPACK_IMPORTED_MODULE_4_cybexjs_ws__["ChainConfig"].address_prefix;var pub_buf=this.toBuffer();var checksum=Object(__WEBPACK_IMPORTED_MODULE_3__hash__["ripemd160"])(pub_buf);var addy=Buffer.concat([pub_buf,checksum.slice(0,4)]);return address_prefix+Object(__WEBPACK_IMPORTED_MODULE_2_bs58__["encode"])(addy);}/**
	        @arg {string} public_key - like GPHXyz...
	        @arg {string} address_prefix - like GPH
	        @return PublicKey or `null` (if the public_key string is invalid)
	    */},{key:'toAddressString',value:function toAddressString(){var address_prefix=arguments.length>0&&arguments[0]!==undefined?arguments[0]:__WEBPACK_IMPORTED_MODULE_4_cybexjs_ws__["ChainConfig"].address_prefix;var pub_buf=this.toBuffer();var pub_sha=Object(__WEBPACK_IMPORTED_MODULE_3__hash__["sha512"])(pub_buf);var addy=Object(__WEBPACK_IMPORTED_MODULE_3__hash__["ripemd160"])(pub_sha);var checksum=Object(__WEBPACK_IMPORTED_MODULE_3__hash__["ripemd160"])(addy);addy=Buffer.concat([addy,checksum.slice(0,4)]);return address_prefix+Object(__WEBPACK_IMPORTED_MODULE_2_bs58__["encode"])(addy);}},{key:'toPtsAddy',value:function toPtsAddy(){var pub_buf=this.toBuffer();var pub_sha=Object(__WEBPACK_IMPORTED_MODULE_3__hash__["sha256"])(pub_buf);var addy=Object(__WEBPACK_IMPORTED_MODULE_3__hash__["ripemd160"])(pub_sha);addy=Buffer.concat([new Buffer([0x38]),addy]);//version 56(decimal)
	var checksum=Object(__WEBPACK_IMPORTED_MODULE_3__hash__["sha256"])(addy);checksum=Object(__WEBPACK_IMPORTED_MODULE_3__hash__["sha256"])(checksum);addy=Buffer.concat([addy,checksum.slice(0,4)]);return Object(__WEBPACK_IMPORTED_MODULE_2_bs58__["encode"])(addy);}},{key:'child',value:function child(offset){__WEBPACK_IMPORTED_MODULE_5_assert___default()(Buffer.isBuffer(offset),"Buffer required: offset");__WEBPACK_IMPORTED_MODULE_5_assert___default.a.equal(offset.length,32,"offset length");offset=Buffer.concat([this.toBuffer(),offset]);offset=Object(__WEBPACK_IMPORTED_MODULE_3__hash__["sha256"])(offset);var c=__WEBPACK_IMPORTED_MODULE_0_bigi___default.a.fromBuffer(offset);if(c.compareTo(n)>=0)throw new Error("Child offset went out of bounds, try again");var cG=G.multiply(c);var Qprime=this.Q.add(cG);if(secp256k1.isInfinity(Qprime))throw new Error("Child offset derived to an invalid key, try again");return PublicKey.fromPoint(Qprime);}/* <HEX> */},{key:'toByteBuffer',value:function toByteBuffer(){var b=new ByteBuffer(ByteBuffer.DEFAULT_CAPACITY,ByteBuffer.LITTLE_ENDIAN);this.appendByteBuffer(b);return b.copy(0,b.offset);}},{key:'toHex',value:function toHex(){return this.toBuffer().toString('hex');}}],[{key:'fromBinary',value:function fromBinary(bin){return PublicKey.fromBuffer(new Buffer(bin,'binary'));}},{key:'fromBuffer',value:function fromBuffer(buffer){if(buffer.toString('hex')==='000000000000000000000000000000000000000000000000000000000000000000')return new PublicKey(null);return new PublicKey(__WEBPACK_IMPORTED_MODULE_1_ecurve__["Point"].decodeFrom(secp256k1,buffer));}},{key:'fromPoint',value:function fromPoint(point){return new PublicKey(point);}},{key:'fromPublicKeyString',value:function fromPublicKeyString(public_key){var address_prefix=arguments.length>1&&arguments[1]!==undefined?arguments[1]:__WEBPACK_IMPORTED_MODULE_4_cybexjs_ws__["ChainConfig"].address_prefix;try{return PublicKey.fromStringOrThrow(public_key,address_prefix);}catch(e){return null;}}/**
	        @arg {string} public_key - like GPHXyz...
	        @arg {string} address_prefix - like GPH
	        @throws {Error} if public key is invalid
	        @return PublicKey
	    */},{key:'fromStringOrThrow',value:function fromStringOrThrow(public_key){var address_prefix=arguments.length>1&&arguments[1]!==undefined?arguments[1]:__WEBPACK_IMPORTED_MODULE_4_cybexjs_ws__["ChainConfig"].address_prefix;var prefix=public_key.slice(0,address_prefix.length);__WEBPACK_IMPORTED_MODULE_5_assert___default.a.equal(address_prefix,prefix,'Expecting key to begin with '+address_prefix+', instead got '+prefix);public_key=public_key.slice(address_prefix.length);public_key=new Buffer(Object(__WEBPACK_IMPORTED_MODULE_2_bs58__["decode"])(public_key),'binary');var checksum=public_key.slice(-4);public_key=public_key.slice(0,-4);var new_checksum=Object(__WEBPACK_IMPORTED_MODULE_3__hash__["ripemd160"])(public_key);new_checksum=new_checksum.slice(0,4);var isEqual=__WEBPACK_IMPORTED_MODULE_6_deep_equal___default()(checksum,new_checksum);//, 'Invalid checksum'
	if(!isEqual){throw new Error("Checksum did not match");}return PublicKey.fromBuffer(public_key);}},{key:'fromHex',value:function fromHex(hex){return PublicKey.fromBuffer(new Buffer(hex,'hex'));}},{key:'fromPublicKeyStringHex',value:function fromPublicKeyStringHex(hex){return PublicKey.fromPublicKeyString(new Buffer(hex,'hex'));}/* </HEX> */}]);return PublicKey;}();/* harmony default export */__webpack_exports__["a"]=PublicKey;/***/},/* 6 *//***/function(module,exports,__webpack_require__){/*
	 Copyright 2013-2014 Daniel Wirtz <dcode@dcode.io>
	
	 Licensed under the Apache License, Version 2.0 (the "License");
	 you may not use this file except in compliance with the License.
	 You may obtain a copy of the License at
	
	 http://www.apache.org/licenses/LICENSE-2.0
	
	 Unless required by applicable law or agreed to in writing, software
	 distributed under the License is distributed on an "AS IS" BASIS,
	 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 See the License for the specific language governing permissions and
	 limitations under the License.
	 *//**
	 * @license bytebuffer.js (c) 2015 Daniel Wirtz <dcode@dcode.io>
	 * Backing buffer / Accessor: node Buffer
	 * Released under the Apache License, Version 2.0
	 * see: https://github.com/dcodeIO/bytebuffer.js for details
	 */module.exports=function(){"use strict";var buffer=__webpack_require__(23),Buffer=buffer["Buffer"],Long=__webpack_require__(40),memcpy=null;try{memcpy=__webpack_require__(!function webpackMissingModule(){var e=new Error("Cannot find module \"memcpy\"");e.code='MODULE_NOT_FOUND';throw e;}());}catch(e){}/**
	     * Constructs a new ByteBuffer.
	     * @class The swiss army knife for binary data in JavaScript.
	     * @exports ByteBuffer
	     * @constructor
	     * @param {number=} capacity Initial capacity. Defaults to {@link ByteBuffer.DEFAULT_CAPACITY}.
	     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
	     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
	     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
	     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
	     * @expose
	     */var ByteBuffer=function ByteBuffer(capacity,littleEndian,noAssert){if(typeof capacity==='undefined')capacity=ByteBuffer.DEFAULT_CAPACITY;if(typeof littleEndian==='undefined')littleEndian=ByteBuffer.DEFAULT_ENDIAN;if(typeof noAssert==='undefined')noAssert=ByteBuffer.DEFAULT_NOASSERT;if(!noAssert){capacity=capacity|0;if(capacity<0)throw RangeError("Illegal capacity");littleEndian=!!littleEndian;noAssert=!!noAssert;}/**
	         * Backing node Buffer.
	         * @type {!Buffer}
	         * @expose
	         */this.buffer=capacity===0?EMPTY_BUFFER:new Buffer(capacity);/**
	         * Absolute read/write offset.
	         * @type {number}
	         * @expose
	         * @see ByteBuffer#flip
	         * @see ByteBuffer#clear
	         */this.offset=0;/**
	         * Marked offset.
	         * @type {number}
	         * @expose
	         * @see ByteBuffer#mark
	         * @see ByteBuffer#reset
	         */this.markedOffset=-1;/**
	         * Absolute limit of the contained data. Set to the backing buffer's capacity upon allocation.
	         * @type {number}
	         * @expose
	         * @see ByteBuffer#flip
	         * @see ByteBuffer#clear
	         */this.limit=capacity;/**
	         * Whether to use little endian byte order, defaults to `false` for big endian.
	         * @type {boolean}
	         * @expose
	         */this.littleEndian=littleEndian;/**
	         * Whether to skip assertions of offsets and values, defaults to `false`.
	         * @type {boolean}
	         * @expose
	         */this.noAssert=noAssert;};/**
	     * ByteBuffer version.
	     * @type {string}
	     * @const
	     * @expose
	     */ByteBuffer.VERSION="5.0.1";/**
	     * Little endian constant that can be used instead of its boolean value. Evaluates to `true`.
	     * @type {boolean}
	     * @const
	     * @expose
	     */ByteBuffer.LITTLE_ENDIAN=true;/**
	     * Big endian constant that can be used instead of its boolean value. Evaluates to `false`.
	     * @type {boolean}
	     * @const
	     * @expose
	     */ByteBuffer.BIG_ENDIAN=false;/**
	     * Default initial capacity of `16`.
	     * @type {number}
	     * @expose
	     */ByteBuffer.DEFAULT_CAPACITY=16;/**
	     * Default endianess of `false` for big endian.
	     * @type {boolean}
	     * @expose
	     */ByteBuffer.DEFAULT_ENDIAN=ByteBuffer.BIG_ENDIAN;/**
	     * Default no assertions flag of `false`.
	     * @type {boolean}
	     * @expose
	     */ByteBuffer.DEFAULT_NOASSERT=false;/**
	     * A `Long` class for representing a 64-bit two's-complement integer value.
	     * @type {!Long}
	     * @const
	     * @see https://npmjs.org/package/long
	     * @expose
	     */ByteBuffer.Long=Long;/**
	     * @alias ByteBuffer.prototype
	     * @inner
	     */var ByteBufferPrototype=ByteBuffer.prototype;/**
	     * An indicator used to reliably determine if an object is a ByteBuffer or not.
	     * @type {boolean}
	     * @const
	     * @expose
	     * @private
	     */ByteBufferPrototype.__isByteBuffer__;Object.defineProperty(ByteBufferPrototype,"__isByteBuffer__",{value:true,enumerable:false,configurable:false});// helpers
	/**
	     * @type {!Buffer}
	     * @inner
	     */var EMPTY_BUFFER=new Buffer(0);/**
	     * String.fromCharCode reference for compile-time renaming.
	     * @type {function(...number):string}
	     * @inner
	     */var stringFromCharCode=String.fromCharCode;/**
	     * Creates a source function for a string.
	     * @param {string} s String to read from
	     * @returns {function():number|null} Source function returning the next char code respectively `null` if there are
	     *  no more characters left.
	     * @throws {TypeError} If the argument is invalid
	     * @inner
	     */function stringSource(s){var i=0;return function(){return i<s.length?s.charCodeAt(i++):null;};}/**
	     * Creates a destination function for a string.
	     * @returns {function(number=):undefined|string} Destination function successively called with the next char code.
	     *  Returns the final string when called without arguments.
	     * @inner
	     */function stringDestination(){var cs=[],ps=[];return function(){if(arguments.length===0)return ps.join('')+stringFromCharCode.apply(String,cs);if(cs.length+arguments.length>1024)ps.push(stringFromCharCode.apply(String,cs)),cs.length=0;Array.prototype.push.apply(cs,arguments);};}/**
	     * Gets the accessor type.
	     * @returns {Function} `Buffer` under node.js, `Uint8Array` respectively `DataView` in the browser (classes)
	     * @expose
	     */ByteBuffer.accessor=function(){return Buffer;};/**
	     * Allocates a new ByteBuffer backed by a buffer of the specified capacity.
	     * @param {number=} capacity Initial capacity. Defaults to {@link ByteBuffer.DEFAULT_CAPACITY}.
	     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
	     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
	     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
	     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
	     * @returns {!ByteBuffer}
	     * @expose
	     */ByteBuffer.allocate=function(capacity,littleEndian,noAssert){return new ByteBuffer(capacity,littleEndian,noAssert);};/**
	     * Concatenates multiple ByteBuffers into one.
	     * @param {!Array.<!ByteBuffer|!Buffer|!ArrayBuffer|!Uint8Array|string>} buffers Buffers to concatenate
	     * @param {(string|boolean)=} encoding String encoding if `buffers` contains a string ("base64", "hex", "binary",
	     *  defaults to "utf8")
	     * @param {boolean=} littleEndian Whether to use little or big endian byte order for the resulting ByteBuffer. Defaults
	     *  to {@link ByteBuffer.DEFAULT_ENDIAN}.
	     * @param {boolean=} noAssert Whether to skip assertions of offsets and values for the resulting ByteBuffer. Defaults to
	     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
	     * @returns {!ByteBuffer} Concatenated ByteBuffer
	     * @expose
	     */ByteBuffer.concat=function(buffers,encoding,littleEndian,noAssert){if(typeof encoding==='boolean'||typeof encoding!=='string'){noAssert=littleEndian;littleEndian=encoding;encoding=undefined;}var capacity=0;for(var i=0,k=buffers.length,length;i<k;++i){if(!ByteBuffer.isByteBuffer(buffers[i]))buffers[i]=ByteBuffer.wrap(buffers[i],encoding);length=buffers[i].limit-buffers[i].offset;if(length>0)capacity+=length;}if(capacity===0)return new ByteBuffer(0,littleEndian,noAssert);var bb=new ByteBuffer(capacity,littleEndian,noAssert),bi;i=0;while(i<k){bi=buffers[i++];length=bi.limit-bi.offset;if(length<=0)continue;bi.buffer.copy(bb.buffer,bb.offset,bi.offset,bi.limit);bb.offset+=length;}bb.limit=bb.offset;bb.offset=0;return bb;};/**
	     * Tests if the specified type is a ByteBuffer.
	     * @param {*} bb ByteBuffer to test
	     * @returns {boolean} `true` if it is a ByteBuffer, otherwise `false`
	     * @expose
	     */ByteBuffer.isByteBuffer=function(bb){return(bb&&bb["__isByteBuffer__"])===true;};/**
	     * Gets the backing buffer type.
	     * @returns {Function} `Buffer` under node.js, `ArrayBuffer` in the browser (classes)
	     * @expose
	     */ByteBuffer.type=function(){return Buffer;};/**
	     * Wraps a buffer or a string. Sets the allocated ByteBuffer's {@link ByteBuffer#offset} to `0` and its
	     *  {@link ByteBuffer#limit} to the length of the wrapped data.
	     * @param {!ByteBuffer|!Buffer|!ArrayBuffer|!Uint8Array|string|!Array.<number>} buffer Anything that can be wrapped
	     * @param {(string|boolean)=} encoding String encoding if `buffer` is a string ("base64", "hex", "binary", defaults to
	     *  "utf8")
	     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
	     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
	     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
	     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
	     * @returns {!ByteBuffer} A ByteBuffer wrapping `buffer`
	     * @expose
	     */ByteBuffer.wrap=function(buffer,encoding,littleEndian,noAssert){if(typeof encoding!=='string'){noAssert=littleEndian;littleEndian=encoding;encoding=undefined;}if(typeof buffer==='string'){if(typeof encoding==='undefined')encoding="utf8";switch(encoding){case"base64":return ByteBuffer.fromBase64(buffer,littleEndian);case"hex":return ByteBuffer.fromHex(buffer,littleEndian);case"binary":return ByteBuffer.fromBinary(buffer,littleEndian);case"utf8":return ByteBuffer.fromUTF8(buffer,littleEndian);case"debug":return ByteBuffer.fromDebug(buffer,littleEndian);default:throw Error("Unsupported encoding: "+encoding);}}if(buffer===null||(typeof buffer==='undefined'?'undefined':(0,_typeof3.default)(buffer))!=='object')throw TypeError("Illegal buffer");var bb;if(ByteBuffer.isByteBuffer(buffer)){bb=ByteBufferPrototype.clone.call(buffer);bb.markedOffset=-1;return bb;}var i=0,k=0,b;if(buffer instanceof Uint8Array){// Extract bytes from Uint8Array
	b=new Buffer(buffer.length);if(memcpy){// Fast
	memcpy(b,0,buffer.buffer,buffer.byteOffset,buffer.byteOffset+buffer.length);}else{// Slow
	for(i=0,k=buffer.length;i<k;++i){b[i]=buffer[i];}}buffer=b;}else if(buffer instanceof ArrayBuffer){// Convert ArrayBuffer to Buffer
	b=new Buffer(buffer.byteLength);if(memcpy){// Fast
	memcpy(b,0,buffer,0,buffer.byteLength);}else{// Slow
	buffer=new Uint8Array(buffer);for(i=0,k=buffer.length;i<k;++i){b[i]=buffer[i];}}buffer=b;}else if(!(buffer instanceof Buffer)){// Create from octets if it is an error, otherwise fail
	if(Object.prototype.toString.call(buffer)!=="[object Array]")throw TypeError("Illegal buffer");buffer=new Buffer(buffer);}bb=new ByteBuffer(0,littleEndian,noAssert);if(buffer.length>0){// Avoid references to more than one EMPTY_BUFFER
	bb.buffer=buffer;bb.limit=buffer.length;}return bb;};/**
	     * Writes the array as a bitset.
	     * @param {Array<boolean>} value Array of booleans to write
	     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `length` if omitted.
	     * @returns {!ByteBuffer}
	     * @expose
	     */ByteBufferPrototype.writeBitSet=function(value,offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(!(value instanceof Array))throw TypeError("Illegal BitSet: Not an array");if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: "+offset+" (not an integer)");offset>>>=0;if(offset<0||offset+0>this.buffer.length)throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.length);}var start=offset,bits=value.length,bytes=bits>>3,bit=0,k;offset+=this.writeVarint32(bits,offset);while(bytes--){k=!!value[bit++]&1|(!!value[bit++]&1)<<1|(!!value[bit++]&1)<<2|(!!value[bit++]&1)<<3|(!!value[bit++]&1)<<4|(!!value[bit++]&1)<<5|(!!value[bit++]&1)<<6|(!!value[bit++]&1)<<7;this.writeByte(k,offset++);}if(bit<bits){var m=0;k=0;while(bit<bits){k=k|(!!value[bit++]&1)<<m++;}this.writeByte(k,offset++);}if(relative){this.offset=offset;return this;}return offset-start;};/**
	     * Reads a BitSet as an array of booleans.
	     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `length` if omitted.
	     * @returns {Array<boolean>
	     * @expose
	     */ByteBufferPrototype.readBitSet=function(offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;var ret=this.readVarint32(offset),bits=ret.value,bytes=bits>>3,bit=0,value=[],k;offset+=ret.length;while(bytes--){k=this.readByte(offset++);value[bit++]=!!(k&0x01);value[bit++]=!!(k&0x02);value[bit++]=!!(k&0x04);value[bit++]=!!(k&0x08);value[bit++]=!!(k&0x10);value[bit++]=!!(k&0x20);value[bit++]=!!(k&0x40);value[bit++]=!!(k&0x80);}if(bit<bits){var m=0;k=this.readByte(offset++);while(bit<bits){value[bit++]=!!(k>>m++&1);}}if(relative){this.offset=offset;}return value;};/**
	     * Reads the specified number of bytes.
	     * @param {number} length Number of bytes to read
	     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `length` if omitted.
	     * @returns {!ByteBuffer}
	     * @expose
	     */ByteBufferPrototype.readBytes=function(length,offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: "+offset+" (not an integer)");offset>>>=0;if(offset<0||offset+length>this.buffer.length)throw RangeError("Illegal offset: 0 <= "+offset+" (+"+length+") <= "+this.buffer.length);}var slice=this.slice(offset,offset+length);if(relative)this.offset+=length;return slice;};/**
	     * Writes a payload of bytes. This is an alias of {@link ByteBuffer#append}.
	     * @function
	     * @param {!ByteBuffer|!Buffer|!ArrayBuffer|!Uint8Array|string} source Data to write. If `source` is a ByteBuffer, its
	     * offsets will be modified according to the performed read operation.
	     * @param {(string|number)=} encoding Encoding if `data` is a string ("base64", "hex", "binary", defaults to "utf8")
	     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	     *  written if omitted.
	     * @returns {!ByteBuffer} this
	     * @expose
	     */ByteBufferPrototype.writeBytes=ByteBufferPrototype.append;// types/ints/int8
	/**
	     * Writes an 8bit signed integer.
	     * @param {number} value Value to write
	     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
	     * @returns {!ByteBuffer} this
	     * @expose
	     */ByteBufferPrototype.writeInt8=function(value,offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof value!=='number'||value%1!==0)throw TypeError("Illegal value: "+value+" (not an integer)");value|=0;if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: "+offset+" (not an integer)");offset>>>=0;if(offset<0||offset+0>this.buffer.length)throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.length);}offset+=1;var capacity0=this.buffer.length;if(offset>capacity0)this.resize((capacity0*=2)>offset?capacity0:offset);offset-=1;this.buffer[offset]=value;if(relative)this.offset+=1;return this;};/**
	     * Writes an 8bit signed integer. This is an alias of {@link ByteBuffer#writeInt8}.
	     * @function
	     * @param {number} value Value to write
	     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
	     * @returns {!ByteBuffer} this
	     * @expose
	     */ByteBufferPrototype.writeByte=ByteBufferPrototype.writeInt8;/**
	     * Reads an 8bit signed integer.
	     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
	     * @returns {number} Value read
	     * @expose
	     */ByteBufferPrototype.readInt8=function(offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: "+offset+" (not an integer)");offset>>>=0;if(offset<0||offset+1>this.buffer.length)throw RangeError("Illegal offset: 0 <= "+offset+" (+"+1+") <= "+this.buffer.length);}var value=this.buffer[offset];if((value&0x80)===0x80)value=-(0xFF-value+1);// Cast to signed
	if(relative)this.offset+=1;return value;};/**
	     * Reads an 8bit signed integer. This is an alias of {@link ByteBuffer#readInt8}.
	     * @function
	     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
	     * @returns {number} Value read
	     * @expose
	     */ByteBufferPrototype.readByte=ByteBufferPrototype.readInt8;/**
	     * Writes an 8bit unsigned integer.
	     * @param {number} value Value to write
	     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
	     * @returns {!ByteBuffer} this
	     * @expose
	     */ByteBufferPrototype.writeUint8=function(value,offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof value!=='number'||value%1!==0)throw TypeError("Illegal value: "+value+" (not an integer)");value>>>=0;if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: "+offset+" (not an integer)");offset>>>=0;if(offset<0||offset+0>this.buffer.length)throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.length);}offset+=1;var capacity1=this.buffer.length;if(offset>capacity1)this.resize((capacity1*=2)>offset?capacity1:offset);offset-=1;this.buffer[offset]=value;if(relative)this.offset+=1;return this;};/**
	     * Writes an 8bit unsigned integer. This is an alias of {@link ByteBuffer#writeUint8}.
	     * @function
	     * @param {number} value Value to write
	     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
	     * @returns {!ByteBuffer} this
	     * @expose
	     */ByteBufferPrototype.writeUInt8=ByteBufferPrototype.writeUint8;/**
	     * Reads an 8bit unsigned integer.
	     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
	     * @returns {number} Value read
	     * @expose
	     */ByteBufferPrototype.readUint8=function(offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: "+offset+" (not an integer)");offset>>>=0;if(offset<0||offset+1>this.buffer.length)throw RangeError("Illegal offset: 0 <= "+offset+" (+"+1+") <= "+this.buffer.length);}var value=this.buffer[offset];if(relative)this.offset+=1;return value;};/**
	     * Reads an 8bit unsigned integer. This is an alias of {@link ByteBuffer#readUint8}.
	     * @function
	     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
	     * @returns {number} Value read
	     * @expose
	     */ByteBufferPrototype.readUInt8=ByteBufferPrototype.readUint8;// types/ints/int16
	/**
	     * Writes a 16bit signed integer.
	     * @param {number} value Value to write
	     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
	     * @throws {TypeError} If `offset` or `value` is not a valid number
	     * @throws {RangeError} If `offset` is out of bounds
	     * @expose
	     */ByteBufferPrototype.writeInt16=function(value,offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof value!=='number'||value%1!==0)throw TypeError("Illegal value: "+value+" (not an integer)");value|=0;if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: "+offset+" (not an integer)");offset>>>=0;if(offset<0||offset+0>this.buffer.length)throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.length);}offset+=2;var capacity2=this.buffer.length;if(offset>capacity2)this.resize((capacity2*=2)>offset?capacity2:offset);offset-=2;if(this.littleEndian){this.buffer[offset+1]=(value&0xFF00)>>>8;this.buffer[offset]=value&0x00FF;}else{this.buffer[offset]=(value&0xFF00)>>>8;this.buffer[offset+1]=value&0x00FF;}if(relative)this.offset+=2;return this;};/**
	     * Writes a 16bit signed integer. This is an alias of {@link ByteBuffer#writeInt16}.
	     * @function
	     * @param {number} value Value to write
	     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
	     * @throws {TypeError} If `offset` or `value` is not a valid number
	     * @throws {RangeError} If `offset` is out of bounds
	     * @expose
	     */ByteBufferPrototype.writeShort=ByteBufferPrototype.writeInt16;/**
	     * Reads a 16bit signed integer.
	     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
	     * @returns {number} Value read
	     * @throws {TypeError} If `offset` is not a valid number
	     * @throws {RangeError} If `offset` is out of bounds
	     * @expose
	     */ByteBufferPrototype.readInt16=function(offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: "+offset+" (not an integer)");offset>>>=0;if(offset<0||offset+2>this.buffer.length)throw RangeError("Illegal offset: 0 <= "+offset+" (+"+2+") <= "+this.buffer.length);}var value=0;if(this.littleEndian){value=this.buffer[offset];value|=this.buffer[offset+1]<<8;}else{value=this.buffer[offset]<<8;value|=this.buffer[offset+1];}if((value&0x8000)===0x8000)value=-(0xFFFF-value+1);// Cast to signed
	if(relative)this.offset+=2;return value;};/**
	     * Reads a 16bit signed integer. This is an alias of {@link ByteBuffer#readInt16}.
	     * @function
	     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
	     * @returns {number} Value read
	     * @throws {TypeError} If `offset` is not a valid number
	     * @throws {RangeError} If `offset` is out of bounds
	     * @expose
	     */ByteBufferPrototype.readShort=ByteBufferPrototype.readInt16;/**
	     * Writes a 16bit unsigned integer.
	     * @param {number} value Value to write
	     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
	     * @throws {TypeError} If `offset` or `value` is not a valid number
	     * @throws {RangeError} If `offset` is out of bounds
	     * @expose
	     */ByteBufferPrototype.writeUint16=function(value,offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof value!=='number'||value%1!==0)throw TypeError("Illegal value: "+value+" (not an integer)");value>>>=0;if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: "+offset+" (not an integer)");offset>>>=0;if(offset<0||offset+0>this.buffer.length)throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.length);}offset+=2;var capacity3=this.buffer.length;if(offset>capacity3)this.resize((capacity3*=2)>offset?capacity3:offset);offset-=2;if(this.littleEndian){this.buffer[offset+1]=(value&0xFF00)>>>8;this.buffer[offset]=value&0x00FF;}else{this.buffer[offset]=(value&0xFF00)>>>8;this.buffer[offset+1]=value&0x00FF;}if(relative)this.offset+=2;return this;};/**
	     * Writes a 16bit unsigned integer. This is an alias of {@link ByteBuffer#writeUint16}.
	     * @function
	     * @param {number} value Value to write
	     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
	     * @throws {TypeError} If `offset` or `value` is not a valid number
	     * @throws {RangeError} If `offset` is out of bounds
	     * @expose
	     */ByteBufferPrototype.writeUInt16=ByteBufferPrototype.writeUint16;/**
	     * Reads a 16bit unsigned integer.
	     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
	     * @returns {number} Value read
	     * @throws {TypeError} If `offset` is not a valid number
	     * @throws {RangeError} If `offset` is out of bounds
	     * @expose
	     */ByteBufferPrototype.readUint16=function(offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: "+offset+" (not an integer)");offset>>>=0;if(offset<0||offset+2>this.buffer.length)throw RangeError("Illegal offset: 0 <= "+offset+" (+"+2+") <= "+this.buffer.length);}var value=0;if(this.littleEndian){value=this.buffer[offset];value|=this.buffer[offset+1]<<8;}else{value=this.buffer[offset]<<8;value|=this.buffer[offset+1];}if(relative)this.offset+=2;return value;};/**
	     * Reads a 16bit unsigned integer. This is an alias of {@link ByteBuffer#readUint16}.
	     * @function
	     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
	     * @returns {number} Value read
	     * @throws {TypeError} If `offset` is not a valid number
	     * @throws {RangeError} If `offset` is out of bounds
	     * @expose
	     */ByteBufferPrototype.readUInt16=ByteBufferPrototype.readUint16;// types/ints/int32
	/**
	     * Writes a 32bit signed integer.
	     * @param {number} value Value to write
	     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
	     * @expose
	     */ByteBufferPrototype.writeInt32=function(value,offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof value!=='number'||value%1!==0)throw TypeError("Illegal value: "+value+" (not an integer)");value|=0;if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: "+offset+" (not an integer)");offset>>>=0;if(offset<0||offset+0>this.buffer.length)throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.length);}offset+=4;var capacity4=this.buffer.length;if(offset>capacity4)this.resize((capacity4*=2)>offset?capacity4:offset);offset-=4;if(this.littleEndian){this.buffer[offset+3]=value>>>24&0xFF;this.buffer[offset+2]=value>>>16&0xFF;this.buffer[offset+1]=value>>>8&0xFF;this.buffer[offset]=value&0xFF;}else{this.buffer[offset]=value>>>24&0xFF;this.buffer[offset+1]=value>>>16&0xFF;this.buffer[offset+2]=value>>>8&0xFF;this.buffer[offset+3]=value&0xFF;}if(relative)this.offset+=4;return this;};/**
	     * Writes a 32bit signed integer. This is an alias of {@link ByteBuffer#writeInt32}.
	     * @param {number} value Value to write
	     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
	     * @expose
	     */ByteBufferPrototype.writeInt=ByteBufferPrototype.writeInt32;/**
	     * Reads a 32bit signed integer.
	     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
	     * @returns {number} Value read
	     * @expose
	     */ByteBufferPrototype.readInt32=function(offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: "+offset+" (not an integer)");offset>>>=0;if(offset<0||offset+4>this.buffer.length)throw RangeError("Illegal offset: 0 <= "+offset+" (+"+4+") <= "+this.buffer.length);}var value=0;if(this.littleEndian){value=this.buffer[offset+2]<<16;value|=this.buffer[offset+1]<<8;value|=this.buffer[offset];value+=this.buffer[offset+3]<<24>>>0;}else{value=this.buffer[offset+1]<<16;value|=this.buffer[offset+2]<<8;value|=this.buffer[offset+3];value+=this.buffer[offset]<<24>>>0;}value|=0;// Cast to signed
	if(relative)this.offset+=4;return value;};/**
	     * Reads a 32bit signed integer. This is an alias of {@link ByteBuffer#readInt32}.
	     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `4` if omitted.
	     * @returns {number} Value read
	     * @expose
	     */ByteBufferPrototype.readInt=ByteBufferPrototype.readInt32;/**
	     * Writes a 32bit unsigned integer.
	     * @param {number} value Value to write
	     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
	     * @expose
	     */ByteBufferPrototype.writeUint32=function(value,offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof value!=='number'||value%1!==0)throw TypeError("Illegal value: "+value+" (not an integer)");value>>>=0;if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: "+offset+" (not an integer)");offset>>>=0;if(offset<0||offset+0>this.buffer.length)throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.length);}offset+=4;var capacity5=this.buffer.length;if(offset>capacity5)this.resize((capacity5*=2)>offset?capacity5:offset);offset-=4;if(this.littleEndian){this.buffer[offset+3]=value>>>24&0xFF;this.buffer[offset+2]=value>>>16&0xFF;this.buffer[offset+1]=value>>>8&0xFF;this.buffer[offset]=value&0xFF;}else{this.buffer[offset]=value>>>24&0xFF;this.buffer[offset+1]=value>>>16&0xFF;this.buffer[offset+2]=value>>>8&0xFF;this.buffer[offset+3]=value&0xFF;}if(relative)this.offset+=4;return this;};/**
	     * Writes a 32bit unsigned integer. This is an alias of {@link ByteBuffer#writeUint32}.
	     * @function
	     * @param {number} value Value to write
	     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
	     * @expose
	     */ByteBufferPrototype.writeUInt32=ByteBufferPrototype.writeUint32;/**
	     * Reads a 32bit unsigned integer.
	     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
	     * @returns {number} Value read
	     * @expose
	     */ByteBufferPrototype.readUint32=function(offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: "+offset+" (not an integer)");offset>>>=0;if(offset<0||offset+4>this.buffer.length)throw RangeError("Illegal offset: 0 <= "+offset+" (+"+4+") <= "+this.buffer.length);}var value=0;if(this.littleEndian){value=this.buffer[offset+2]<<16;value|=this.buffer[offset+1]<<8;value|=this.buffer[offset];value+=this.buffer[offset+3]<<24>>>0;}else{value=this.buffer[offset+1]<<16;value|=this.buffer[offset+2]<<8;value|=this.buffer[offset+3];value+=this.buffer[offset]<<24>>>0;}if(relative)this.offset+=4;return value;};/**
	     * Reads a 32bit unsigned integer. This is an alias of {@link ByteBuffer#readUint32}.
	     * @function
	     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
	     * @returns {number} Value read
	     * @expose
	     */ByteBufferPrototype.readUInt32=ByteBufferPrototype.readUint32;// types/ints/int64
	if(Long){/**
	         * Writes a 64bit signed integer.
	         * @param {number|!Long} value Value to write
	         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
	         * @returns {!ByteBuffer} this
	         * @expose
	         */ByteBufferPrototype.writeInt64=function(value,offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof value==='number')value=Long.fromNumber(value);else if(typeof value==='string')value=Long.fromString(value);else if(!(value&&value instanceof Long))throw TypeError("Illegal value: "+value+" (not an integer or Long)");if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: "+offset+" (not an integer)");offset>>>=0;if(offset<0||offset+0>this.buffer.length)throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.length);}if(typeof value==='number')value=Long.fromNumber(value);else if(typeof value==='string')value=Long.fromString(value);offset+=8;var capacity6=this.buffer.length;if(offset>capacity6)this.resize((capacity6*=2)>offset?capacity6:offset);offset-=8;var lo=value.low,hi=value.high;if(this.littleEndian){this.buffer[offset+3]=lo>>>24&0xFF;this.buffer[offset+2]=lo>>>16&0xFF;this.buffer[offset+1]=lo>>>8&0xFF;this.buffer[offset]=lo&0xFF;offset+=4;this.buffer[offset+3]=hi>>>24&0xFF;this.buffer[offset+2]=hi>>>16&0xFF;this.buffer[offset+1]=hi>>>8&0xFF;this.buffer[offset]=hi&0xFF;}else{this.buffer[offset]=hi>>>24&0xFF;this.buffer[offset+1]=hi>>>16&0xFF;this.buffer[offset+2]=hi>>>8&0xFF;this.buffer[offset+3]=hi&0xFF;offset+=4;this.buffer[offset]=lo>>>24&0xFF;this.buffer[offset+1]=lo>>>16&0xFF;this.buffer[offset+2]=lo>>>8&0xFF;this.buffer[offset+3]=lo&0xFF;}if(relative)this.offset+=8;return this;};/**
	         * Writes a 64bit signed integer. This is an alias of {@link ByteBuffer#writeInt64}.
	         * @param {number|!Long} value Value to write
	         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
	         * @returns {!ByteBuffer} this
	         * @expose
	         */ByteBufferPrototype.writeLong=ByteBufferPrototype.writeInt64;/**
	         * Reads a 64bit signed integer.
	         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
	         * @returns {!Long}
	         * @expose
	         */ByteBufferPrototype.readInt64=function(offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: "+offset+" (not an integer)");offset>>>=0;if(offset<0||offset+8>this.buffer.length)throw RangeError("Illegal offset: 0 <= "+offset+" (+"+8+") <= "+this.buffer.length);}var lo=0,hi=0;if(this.littleEndian){lo=this.buffer[offset+2]<<16;lo|=this.buffer[offset+1]<<8;lo|=this.buffer[offset];lo+=this.buffer[offset+3]<<24>>>0;offset+=4;hi=this.buffer[offset+2]<<16;hi|=this.buffer[offset+1]<<8;hi|=this.buffer[offset];hi+=this.buffer[offset+3]<<24>>>0;}else{hi=this.buffer[offset+1]<<16;hi|=this.buffer[offset+2]<<8;hi|=this.buffer[offset+3];hi+=this.buffer[offset]<<24>>>0;offset+=4;lo=this.buffer[offset+1]<<16;lo|=this.buffer[offset+2]<<8;lo|=this.buffer[offset+3];lo+=this.buffer[offset]<<24>>>0;}var value=new Long(lo,hi,false);if(relative)this.offset+=8;return value;};/**
	         * Reads a 64bit signed integer. This is an alias of {@link ByteBuffer#readInt64}.
	         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
	         * @returns {!Long}
	         * @expose
	         */ByteBufferPrototype.readLong=ByteBufferPrototype.readInt64;/**
	         * Writes a 64bit unsigned integer.
	         * @param {number|!Long} value Value to write
	         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
	         * @returns {!ByteBuffer} this
	         * @expose
	         */ByteBufferPrototype.writeUint64=function(value,offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof value==='number')value=Long.fromNumber(value);else if(typeof value==='string')value=Long.fromString(value);else if(!(value&&value instanceof Long))throw TypeError("Illegal value: "+value+" (not an integer or Long)");if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: "+offset+" (not an integer)");offset>>>=0;if(offset<0||offset+0>this.buffer.length)throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.length);}if(typeof value==='number')value=Long.fromNumber(value);else if(typeof value==='string')value=Long.fromString(value);offset+=8;var capacity7=this.buffer.length;if(offset>capacity7)this.resize((capacity7*=2)>offset?capacity7:offset);offset-=8;var lo=value.low,hi=value.high;if(this.littleEndian){this.buffer[offset+3]=lo>>>24&0xFF;this.buffer[offset+2]=lo>>>16&0xFF;this.buffer[offset+1]=lo>>>8&0xFF;this.buffer[offset]=lo&0xFF;offset+=4;this.buffer[offset+3]=hi>>>24&0xFF;this.buffer[offset+2]=hi>>>16&0xFF;this.buffer[offset+1]=hi>>>8&0xFF;this.buffer[offset]=hi&0xFF;}else{this.buffer[offset]=hi>>>24&0xFF;this.buffer[offset+1]=hi>>>16&0xFF;this.buffer[offset+2]=hi>>>8&0xFF;this.buffer[offset+3]=hi&0xFF;offset+=4;this.buffer[offset]=lo>>>24&0xFF;this.buffer[offset+1]=lo>>>16&0xFF;this.buffer[offset+2]=lo>>>8&0xFF;this.buffer[offset+3]=lo&0xFF;}if(relative)this.offset+=8;return this;};/**
	         * Writes a 64bit unsigned integer. This is an alias of {@link ByteBuffer#writeUint64}.
	         * @function
	         * @param {number|!Long} value Value to write
	         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
	         * @returns {!ByteBuffer} this
	         * @expose
	         */ByteBufferPrototype.writeUInt64=ByteBufferPrototype.writeUint64;/**
	         * Reads a 64bit unsigned integer.
	         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
	         * @returns {!Long}
	         * @expose
	         */ByteBufferPrototype.readUint64=function(offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: "+offset+" (not an integer)");offset>>>=0;if(offset<0||offset+8>this.buffer.length)throw RangeError("Illegal offset: 0 <= "+offset+" (+"+8+") <= "+this.buffer.length);}var lo=0,hi=0;if(this.littleEndian){lo=this.buffer[offset+2]<<16;lo|=this.buffer[offset+1]<<8;lo|=this.buffer[offset];lo+=this.buffer[offset+3]<<24>>>0;offset+=4;hi=this.buffer[offset+2]<<16;hi|=this.buffer[offset+1]<<8;hi|=this.buffer[offset];hi+=this.buffer[offset+3]<<24>>>0;}else{hi=this.buffer[offset+1]<<16;hi|=this.buffer[offset+2]<<8;hi|=this.buffer[offset+3];hi+=this.buffer[offset]<<24>>>0;offset+=4;lo=this.buffer[offset+1]<<16;lo|=this.buffer[offset+2]<<8;lo|=this.buffer[offset+3];lo+=this.buffer[offset]<<24>>>0;}var value=new Long(lo,hi,true);if(relative)this.offset+=8;return value;};/**
	         * Reads a 64bit unsigned integer. This is an alias of {@link ByteBuffer#readUint64}.
	         * @function
	         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
	         * @returns {!Long}
	         * @expose
	         */ByteBufferPrototype.readUInt64=ByteBufferPrototype.readUint64;}// Long
	// types/floats/float32
	/**
	     * Writes a 32bit float.
	     * @param {number} value Value to write
	     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
	     * @returns {!ByteBuffer} this
	     * @expose
	     */ByteBufferPrototype.writeFloat32=function(value,offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof value!=='number')throw TypeError("Illegal value: "+value+" (not a number)");if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: "+offset+" (not an integer)");offset>>>=0;if(offset<0||offset+0>this.buffer.length)throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.length);}offset+=4;var capacity8=this.buffer.length;if(offset>capacity8)this.resize((capacity8*=2)>offset?capacity8:offset);offset-=4;this.littleEndian?this.buffer.writeFloatLE(value,offset,true):this.buffer.writeFloatBE(value,offset,true);if(relative)this.offset+=4;return this;};/**
	     * Writes a 32bit float. This is an alias of {@link ByteBuffer#writeFloat32}.
	     * @function
	     * @param {number} value Value to write
	     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
	     * @returns {!ByteBuffer} this
	     * @expose
	     */ByteBufferPrototype.writeFloat=ByteBufferPrototype.writeFloat32;/**
	     * Reads a 32bit float.
	     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
	     * @returns {number}
	     * @expose
	     */ByteBufferPrototype.readFloat32=function(offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: "+offset+" (not an integer)");offset>>>=0;if(offset<0||offset+4>this.buffer.length)throw RangeError("Illegal offset: 0 <= "+offset+" (+"+4+") <= "+this.buffer.length);}var value=this.littleEndian?this.buffer.readFloatLE(offset,true):this.buffer.readFloatBE(offset,true);if(relative)this.offset+=4;return value;};/**
	     * Reads a 32bit float. This is an alias of {@link ByteBuffer#readFloat32}.
	     * @function
	     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
	     * @returns {number}
	     * @expose
	     */ByteBufferPrototype.readFloat=ByteBufferPrototype.readFloat32;// types/floats/float64
	/**
	     * Writes a 64bit float.
	     * @param {number} value Value to write
	     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
	     * @returns {!ByteBuffer} this
	     * @expose
	     */ByteBufferPrototype.writeFloat64=function(value,offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof value!=='number')throw TypeError("Illegal value: "+value+" (not a number)");if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: "+offset+" (not an integer)");offset>>>=0;if(offset<0||offset+0>this.buffer.length)throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.length);}offset+=8;var capacity9=this.buffer.length;if(offset>capacity9)this.resize((capacity9*=2)>offset?capacity9:offset);offset-=8;this.littleEndian?this.buffer.writeDoubleLE(value,offset,true):this.buffer.writeDoubleBE(value,offset,true);if(relative)this.offset+=8;return this;};/**
	     * Writes a 64bit float. This is an alias of {@link ByteBuffer#writeFloat64}.
	     * @function
	     * @param {number} value Value to write
	     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
	     * @returns {!ByteBuffer} this
	     * @expose
	     */ByteBufferPrototype.writeDouble=ByteBufferPrototype.writeFloat64;/**
	     * Reads a 64bit float.
	     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
	     * @returns {number}
	     * @expose
	     */ByteBufferPrototype.readFloat64=function(offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: "+offset+" (not an integer)");offset>>>=0;if(offset<0||offset+8>this.buffer.length)throw RangeError("Illegal offset: 0 <= "+offset+" (+"+8+") <= "+this.buffer.length);}var value=this.littleEndian?this.buffer.readDoubleLE(offset,true):this.buffer.readDoubleBE(offset,true);if(relative)this.offset+=8;return value;};/**
	     * Reads a 64bit float. This is an alias of {@link ByteBuffer#readFloat64}.
	     * @function
	     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
	     * @returns {number}
	     * @expose
	     */ByteBufferPrototype.readDouble=ByteBufferPrototype.readFloat64;// types/varints/varint32
	/**
	     * Maximum number of bytes required to store a 32bit base 128 variable-length integer.
	     * @type {number}
	     * @const
	     * @expose
	     */ByteBuffer.MAX_VARINT32_BYTES=5;/**
	     * Calculates the actual number of bytes required to store a 32bit base 128 variable-length integer.
	     * @param {number} value Value to encode
	     * @returns {number} Number of bytes required. Capped to {@link ByteBuffer.MAX_VARINT32_BYTES}
	     * @expose
	     */ByteBuffer.calculateVarint32=function(value){// ref: src/google/protobuf/io/coded_stream.cc
	value=value>>>0;if(value<1<<7)return 1;else if(value<1<<14)return 2;else if(value<1<<21)return 3;else if(value<1<<28)return 4;else return 5;};/**
	     * Zigzag encodes a signed 32bit integer so that it can be effectively used with varint encoding.
	     * @param {number} n Signed 32bit integer
	     * @returns {number} Unsigned zigzag encoded 32bit integer
	     * @expose
	     */ByteBuffer.zigZagEncode32=function(n){return((n|=0)<<1^n>>31)>>>0;// ref: src/google/protobuf/wire_format_lite.h
	};/**
	     * Decodes a zigzag encoded signed 32bit integer.
	     * @param {number} n Unsigned zigzag encoded 32bit integer
	     * @returns {number} Signed 32bit integer
	     * @expose
	     */ByteBuffer.zigZagDecode32=function(n){return n>>>1^-(n&1)|0;// // ref: src/google/protobuf/wire_format_lite.h
	};/**
	     * Writes a 32bit base 128 variable-length integer.
	     * @param {number} value Value to write
	     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	     *  written if omitted.
	     * @returns {!ByteBuffer|number} this if `offset` is omitted, else the actual number of bytes written
	     * @expose
	     */ByteBufferPrototype.writeVarint32=function(value,offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof value!=='number'||value%1!==0)throw TypeError("Illegal value: "+value+" (not an integer)");value|=0;if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: "+offset+" (not an integer)");offset>>>=0;if(offset<0||offset+0>this.buffer.length)throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.length);}var size=ByteBuffer.calculateVarint32(value),b;offset+=size;var capacity10=this.buffer.length;if(offset>capacity10)this.resize((capacity10*=2)>offset?capacity10:offset);offset-=size;value>>>=0;while(value>=0x80){b=value&0x7f|0x80;this.buffer[offset++]=b;value>>>=7;}this.buffer[offset++]=value;if(relative){this.offset=offset;return this;}return size;};/**
	     * Writes a zig-zag encoded (signed) 32bit base 128 variable-length integer.
	     * @param {number} value Value to write
	     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	     *  written if omitted.
	     * @returns {!ByteBuffer|number} this if `offset` is omitted, else the actual number of bytes written
	     * @expose
	     */ByteBufferPrototype.writeVarint32ZigZag=function(value,offset){return this.writeVarint32(ByteBuffer.zigZagEncode32(value),offset);};/**
	     * Reads a 32bit base 128 variable-length integer.
	     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	     *  written if omitted.
	     * @returns {number|!{value: number, length: number}} The value read if offset is omitted, else the value read
	     *  and the actual number of bytes read.
	     * @throws {Error} If it's not a valid varint. Has a property `truncated = true` if there is not enough data available
	     *  to fully decode the varint.
	     * @expose
	     */ByteBufferPrototype.readVarint32=function(offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: "+offset+" (not an integer)");offset>>>=0;if(offset<0||offset+1>this.buffer.length)throw RangeError("Illegal offset: 0 <= "+offset+" (+"+1+") <= "+this.buffer.length);}var c=0,value=0>>>0,b;do{if(!this.noAssert&&offset>this.limit){var err=Error("Truncated");err['truncated']=true;throw err;}b=this.buffer[offset++];if(c<5)value|=(b&0x7f)<<7*c;++c;}while((b&0x80)!==0);value|=0;if(relative){this.offset=offset;return value;}return{"value":value,"length":c};};/**
	     * Reads a zig-zag encoded (signed) 32bit base 128 variable-length integer.
	     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	     *  written if omitted.
	     * @returns {number|!{value: number, length: number}} The value read if offset is omitted, else the value read
	     *  and the actual number of bytes read.
	     * @throws {Error} If it's not a valid varint
	     * @expose
	     */ByteBufferPrototype.readVarint32ZigZag=function(offset){var val=this.readVarint32(offset);if((typeof val==='undefined'?'undefined':(0,_typeof3.default)(val))==='object')val["value"]=ByteBuffer.zigZagDecode32(val["value"]);else val=ByteBuffer.zigZagDecode32(val);return val;};// types/varints/varint64
	if(Long){/**
	         * Maximum number of bytes required to store a 64bit base 128 variable-length integer.
	         * @type {number}
	         * @const
	         * @expose
	         */ByteBuffer.MAX_VARINT64_BYTES=10;/**
	         * Calculates the actual number of bytes required to store a 64bit base 128 variable-length integer.
	         * @param {number|!Long} value Value to encode
	         * @returns {number} Number of bytes required. Capped to {@link ByteBuffer.MAX_VARINT64_BYTES}
	         * @expose
	         */ByteBuffer.calculateVarint64=function(value){if(typeof value==='number')value=Long.fromNumber(value);else if(typeof value==='string')value=Long.fromString(value);// ref: src/google/protobuf/io/coded_stream.cc
	var part0=value.toInt()>>>0,part1=value.shiftRightUnsigned(28).toInt()>>>0,part2=value.shiftRightUnsigned(56).toInt()>>>0;if(part2==0){if(part1==0){if(part0<1<<14)return part0<1<<7?1:2;else return part0<1<<21?3:4;}else{if(part1<1<<14)return part1<1<<7?5:6;else return part1<1<<21?7:8;}}else return part2<1<<7?9:10;};/**
	         * Zigzag encodes a signed 64bit integer so that it can be effectively used with varint encoding.
	         * @param {number|!Long} value Signed long
	         * @returns {!Long} Unsigned zigzag encoded long
	         * @expose
	         */ByteBuffer.zigZagEncode64=function(value){if(typeof value==='number')value=Long.fromNumber(value,false);else if(typeof value==='string')value=Long.fromString(value,false);else if(value.unsigned!==false)value=value.toSigned();// ref: src/google/protobuf/wire_format_lite.h
	return value.shiftLeft(1).xor(value.shiftRight(63)).toUnsigned();};/**
	         * Decodes a zigzag encoded signed 64bit integer.
	         * @param {!Long|number} value Unsigned zigzag encoded long or JavaScript number
	         * @returns {!Long} Signed long
	         * @expose
	         */ByteBuffer.zigZagDecode64=function(value){if(typeof value==='number')value=Long.fromNumber(value,false);else if(typeof value==='string')value=Long.fromString(value,false);else if(value.unsigned!==false)value=value.toSigned();// ref: src/google/protobuf/wire_format_lite.h
	return value.shiftRightUnsigned(1).xor(value.and(Long.ONE).toSigned().negate()).toSigned();};/**
	         * Writes a 64bit base 128 variable-length integer.
	         * @param {number|Long} value Value to write
	         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	         *  written if omitted.
	         * @returns {!ByteBuffer|number} `this` if offset is omitted, else the actual number of bytes written.
	         * @expose
	         */ByteBufferPrototype.writeVarint64=function(value,offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof value==='number')value=Long.fromNumber(value);else if(typeof value==='string')value=Long.fromString(value);else if(!(value&&value instanceof Long))throw TypeError("Illegal value: "+value+" (not an integer or Long)");if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: "+offset+" (not an integer)");offset>>>=0;if(offset<0||offset+0>this.buffer.length)throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.length);}if(typeof value==='number')value=Long.fromNumber(value,false);else if(typeof value==='string')value=Long.fromString(value,false);else if(value.unsigned!==false)value=value.toSigned();var size=ByteBuffer.calculateVarint64(value),part0=value.toInt()>>>0,part1=value.shiftRightUnsigned(28).toInt()>>>0,part2=value.shiftRightUnsigned(56).toInt()>>>0;offset+=size;var capacity11=this.buffer.length;if(offset>capacity11)this.resize((capacity11*=2)>offset?capacity11:offset);offset-=size;switch(size){case 10:this.buffer[offset+9]=part2>>>7&0x01;case 9:this.buffer[offset+8]=size!==9?part2|0x80:part2&0x7F;case 8:this.buffer[offset+7]=size!==8?part1>>>21|0x80:part1>>>21&0x7F;case 7:this.buffer[offset+6]=size!==7?part1>>>14|0x80:part1>>>14&0x7F;case 6:this.buffer[offset+5]=size!==6?part1>>>7|0x80:part1>>>7&0x7F;case 5:this.buffer[offset+4]=size!==5?part1|0x80:part1&0x7F;case 4:this.buffer[offset+3]=size!==4?part0>>>21|0x80:part0>>>21&0x7F;case 3:this.buffer[offset+2]=size!==3?part0>>>14|0x80:part0>>>14&0x7F;case 2:this.buffer[offset+1]=size!==2?part0>>>7|0x80:part0>>>7&0x7F;case 1:this.buffer[offset]=size!==1?part0|0x80:part0&0x7F;}if(relative){this.offset+=size;return this;}else{return size;}};/**
	         * Writes a zig-zag encoded 64bit base 128 variable-length integer.
	         * @param {number|Long} value Value to write
	         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	         *  written if omitted.
	         * @returns {!ByteBuffer|number} `this` if offset is omitted, else the actual number of bytes written.
	         * @expose
	         */ByteBufferPrototype.writeVarint64ZigZag=function(value,offset){return this.writeVarint64(ByteBuffer.zigZagEncode64(value),offset);};/**
	         * Reads a 64bit base 128 variable-length integer. Requires Long.js.
	         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	         *  read if omitted.
	         * @returns {!Long|!{value: Long, length: number}} The value read if offset is omitted, else the value read and
	         *  the actual number of bytes read.
	         * @throws {Error} If it's not a valid varint
	         * @expose
	         */ByteBufferPrototype.readVarint64=function(offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: "+offset+" (not an integer)");offset>>>=0;if(offset<0||offset+1>this.buffer.length)throw RangeError("Illegal offset: 0 <= "+offset+" (+"+1+") <= "+this.buffer.length);}// ref: src/google/protobuf/io/coded_stream.cc
	var start=offset,part0=0,part1=0,part2=0,b=0;b=this.buffer[offset++];part0=b&0x7F;if(b&0x80){b=this.buffer[offset++];part0|=(b&0x7F)<<7;if(b&0x80||this.noAssert&&typeof b==='undefined'){b=this.buffer[offset++];part0|=(b&0x7F)<<14;if(b&0x80||this.noAssert&&typeof b==='undefined'){b=this.buffer[offset++];part0|=(b&0x7F)<<21;if(b&0x80||this.noAssert&&typeof b==='undefined'){b=this.buffer[offset++];part1=b&0x7F;if(b&0x80||this.noAssert&&typeof b==='undefined'){b=this.buffer[offset++];part1|=(b&0x7F)<<7;if(b&0x80||this.noAssert&&typeof b==='undefined'){b=this.buffer[offset++];part1|=(b&0x7F)<<14;if(b&0x80||this.noAssert&&typeof b==='undefined'){b=this.buffer[offset++];part1|=(b&0x7F)<<21;if(b&0x80||this.noAssert&&typeof b==='undefined'){b=this.buffer[offset++];part2=b&0x7F;if(b&0x80||this.noAssert&&typeof b==='undefined'){b=this.buffer[offset++];part2|=(b&0x7F)<<7;if(b&0x80||this.noAssert&&typeof b==='undefined'){throw Error("Buffer overrun");}}}}}}}}}}var value=Long.fromBits(part0|part1<<28,part1>>>4|part2<<24,false);if(relative){this.offset=offset;return value;}else{return{'value':value,'length':offset-start};}};/**
	         * Reads a zig-zag encoded 64bit base 128 variable-length integer. Requires Long.js.
	         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	         *  read if omitted.
	         * @returns {!Long|!{value: Long, length: number}} The value read if offset is omitted, else the value read and
	         *  the actual number of bytes read.
	         * @throws {Error} If it's not a valid varint
	         * @expose
	         */ByteBufferPrototype.readVarint64ZigZag=function(offset){var val=this.readVarint64(offset);if(val&&val['value']instanceof Long)val["value"]=ByteBuffer.zigZagDecode64(val["value"]);else val=ByteBuffer.zigZagDecode64(val);return val;};}// Long
	// types/strings/cstring
	/**
	     * Writes a NULL-terminated UTF8 encoded string. For this to work the specified string must not contain any NULL
	     *  characters itself.
	     * @param {string} str String to write
	     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	     *  contained in `str` + 1 if omitted.
	     * @returns {!ByteBuffer|number} this if offset is omitted, else the actual number of bytes written
	     * @expose
	     */ByteBufferPrototype.writeCString=function(str,offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;var i,k=str.length;if(!this.noAssert){if(typeof str!=='string')throw TypeError("Illegal str: Not a string");for(i=0;i<k;++i){if(str.charCodeAt(i)===0)throw RangeError("Illegal str: Contains NULL-characters");}if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: "+offset+" (not an integer)");offset>>>=0;if(offset<0||offset+0>this.buffer.length)throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.length);}// UTF8 strings do not contain zero bytes in between except for the zero character, so:
	k=Buffer.byteLength(str,"utf8");offset+=k+1;var capacity12=this.buffer.length;if(offset>capacity12)this.resize((capacity12*=2)>offset?capacity12:offset);offset-=k+1;offset+=this.buffer.write(str,offset,k,"utf8");this.buffer[offset++]=0;if(relative){this.offset=offset;return this;}return k;};/**
	     * Reads a NULL-terminated UTF8 encoded string. For this to work the string read must not contain any NULL characters
	     *  itself.
	     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	     *  read if omitted.
	     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
	     *  read and the actual number of bytes read.
	     * @expose
	     */ByteBufferPrototype.readCString=function(offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: "+offset+" (not an integer)");offset>>>=0;if(offset<0||offset+1>this.buffer.length)throw RangeError("Illegal offset: 0 <= "+offset+" (+"+1+") <= "+this.buffer.length);}var start=offset,temp;// UTF8 strings do not contain zero bytes in between except for the zero character itself, so:
	do{if(offset>=this.buffer.length)throw RangeError("Index out of range: "+offset+" <= "+this.buffer.length);temp=this.buffer[offset++];}while(temp!==0);var str=this.buffer.toString("utf8",start,offset-1);if(relative){this.offset=offset;return str;}else{return{"string":str,"length":offset-start};}};// types/strings/istring
	/**
	     * Writes a length as uint32 prefixed UTF8 encoded string.
	     * @param {string} str String to write
	     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	     *  written if omitted.
	     * @returns {!ByteBuffer|number} `this` if `offset` is omitted, else the actual number of bytes written
	     * @expose
	     * @see ByteBuffer#writeVarint32
	     */ByteBufferPrototype.writeIString=function(str,offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof str!=='string')throw TypeError("Illegal str: Not a string");if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: "+offset+" (not an integer)");offset>>>=0;if(offset<0||offset+0>this.buffer.length)throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.length);}var start=offset,k;k=Buffer.byteLength(str,"utf8");offset+=4+k;var capacity13=this.buffer.length;if(offset>capacity13)this.resize((capacity13*=2)>offset?capacity13:offset);offset-=4+k;if(this.littleEndian){this.buffer[offset+3]=k>>>24&0xFF;this.buffer[offset+2]=k>>>16&0xFF;this.buffer[offset+1]=k>>>8&0xFF;this.buffer[offset]=k&0xFF;}else{this.buffer[offset]=k>>>24&0xFF;this.buffer[offset+1]=k>>>16&0xFF;this.buffer[offset+2]=k>>>8&0xFF;this.buffer[offset+3]=k&0xFF;}offset+=4;offset+=this.buffer.write(str,offset,k,"utf8");if(relative){this.offset=offset;return this;}return offset-start;};/**
	     * Reads a length as uint32 prefixed UTF8 encoded string.
	     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	     *  read if omitted.
	     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
	     *  read and the actual number of bytes read.
	     * @expose
	     * @see ByteBuffer#readVarint32
	     */ByteBufferPrototype.readIString=function(offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: "+offset+" (not an integer)");offset>>>=0;if(offset<0||offset+4>this.buffer.length)throw RangeError("Illegal offset: 0 <= "+offset+" (+"+4+") <= "+this.buffer.length);}var start=offset;var len=this.readUint32(offset);var str=this.readUTF8String(len,ByteBuffer.METRICS_BYTES,offset+=4);offset+=str['length'];if(relative){this.offset=offset;return str['string'];}else{return{'string':str['string'],'length':offset-start};}};// types/strings/utf8string
	/**
	     * Metrics representing number of UTF8 characters. Evaluates to `c`.
	     * @type {string}
	     * @const
	     * @expose
	     */ByteBuffer.METRICS_CHARS='c';/**
	     * Metrics representing number of bytes. Evaluates to `b`.
	     * @type {string}
	     * @const
	     * @expose
	     */ByteBuffer.METRICS_BYTES='b';/**
	     * Writes an UTF8 encoded string.
	     * @param {string} str String to write
	     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} if omitted.
	     * @returns {!ByteBuffer|number} this if offset is omitted, else the actual number of bytes written.
	     * @expose
	     */ByteBufferPrototype.writeUTF8String=function(str,offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: "+offset+" (not an integer)");offset>>>=0;if(offset<0||offset+0>this.buffer.length)throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.length);}var k;k=Buffer.byteLength(str,"utf8");offset+=k;var capacity14=this.buffer.length;if(offset>capacity14)this.resize((capacity14*=2)>offset?capacity14:offset);offset-=k;offset+=this.buffer.write(str,offset,k,"utf8");if(relative){this.offset=offset;return this;}return k;};/**
	     * Writes an UTF8 encoded string. This is an alias of {@link ByteBuffer#writeUTF8String}.
	     * @function
	     * @param {string} str String to write
	     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} if omitted.
	     * @returns {!ByteBuffer|number} this if offset is omitted, else the actual number of bytes written.
	     * @expose
	     */ByteBufferPrototype.writeString=ByteBufferPrototype.writeUTF8String;/**
	     * Calculates the number of UTF8 characters of a string. JavaScript itself uses UTF-16, so that a string's
	     *  `length` property does not reflect its actual UTF8 size if it contains code points larger than 0xFFFF.
	     * @param {string} str String to calculate
	     * @returns {number} Number of UTF8 characters
	     * @expose
	     */ByteBuffer.calculateUTF8Chars=function(str){return utfx.calculateUTF16asUTF8(stringSource(str))[0];};/**
	     * Calculates the number of UTF8 bytes of a string.
	     * @param {string} str String to calculate
	     * @returns {number} Number of UTF8 bytes
	     * @expose
	     */ByteBuffer.calculateUTF8Bytes=function(str){if(typeof str!=='string')throw TypeError("Illegal argument: "+(typeof str==='undefined'?'undefined':(0,_typeof3.default)(str)));return Buffer.byteLength(str,"utf8");};/**
	     * Calculates the number of UTF8 bytes of a string. This is an alias of {@link ByteBuffer.calculateUTF8Bytes}.
	     * @function
	     * @param {string} str String to calculate
	     * @returns {number} Number of UTF8 bytes
	     * @expose
	     */ByteBuffer.calculateString=ByteBuffer.calculateUTF8Bytes;/**
	     * Reads an UTF8 encoded string.
	     * @param {number} length Number of characters or bytes to read.
	     * @param {string=} metrics Metrics specifying what `length` is meant to count. Defaults to
	     *  {@link ByteBuffer.METRICS_CHARS}.
	     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	     *  read if omitted.
	     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
	     *  read and the actual number of bytes read.
	     * @expose
	     */ByteBufferPrototype.readUTF8String=function(length,metrics,offset){if(typeof metrics==='number'){offset=metrics;metrics=undefined;}var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(typeof metrics==='undefined')metrics=ByteBuffer.METRICS_CHARS;if(!this.noAssert){if(typeof length!=='number'||length%1!==0)throw TypeError("Illegal length: "+length+" (not an integer)");length|=0;if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: "+offset+" (not an integer)");offset>>>=0;if(offset<0||offset+0>this.buffer.length)throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.length);}var i=0,start=offset,temp,sd;if(metrics===ByteBuffer.METRICS_CHARS){// The same for node and the browser
	sd=stringDestination();utfx.decodeUTF8(function(){return i<length&&offset<this.limit?this.buffer[offset++]:null;}.bind(this),function(cp){++i;utfx.UTF8toUTF16(cp,sd);});if(i!==length)throw RangeError("Illegal range: Truncated data, "+i+" == "+length);if(relative){this.offset=offset;return sd();}else{return{"string":sd(),"length":offset-start};}}else if(metrics===ByteBuffer.METRICS_BYTES){if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: "+offset+" (not an integer)");offset>>>=0;if(offset<0||offset+length>this.buffer.length)throw RangeError("Illegal offset: 0 <= "+offset+" (+"+length+") <= "+this.buffer.length);}temp=this.buffer.toString("utf8",offset,offset+length);if(relative){this.offset+=length;return temp;}else{return{'string':temp,'length':length};}}else throw TypeError("Unsupported metrics: "+metrics);};/**
	     * Reads an UTF8 encoded string. This is an alias of {@link ByteBuffer#readUTF8String}.
	     * @function
	     * @param {number} length Number of characters or bytes to read
	     * @param {number=} metrics Metrics specifying what `n` is meant to count. Defaults to
	     *  {@link ByteBuffer.METRICS_CHARS}.
	     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	     *  read if omitted.
	     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
	     *  read and the actual number of bytes read.
	     * @expose
	     */ByteBufferPrototype.readString=ByteBufferPrototype.readUTF8String;// types/strings/vstring
	/**
	     * Writes a length as varint32 prefixed UTF8 encoded string.
	     * @param {string} str String to write
	     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	     *  written if omitted.
	     * @returns {!ByteBuffer|number} `this` if `offset` is omitted, else the actual number of bytes written
	     * @expose
	     * @see ByteBuffer#writeVarint32
	     */ByteBufferPrototype.writeVString=function(str,offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof str!=='string')throw TypeError("Illegal str: Not a string");if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: "+offset+" (not an integer)");offset>>>=0;if(offset<0||offset+0>this.buffer.length)throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.length);}var start=offset,k,l;k=Buffer.byteLength(str,"utf8");l=ByteBuffer.calculateVarint32(k);offset+=l+k;var capacity15=this.buffer.length;if(offset>capacity15)this.resize((capacity15*=2)>offset?capacity15:offset);offset-=l+k;offset+=this.writeVarint32(k,offset);offset+=this.buffer.write(str,offset,k,"utf8");if(relative){this.offset=offset;return this;}return offset-start;};/**
	     * Reads a length as varint32 prefixed UTF8 encoded string.
	     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	     *  read if omitted.
	     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
	     *  read and the actual number of bytes read.
	     * @expose
	     * @see ByteBuffer#readVarint32
	     */ByteBufferPrototype.readVString=function(offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: "+offset+" (not an integer)");offset>>>=0;if(offset<0||offset+1>this.buffer.length)throw RangeError("Illegal offset: 0 <= "+offset+" (+"+1+") <= "+this.buffer.length);}var start=offset;var len=this.readVarint32(offset);var str=this.readUTF8String(len['value'],ByteBuffer.METRICS_BYTES,offset+=len['length']);offset+=str['length'];if(relative){this.offset=offset;return str['string'];}else{return{'string':str['string'],'length':offset-start};}};/**
	     * Appends some data to this ByteBuffer. This will overwrite any contents behind the specified offset up to the appended
	     *  data's length.
	     * @param {!ByteBuffer|!Buffer|!ArrayBuffer|!Uint8Array|string} source Data to append. If `source` is a ByteBuffer, its
	     * offsets will be modified according to the performed read operation.
	     * @param {(string|number)=} encoding Encoding if `data` is a string ("base64", "hex", "binary", defaults to "utf8")
	     * @param {number=} offset Offset to append at. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	     *  written if omitted.
	     * @returns {!ByteBuffer} this
	     * @expose
	     * @example A relative `<01 02>03.append(<04 05>)` will result in `<01 02 04 05>, 04 05|`
	     * @example An absolute `<01 02>03.append(04 05>, 1)` will result in `<01 04>05, 04 05|`
	     */ByteBufferPrototype.append=function(source,encoding,offset){if(typeof encoding==='number'||typeof encoding!=='string'){offset=encoding;encoding=undefined;}var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: "+offset+" (not an integer)");offset>>>=0;if(offset<0||offset+0>this.buffer.length)throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.length);}if(!(source instanceof ByteBuffer))source=ByteBuffer.wrap(source,encoding);var length=source.limit-source.offset;if(length<=0)return this;// Nothing to append
	offset+=length;var capacity16=this.buffer.length;if(offset>capacity16)this.resize((capacity16*=2)>offset?capacity16:offset);offset-=length;source.buffer.copy(this.buffer,offset,source.offset,source.limit);source.offset+=length;if(relative)this.offset+=length;return this;};/**
	     * Appends this ByteBuffer's contents to another ByteBuffer. This will overwrite any contents at and after the
	        specified offset up to the length of this ByteBuffer's data.
	     * @param {!ByteBuffer} target Target ByteBuffer
	     * @param {number=} offset Offset to append to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	     *  read if omitted.
	     * @returns {!ByteBuffer} this
	     * @expose
	     * @see ByteBuffer#append
	     */ByteBufferPrototype.appendTo=function(target,offset){target.append(this,offset);return this;};/**
	     * Enables or disables assertions of argument types and offsets. Assertions are enabled by default but you can opt to
	     *  disable them if your code already makes sure that everything is valid.
	     * @param {boolean} assert `true` to enable assertions, otherwise `false`
	     * @returns {!ByteBuffer} this
	     * @expose
	     */ByteBufferPrototype.assert=function(assert){this.noAssert=!assert;return this;};/**
	     * Gets the capacity of this ByteBuffer's backing buffer.
	     * @returns {number} Capacity of the backing buffer
	     * @expose
	     */ByteBufferPrototype.capacity=function(){return this.buffer.length;};/**
	     * Clears this ByteBuffer's offsets by setting {@link ByteBuffer#offset} to `0` and {@link ByteBuffer#limit} to the
	     *  backing buffer's capacity. Discards {@link ByteBuffer#markedOffset}.
	     * @returns {!ByteBuffer} this
	     * @expose
	     */ByteBufferPrototype.clear=function(){this.offset=0;this.limit=this.buffer.length;this.markedOffset=-1;return this;};/**
	     * Creates a cloned instance of this ByteBuffer, preset with this ByteBuffer's values for {@link ByteBuffer#offset},
	     *  {@link ByteBuffer#markedOffset} and {@link ByteBuffer#limit}.
	     * @param {boolean=} copy Whether to copy the backing buffer or to return another view on the same, defaults to `false`
	     * @returns {!ByteBuffer} Cloned instance
	     * @expose
	     */ByteBufferPrototype.clone=function(copy){var bb=new ByteBuffer(0,this.littleEndian,this.noAssert);if(copy){var buffer=new Buffer(this.buffer.length);this.buffer.copy(buffer);bb.buffer=buffer;}else{bb.buffer=this.buffer;}bb.offset=this.offset;bb.markedOffset=this.markedOffset;bb.limit=this.limit;return bb;};/**
	     * Compacts this ByteBuffer to be backed by a {@link ByteBuffer#buffer} of its contents' length. Contents are the bytes
	     *  between {@link ByteBuffer#offset} and {@link ByteBuffer#limit}. Will set `offset = 0` and `limit = capacity` and
	     *  adapt {@link ByteBuffer#markedOffset} to the same relative position if set.
	     * @param {number=} begin Offset to start at, defaults to {@link ByteBuffer#offset}
	     * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}
	     * @returns {!ByteBuffer} this
	     * @expose
	     */ByteBufferPrototype.compact=function(begin,end){if(typeof begin==='undefined')begin=this.offset;if(typeof end==='undefined')end=this.limit;if(!this.noAssert){if(typeof begin!=='number'||begin%1!==0)throw TypeError("Illegal begin: Not an integer");begin>>>=0;if(typeof end!=='number'||end%1!==0)throw TypeError("Illegal end: Not an integer");end>>>=0;if(begin<0||begin>end||end>this.buffer.length)throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.length);}if(begin===0&&end===this.buffer.length)return this;// Already compacted
	var len=end-begin;if(len===0){this.buffer=EMPTY_BUFFER;if(this.markedOffset>=0)this.markedOffset-=begin;this.offset=0;this.limit=0;return this;}var buffer=new Buffer(len);this.buffer.copy(buffer,0,begin,end);this.buffer=buffer;if(this.markedOffset>=0)this.markedOffset-=begin;this.offset=0;this.limit=len;return this;};/**
	     * Creates a copy of this ByteBuffer's contents. Contents are the bytes between {@link ByteBuffer#offset} and
	     *  {@link ByteBuffer#limit}.
	     * @param {number=} begin Begin offset, defaults to {@link ByteBuffer#offset}.
	     * @param {number=} end End offset, defaults to {@link ByteBuffer#limit}.
	     * @returns {!ByteBuffer} Copy
	     * @expose
	     */ByteBufferPrototype.copy=function(begin,end){if(typeof begin==='undefined')begin=this.offset;if(typeof end==='undefined')end=this.limit;if(!this.noAssert){if(typeof begin!=='number'||begin%1!==0)throw TypeError("Illegal begin: Not an integer");begin>>>=0;if(typeof end!=='number'||end%1!==0)throw TypeError("Illegal end: Not an integer");end>>>=0;if(begin<0||begin>end||end>this.buffer.length)throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.length);}if(begin===end)return new ByteBuffer(0,this.littleEndian,this.noAssert);var capacity=end-begin,bb=new ByteBuffer(capacity,this.littleEndian,this.noAssert);bb.offset=0;bb.limit=capacity;if(bb.markedOffset>=0)bb.markedOffset-=begin;this.copyTo(bb,0,begin,end);return bb;};/**
	     * Copies this ByteBuffer's contents to another ByteBuffer. Contents are the bytes between {@link ByteBuffer#offset} and
	     *  {@link ByteBuffer#limit}.
	     * @param {!ByteBuffer} target Target ByteBuffer
	     * @param {number=} targetOffset Offset to copy to. Will use and increase the target's {@link ByteBuffer#offset}
	     *  by the number of bytes copied if omitted.
	     * @param {number=} sourceOffset Offset to start copying from. Will use and increase {@link ByteBuffer#offset} by the
	     *  number of bytes copied if omitted.
	     * @param {number=} sourceLimit Offset to end copying from, defaults to {@link ByteBuffer#limit}
	     * @returns {!ByteBuffer} this
	     * @expose
	     */ByteBufferPrototype.copyTo=function(target,targetOffset,sourceOffset,sourceLimit){var relative,targetRelative;if(!this.noAssert){if(!ByteBuffer.isByteBuffer(target))throw TypeError("Illegal target: Not a ByteBuffer");}targetOffset=(targetRelative=typeof targetOffset==='undefined')?target.offset:targetOffset|0;sourceOffset=(relative=typeof sourceOffset==='undefined')?this.offset:sourceOffset|0;sourceLimit=typeof sourceLimit==='undefined'?this.limit:sourceLimit|0;if(targetOffset<0||targetOffset>target.buffer.length)throw RangeError("Illegal target range: 0 <= "+targetOffset+" <= "+target.buffer.length);if(sourceOffset<0||sourceLimit>this.buffer.length)throw RangeError("Illegal source range: 0 <= "+sourceOffset+" <= "+this.buffer.length);var len=sourceLimit-sourceOffset;if(len===0)return target;// Nothing to copy
	target.ensureCapacity(targetOffset+len);this.buffer.copy(target.buffer,targetOffset,sourceOffset,sourceLimit);if(relative)this.offset+=len;if(targetRelative)target.offset+=len;return this;};/**
	     * Makes sure that this ByteBuffer is backed by a {@link ByteBuffer#buffer} of at least the specified capacity. If the
	     *  current capacity is exceeded, it will be doubled. If double the current capacity is less than the required capacity,
	     *  the required capacity will be used instead.
	     * @param {number} capacity Required capacity
	     * @returns {!ByteBuffer} this
	     * @expose
	     */ByteBufferPrototype.ensureCapacity=function(capacity){var current=this.buffer.length;if(current<capacity)return this.resize((current*=2)>capacity?current:capacity);return this;};/**
	     * Overwrites this ByteBuffer's contents with the specified value. Contents are the bytes between
	     *  {@link ByteBuffer#offset} and {@link ByteBuffer#limit}.
	     * @param {number|string} value Byte value to fill with. If given as a string, the first character is used.
	     * @param {number=} begin Begin offset. Will use and increase {@link ByteBuffer#offset} by the number of bytes
	     *  written if omitted. defaults to {@link ByteBuffer#offset}.
	     * @param {number=} end End offset, defaults to {@link ByteBuffer#limit}.
	     * @returns {!ByteBuffer} this
	     * @expose
	     * @example `someByteBuffer.clear().fill(0)` fills the entire backing buffer with zeroes
	     */ByteBufferPrototype.fill=function(value,begin,end){var relative=typeof begin==='undefined';if(relative)begin=this.offset;if(typeof value==='string'&&value.length>0)value=value.charCodeAt(0);if(typeof begin==='undefined')begin=this.offset;if(typeof end==='undefined')end=this.limit;if(!this.noAssert){if(typeof value!=='number'||value%1!==0)throw TypeError("Illegal value: "+value+" (not an integer)");value|=0;if(typeof begin!=='number'||begin%1!==0)throw TypeError("Illegal begin: Not an integer");begin>>>=0;if(typeof end!=='number'||end%1!==0)throw TypeError("Illegal end: Not an integer");end>>>=0;if(begin<0||begin>end||end>this.buffer.length)throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.length);}if(begin>=end)return this;// Nothing to fill
	this.buffer.fill(value,begin,end);begin=end;if(relative)this.offset=begin;return this;};/**
	     * Makes this ByteBuffer ready for a new sequence of write or relative read operations. Sets `limit = offset` and
	     *  `offset = 0`. Make sure always to flip a ByteBuffer when all relative read or write operations are complete.
	     * @returns {!ByteBuffer} this
	     * @expose
	     */ByteBufferPrototype.flip=function(){this.limit=this.offset;this.offset=0;return this;};/**
	     * Marks an offset on this ByteBuffer to be used later.
	     * @param {number=} offset Offset to mark. Defaults to {@link ByteBuffer#offset}.
	     * @returns {!ByteBuffer} this
	     * @throws {TypeError} If `offset` is not a valid number
	     * @throws {RangeError} If `offset` is out of bounds
	     * @see ByteBuffer#reset
	     * @expose
	     */ByteBufferPrototype.mark=function(offset){offset=typeof offset==='undefined'?this.offset:offset;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: "+offset+" (not an integer)");offset>>>=0;if(offset<0||offset+0>this.buffer.length)throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.length);}this.markedOffset=offset;return this;};/**
	     * Sets the byte order.
	     * @param {boolean} littleEndian `true` for little endian byte order, `false` for big endian
	     * @returns {!ByteBuffer} this
	     * @expose
	     */ByteBufferPrototype.order=function(littleEndian){if(!this.noAssert){if(typeof littleEndian!=='boolean')throw TypeError("Illegal littleEndian: Not a boolean");}this.littleEndian=!!littleEndian;return this;};/**
	     * Switches (to) little endian byte order.
	     * @param {boolean=} littleEndian Defaults to `true`, otherwise uses big endian
	     * @returns {!ByteBuffer} this
	     * @expose
	     */ByteBufferPrototype.LE=function(littleEndian){this.littleEndian=typeof littleEndian!=='undefined'?!!littleEndian:true;return this;};/**
	     * Switches (to) big endian byte order.
	     * @param {boolean=} bigEndian Defaults to `true`, otherwise uses little endian
	     * @returns {!ByteBuffer} this
	     * @expose
	     */ByteBufferPrototype.BE=function(bigEndian){this.littleEndian=typeof bigEndian!=='undefined'?!bigEndian:false;return this;};/**
	     * Prepends some data to this ByteBuffer. This will overwrite any contents before the specified offset up to the
	     *  prepended data's length. If there is not enough space available before the specified `offset`, the backing buffer
	     *  will be resized and its contents moved accordingly.
	     * @param {!ByteBuffer|string||!Buffer} source Data to prepend. If `source` is a ByteBuffer, its offset will be modified
	     *  according to the performed read operation.
	     * @param {(string|number)=} encoding Encoding if `data` is a string ("base64", "hex", "binary", defaults to "utf8")
	     * @param {number=} offset Offset to prepend at. Will use and decrease {@link ByteBuffer#offset} by the number of bytes
	     *  prepended if omitted.
	     * @returns {!ByteBuffer} this
	     * @expose
	     * @example A relative `00<01 02 03>.prepend(<04 05>)` results in `<04 05 01 02 03>, 04 05|`
	     * @example An absolute `00<01 02 03>.prepend(<04 05>, 2)` results in `04<05 02 03>, 04 05|`
	     */ByteBufferPrototype.prepend=function(source,encoding,offset){if(typeof encoding==='number'||typeof encoding!=='string'){offset=encoding;encoding=undefined;}var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: "+offset+" (not an integer)");offset>>>=0;if(offset<0||offset+0>this.buffer.length)throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.length);}if(!(source instanceof ByteBuffer))source=ByteBuffer.wrap(source,encoding);var len=source.limit-source.offset;if(len<=0)return this;// Nothing to prepend
	var diff=len-offset;if(diff>0){// Not enough space before offset, so resize + move
	var buffer=new Buffer(this.buffer.length+diff);this.buffer.copy(buffer,len,offset,this.buffer.length);this.buffer=buffer;this.offset+=diff;if(this.markedOffset>=0)this.markedOffset+=diff;this.limit+=diff;offset+=diff;}source.buffer.copy(this.buffer,offset-len,source.offset,source.limit);source.offset=source.limit;if(relative)this.offset-=len;return this;};/**
	     * Prepends this ByteBuffer to another ByteBuffer. This will overwrite any contents before the specified offset up to the
	     *  prepended data's length. If there is not enough space available before the specified `offset`, the backing buffer
	     *  will be resized and its contents moved accordingly.
	     * @param {!ByteBuffer} target Target ByteBuffer
	     * @param {number=} offset Offset to prepend at. Will use and decrease {@link ByteBuffer#offset} by the number of bytes
	     *  prepended if omitted.
	     * @returns {!ByteBuffer} this
	     * @expose
	     * @see ByteBuffer#prepend
	     */ByteBufferPrototype.prependTo=function(target,offset){target.prepend(this,offset);return this;};/**
	     * Prints debug information about this ByteBuffer's contents.
	     * @param {function(string)=} out Output function to call, defaults to console.log
	     * @expose
	     */ByteBufferPrototype.printDebug=function(out){if(typeof out!=='function')out=console.log.bind(console);out(this.toString()+"\n"+"-------------------------------------------------------------------\n"+this.toDebug(/* columns */true));};/**
	     * Gets the number of remaining readable bytes. Contents are the bytes between {@link ByteBuffer#offset} and
	     *  {@link ByteBuffer#limit}, so this returns `limit - offset`.
	     * @returns {number} Remaining readable bytes. May be negative if `offset > limit`.
	     * @expose
	     */ByteBufferPrototype.remaining=function(){return this.limit-this.offset;};/**
	     * Resets this ByteBuffer's {@link ByteBuffer#offset}. If an offset has been marked through {@link ByteBuffer#mark}
	     *  before, `offset` will be set to {@link ByteBuffer#markedOffset}, which will then be discarded. If no offset has been
	     *  marked, sets `offset = 0`.
	     * @returns {!ByteBuffer} this
	     * @see ByteBuffer#mark
	     * @expose
	     */ByteBufferPrototype.reset=function(){if(this.markedOffset>=0){this.offset=this.markedOffset;this.markedOffset=-1;}else{this.offset=0;}return this;};/**
	     * Resizes this ByteBuffer to be backed by a buffer of at least the given capacity. Will do nothing if already that
	     *  large or larger.
	     * @param {number} capacity Capacity required
	     * @returns {!ByteBuffer} this
	     * @throws {TypeError} If `capacity` is not a number
	     * @throws {RangeError} If `capacity < 0`
	     * @expose
	     */ByteBufferPrototype.resize=function(capacity){if(!this.noAssert){if(typeof capacity!=='number'||capacity%1!==0)throw TypeError("Illegal capacity: "+capacity+" (not an integer)");capacity|=0;if(capacity<0)throw RangeError("Illegal capacity: 0 <= "+capacity);}if(this.buffer.length<capacity){var buffer=new Buffer(capacity);this.buffer.copy(buffer);this.buffer=buffer;}return this;};/**
	     * Reverses this ByteBuffer's contents.
	     * @param {number=} begin Offset to start at, defaults to {@link ByteBuffer#offset}
	     * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}
	     * @returns {!ByteBuffer} this
	     * @expose
	     */ByteBufferPrototype.reverse=function(begin,end){if(typeof begin==='undefined')begin=this.offset;if(typeof end==='undefined')end=this.limit;if(!this.noAssert){if(typeof begin!=='number'||begin%1!==0)throw TypeError("Illegal begin: Not an integer");begin>>>=0;if(typeof end!=='number'||end%1!==0)throw TypeError("Illegal end: Not an integer");end>>>=0;if(begin<0||begin>end||end>this.buffer.length)throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.length);}if(begin===end)return this;// Nothing to reverse
	Array.prototype.reverse.call(this.buffer.slice(begin,end));return this;};/**
	     * Skips the next `length` bytes. This will just advance
	     * @param {number} length Number of bytes to skip. May also be negative to move the offset back.
	     * @returns {!ByteBuffer} this
	     * @expose
	     */ByteBufferPrototype.skip=function(length){if(!this.noAssert){if(typeof length!=='number'||length%1!==0)throw TypeError("Illegal length: "+length+" (not an integer)");length|=0;}var offset=this.offset+length;if(!this.noAssert){if(offset<0||offset>this.buffer.length)throw RangeError("Illegal length: 0 <= "+this.offset+" + "+length+" <= "+this.buffer.length);}this.offset=offset;return this;};/**
	     * Slices this ByteBuffer by creating a cloned instance with `offset = begin` and `limit = end`.
	     * @param {number=} begin Begin offset, defaults to {@link ByteBuffer#offset}.
	     * @param {number=} end End offset, defaults to {@link ByteBuffer#limit}.
	     * @returns {!ByteBuffer} Clone of this ByteBuffer with slicing applied, backed by the same {@link ByteBuffer#buffer}
	     * @expose
	     */ByteBufferPrototype.slice=function(begin,end){if(typeof begin==='undefined')begin=this.offset;if(typeof end==='undefined')end=this.limit;if(!this.noAssert){if(typeof begin!=='number'||begin%1!==0)throw TypeError("Illegal begin: Not an integer");begin>>>=0;if(typeof end!=='number'||end%1!==0)throw TypeError("Illegal end: Not an integer");end>>>=0;if(begin<0||begin>end||end>this.buffer.length)throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.length);}var bb=this.clone();bb.offset=begin;bb.limit=end;return bb;};/**
	     * Returns a copy of the backing buffer that contains this ByteBuffer's contents. Contents are the bytes between
	     *  {@link ByteBuffer#offset} and {@link ByteBuffer#limit}.
	     * @param {boolean=} forceCopy If `true` returns a copy, otherwise returns a view referencing the same memory if
	     *  possible. Defaults to `false`
	     * @returns {!Buffer} Contents as a Buffer
	     * @expose
	     */ByteBufferPrototype.toBuffer=function(forceCopy){var offset=this.offset,limit=this.limit;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: Not an integer");offset>>>=0;if(typeof limit!=='number'||limit%1!==0)throw TypeError("Illegal limit: Not an integer");limit>>>=0;if(offset<0||offset>limit||limit>this.buffer.length)throw RangeError("Illegal range: 0 <= "+offset+" <= "+limit+" <= "+this.buffer.length);}if(forceCopy){var buffer=new Buffer(limit-offset);this.buffer.copy(buffer,0,offset,limit);return buffer;}else{if(offset===0&&limit===this.buffer.length)return this.buffer;else return this.buffer.slice(offset,limit);}};/**
	     * Returns a copy of the backing buffer compacted to contain this ByteBuffer's contents. Contents are the bytes between
	     *  {@link ByteBuffer#offset} and {@link ByteBuffer#limit}.
	     * @returns {!ArrayBuffer} Contents as an ArrayBuffer
	     */ByteBufferPrototype.toArrayBuffer=function(){var offset=this.offset,limit=this.limit;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError("Illegal offset: Not an integer");offset>>>=0;if(typeof limit!=='number'||limit%1!==0)throw TypeError("Illegal limit: Not an integer");limit>>>=0;if(offset<0||offset>limit||limit>this.buffer.length)throw RangeError("Illegal range: 0 <= "+offset+" <= "+limit+" <= "+this.buffer.length);}var ab=new ArrayBuffer(limit-offset);if(memcpy){// Fast
	memcpy(ab,0,this.buffer,offset,limit);}else{// Slow
	var dst=new Uint8Array(ab);for(var i=offset;i<limit;++i){dst[i-offset]=this.buffer[i];}}return ab;};/**
	     * Converts the ByteBuffer's contents to a string.
	     * @param {string=} encoding Output encoding. Returns an informative string representation if omitted but also allows
	     *  direct conversion to "utf8", "hex", "base64" and "binary" encoding. "debug" returns a hex representation with
	     *  highlighted offsets.
	     * @param {number=} begin Offset to begin at, defaults to {@link ByteBuffer#offset}
	     * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}
	     * @returns {string} String representation
	     * @throws {Error} If `encoding` is invalid
	     * @expose
	     */ByteBufferPrototype.toString=function(encoding,begin,end){if(typeof encoding==='undefined')return"ByteBufferNB(offset="+this.offset+",markedOffset="+this.markedOffset+",limit="+this.limit+",capacity="+this.capacity()+")";if(typeof encoding==='number')encoding="utf8",begin=encoding,end=begin;switch(encoding){case"utf8":return this.toUTF8(begin,end);case"base64":return this.toBase64(begin,end);case"hex":return this.toHex(begin,end);case"binary":return this.toBinary(begin,end);case"debug":return this.toDebug();case"columns":return this.toColumns();default:throw Error("Unsupported encoding: "+encoding);}};// encodings/base64
	/**
	     * Encodes this ByteBuffer's contents to a base64 encoded string.
	     * @param {number=} begin Offset to begin at, defaults to {@link ByteBuffer#offset}.
	     * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}.
	     * @returns {string} Base64 encoded string
	     * @throws {RangeError} If `begin` or `end` is out of bounds
	     * @expose
	     */ByteBufferPrototype.toBase64=function(begin,end){if(typeof begin==='undefined')begin=this.offset;if(typeof end==='undefined')end=this.limit;begin=begin|0;end=end|0;if(begin<0||end>this.capacity||begin>end)throw RangeError("begin, end");return this.buffer.toString("base64",begin,end);};/**
	     * Decodes a base64 encoded string to a ByteBuffer.
	     * @param {string} str String to decode
	     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
	     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
	     * @returns {!ByteBuffer} ByteBuffer
	     * @expose
	     */ByteBuffer.fromBase64=function(str,littleEndian){return ByteBuffer.wrap(new Buffer(str,"base64"),littleEndian);return bb;};/**
	     * Encodes a binary string to base64 like `window.btoa` does.
	     * @param {string} str Binary string
	     * @returns {string} Base64 encoded string
	     * @see https://developer.mozilla.org/en-US/docs/Web/API/Window.btoa
	     * @expose
	     */ByteBuffer.btoa=function(str){return ByteBuffer.fromBinary(str).toBase64();};/**
	     * Decodes a base64 encoded string to binary like `window.atob` does.
	     * @param {string} b64 Base64 encoded string
	     * @returns {string} Binary string
	     * @see https://developer.mozilla.org/en-US/docs/Web/API/Window.atob
	     * @expose
	     */ByteBuffer.atob=function(b64){return ByteBuffer.fromBase64(b64).toBinary();};// encodings/binary
	/**
	     * Encodes this ByteBuffer to a binary encoded string, that is using only characters 0x00-0xFF as bytes.
	     * @param {number=} begin Offset to begin at. Defaults to {@link ByteBuffer#offset}.
	     * @param {number=} end Offset to end at. Defaults to {@link ByteBuffer#limit}.
	     * @returns {string} Binary encoded string
	     * @throws {RangeError} If `offset > limit`
	     * @expose
	     */ByteBufferPrototype.toBinary=function(begin,end){if(typeof begin==='undefined')begin=this.offset;if(typeof end==='undefined')end=this.limit;begin|=0;end|=0;if(begin<0||end>this.capacity()||begin>end)throw RangeError("begin, end");return this.buffer.toString("binary",begin,end);};/**
	     * Decodes a binary encoded string, that is using only characters 0x00-0xFF as bytes, to a ByteBuffer.
	     * @param {string} str String to decode
	     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
	     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
	     * @returns {!ByteBuffer} ByteBuffer
	     * @expose
	     */ByteBuffer.fromBinary=function(str,littleEndian){return ByteBuffer.wrap(new Buffer(str,"binary"),littleEndian);return bb;};// encodings/debug
	/**
	     * Encodes this ByteBuffer to a hex encoded string with marked offsets. Offset symbols are:
	     * * `<` : offset,
	     * * `'` : markedOffset,
	     * * `>` : limit,
	     * * `|` : offset and limit,
	     * * `[` : offset and markedOffset,
	     * * `]` : markedOffset and limit,
	     * * `!` : offset, markedOffset and limit
	     * @param {boolean=} columns If `true` returns two columns hex + ascii, defaults to `false`
	     * @returns {string|!Array.<string>} Debug string or array of lines if `asArray = true`
	     * @expose
	     * @example `>00'01 02<03` contains four bytes with `limit=0, markedOffset=1, offset=3`
	     * @example `00[01 02 03>` contains four bytes with `offset=markedOffset=1, limit=4`
	     * @example `00|01 02 03` contains four bytes with `offset=limit=1, markedOffset=-1`
	     * @example `|` contains zero bytes with `offset=limit=0, markedOffset=-1`
	     */ByteBufferPrototype.toDebug=function(columns){var i=-1,k=this.buffer.length,b,hex="",asc="",out="";while(i<k){if(i!==-1){b=this.buffer[i];if(b<0x10)hex+="0"+b.toString(16).toUpperCase();else hex+=b.toString(16).toUpperCase();if(columns)asc+=b>32&&b<127?String.fromCharCode(b):'.';}++i;if(columns){if(i>0&&i%16===0&&i!==k){while(hex.length<3*16+3){hex+=" ";}out+=hex+asc+"\n";hex=asc="";}}if(i===this.offset&&i===this.limit)hex+=i===this.markedOffset?"!":"|";else if(i===this.offset)hex+=i===this.markedOffset?"[":"<";else if(i===this.limit)hex+=i===this.markedOffset?"]":">";else hex+=i===this.markedOffset?"'":columns||i!==0&&i!==k?" ":"";}if(columns&&hex!==" "){while(hex.length<3*16+3){hex+=" ";}out+=hex+asc+"\n";}return columns?out:hex;};/**
	     * Decodes a hex encoded string with marked offsets to a ByteBuffer.
	     * @param {string} str Debug string to decode (not be generated with `columns = true`)
	     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
	     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
	     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
	     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
	     * @returns {!ByteBuffer} ByteBuffer
	     * @expose
	     * @see ByteBuffer#toDebug
	     */ByteBuffer.fromDebug=function(str,littleEndian,noAssert){var k=str.length,bb=new ByteBuffer((k+1)/3|0,littleEndian,noAssert);var i=0,j=0,ch,b,rs=false,// Require symbol next
	ho=false,hm=false,hl=false,// Already has offset (ho), markedOffset (hm), limit (hl)?
	fail=false;while(i<k){switch(ch=str.charAt(i++)){case'!':if(!noAssert){if(ho||hm||hl){fail=true;break;}ho=hm=hl=true;}bb.offset=bb.markedOffset=bb.limit=j;rs=false;break;case'|':if(!noAssert){if(ho||hl){fail=true;break;}ho=hl=true;}bb.offset=bb.limit=j;rs=false;break;case'[':if(!noAssert){if(ho||hm){fail=true;break;}ho=hm=true;}bb.offset=bb.markedOffset=j;rs=false;break;case'<':if(!noAssert){if(ho){fail=true;break;}ho=true;}bb.offset=j;rs=false;break;case']':if(!noAssert){if(hl||hm){fail=true;break;}hl=hm=true;}bb.limit=bb.markedOffset=j;rs=false;break;case'>':if(!noAssert){if(hl){fail=true;break;}hl=true;}bb.limit=j;rs=false;break;case"'":if(!noAssert){if(hm){fail=true;break;}hm=true;}bb.markedOffset=j;rs=false;break;case' ':rs=false;break;default:if(!noAssert){if(rs){fail=true;break;}}b=parseInt(ch+str.charAt(i++),16);if(!noAssert){if(isNaN(b)||b<0||b>255)throw TypeError("Illegal str: Not a debug encoded string");}bb.buffer[j++]=b;rs=true;}if(fail)throw TypeError("Illegal str: Invalid symbol at "+i);}if(!noAssert){if(!ho||!hl)throw TypeError("Illegal str: Missing offset or limit");if(j<bb.buffer.length)throw TypeError("Illegal str: Not a debug encoded string (is it hex?) "+j+" < "+k);}return bb;};// encodings/hex
	/**
	     * Encodes this ByteBuffer's contents to a hex encoded string.
	     * @param {number=} begin Offset to begin at. Defaults to {@link ByteBuffer#offset}.
	     * @param {number=} end Offset to end at. Defaults to {@link ByteBuffer#limit}.
	     * @returns {string} Hex encoded string
	     * @expose
	     */ByteBufferPrototype.toHex=function(begin,end){begin=typeof begin==='undefined'?this.offset:begin;end=typeof end==='undefined'?this.limit:end;if(!this.noAssert){if(typeof begin!=='number'||begin%1!==0)throw TypeError("Illegal begin: Not an integer");begin>>>=0;if(typeof end!=='number'||end%1!==0)throw TypeError("Illegal end: Not an integer");end>>>=0;if(begin<0||begin>end||end>this.buffer.length)throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.length);}return this.buffer.toString("hex",begin,end);};/**
	     * Decodes a hex encoded string to a ByteBuffer.
	     * @param {string} str String to decode
	     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
	     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
	     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
	     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
	     * @returns {!ByteBuffer} ByteBuffer
	     * @expose
	     */ByteBuffer.fromHex=function(str,littleEndian,noAssert){if(!noAssert){if(typeof str!=='string')throw TypeError("Illegal str: Not a string");if(str.length%2!==0)throw TypeError("Illegal str: Length not a multiple of 2");}var bb=new ByteBuffer(0,littleEndian,true);bb.buffer=new Buffer(str,"hex");bb.limit=bb.buffer.length;return bb;};// utfx-embeddable
	/**
	     * utfx-embeddable (c) 2014 Daniel Wirtz <dcode@dcode.io>
	     * Released under the Apache License, Version 2.0
	     * see: https://github.com/dcodeIO/utfx for details
	     */var utfx=function(){"use strict";/**
	         * utfx namespace.
	         * @inner
	         * @type {!Object.<string,*>}
	         */var utfx={};/**
	         * Maximum valid code point.
	         * @type {number}
	         * @const
	         */utfx.MAX_CODEPOINT=0x10FFFF;/**
	         * Encodes UTF8 code points to UTF8 bytes.
	         * @param {(!function():number|null) | number} src Code points source, either as a function returning the next code point
	         *  respectively `null` if there are no more code points left or a single numeric code point.
	         * @param {!function(number)} dst Bytes destination as a function successively called with the next byte
	         */utfx.encodeUTF8=function(src,dst){var cp=null;if(typeof src==='number')cp=src,src=function src(){return null;};while(cp!==null||(cp=src())!==null){if(cp<0x80)dst(cp&0x7F);else if(cp<0x800)dst(cp>>6&0x1F|0xC0),dst(cp&0x3F|0x80);else if(cp<0x10000)dst(cp>>12&0x0F|0xE0),dst(cp>>6&0x3F|0x80),dst(cp&0x3F|0x80);else dst(cp>>18&0x07|0xF0),dst(cp>>12&0x3F|0x80),dst(cp>>6&0x3F|0x80),dst(cp&0x3F|0x80);cp=null;}};/**
	         * Decodes UTF8 bytes to UTF8 code points.
	         * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if there
	         *  are no more bytes left.
	         * @param {!function(number)} dst Code points destination as a function successively called with each decoded code point.
	         * @throws {RangeError} If a starting byte is invalid in UTF8
	         * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the
	         *  remaining bytes.
	         */utfx.decodeUTF8=function(src,dst){var a,b,c,d,fail=function fail(b){b=b.slice(0,b.indexOf(null));var err=Error(b.toString());err.name="TruncatedError";err['bytes']=b;throw err;};while((a=src())!==null){if((a&0x80)===0)dst(a);else if((a&0xE0)===0xC0)(b=src())===null&&fail([a,b]),dst((a&0x1F)<<6|b&0x3F);else if((a&0xF0)===0xE0)((b=src())===null||(c=src())===null)&&fail([a,b,c]),dst((a&0x0F)<<12|(b&0x3F)<<6|c&0x3F);else if((a&0xF8)===0xF0)((b=src())===null||(c=src())===null||(d=src())===null)&&fail([a,b,c,d]),dst((a&0x07)<<18|(b&0x3F)<<12|(c&0x3F)<<6|d&0x3F);else throw RangeError("Illegal starting byte: "+a);}};/**
	         * Converts UTF16 characters to UTF8 code points.
	         * @param {!function():number|null} src Characters source as a function returning the next char code respectively
	         *  `null` if there are no more characters left.
	         * @param {!function(number)} dst Code points destination as a function successively called with each converted code
	         *  point.
	         */utfx.UTF16toUTF8=function(src,dst){var c1,c2=null;while(true){if((c1=c2!==null?c2:src())===null)break;if(c1>=0xD800&&c1<=0xDFFF){if((c2=src())!==null){if(c2>=0xDC00&&c2<=0xDFFF){dst((c1-0xD800)*0x400+c2-0xDC00+0x10000);c2=null;continue;}}}dst(c1);}if(c2!==null)dst(c2);};/**
	         * Converts UTF8 code points to UTF16 characters.
	         * @param {(!function():number|null) | number} src Code points source, either as a function returning the next code point
	         *  respectively `null` if there are no more code points left or a single numeric code point.
	         * @param {!function(number)} dst Characters destination as a function successively called with each converted char code.
	         * @throws {RangeError} If a code point is out of range
	         */utfx.UTF8toUTF16=function(src,dst){var cp=null;if(typeof src==='number')cp=src,src=function src(){return null;};while(cp!==null||(cp=src())!==null){if(cp<=0xFFFF)dst(cp);else cp-=0x10000,dst((cp>>10)+0xD800),dst(cp%0x400+0xDC00);cp=null;}};/**
	         * Converts and encodes UTF16 characters to UTF8 bytes.
	         * @param {!function():number|null} src Characters source as a function returning the next char code respectively `null`
	         *  if there are no more characters left.
	         * @param {!function(number)} dst Bytes destination as a function successively called with the next byte.
	         */utfx.encodeUTF16toUTF8=function(src,dst){utfx.UTF16toUTF8(src,function(cp){utfx.encodeUTF8(cp,dst);});};/**
	         * Decodes and converts UTF8 bytes to UTF16 characters.
	         * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if there
	         *  are no more bytes left.
	         * @param {!function(number)} dst Characters destination as a function successively called with each converted char code.
	         * @throws {RangeError} If a starting byte is invalid in UTF8
	         * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the remaining bytes.
	         */utfx.decodeUTF8toUTF16=function(src,dst){utfx.decodeUTF8(src,function(cp){utfx.UTF8toUTF16(cp,dst);});};/**
	         * Calculates the byte length of an UTF8 code point.
	         * @param {number} cp UTF8 code point
	         * @returns {number} Byte length
	         */utfx.calculateCodePoint=function(cp){return cp<0x80?1:cp<0x800?2:cp<0x10000?3:4;};/**
	         * Calculates the number of UTF8 bytes required to store UTF8 code points.
	         * @param {(!function():number|null)} src Code points source as a function returning the next code point respectively
	         *  `null` if there are no more code points left.
	         * @returns {number} The number of UTF8 bytes required
	         */utfx.calculateUTF8=function(src){var cp,l=0;while((cp=src())!==null){l+=cp<0x80?1:cp<0x800?2:cp<0x10000?3:4;}return l;};/**
	         * Calculates the number of UTF8 code points respectively UTF8 bytes required to store UTF16 char codes.
	         * @param {(!function():number|null)} src Characters source as a function returning the next char code respectively
	         *  `null` if there are no more characters left.
	         * @returns {!Array.<number>} The number of UTF8 code points at index 0 and the number of UTF8 bytes required at index 1.
	         */utfx.calculateUTF16asUTF8=function(src){var n=0,l=0;utfx.UTF16toUTF8(src,function(cp){++n;l+=cp<0x80?1:cp<0x800?2:cp<0x10000?3:4;});return[n,l];};return utfx;}();// encodings/utf8
	/**
	     * Encodes this ByteBuffer's contents between {@link ByteBuffer#offset} and {@link ByteBuffer#limit} to an UTF8 encoded
	     *  string.
	     * @returns {string} Hex encoded string
	     * @throws {RangeError} If `offset > limit`
	     * @expose
	     */ByteBufferPrototype.toUTF8=function(begin,end){if(typeof begin==='undefined')begin=this.offset;if(typeof end==='undefined')end=this.limit;if(!this.noAssert){if(typeof begin!=='number'||begin%1!==0)throw TypeError("Illegal begin: Not an integer");begin>>>=0;if(typeof end!=='number'||end%1!==0)throw TypeError("Illegal end: Not an integer");end>>>=0;if(begin<0||begin>end||end>this.buffer.length)throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.length);}return this.buffer.toString("utf8",begin,end);};/**
	     * Decodes an UTF8 encoded string to a ByteBuffer.
	     * @param {string} str String to decode
	     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
	     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
	     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
	     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
	     * @returns {!ByteBuffer} ByteBuffer
	     * @expose
	     */ByteBuffer.fromUTF8=function(str,littleEndian,noAssert){if(!noAssert)if(typeof str!=='string')throw TypeError("Illegal str: Not a string");var bb=new ByteBuffer(0,littleEndian,noAssert);bb.buffer=new Buffer(str,"utf8");bb.limit=bb.buffer.length;return bb;};/**
	     * node-memcpy. This is an optional binding dependency and may not be present.
	     * @function
	     * @param {!(Buffer|ArrayBuffer|Uint8Array)} target Destination
	     * @param {number|!(Buffer|ArrayBuffer)} targetStart Destination start, defaults to 0.
	     * @param {(!(Buffer|ArrayBuffer|Uint8Array)|number)=} source Source
	     * @param {number=} sourceStart Source start, defaults to 0.
	     * @param {number=} sourceEnd Source end, defaults to capacity.
	     * @returns {number} Number of bytes copied
	     * @throws {Error} If any index is out of bounds
	     * @expose
	     */ByteBuffer.memcpy=memcpy;return ByteBuffer;}();/***/},/* 7 *//***/function(module,__webpack_exports__,__webpack_require__){"use strict";var ChainTypes={};ChainTypes.reserved_spaces={relative_protocol_ids:0,protocol_ids:1,implementation_ids:2};ChainTypes.object_type={"null":0,base:1,account:2,asset:3,force_settlement:4,committee_member:5,witness:6,limit_order:7,call_order:8,custom:9,proposal:10,operation_history:11,withdraw_permission:12,vesting_balance:13,worker:14,balance:15,crowdfund:16,crowdfund_contract:17};ChainTypes.impl_object_type={global_property:0,dynamic_global_property:1,index_meta:2,asset_dynamic_data:3,asset_bitasset_data:4,account_balance:5,account_statistics:6,transaction:7,block_summary:8,account_transaction_history:9,blinded_balance:10,chain_property:11,witness_schedule:12,budget_record:13};ChainTypes.vote_type={committee:0,witness:1,worker:2};ChainTypes.operations={transfer:0,limit_order_create:1,limit_order_cancel:2,call_order_update:3,fill_order:4,account_create:5,account_update:6,account_whitelist:7,account_upgrade:8,account_transfer:9,asset_create:10,asset_update:11,asset_update_bitasset:12,asset_update_feed_producers:13,asset_issue:14,asset_reserve:15,asset_fund_fee_pool:16,asset_settle:17,asset_global_settle:18,asset_publish_feed:19,witness_create:20,witness_update:21,proposal_create:22,proposal_update:23,proposal_delete:24,withdraw_permission_create:25,withdraw_permission_update:26,withdraw_permission_claim:27,withdraw_permission_delete:28,committee_member_create:29,committee_member_update:30,committee_member_update_global_parameters:31,vesting_balance_create:32,vesting_balance_withdraw:33,worker_create:34,custom:35,assert:36,balance_claim:37,override_transfer:38,transfer_to_blind:39,blind_transfer:40,transfer_from_blind:41,asset_settle_cancel:42,asset_claim_fees:43,asset_settle_cancel_demo:44,initiate_crowdfund:45,participate_crowdfund:46,withdraw_crowdfund:47};/* harmony default export */__webpack_exports__["a"]=ChainTypes;/***/},/* 8 *//***/function(module,exports,__webpack_require__){var Point=__webpack_require__(25);var Curve=__webpack_require__(27);var getCurveByName=__webpack_require__(44);module.exports={Curve:Curve,Point:Point,getCurveByName:getCurveByName/***/};},/* 9 *//***/function(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_bytebuffer__=__webpack_require__(6);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_bytebuffer___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_bytebuffer__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__chain_src_ChainTypes__=__webpack_require__(7);var MAX_SAFE_INT=9007199254740991;var MIN_SAFE_INT=-9007199254740991;/**
	    Most validations are skipped and the value returned unchanged when an empty string, null, or undefined is encountered (except "required").
	
	    Validations support a string format for dealing with large numbers.
	*/var _my={is_empty:function is_empty(value){return value===null||value===undefined;},required:function required(value){var field_name=arguments.length>1&&arguments[1]!==undefined?arguments[1]:"";if(this.is_empty(value)){throw new Error('value required '+field_name+' '+value);}return value;},require_long:function require_long(value){var field_name=arguments.length>1&&arguments[1]!==undefined?arguments[1]:"";if(!__WEBPACK_IMPORTED_MODULE_0_bytebuffer__["Long"].isLong(value)){throw new Error('Long value required '+field_name+' '+value);}return value;},string:function string(value){if(this.is_empty(value)){return value;}if(typeof value!=="string"){throw new Error('string required: '+value);}return value;},number:function number(value){if(this.is_empty(value)){return value;}if(typeof value!=="number"){throw new Error('number required: '+value);}return value;},whole_number:function whole_number(value){var field_name=arguments.length>1&&arguments[1]!==undefined?arguments[1]:"";if(this.is_empty(value)){return value;}if(/\./.test(value)){throw new Error('whole number required '+field_name+' '+value);}return value;},unsigned:function unsigned(value){var field_name=arguments.length>1&&arguments[1]!==undefined?arguments[1]:"";if(this.is_empty(value)){return value;}if(/-/.test(value)){throw new Error('unsigned required '+field_name+' '+value);}return value;},is_digits:function is_digits(value){if(typeof value==="numeric"){return true;}return /^[0-9]+$/.test(value);},to_number:function to_number(value){var field_name=arguments.length>1&&arguments[1]!==undefined?arguments[1]:"";if(this.is_empty(value)){return value;}this.no_overflow53(value,field_name);var int_value=function(){if(typeof value==="number"){return value;}else{return parseInt(value);}}();return int_value;},to_long:function to_long(value){var field_name=arguments.length>1&&arguments[1]!==undefined?arguments[1]:"";if(this.is_empty(value)){return value;}if(__WEBPACK_IMPORTED_MODULE_0_bytebuffer__["Long"].isLong(value)){return value;}this.no_overflow64(value,field_name);if(typeof value==="number"){value=""+value;}return __WEBPACK_IMPORTED_MODULE_0_bytebuffer__["Long"].fromString(value);},to_string:function to_string(value){var field_name=arguments.length>1&&arguments[1]!==undefined?arguments[1]:"";if(this.is_empty(value)){return value;}if(typeof value==="string"){return value;}if(typeof value==="number"){this.no_overflow53(value,field_name);return""+value;}if(__WEBPACK_IMPORTED_MODULE_0_bytebuffer__["Long"].isLong(value)){return value.toString();}throw'unsupported type '+field_name+': ('+(typeof value==='undefined'?'undefined':(0,_typeof3.default)(value))+') '+value;},require_test:function require_test(regex,value){var field_name=arguments.length>2&&arguments[2]!==undefined?arguments[2]:"";if(this.is_empty(value)){return value;}if(!regex.test(value)){throw new Error('unmatched '+regex+' '+field_name+' '+value);}return value;},require_match:function require_match(regex,value){var field_name=arguments.length>2&&arguments[2]!==undefined?arguments[2]:"";if(this.is_empty(value)){return value;}var match=value.match(regex);if(match===null){throw new Error('unmatched '+regex+' '+field_name+' '+value);}return match;},require_object_id:function require_object_id(value,field_name){return require_match(/^([0-9]+)\.([0-9]+)\.([0-9]+)$/,value,field_name);},// Does not support over 53 bits
	require_range:function require_range(min,max,value){var field_name=arguments.length>3&&arguments[3]!==undefined?arguments[3]:"";if(this.is_empty(value)){return value;}var number=this.to_number(value);if(value<min||value>max){throw new Error('out of range '+value+' '+field_name+' '+value);}return value;},require_object_type:function require_object_type(){var reserved_spaces=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;var type=arguments[1];var value=arguments[2];var field_name=arguments.length>3&&arguments[3]!==undefined?arguments[3]:"";if(this.is_empty(value)){return value;}var object_type=__WEBPACK_IMPORTED_MODULE_1__chain_src_ChainTypes__["a"/* default */].object_type[type];if(!object_type){throw new Error('Unknown object type '+type+' '+field_name+' '+value);}var re=new RegExp(reserved_spaces+'.'+object_type+'.[0-9]+$');if(!re.test(value)){throw new Error('Expecting '+type+' in format '+(reserved_spaces+'.'+object_type+'.[0-9]+ ')+('instead of '+value+' '+field_name+' '+value));}return value;},get_instance:function get_instance(reserve_spaces,type,value,field_name){if(this.is_empty(value)){return value;}this.require_object_type(reserve_spaces,type,value,field_name);return this.to_number(value.split('.')[2]);},require_relative_type:function require_relative_type(type,value,field_name){this.require_object_type(0,type,value,field_name);return value;},get_relative_instance:function get_relative_instance(type,value,field_name){if(this.is_empty(value)){return value;}this.require_object_type(0,type,value,field_name);return this.to_number(value.split('.')[2]);},require_protocol_type:function require_protocol_type(type,value,field_name){this.require_object_type(1,type,value,field_name);return value;},get_protocol_instance:function get_protocol_instance(type,value,field_name){if(this.is_empty(value)){return value;}this.require_object_type(1,type,value,field_name);return this.to_number(value.split('.')[2]);},get_protocol_type:function get_protocol_type(value,field_name){if(this.is_empty(value)){return value;}this.require_object_id(value,field_name);var values=value.split('.');return this.to_number(values[1]);},get_protocol_type_name:function get_protocol_type_name(value,field_name){if(this.is_empty(value)){return value;}var type_id=this.get_protocol_type(value,field_name);return(0,_keys2.default)(__WEBPACK_IMPORTED_MODULE_1__chain_src_ChainTypes__["a"/* default */].object_type)[type_id];},require_implementation_type:function require_implementation_type(type,value,field_name){this.require_object_type(2,type,value,field_name);return value;},get_implementation_instance:function get_implementation_instance(type,value,field_name){if(this.is_empty(value)){return value;}this.require_object_type(2,type,value,field_name);return this.to_number(value.split('.')[2]);},// signed / unsigned decimal
	no_overflow53:function no_overflow53(value){var field_name=arguments.length>1&&arguments[1]!==undefined?arguments[1]:"";if(typeof value==="number"){if(value>MAX_SAFE_INT||value<MIN_SAFE_INT){throw new Error('overflow '+field_name+' '+value);}return;}if(typeof value==="string"){var int=parseInt(value);if(value>MAX_SAFE_INT||value<MIN_SAFE_INT){throw new Error('overflow '+field_name+' '+value);}return;}if(__WEBPACK_IMPORTED_MODULE_0_bytebuffer__["Long"].isLong(value)){// typeof value.toInt() is 'number'
	this.no_overflow53(value.toInt(),field_name);return;}throw'unsupported type '+field_name+': ('+(typeof value==='undefined'?'undefined':(0,_typeof3.default)(value))+') '+value;},// signed / unsigned whole numbers only
	no_overflow64:function no_overflow64(value){var field_name=arguments.length>1&&arguments[1]!==undefined?arguments[1]:"";// https://github.com/dcodeIO/Long.js/issues/20
	if(__WEBPACK_IMPORTED_MODULE_0_bytebuffer__["Long"].isLong(value)){return;}// BigInteger#isBigInteger https://github.com/cryptocoinjs/bigi/issues/20
	if(value.t!==undefined&&value.s!==undefined){this.no_overflow64(value.toString(),field_name);return;}if(typeof value==="string"){// remove leading zeros, will cause a false positive
	value=value.replace(/^0+/,'');// remove trailing zeros
	while(/0$/.test(value)){value=value.substring(0,value.length-1);}if(/\.$/.test(value)){// remove trailing dot
	value=value.substring(0,value.length-1);}if(value===""){value="0";}var long_string=__WEBPACK_IMPORTED_MODULE_0_bytebuffer__["Long"].fromString(value).toString();if(long_string!==value.trim()){throw new Error('overflow '+field_name+' '+value);}return;}if(typeof value==="number"){if(value>MAX_SAFE_INT||value<MIN_SAFE_INT){throw new Error('overflow '+field_name+' '+value);}return;}throw'unsupported type '+field_name+': ('+(typeof value==='undefined'?'undefined':(0,_typeof3.default)(value))+') '+value;}};/* harmony default export */__webpack_exports__["a"]=_my;/***/},/* 10 *//***/function(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_ecurve__=__webpack_require__(8);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_ecurve___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ecurve__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_bigi__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_bigi___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_bigi__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2_bs58__=__webpack_require__(13);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2_bs58___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_bs58__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__hash__=__webpack_require__(2);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__PublicKey__=__webpack_require__(5);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5_deep_equal__=__webpack_require__(15);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5_deep_equal___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_deep_equal__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_6_assert__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_6_assert___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_assert__);var secp256k1=Object(__WEBPACK_IMPORTED_MODULE_0_ecurve__["getCurveByName"])('secp256k1');var G=secp256k1.G,n=secp256k1.n;var PrivateKey=function(){/**
	        @private see static functions
	        @param {BigInteger}
	    */function PrivateKey(d){(0,_classCallCheck3.default)(this,PrivateKey);this.d=d;}(0,_createClass3.default)(PrivateKey,[{key:'toWif',value:function toWif(){var private_key=this.toBuffer();// checksum includes the version
	private_key=Buffer.concat([new Buffer([0x80]),private_key]);var checksum=Object(__WEBPACK_IMPORTED_MODULE_3__hash__["sha256"])(private_key);checksum=Object(__WEBPACK_IMPORTED_MODULE_3__hash__["sha256"])(checksum);checksum=checksum.slice(0,4);var private_wif=Buffer.concat([private_key,checksum]);return Object(__WEBPACK_IMPORTED_MODULE_2_bs58__["encode"])(private_wif);}/**
	        @return {Point}
	    */},{key:'toPublicKeyPoint',value:function toPublicKeyPoint(){var Q;return Q=secp256k1.G.multiply(this.d);}},{key:'toPublicKey',value:function toPublicKey(){if(this.public_key){return this.public_key;}return this.public_key=__WEBPACK_IMPORTED_MODULE_4__PublicKey__["a"/* default */].fromPoint(this.toPublicKeyPoint());}},{key:'toBuffer',value:function toBuffer(){return this.d.toBuffer(32);}/** ECIES */},{key:'get_shared_secret',value:function get_shared_secret(public_key){var legacy=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;public_key=toPublic(public_key);var KB=public_key.toUncompressed().toBuffer();var KBP=__WEBPACK_IMPORTED_MODULE_0_ecurve__["Point"].fromAffine(secp256k1,__WEBPACK_IMPORTED_MODULE_1_bigi___default.a.fromBuffer(KB.slice(1,33)),// x
	__WEBPACK_IMPORTED_MODULE_1_bigi___default.a.fromBuffer(KB.slice(33,65))// y
	);var r=this.toBuffer();var P=KBP.multiply(__WEBPACK_IMPORTED_MODULE_1_bigi___default.a.fromBuffer(r));var S=P.affineX.toBuffer({size:32});/*
	        the input to sha512 must be exactly 32-bytes, to match the c++ implementation
	        of get_shared_secret.  Right now S will be shorter if the most significant
	        byte(s) is zero.  Pad it back to the full 32-bytes
	        */if(!legacy&&S.length<32){var pad=new Buffer(32-S.length).fill(0);S=Buffer.concat([pad,S]);}// SHA512 used in ECIES
	return Object(__WEBPACK_IMPORTED_MODULE_3__hash__["sha512"])(S);}// /** ECIES (does not always match the Point.fromAffine version above) */
	// get_shared_secret(public_key){
	//     public_key = toPublic(public_key)
	//     var P = public_key.Q.multiply( this.d );
	//     var S = P.affineX.toBuffer({size: 32});
	//     // ECIES, adds an extra sha512
	//     return sha512(S);
	// }
	/** @throws {Error} - overflow of the key could not be derived */},{key:'child',value:function child(offset){offset=Buffer.concat([this.toPublicKey().toBuffer(),offset]);offset=Object(__WEBPACK_IMPORTED_MODULE_3__hash__["sha256"])(offset);var c=__WEBPACK_IMPORTED_MODULE_1_bigi___default.a.fromBuffer(offset);if(c.compareTo(n)>=0)throw new Error("Child offset went out of bounds, try again");var derived=this.d.add(c);//.mod(n)
	if(derived.signum()===0)throw new Error("Child offset derived to an invalid key, try again");return new PrivateKey(derived);}/* <helper_functions> */},{key:'toByteBuffer',value:function toByteBuffer(){var b=new ByteBuffer(ByteBuffer.DEFAULT_CAPACITY,ByteBuffer.LITTLE_ENDIAN);this.appendByteBuffer(b);return b.copy(0,b.offset);}},{key:'toHex',value:function toHex(){return this.toBuffer().toString('hex');}/* </helper_functions> */}],[{key:'fromBuffer',value:function fromBuffer(buf){if(!Buffer.isBuffer(buf)){throw new Error("Expecting paramter to be a Buffer type");}if(32!==buf.length){console.log('WARN: Expecting 32 bytes, instead got '+buf.length+', stack trace:',new Error().stack);}if(buf.length===0){throw new Error("Empty buffer");}return new PrivateKey(__WEBPACK_IMPORTED_MODULE_1_bigi___default.a.fromBuffer(buf));}/** @arg {string} seed - any length string.  This is private, the same seed produces the same private key every time.  */},{key:'fromSeed',value:function fromSeed(seed){// generate_private_key
	if(!(typeof seed==='string')){throw new Error('seed must be of type string');}return PrivateKey.fromBuffer(Object(__WEBPACK_IMPORTED_MODULE_3__hash__["sha256"])(seed));}/** @return {string} Wallet Import Format (still a secret, Not encrypted) */},{key:'fromWif',value:function fromWif(_private_wif){var private_wif=new Buffer(Object(__WEBPACK_IMPORTED_MODULE_2_bs58__["decode"])(_private_wif));var version=private_wif.readUInt8(0);__WEBPACK_IMPORTED_MODULE_6_assert___default.a.equal(0x80,version,'Expected version '+0x80+', instead got '+version);// checksum includes the version
	var private_key=private_wif.slice(0,-4);var checksum=private_wif.slice(-4);var new_checksum=Object(__WEBPACK_IMPORTED_MODULE_3__hash__["sha256"])(private_key);new_checksum=Object(__WEBPACK_IMPORTED_MODULE_3__hash__["sha256"])(new_checksum);new_checksum=new_checksum.slice(0,4);var isEqual=__WEBPACK_IMPORTED_MODULE_5_deep_equal___default()(checksum,new_checksum);//, 'Invalid checksum'
	if(!isEqual){throw new Error("Checksum did not match");}private_key=private_key.slice(1);return PrivateKey.fromBuffer(private_key);}},{key:'fromHex',value:function fromHex(hex){return PrivateKey.fromBuffer(new Buffer(hex,'hex'));}}]);return PrivateKey;}();/* harmony default export */__webpack_exports__["a"]=PrivateKey;var toPublic=function toPublic(data){return data==null?data:data.Q?data:__WEBPACK_IMPORTED_MODULE_4__PublicKey__["a"/* default */].fromStringOrThrow(data);};/***/},/* 11 *//***/function(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_bytebuffer__=__webpack_require__(6);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_bytebuffer___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_bytebuffer__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__error_with_cause__=__webpack_require__(41);var HEX_DUMP=process.env.npm_config__graphene_serializer_hex_dump;var Serializer=function(){function Serializer(operation_name,types){(0,_classCallCheck3.default)(this,Serializer);this.operation_name=operation_name;this.types=types;if(this.types)this.keys=(0,_keys2.default)(this.types);Serializer.printDebug=true;}(0,_createClass3.default)(Serializer,[{key:'fromByteBuffer',value:function fromByteBuffer(b){var object={};var field=null;try{var iterable=this.keys;for(var i=0,field;i<iterable.length;i++){field=iterable[i];var type=this.types[field];try{if(HEX_DUMP){if(type.operation_name){console.error(type.operation_name);}else{var o1=b.offset;type.fromByteBuffer(b);var o2=b.offset;b.offset=o1;//b.reset()
	var _b=b.copy(o1,o2);console.error(this.operation_name+'.'+field+'\t',_b.toHex());}}object[field]=type.fromByteBuffer(b);}catch(e){if(Serializer.printDebug){console.error('Error reading '+this.operation_name+'.'+field+' in data:');b.printDebug();}throw e;}}}catch(error){__WEBPACK_IMPORTED_MODULE_1__error_with_cause__["a"/* default */].throw(this.operation_name+'.'+field,error);}return object;}},{key:'appendByteBuffer',value:function appendByteBuffer(b,object){var field=null;try{var iterable=this.keys;for(var i=0,field;i<iterable.length;i++){field=iterable[i];var type=this.types[field];type.appendByteBuffer(b,object[field]);}}catch(error){try{__WEBPACK_IMPORTED_MODULE_1__error_with_cause__["a"/* default */].throw(this.operation_name+'.'+field+" = "+(0,_stringify2.default)(object[field]),error);}catch(e){// circular ref
	__WEBPACK_IMPORTED_MODULE_1__error_with_cause__["a"/* default */].throw(this.operation_name+'.'+field+" = "+object[field],error);}}return;}},{key:'fromObject',value:function fromObject(serialized_object){var result={};var field=null;try{var iterable=this.keys;for(var i=0,field;i<iterable.length;i++){field=iterable[i];var type=this.types[field];var value=serialized_object[field];//DEBUG value = value.resolve if value.resolve
	//DEBUG console.log('... value',field,value)
	var object=type.fromObject(value);result[field]=object;}}catch(error){__WEBPACK_IMPORTED_MODULE_1__error_with_cause__["a"/* default */].throw(this.operation_name+'.'+field,error);}return result;}/**
	        @arg {boolean} [debug.use_default = false] - more template friendly
	        @arg {boolean} [debug.annotate = false] - add user-friendly information
	    */},{key:'toObject',value:function toObject(){var serialized_object=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var debug=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{use_default:false,annotate:false};var result={};var field=null;try{if(!this.types)return result;var iterable=this.keys;for(var i=0,field;i<iterable.length;i++){field=iterable[i];var type=this.types[field];var object=type.toObject(typeof serialized_object!=="undefined"&&serialized_object!==null?serialized_object[field]:undefined,debug);result[field]=object;if(HEX_DUMP){var b=new __WEBPACK_IMPORTED_MODULE_0_bytebuffer___default.a(__WEBPACK_IMPORTED_MODULE_0_bytebuffer___default.a.DEFAULT_CAPACITY,__WEBPACK_IMPORTED_MODULE_0_bytebuffer___default.a.LITTLE_ENDIAN);type.appendByteBuffer(b,typeof serialized_object!=="undefined"&&serialized_object!==null?serialized_object[field]:undefined);b=b.copy(0,b.offset);console.error(this.operation_name+'.'+field,b.toHex());}}}catch(error){__WEBPACK_IMPORTED_MODULE_1__error_with_cause__["a"/* default */].throw(this.operation_name+'.'+field,error);}return result;}/** Sort by the first element in a operation */},{key:'compare',value:function compare(a,b){var first_key=this.keys[0];var first_type=this.types[first_key];var valA=a[first_key];var valB=b[first_key];if(first_type.compare)return first_type.compare(valA,valB);if(typeof valA==="number"&&typeof valB==="number")return valA-valB;var encoding=void 0;if(Buffer.isBuffer(valA)&&Buffer.isBuffer(valB)){// A binary string compare does not work.  If localeCompare is well supported that could replace HEX.  Performanance is very good so comparing HEX works.
	encoding="hex";}var strA=valA.toString(encoding);var strB=valB.toString(encoding);return strA>strB?1:strA<strB?-1:0;}// <helper_functions>
	},{key:'fromHex',value:function fromHex(hex){var b=__WEBPACK_IMPORTED_MODULE_0_bytebuffer___default.a.fromHex(hex,__WEBPACK_IMPORTED_MODULE_0_bytebuffer___default.a.LITTLE_ENDIAN);return this.fromByteBuffer(b);}},{key:'fromBuffer',value:function fromBuffer(buffer){var b=__WEBPACK_IMPORTED_MODULE_0_bytebuffer___default.a.fromBinary(buffer.toString("binary"),__WEBPACK_IMPORTED_MODULE_0_bytebuffer___default.a.LITTLE_ENDIAN);return this.fromByteBuffer(b);}},{key:'toHex',value:function toHex(object){// return this.toBuffer(object).toString("hex")
	var b=this.toByteBuffer(object);return b.toHex();}},{key:'toByteBuffer',value:function toByteBuffer(object){var b=new __WEBPACK_IMPORTED_MODULE_0_bytebuffer___default.a(__WEBPACK_IMPORTED_MODULE_0_bytebuffer___default.a.DEFAULT_CAPACITY,__WEBPACK_IMPORTED_MODULE_0_bytebuffer___default.a.LITTLE_ENDIAN);this.appendByteBuffer(b,object);return b.copy(0,b.offset);}},{key:'toBuffer',value:function toBuffer(object){return new Buffer(this.toByteBuffer(object).toBinary(),'binary');}}]);return Serializer;}();/* harmony default export */__webpack_exports__["a"]=Serializer;/***/},/* 12 *//***/function(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__ecc_src_PublicKey__=__webpack_require__(5);var FastParser=function(){function FastParser(){(0,_classCallCheck3.default)(this,FastParser);}(0,_createClass3.default)(FastParser,null,[{key:'fixed_data',value:function fixed_data(b,len,buffer){if(!b){return;}if(buffer){var data=buffer.slice(0,len).toString('binary');b.append(data,'binary');while(len-->data.length){b.writeUint8(0);}}else{var b_copy=b.copy(b.offset,b.offset+len);b.skip(len);return new Buffer(b_copy.toBinary(),'binary');}}},{key:'public_key',value:function public_key(b,_public_key){if(!b){return;}if(_public_key){var buffer=_public_key.toBuffer();b.append(buffer.toString('binary'),'binary');return;}else{buffer=FastParser.fixed_data(b,33);return __WEBPACK_IMPORTED_MODULE_0__ecc_src_PublicKey__["a"/* default */].fromBuffer(buffer);}}},{key:'ripemd160',value:function ripemd160(b,_ripemd){if(!b){return;}if(_ripemd){FastParser.fixed_data(b,20,_ripemd);return;}else{return FastParser.fixed_data(b,20);}}},{key:'time_point_sec',value:function time_point_sec(b,epoch){if(epoch){epoch=Math.ceil(epoch/1000);b.writeInt32(epoch);return;}else{epoch=b.readInt32();// fc::time_point_sec
	return new Date(epoch*1000);}}}]);return FastParser;}();/* harmony default export */__webpack_exports__["a"]=FastParser;/***/},/* 13 *//***/function(module,exports,__webpack_require__){var basex=__webpack_require__(46);var ALPHABET='123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';module.exports=basex(ALPHABET);/***/},/* 14 *//***/function(module,exports){module.exports=__webpack_require__(91);/***/},/* 15 *//***/function(module,exports,__webpack_require__){var pSlice=Array.prototype.slice;var objectKeys=__webpack_require__(49);var isArguments=__webpack_require__(50);var deepEqual=module.exports=function(actual,expected,opts){if(!opts)opts={};// 7.1. All identical values are equivalent, as determined by ===.
	if(actual===expected){return true;}else if(actual instanceof Date&&expected instanceof Date){return actual.getTime()===expected.getTime();// 7.3. Other pairs that do not both pass typeof value == 'object',
	// equivalence is determined by ==.
	}else if(!actual||!expected||(typeof actual==='undefined'?'undefined':(0,_typeof3.default)(actual))!='object'&&(typeof expected==='undefined'?'undefined':(0,_typeof3.default)(expected))!='object'){return opts.strict?actual===expected:actual==expected;// 7.4. For all other Object pairs, including Array objects, equivalence is
	// determined by having the same number of owned properties (as verified
	// with Object.prototype.hasOwnProperty.call), the same set of keys
	// (although not necessarily the same order), equivalent values for every
	// corresponding key, and an identical 'prototype' property. Note: this
	// accounts for both named and indexed properties on Arrays.
	}else{return objEquiv(actual,expected,opts);}};function isUndefinedOrNull(value){return value===null||value===undefined;}function isBuffer(x){if(!x||(typeof x==='undefined'?'undefined':(0,_typeof3.default)(x))!=='object'||typeof x.length!=='number')return false;if(typeof x.copy!=='function'||typeof x.slice!=='function'){return false;}if(x.length>0&&typeof x[0]!=='number')return false;return true;}function objEquiv(a,b,opts){var i,key;if(isUndefinedOrNull(a)||isUndefinedOrNull(b))return false;// an identical 'prototype' property.
	if(a.prototype!==b.prototype)return false;//~~~I've managed to break Object.keys through screwy arguments passing.
	//   Converting to array solves the problem.
	if(isArguments(a)){if(!isArguments(b)){return false;}a=pSlice.call(a);b=pSlice.call(b);return deepEqual(a,b,opts);}if(isBuffer(a)){if(!isBuffer(b)){return false;}if(a.length!==b.length)return false;for(i=0;i<a.length;i++){if(a[i]!==b[i])return false;}return true;}try{var ka=objectKeys(a),kb=objectKeys(b);}catch(e){//happens when one is a string literal and the other isn't
	return false;}// having the same number of owned properties (keys incorporates
	// hasOwnProperty)
	if(ka.length!=kb.length)return false;//the same set of keys (although not necessarily the same order),
	ka.sort();kb.sort();//~~~cheap key test
	for(i=ka.length-1;i>=0;i--){if(ka[i]!=kb[i])return false;}//equivalent values for every corresponding key, and
	//~~~possibly expensive deep test
	for(i=ka.length-1;i>=0;i--){key=ka[i];if(!deepEqual(a[key],b[key],opts))return false;}return(typeof a==='undefined'?'undefined':(0,_typeof3.default)(a))===(typeof b==='undefined'?'undefined':(0,_typeof3.default)(b));}/***/},/* 16 *//***/function(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__SerializerValidation__=__webpack_require__(9);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__FastParser__=__webpack_require__(12);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__chain_src_ChainTypes__=__webpack_require__(7);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__chain_src_ObjectId__=__webpack_require__(28);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__ecc__=__webpack_require__(17);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5_cybexjs_ws__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5_cybexjs_ws___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_cybexjs_ws__);// Low-level types that make up operations
	var Types={};var HEX_DUMP=process.env.npm_config__graphene_serializer_hex_dump;Types.uint8={fromByteBuffer:function fromByteBuffer(b){return b.readUint8();},appendByteBuffer:function appendByteBuffer(b,object){__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].require_range(0,0xFF,object,'uint8 '+object);b.writeUint8(object);return;},fromObject:function fromObject(object){__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].require_range(0,0xFF,object,'uint8 '+object);return object;},toObject:function toObject(object){var debug=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(debug.use_default&&object===undefined){return 0;}__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].require_range(0,0xFF,object,'uint8 '+object);return parseInt(object);}};Types.uint16={fromByteBuffer:function fromByteBuffer(b){return b.readUint16();},appendByteBuffer:function appendByteBuffer(b,object){__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].require_range(0,0xFFFF,object,'uint16 '+object);b.writeUint16(object);return;},fromObject:function fromObject(object){__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].require_range(0,0xFFFF,object,'uint16 '+object);return object;},toObject:function toObject(object){var debug=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(debug.use_default&&object===undefined){return 0;}__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].require_range(0,0xFFFF,object,'uint16 '+object);return parseInt(object);}};Types.uint32={fromByteBuffer:function fromByteBuffer(b){return b.readUint32();},appendByteBuffer:function appendByteBuffer(b,object){__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].require_range(0,0xFFFFFFFF,object,'uint32 '+object);b.writeUint32(object);return;},fromObject:function fromObject(object){__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].require_range(0,0xFFFFFFFF,object,'uint32 '+object);return object;},toObject:function toObject(object){var debug=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(debug.use_default&&object===undefined){return 0;}__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].require_range(0,0xFFFFFFFF,object,'uint32 '+object);return parseInt(object);}};var MIN_SIGNED_32=-1*Math.pow(2,31);var MAX_SIGNED_32=Math.pow(2,31)-1;Types.varint32={fromByteBuffer:function fromByteBuffer(b){return b.readVarint32();},appendByteBuffer:function appendByteBuffer(b,object){__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].require_range(MIN_SIGNED_32,MAX_SIGNED_32,object,'uint32 '+object);b.writeVarint32(object);return;},fromObject:function fromObject(object){__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].require_range(MIN_SIGNED_32,MAX_SIGNED_32,object,'uint32 '+object);return object;},toObject:function toObject(object){var debug=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(debug.use_default&&object===undefined){return 0;}__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].require_range(MIN_SIGNED_32,MAX_SIGNED_32,object,'uint32 '+object);return parseInt(object);}};Types.int64={fromByteBuffer:function fromByteBuffer(b){return b.readInt64();},appendByteBuffer:function appendByteBuffer(b,object){__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(object);b.writeInt64(__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].to_long(object));return;},fromObject:function fromObject(object){__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(object);return __WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].to_long(object);},toObject:function toObject(object){var debug=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(debug.use_default&&object===undefined){return"0";}__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(object);return __WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].to_long(object).toString();}};Types.uint64={fromByteBuffer:function fromByteBuffer(b){return b.readUint64();},appendByteBuffer:function appendByteBuffer(b,object){b.writeUint64(__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].to_long(__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].unsigned(object)));return;},fromObject:function fromObject(object){return __WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].to_long(__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].unsigned(object));},toObject:function toObject(object){var debug=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(debug.use_default&&object===undefined){return"0";}return __WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].to_long(object).toString();}};Types.string={fromByteBuffer:function fromByteBuffer(b){var b_copy;var len=b.readVarint32();b_copy=b.copy(b.offset,b.offset+len),b.skip(len);return new Buffer(b_copy.toBinary(),'binary');},appendByteBuffer:function appendByteBuffer(b,object){__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(object);b.writeVarint32(object.length);b.append(object.toString('binary'),'binary');return;},fromObject:function fromObject(object){__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(object);return new Buffer(object);},toObject:function toObject(object){var debug=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(debug.use_default&&object===undefined){return"";}return object.toString();}};Types.bytes=function(size){return{fromByteBuffer:function fromByteBuffer(b){if(size===undefined){var b_copy;var len=b.readVarint32();b_copy=b.copy(b.offset,b.offset+len),b.skip(len);return new Buffer(b_copy.toBinary(),'binary');}else{b_copy=b.copy(b.offset,b.offset+size),b.skip(size);return new Buffer(b_copy.toBinary(),'binary');}},appendByteBuffer:function appendByteBuffer(b,object){__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(object);if(typeof object==="string")object=new Buffer(object,"hex");if(size===undefined){b.writeVarint32(object.length);}b.append(object.toString('binary'),'binary');return;},fromObject:function fromObject(object){__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(object);if(Buffer.isBuffer(object))return object;return new Buffer(object,'hex');},toObject:function toObject(object){var debug=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(debug.use_default&&object===undefined){var zeros=function zeros(num){return new Array(num).join("00");};return zeros(size);}__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(object);return object.toString('hex');}};};Types.bool={fromByteBuffer:function fromByteBuffer(b){return b.readUint8()===1;},appendByteBuffer:function appendByteBuffer(b,object){// supports boolean or integer
	b.writeUint8(JSON.parse(object)?1:0);return;},fromObject:function fromObject(object){return JSON.parse(object)?true:false;},toObject:function toObject(object){var debug=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(debug.use_default&&object===undefined){return false;}return JSON.parse(object)?true:false;}};Types.void={fromByteBuffer:function fromByteBuffer(b){throw new Error("(void) undefined type");},appendByteBuffer:function appendByteBuffer(b,object){throw new Error("(void) undefined type");},fromObject:function fromObject(object){throw new Error("(void) undefined type");},toObject:function toObject(object){var debug=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(debug.use_default&&object===undefined){return undefined;}throw new Error("(void) undefined type");}};Types.array=function(st_operation){return{fromByteBuffer:function fromByteBuffer(b){var size=b.readVarint32();if(HEX_DUMP){console.log("varint32 size = "+size.toString(16));}var result=[];for(var i=0;0<size?i<size:i>size;0<size?i++:i++){result.push(st_operation.fromByteBuffer(b));}return sortOperation(result,st_operation);},appendByteBuffer:function appendByteBuffer(b,object){__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(object);object=sortOperation(object,st_operation);b.writeVarint32(object.length);for(var i=0,o;i<object.length;i++){o=object[i];st_operation.appendByteBuffer(b,o);}},fromObject:function fromObject(object){__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(object);object=sortOperation(object,st_operation);var result=[];for(var i=0,o;i<object.length;i++){o=object[i];result.push(st_operation.fromObject(o));}return result;},toObject:function toObject(object){var debug=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(debug.use_default&&object===undefined){return[st_operation.toObject(object,debug)];}__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(object);object=sortOperation(object,st_operation);var result=[];for(var i=0,o;i<object.length;i++){o=object[i];result.push(st_operation.toObject(o,debug));}return result;}};};Types.time_point_sec={fromByteBuffer:function fromByteBuffer(b){return b.readUint32();},appendByteBuffer:function appendByteBuffer(b,object){if(typeof object!=="number")object=Types.time_point_sec.fromObject(object);b.writeUint32(object);return;},fromObject:function fromObject(object){__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(object);if(typeof object==="number")return object;if(object.getTime)return Math.floor(object.getTime()/1000);if(typeof object!=="string")throw new Error("Unknown date type: "+object);// if(typeof object === "string" && !/Z$/.test(object))
	//     object = object + "Z"
	return Math.floor(new Date(object).getTime()/1000);},toObject:function toObject(object){var debug=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(debug.use_default&&object===undefined)return new Date(0).toISOString().split('.')[0];__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(object);if(typeof object==="string")return object;if(object.getTime)return object.toISOString().split('.')[0];var int=parseInt(object);__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].require_range(0,0xFFFFFFFF,int,'uint32 '+object);return new Date(int*1000).toISOString().split('.')[0];}};Types.set=function(st_operation){return{validate:function validate(array){var dup_map={};for(var i=0,o;i<array.length;i++){o=array[i];var ref;if(ref=typeof o==='undefined'?'undefined':(0,_typeof3.default)(o),['string','number'].indexOf(ref)>=0){if(dup_map[o]!==undefined){throw new Error("duplicate (set)");}dup_map[o]=true;}}return sortOperation(array,st_operation);},fromByteBuffer:function fromByteBuffer(b){var size=b.readVarint32();if(HEX_DUMP){console.log("varint32 size = "+size.toString(16));}return this.validate(function(){var result=[];for(var i=0;0<size?i<size:i>size;0<size?i++:i++){result.push(st_operation.fromByteBuffer(b));}return result;}());},appendByteBuffer:function appendByteBuffer(b,object){if(!object){object=[];}b.writeVarint32(object.length);var iterable=this.validate(object);for(var i=0,o;i<iterable.length;i++){o=iterable[i];st_operation.appendByteBuffer(b,o);}return;},fromObject:function fromObject(object){if(!object){object=[];}return this.validate(function(){var result=[];for(var i=0,o;i<object.length;i++){o=object[i];result.push(st_operation.fromObject(o));}return result;}());},toObject:function toObject(object){var debug=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(debug.use_default&&object===undefined){return[st_operation.toObject(object,debug)];}if(!object){object=[];}return this.validate(function(){var result=[];for(var i=0,o;i<object.length;i++){o=object[i];result.push(st_operation.toObject(o,debug));}return result;}());}};};// global_parameters_update_operation current_fees
	Types.fixed_array=function(count,st_operation){return{fromByteBuffer:function fromByteBuffer(b){var i,j,ref,results;results=[];for(i=j=0,ref=count;j<ref;i=j+=1){results.push(st_operation.fromByteBuffer(b));}return sortOperation(results,st_operation);},appendByteBuffer:function appendByteBuffer(b,object){var i,j,ref;if(count!==0){__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(object);object=sortOperation(object,st_operation);}for(i=j=0,ref=count;j<ref;i=j+=1){st_operation.appendByteBuffer(b,object[i]);}},fromObject:function fromObject(object){var i,j,ref,results;if(count!==0){__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(object);}results=[];for(i=j=0,ref=count;j<ref;i=j+=1){results.push(st_operation.fromObject(object[i]));}return results;},toObject:function toObject(object,debug){var i,j,k,ref,ref1,results,results1;if(debug==null){debug={};}if(debug.use_default&&object===void 0){results=[];for(i=j=0,ref=count;j<ref;i=j+=1){results.push(st_operation.toObject(void 0,debug));}return results;}if(count!==0){__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(object);}results1=[];for(i=k=0,ref1=count;k<ref1;i=k+=1){results1.push(st_operation.toObject(object[i],debug));}return results1;}};};/* Supports instance numbers (11) or object types (1.2.11).  Object type
	Validation is enforced when an object type is used. */var id_type=function id_type(reserved_spaces,object_type){__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(reserved_spaces,"reserved_spaces");__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(object_type,"object_type");return{fromByteBuffer:function fromByteBuffer(b){return b.readVarint32();},appendByteBuffer:function appendByteBuffer(b,object){__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(object);if(object.resolve!==undefined){object=object.resolve;}// convert 1.2.n into just n
	if(/^[0-9]+\.[0-9]+\.[0-9]+$/.test(object)){object=__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].get_instance(reserved_spaces,object_type,object);}b.writeVarint32(__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].to_number(object));return;},fromObject:function fromObject(object){__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(object);if(object.resolve!==undefined){object=object.resolve;}if(__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].is_digits(object)){return __WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].to_number(object);}return __WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].get_instance(reserved_spaces,object_type,object);},toObject:function toObject(object){var debug=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var object_type_id=__WEBPACK_IMPORTED_MODULE_2__chain_src_ChainTypes__["a"/* default */].object_type[object_type];if(debug.use_default&&object===undefined){return reserved_spaces+'.'+object_type_id+'.0';}__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(object);if(object.resolve!==undefined){object=object.resolve;}if(/^[0-9]+\.[0-9]+\.[0-9]+$/.test(object)){object=__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].get_instance(reserved_spaces,object_type,object);}return reserved_spaces+'.'+object_type_id+'.'+object;}};};Types.protocol_id_type=function(name){__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(name,"name");return id_type(__WEBPACK_IMPORTED_MODULE_2__chain_src_ChainTypes__["a"/* default */].reserved_spaces.protocol_ids,name);};Types.object_id_type={fromByteBuffer:function fromByteBuffer(b){return __WEBPACK_IMPORTED_MODULE_3__chain_src_ObjectId__["a"/* default */].fromByteBuffer(b);},appendByteBuffer:function appendByteBuffer(b,object){__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(object);if(object.resolve!==undefined){object=object.resolve;}object=__WEBPACK_IMPORTED_MODULE_3__chain_src_ObjectId__["a"/* default */].fromString(object);object.appendByteBuffer(b);return;},fromObject:function fromObject(object){__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(object);if(object.resolve!==undefined){object=object.resolve;}return __WEBPACK_IMPORTED_MODULE_3__chain_src_ObjectId__["a"/* default */].fromString(object);},toObject:function toObject(object){var debug=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(debug.use_default&&object===undefined){return"0.0.0";}__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(object);if(object.resolve!==undefined){object=object.resolve;}object=__WEBPACK_IMPORTED_MODULE_3__chain_src_ObjectId__["a"/* default */].fromString(object);return object.toString();}};Types.vote_id={TYPE:0x000000FF,ID:0xFFFFFF00,fromByteBuffer:function fromByteBuffer(b){var value=b.readUint32();return{type:value&this.TYPE,id:value&this.ID};},appendByteBuffer:function appendByteBuffer(b,object){__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(object);if(object==="string")object=Types.vote_id.fromObject(object);var value=object.id<<8|object.type;b.writeUint32(value);return;},fromObject:function fromObject(object){__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(object,"(type vote_id)");if((typeof object==='undefined'?'undefined':(0,_typeof3.default)(object))==="object"){__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(object.type,"type");__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(object.id,"id");return object;}__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].require_test(/^[0-9]+:[0-9]+$/,object,'vote_id format '+object);var _object$split=object.split(':'),_object$split2=(0,_slicedToArray3.default)(_object$split,2),type=_object$split2[0],id=_object$split2[1];__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].require_range(0,0xff,type,'vote type '+object);__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].require_range(0,0xffffff,id,'vote id '+object);return{type:type,id:id};},toObject:function toObject(object){var debug=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(debug.use_default&&object===undefined){return"0:0";}__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(object);if(typeof object==="string")object=Types.vote_id.fromObject(object);return object.type+":"+object.id;},compare:function compare(a,b){if((typeof a==='undefined'?'undefined':(0,_typeof3.default)(a))!=="object")a=Types.vote_id.fromObject(a);if((typeof b==='undefined'?'undefined':(0,_typeof3.default)(b))!=="object")b=Types.vote_id.fromObject(b);return parseInt(a.id)-parseInt(b.id);}};Types.optional=function(st_operation){__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(st_operation,"st_operation");return{fromByteBuffer:function fromByteBuffer(b){if(!(b.readUint8()===1)){return undefined;}return st_operation.fromByteBuffer(b);},appendByteBuffer:function appendByteBuffer(b,object){if(object!==null&&object!==undefined){b.writeUint8(1);st_operation.appendByteBuffer(b,object);}else{b.writeUint8(0);}return;},fromObject:function fromObject(object){if(object===undefined){return undefined;}return st_operation.fromObject(object);},toObject:function toObject(object){var debug=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};// toObject is only null save if use_default is true
	var result_object=function(){if(!debug.use_default&&object===undefined){return undefined;}else{return st_operation.toObject(object,debug);}}();if(debug.annotate){if((typeof result_object==='undefined'?'undefined':(0,_typeof3.default)(result_object))==="object"){result_object.__optional="parent is optional";}else{result_object={__optional:result_object};}}return result_object;}};};Types.static_variant=function(_st_operations){return{nosort:true,st_operations:_st_operations,fromByteBuffer:function fromByteBuffer(b){var type_id=b.readVarint32();var st_operation=this.st_operations[type_id];if(HEX_DUMP){console.error('static_variant id 0x'+type_id.toString(16)+' ('+type_id+')');}__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(st_operation,'operation '+type_id);return[type_id,st_operation.fromByteBuffer(b)];},appendByteBuffer:function appendByteBuffer(b,object){__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(object);var type_id=object[0];var st_operation=this.st_operations[type_id];__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(st_operation,'operation '+type_id);b.writeVarint32(type_id);st_operation.appendByteBuffer(b,object[1]);return;},fromObject:function fromObject(object){__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(object);var type_id=object[0];var st_operation=this.st_operations[type_id];__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(st_operation,'operation '+type_id);return[type_id,st_operation.fromObject(object[1])];},toObject:function toObject(object){var debug=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(debug.use_default&&object===undefined){return[0,this.st_operations[0].toObject(undefined,debug)];}__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(object);var type_id=object[0];var st_operation=this.st_operations[type_id];__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(st_operation,'operation '+type_id);return[type_id,st_operation.toObject(object[1],debug)];}};};Types.map=function(key_st_operation,value_st_operation){return{validate:function validate(array){if(!Array.isArray(array)){throw new Error("expecting array");}var dup_map={};for(var i=0,o;i<array.length;i++){o=array[i];var ref;if(!(o.length===2)){throw new Error("expecting two elements");}if(ref=(0,_typeof3.default)(o[0]),['number','string'].indexOf(ref)>=0){if(dup_map[o[0]]!==undefined){throw new Error("duplicate (map)");}dup_map[o[0]]=true;}}return sortOperation(array,key_st_operation);},fromByteBuffer:function fromByteBuffer(b){var result=[];var end=b.readVarint32();for(var i=0;0<end?i<end:i>end;0<end?i++:i++){result.push([key_st_operation.fromByteBuffer(b),value_st_operation.fromByteBuffer(b)]);}return this.validate(result);},appendByteBuffer:function appendByteBuffer(b,object){this.validate(object);b.writeVarint32(object.length);for(var i=0,o;i<object.length;i++){o=object[i];key_st_operation.appendByteBuffer(b,o[0]);value_st_operation.appendByteBuffer(b,o[1]);}return;},fromObject:function fromObject(object){__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(object);var result=[];for(var i=0,o;i<object.length;i++){o=object[i];result.push([key_st_operation.fromObject(o[0]),value_st_operation.fromObject(o[1])]);}return this.validate(result);},toObject:function toObject(object){var debug=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(debug.use_default&&object===undefined){return[[key_st_operation.toObject(undefined,debug),value_st_operation.toObject(undefined,debug)]];}__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(object);object=this.validate(object);var result=[];for(var i=0,o;i<object.length;i++){o=object[i];result.push([key_st_operation.toObject(o[0],debug),value_st_operation.toObject(o[1],debug)]);}return result;}};};Types.public_key={toPublic:function toPublic(object){if(object.resolve!==undefined){object=object.resolve;}return object==null?object:object.Q?object:__WEBPACK_IMPORTED_MODULE_4__ecc__["b"/* PublicKey */].fromStringOrThrow(object);},fromByteBuffer:function fromByteBuffer(b){return __WEBPACK_IMPORTED_MODULE_1__FastParser__["a"/* default */].public_key(b);},appendByteBuffer:function appendByteBuffer(b,object){__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(object);__WEBPACK_IMPORTED_MODULE_1__FastParser__["a"/* default */].public_key(b,Types.public_key.toPublic(object));return;},fromObject:function fromObject(object){__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(object);if(object.Q){return object;}return Types.public_key.toPublic(object);},toObject:function toObject(object){var debug=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(debug.use_default&&object===undefined){return __WEBPACK_IMPORTED_MODULE_5_cybexjs_ws__["ChainConfig"].address_prefix+"859gxfnXyUriMgUeThh1fWv3oqcpLFyHa3TfFYC4PK2HqhToVM";}__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(object);return object.toString();},compare:function compare(a,b){return strCmp(a.toAddressString(),b.toAddressString());}};Types.address={_to_address:function _to_address(object){__WEBPACK_IMPORTED_MODULE_0__SerializerValidation__["a"/* default */].required(object);if(object.addy){return object;}return __WEBPACK_IMPORTED_MODULE_4__ecc__["a"/* Address */].fromString(object);},fromByteBuffer:function fromByteBuffer(b){return new __WEBPACK_IMPORTED_MODULE_4__ecc__["a"/* Address */](__WEBPACK_IMPORTED_MODULE_1__FastParser__["a"/* default */].ripemd160(b));},appendByteBuffer:function appendByteBuffer(b,object){__WEBPACK_IMPORTED_MODULE_1__FastParser__["a"/* default */].ripemd160(b,Types.address._to_address(object).toBuffer());return;},fromObject:function fromObject(object){return Types.address._to_address(object);},toObject:function toObject(object){var debug=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(debug.use_default&&object===undefined){return __WEBPACK_IMPORTED_MODULE_5_cybexjs_ws__["ChainConfig"].address_prefix+"664KmHxSuQyDsfwo4WEJvWpzg1QKdg67S";}return Types.address._to_address(object).toString();},compare:function compare(a,b){return strCmp(a.toString(),b.toString());}};var strCmp=function strCmp(a,b){return a>b?1:a<b?-1:0;};var firstEl=function firstEl(el){return Array.isArray(el)?el[0]:el;};var sortOperation=function sortOperation(array,st_operation){return st_operation.nosort?array:st_operation.compare?array.sort(function(a,b){return st_operation.compare(firstEl(a),firstEl(b));}):// custom compare operation
	array.sort(function(a,b){return typeof firstEl(a)==="number"&&typeof firstEl(b)==="number"?firstEl(a)-firstEl(b):// A binary string compare does not work. Performanance is very good so HEX is used..  localeCompare is another option.
	Buffer.isBuffer(firstEl(a))&&Buffer.isBuffer(firstEl(b))?strCmp(firstEl(a).toString("hex"),firstEl(b).toString("hex")):strCmp(firstEl(a).toString(),firstEl(b).toString());});};/* harmony default export */__webpack_exports__["a"]=Types;/***/},/* 17 *//***/function(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__src_address__=__webpack_require__(18);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__src_aes__=__webpack_require__(19);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__src_PrivateKey__=__webpack_require__(10);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__src_PublicKey__=__webpack_require__(5);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__src_signature__=__webpack_require__(31);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5__src_BrainKey__=__webpack_require__(33);/* harmony import */var __WEBPACK_IMPORTED_MODULE_6__src_hash__=__webpack_require__(2);/* harmony import */var __WEBPACK_IMPORTED_MODULE_7__src_KeyUtils__=__webpack_require__(20);/* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return __WEBPACK_IMPORTED_MODULE_0__src_address__["a"];});/* unused harmony reexport Aes *//* unused harmony reexport PrivateKey *//* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__,"b",function(){return __WEBPACK_IMPORTED_MODULE_3__src_PublicKey__["a"];});/* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__,"c",function(){return __WEBPACK_IMPORTED_MODULE_4__src_signature__["a"];});/* unused harmony reexport brainKey *//* harmony reexport (module object) */__webpack_require__.d(__webpack_exports__,"d",function(){return __WEBPACK_IMPORTED_MODULE_6__src_hash__;});/* unused harmony reexport key *//***/},/* 18 *//***/function(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_assert__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_assert___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_assert__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_cybexjs_ws__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_cybexjs_ws___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_cybexjs_ws__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__hash__=__webpack_require__(2);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3_bs58__=__webpack_require__(13);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3_bs58___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_bs58__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4_deep_equal__=__webpack_require__(15);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4_deep_equal___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_deep_equal__);/** Addresses are shortened non-reversable hashes of a public key.  The full PublicKey is preferred.
	    @deprecated
	*/var Address=function(){function Address(addy){(0,_classCallCheck3.default)(this,Address);this.addy=addy;}(0,_createClass3.default)(Address,[{key:'toBuffer',value:function toBuffer(){return this.addy;}},{key:'toString',value:function toString(){var address_prefix=arguments.length>0&&arguments[0]!==undefined?arguments[0]:__WEBPACK_IMPORTED_MODULE_1_cybexjs_ws__["ChainConfig"].address_prefix;var checksum=Object(__WEBPACK_IMPORTED_MODULE_2__hash__["ripemd160"])(this.addy);var addy=Buffer.concat([this.addy,checksum.slice(0,4)]);return address_prefix+Object(__WEBPACK_IMPORTED_MODULE_3_bs58__["encode"])(addy);}}],[{key:'fromBuffer',value:function fromBuffer(buffer){var _hash=Object(__WEBPACK_IMPORTED_MODULE_2__hash__["sha512"])(buffer);var addy=Object(__WEBPACK_IMPORTED_MODULE_2__hash__["ripemd160"])(_hash);return new Address(addy);}},{key:'fromString',value:function fromString(string){var address_prefix=arguments.length>1&&arguments[1]!==undefined?arguments[1]:__WEBPACK_IMPORTED_MODULE_1_cybexjs_ws__["ChainConfig"].address_prefix;var prefix=string.slice(0,address_prefix.length);__WEBPACK_IMPORTED_MODULE_0_assert___default.a.equal(address_prefix,prefix,'Expecting key to begin with '+address_prefix+', instead got '+prefix);var addy=string.slice(address_prefix.length);addy=new Buffer(Object(__WEBPACK_IMPORTED_MODULE_3_bs58__["decode"])(addy),'binary');var checksum=addy.slice(-4);addy=addy.slice(0,-4);var new_checksum=Object(__WEBPACK_IMPORTED_MODULE_2__hash__["ripemd160"])(addy);new_checksum=new_checksum.slice(0,4);var isEqual=__WEBPACK_IMPORTED_MODULE_4_deep_equal___default()(checksum,new_checksum);//, 'Invalid checksum'
	if(!isEqual){throw new Error("Checksum did not match");}return new Address(addy);}},{key:'fromPublic',/** @return Address - Compressed PTS format (by default) */value:function fromPublic(public_key){var compressed=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var version=arguments.length>2&&arguments[2]!==undefined?arguments[2]:56;var sha2=Object(__WEBPACK_IMPORTED_MODULE_2__hash__["sha256"])(public_key.toBuffer(compressed));var rep=Object(__WEBPACK_IMPORTED_MODULE_2__hash__["ripemd160"])(sha2);var versionBuffer=new Buffer(1);versionBuffer.writeUInt8(0xFF&version,0);var addr=Buffer.concat([versionBuffer,rep]);var check=Object(__WEBPACK_IMPORTED_MODULE_2__hash__["sha256"])(addr);check=Object(__WEBPACK_IMPORTED_MODULE_2__hash__["sha256"])(check);var buffer=Buffer.concat([addr,check.slice(0,4)]);return new Address(Object(__WEBPACK_IMPORTED_MODULE_2__hash__["ripemd160"])(buffer));}}]);return Address;}();/* harmony default export */__webpack_exports__["a"]=Address;/***/},/* 19 *//***/function(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_crypto_js_aes__=__webpack_require__(51);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_crypto_js_aes___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_crypto_js_aes__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_crypto_js_enc_hex__=__webpack_require__(56);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_crypto_js_enc_hex___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_crypto_js_enc_hex__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2_crypto_js_enc_base64__=__webpack_require__(29);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2_crypto_js_enc_base64___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_crypto_js_enc_base64__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3_assert__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3_assert___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_assert__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4_bytebuffer__=__webpack_require__(6);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4_bytebuffer___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_bytebuffer__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5__hash__=__webpack_require__(2);// https://code.google.com/p/crypto-js
	/** Provides symetric encrypt and decrypt via AES. */var Aes=function(){/** @private */function Aes(iv,key){(0,_classCallCheck3.default)(this,Aes);this.iv=iv,this.key=key;}/** This is an excellent way to ensure that all references to Aes can not operate anymore (example: a wallet becomes locked).  An application should ensure there is only one Aes object instance for a given secret `seed`. */(0,_createClass3.default)(Aes,[{key:'clear',value:function clear(){return this.iv=this.key=undefined;}/** @arg {string} seed - secret seed may be used to encrypt or decrypt. */},{key:'_decrypt_word_array',/** @private */value:function _decrypt_word_array(cipher){// https://code.google.com/p/crypto-js/#Custom_Key_and_IV
	// see wallet_records.cpp master_key::decrypt_key
	return __WEBPACK_IMPORTED_MODULE_0_crypto_js_aes___default.a.decrypt({ciphertext:cipher,salt:null},this.key,{iv:this.iv});}/** @private */},{key:'_encrypt_word_array',value:function _encrypt_word_array(plaintext){//https://code.google.com/p/crypto-js/issues/detail?id=85
	var cipher=__WEBPACK_IMPORTED_MODULE_0_crypto_js_aes___default.a.encrypt(plaintext,this.key,{iv:this.iv});return __WEBPACK_IMPORTED_MODULE_2_crypto_js_enc_base64___default.a.parse(cipher.toString());}/** This method does not use a checksum, the returned data must be validated some other way.
	        @arg {string} ciphertext
	        @return {Buffer} binary
	    */},{key:'decrypt',value:function decrypt(ciphertext){if(typeof ciphertext==="string"){ciphertext=new Buffer(ciphertext,'binary');}if(!Buffer.isBuffer(ciphertext)){throw new Error("buffer required");}__WEBPACK_IMPORTED_MODULE_3_assert___default()(ciphertext,"Missing cipher text");// hex is the only common format
	var hex=this.decryptHex(ciphertext.toString('hex'));return new Buffer(hex,'hex');}/** This method does not use a checksum, the returned data must be validated some other way.
	        @arg {string} plaintext
	        @return {Buffer} binary
	    */},{key:'encrypt',value:function encrypt(plaintext){if(typeof plaintext==="string"){plaintext=new Buffer(plaintext,'binary');}if(!Buffer.isBuffer(plaintext)){throw new Error("buffer required");}//assert plaintext, "Missing plain text"
	// hex is the only common format
	var hex=this.encryptHex(plaintext.toString('hex'));return new Buffer(hex,'hex');}/** This method does not use a checksum, the returned data must be validated some other way.
	        @arg {string|Buffer} plaintext
	        @return {string} hex
	    */},{key:'encryptToHex',value:function encryptToHex(plaintext){if(typeof plaintext==="string"){plaintext=new Buffer(plaintext,'binary');}if(!Buffer.isBuffer(plaintext)){throw new Error("buffer required");}//assert plaintext, "Missing plain text"
	// hex is the only common format
	return this.encryptHex(plaintext.toString('hex'));}/** This method does not use a checksum, the returned data must be validated some other way.
	        @arg {string} cipher - hex
	        @return {string} binary (could easily be readable text)
	    */},{key:'decryptHex',value:function decryptHex(cipher){__WEBPACK_IMPORTED_MODULE_3_assert___default()(cipher,"Missing cipher text");// Convert data into word arrays (used by Crypto)
	var cipher_array=__WEBPACK_IMPORTED_MODULE_1_crypto_js_enc_hex___default.a.parse(cipher);var plainwords=this._decrypt_word_array(cipher_array);return __WEBPACK_IMPORTED_MODULE_1_crypto_js_enc_hex___default.a.stringify(plainwords);}/** This method does not use a checksum, the returned data must be validated some other way.
	        @arg {string} cipher - hex
	        @return {Buffer} encoded as specified by the parameter
	    */},{key:'decryptHexToBuffer',value:function decryptHexToBuffer(cipher){__WEBPACK_IMPORTED_MODULE_3_assert___default()(cipher,"Missing cipher text");// Convert data into word arrays (used by Crypto)
	var cipher_array=__WEBPACK_IMPORTED_MODULE_1_crypto_js_enc_hex___default.a.parse(cipher);var plainwords=this._decrypt_word_array(cipher_array);var plainhex=__WEBPACK_IMPORTED_MODULE_1_crypto_js_enc_hex___default.a.stringify(plainwords);return new Buffer(plainhex,'hex');}/** This method does not use a checksum, the returned data must be validated some other way.
	        @arg {string} cipher - hex
	        @arg {string} [encoding = 'binary'] - a valid Buffer encoding
	        @return {String} encoded as specified by the parameter
	    */},{key:'decryptHexToText',value:function decryptHexToText(cipher){var encoding=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'binary';return this.decryptHexToBuffer(cipher).toString(encoding);}/** This method does not use a checksum, the returned data must be validated some other way.
	        @arg {string} plainhex - hex format
	        @return {String} hex
	    */},{key:'encryptHex',value:function encryptHex(plainhex){var plain_array=__WEBPACK_IMPORTED_MODULE_1_crypto_js_enc_hex___default.a.parse(plainhex);var cipher_array=this._encrypt_word_array(plain_array);return __WEBPACK_IMPORTED_MODULE_1_crypto_js_enc_hex___default.a.stringify(cipher_array);}}],[{key:'fromSeed',value:function fromSeed(seed){if(seed===undefined){throw new Error("seed is required");}var _hash=Object(__WEBPACK_IMPORTED_MODULE_5__hash__["sha512"])(seed);_hash=_hash.toString('hex');// DEBUG console.log('... fromSeed _hash',_hash)
	return Aes.fromSha512(_hash);}},{key:'fromSha512',/** @arg {string} hash - A 128 byte hex string, typically one would call {@link fromSeed} instead. */value:function fromSha512(hash){__WEBPACK_IMPORTED_MODULE_3_assert___default.a.equal(hash.length,128,'A Sha512 in HEX should be 128 characters long, instead got '+hash.length);var iv=__WEBPACK_IMPORTED_MODULE_1_crypto_js_enc_hex___default.a.parse(hash.substring(64,96));var key=__WEBPACK_IMPORTED_MODULE_1_crypto_js_enc_hex___default.a.parse(hash.substring(0,64));return new Aes(iv,key);}},{key:'fromBuffer',value:function fromBuffer(buf){__WEBPACK_IMPORTED_MODULE_3_assert___default()(Buffer.isBuffer(buf),"Expecting Buffer");__WEBPACK_IMPORTED_MODULE_3_assert___default.a.equal(buf.length,64,'A Sha512 Buffer should be 64 characters long, instead got '+buf.length);return Aes.fromSha512(buf.toString("hex"));}/**
	        @throws {Error} - "Invalid Key, ..."
	        @arg {PrivateKey} private_key - required and used for decryption
	        @arg {PublicKey} public_key - required and used to calcualte the shared secret
	        @arg {string} [nonce = ""] optional but should always be provided and be unique when re-using the same private/public keys more than once.  This nonce is not a secret.
	        @arg {string|Buffer} message - Encrypted message containing a checksum
	        @return {Buffer}
	    */},{key:'decrypt_with_checksum',value:function decrypt_with_checksum(private_key,public_key,nonce,message){var legacy=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;// Warning: Do not put `nonce = ""` in the arguments, in es6 this will not convert "null" into an emtpy string
	if(nonce==null)// null or undefined
	nonce="";if(!Buffer.isBuffer(message)){message=new Buffer(message,'hex');}var S=private_key.get_shared_secret(public_key,legacy);// D E B U G
	// console.log('decrypt_with_checksum', {
	//     priv_to_pub: private_key.toPublicKey().toString(),
	//     pub: public_key.toPublicKeyString(),
	//     nonce: nonce,
	//     message: message.length,
	//     S: S.toString('hex')
	// })
	var aes=Aes.fromSeed(Buffer.concat([// A null or empty string nonce will not effect the hash
	new Buffer(""+nonce),new Buffer(S.toString('hex'))]));var planebuffer=aes.decrypt(message);if(!(planebuffer.length>=4)){throw new Error("Invalid key, could not decrypt message(1)");}// DEBUG console.log('... planebuffer',planebuffer)
	var checksum=planebuffer.slice(0,4);var plaintext=planebuffer.slice(4);// console.log('... checksum',checksum.toString('hex'))
	// console.log('... plaintext',plaintext.toString())
	var new_checksum=Object(__WEBPACK_IMPORTED_MODULE_5__hash__["sha256"])(plaintext);new_checksum=new_checksum.slice(0,4);new_checksum=new_checksum.toString('hex');if(!(checksum.toString('hex')===new_checksum)){throw new Error("Invalid key, could not decrypt message(2)");}return plaintext;}},{key:'encrypt_with_checksum',/** Identical to {@link decrypt_with_checksum} but used to encrypt.  Should not throw an error.
	        @return {Buffer} message - Encrypted message which includes a checksum
	    */value:function encrypt_with_checksum(private_key,public_key,nonce,message){// Warning: Do not put `nonce = ""` in the arguments, in es6 this will not convert "null" into an emtpy string
	if(nonce==null)// null or undefined
	nonce="";if(!Buffer.isBuffer(message)){message=new Buffer(message,'binary');}var S=private_key.get_shared_secret(public_key);// D E B U G
	// console.log('encrypt_with_checksum', {
	//     priv_to_pub: private_key.toPublicKey().toString()
	//     pub: public_key.toPublicKeyString()
	//     nonce: nonce
	//     message: message.length
	//     S: S.toString('hex')
	// })
	var aes=Aes.fromSeed(Buffer.concat([// A null or empty string nonce will not effect the hash
	new Buffer(""+nonce),new Buffer(S.toString('hex'))]));// DEBUG console.log('... S',S.toString('hex'))
	var checksum=Object(__WEBPACK_IMPORTED_MODULE_5__hash__["sha256"])(message).slice(0,4);var payload=Buffer.concat([checksum,message]);// DEBUG console.log('... payload',payload.toString())
	return aes.encrypt(payload);}}]);return Aes;}();/* harmony default export */__webpack_exports__["a"]=Aes;/***/},/* 20 *//***/function(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__PrivateKey__=__webpack_require__(10);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__PublicKey__=__webpack_require__(5);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__address__=__webpack_require__(18);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__aes__=__webpack_require__(19);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__hash__=__webpack_require__(2);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5_secure_random__=__webpack_require__(34);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5_secure_random___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_secure_random__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_6_cybexjs_ws__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_6_cybexjs_ws___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_cybexjs_ws__);// import dictionary from './dictionary_en';
	// hash for .25 second
	var HASH_POWER_MILLS=250;var key={/** Uses 1 second of hashing power to create a key/password checksum.  An
	    implementation can re-call this method with the same password to re-match
	    the strength of the CPU (either after moving from a desktop to a mobile,
	    mobile to desktop, or N years from now when CPUs are presumably stronger).
	
	    A salt is used for all the normal reasons...
	
	    @return object {
	        aes_private: Aes,
	        checksum: "{hash_iteration_count},{salt},{checksum}"
	    }
	    */aes_checksum:function aes_checksum(password){if(!(typeof password==="string")){throw new"password string required"();}var salt=__WEBPACK_IMPORTED_MODULE_5_secure_random___default.a.randomBuffer(4).toString('hex');var iterations=0;var secret=salt+password;// hash for .1 second
	var start_t=Date.now();while(Date.now()-start_t<HASH_POWER_MILLS){secret=Object(__WEBPACK_IMPORTED_MODULE_4__hash__["sha256"])(secret);iterations+=1;}var checksum=Object(__WEBPACK_IMPORTED_MODULE_4__hash__["sha256"])(secret);var checksum_string=[iterations,salt.toString('hex'),checksum.slice(0,4).toString('hex')].join(',');return{aes_private:__WEBPACK_IMPORTED_MODULE_3__aes__["a"/* default */].fromSeed(secret),checksum:checksum_string};},/** Provide a matching password and key_checksum.  A "wrong password"
	    error is thrown if the password does not match.  If this method takes
	    much more or less than 1 second to return, one should consider updating
	    all encyrpted fields using a new key.key_checksum.
	    */aes_private:function aes_private(password,key_checksum){var _key_checksum$split=key_checksum.split(','),_key_checksum$split2=(0,_slicedToArray3.default)(_key_checksum$split,3),iterations=_key_checksum$split2[0],salt=_key_checksum$split2[1],checksum=_key_checksum$split2[2];var secret=salt+password;for(var i=0;0<iterations?i<iterations:i>iterations;0<iterations?i++:i++){secret=Object(__WEBPACK_IMPORTED_MODULE_4__hash__["sha256"])(secret);}var new_checksum=Object(__WEBPACK_IMPORTED_MODULE_4__hash__["sha256"])(secret);if(!(new_checksum.slice(0,4).toString('hex')===checksum)){throw new Error("wrong password");}return __WEBPACK_IMPORTED_MODULE_3__aes__["a"/* default */].fromSeed(secret);},/**
	        A week random number generator can run out of entropy.  This should ensure even the worst random number implementation will be reasonably safe.
	
	        @param1 string entropy of at least 32 bytes
	    */random32ByteBuffer:function random32ByteBuffer(){var entropy=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.browserEntropy();if(!(typeof entropy==='string')){throw new Error("string required for entropy");}if(entropy.length<32){throw new Error("expecting at least 32 bytes of entropy");}var start_t=Date.now();while(Date.now()-start_t<HASH_POWER_MILLS){entropy=Object(__WEBPACK_IMPORTED_MODULE_4__hash__["sha256"])(entropy);}var hash_array=[];hash_array.push(entropy);// Hashing for 1 second may helps the computer is not low on entropy (this method may be called back-to-back).
	hash_array.push(__WEBPACK_IMPORTED_MODULE_5_secure_random___default.a.randomBuffer(32));return Object(__WEBPACK_IMPORTED_MODULE_4__hash__["sha256"])(Buffer.concat(hash_array));},suggest_brain_key:function suggest_brain_key(){var dictionary=arguments.length>0&&arguments[0]!==undefined?arguments[0]:",";var entropy=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.browserEntropy();var randomBuffer=this.random32ByteBuffer(entropy);var word_count=16;var dictionary_lines=dictionary.split(',');if(!(dictionary_lines.length===49744)){throw new Error('expecting '+49744+' but got '+dictionary_lines.length+' dictionary words');}var brainkey=[];var end=word_count*2;for(var i=0;i<end;i+=2){// randomBuffer has 256 bits / 16 bits per word == 16 words
	var num=(randomBuffer[i]<<8)+randomBuffer[i+1];// convert into a number between 0 and 1 (inclusive)
	var rndMultiplier=num/Math.pow(2,16);var wordIndex=Math.round(dictionary_lines.length*rndMultiplier);brainkey.push(dictionary_lines[wordIndex]);}return this.normalize_brainKey(brainkey.join(' '));},get_random_key:function get_random_key(entropy){return __WEBPACK_IMPORTED_MODULE_0__PrivateKey__["a"/* default */].fromBuffer(this.random32ByteBuffer(entropy));},get_brainPrivateKey:function get_brainPrivateKey(brainKey){var sequence=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;if(sequence<0){throw new Error("invalid sequence");}brainKey=key.normalize_brainKey(brainKey);return __WEBPACK_IMPORTED_MODULE_0__PrivateKey__["a"/* default */].fromBuffer(Object(__WEBPACK_IMPORTED_MODULE_4__hash__["sha256"])(Object(__WEBPACK_IMPORTED_MODULE_4__hash__["sha512"])(brainKey+" "+sequence)));},// Turn invisible space like characters into a single space
	normalize_brainKey:function normalize_brainKey(brainKey){if(!(typeof brainKey==='string')){throw new Error("string required for brainKey");}brainKey=brainKey.trim();return brainKey.split(/[\t\n\v\f\r ]+/).join(' ');},browserEntropy:function browserEntropy(){var entropyStr="";try{entropyStr=new Date().toString()+" "+window.screen.height+" "+window.screen.width+" "+window.screen.colorDepth+" "+" "+window.screen.availHeight+" "+window.screen.availWidth+" "+window.screen.pixelDepth+navigator.language+" "+window.location+" "+window.history.length;for(var i=0,mimeType;i<navigator.mimeTypes.length;i++){mimeType=navigator.mimeTypes[i];entropyStr+=mimeType.description+" "+mimeType.type+" "+mimeType.suffixes+" ";}console.log("INFO\tbrowserEntropy gathered");}catch(error){//nodejs:ReferenceError: window is not defined
	entropyStr=Object(__WEBPACK_IMPORTED_MODULE_4__hash__["sha256"])(new Date().toString());}var b=new Buffer(entropyStr);entropyStr+=b.toString('binary')+" "+new Date().toString();return entropyStr;},// @return array of 5 legacy addresses for a pubkey string parameter.
	addresses:function addresses(pubkey){var address_prefix=arguments.length>1&&arguments[1]!==undefined?arguments[1]:__WEBPACK_IMPORTED_MODULE_6_cybexjs_ws__["ChainConfig"].address_prefix;var public_key=__WEBPACK_IMPORTED_MODULE_1__PublicKey__["a"/* default */].fromPublicKeyString(pubkey,address_prefix);// S L O W
	var address_string=[__WEBPACK_IMPORTED_MODULE_2__address__["a"/* default */].fromPublic(public_key,false,0).toString(address_prefix),// btc_uncompressed
	__WEBPACK_IMPORTED_MODULE_2__address__["a"/* default */].fromPublic(public_key,true,0).toString(address_prefix),// btc_compressed
	__WEBPACK_IMPORTED_MODULE_2__address__["a"/* default */].fromPublic(public_key,false,56).toString(address_prefix),// pts_uncompressed
	__WEBPACK_IMPORTED_MODULE_2__address__["a"/* default */].fromPublic(public_key,true,56).toString(address_prefix),// pts_compressed
	public_key.toAddressString(address_prefix)// bts_short, most recent format
	];return address_string;}};/* harmony default export */__webpack_exports__["a"]=key;/***/},/* 21 *//***/function(module,exports,__webpack_require__){"use strict";var _undefined=__webpack_require__(69)();// Support ES3 engines
	module.exports=function(val){return val!==_undefined&&val!==null;};/***/},/* 22 *//***/function(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__src_serializer__=__webpack_require__(11);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__src_FastParser__=__webpack_require__(12);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__src_types__=__webpack_require__(16);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__src_operations__=__webpack_require__(35);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__src_template__=__webpack_require__(36);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5__src_SerializerValidation__=__webpack_require__(9);/* unused harmony reexport Serializer *//* unused harmony reexport fp *//* unused harmony reexport types *//* harmony reexport (module object) */__webpack_require__.d(__webpack_exports__,"a",function(){return __WEBPACK_IMPORTED_MODULE_3__src_operations__;});/* unused harmony reexport template *//* unused harmony reexport SerializerValidation *//***/},/* 23 *//***/function(module,exports){module.exports=__webpack_require__(92);/***/},/* 24 *//***/function(module,exports,__webpack_require__){// (public) Constructor
	function BigInteger(a,b,c){if(!(this instanceof BigInteger))return new BigInteger(a,b,c);if(a!=null){if("number"==typeof a)this.fromNumber(a,b,c);else if(b==null&&"string"!=typeof a)this.fromString(a,256);else this.fromString(a,b);}}var proto=BigInteger.prototype;// duck-typed isBigInteger
	proto.__bigi=__webpack_require__(42).version;BigInteger.isBigInteger=function(obj,check_ver){return obj&&obj.__bigi&&(!check_ver||obj.__bigi===proto.__bigi);};// Bits per digit
	var dbits;// am: Compute w_j += (x*this_i), propagate carries,
	// c is initial carry, returns final carry.
	// c < 3*dvalue, x < 2*dvalue, this_i < dvalue
	// We need to select the fastest one that works in this environment.
	// am1: use a single mult and divide to get the high bits,
	// max digit bits should be 26 because
	// max internal value = 2*dvalue^2-2*dvalue (< 2^53)
	function am1(i,x,w,j,c,n){while(--n>=0){var v=x*this[i++]+w[j]+c;c=Math.floor(v/0x4000000);w[j++]=v&0x3ffffff;}return c;}// am2 avoids a big mult-and-extract completely.
	// Max digit bits should be <= 30 because we do bitwise ops
	// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
	function am2(i,x,w,j,c,n){var xl=x&0x7fff,xh=x>>15;while(--n>=0){var l=this[i]&0x7fff;var h=this[i++]>>15;var m=xh*l+h*xl;l=xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);c=(l>>>30)+(m>>>15)+xh*h+(c>>>30);w[j++]=l&0x3fffffff;}return c;}// Alternately, set max digit bits to 28 since some
	// browsers slow down when dealing with 32-bit numbers.
	function am3(i,x,w,j,c,n){var xl=x&0x3fff,xh=x>>14;while(--n>=0){var l=this[i]&0x3fff;var h=this[i++]>>14;var m=xh*l+h*xl;l=xl*l+((m&0x3fff)<<14)+w[j]+c;c=(l>>28)+(m>>14)+xh*h;w[j++]=l&0xfffffff;}return c;}// wtf?
	BigInteger.prototype.am=am1;dbits=26;BigInteger.prototype.DB=dbits;BigInteger.prototype.DM=(1<<dbits)-1;var DV=BigInteger.prototype.DV=1<<dbits;var BI_FP=52;BigInteger.prototype.FV=Math.pow(2,BI_FP);BigInteger.prototype.F1=BI_FP-dbits;BigInteger.prototype.F2=2*dbits-BI_FP;// Digit conversions
	var BI_RM="0123456789abcdefghijklmnopqrstuvwxyz";var BI_RC=new Array();var rr,vv;rr="0".charCodeAt(0);for(vv=0;vv<=9;++vv){BI_RC[rr++]=vv;}rr="a".charCodeAt(0);for(vv=10;vv<36;++vv){BI_RC[rr++]=vv;}rr="A".charCodeAt(0);for(vv=10;vv<36;++vv){BI_RC[rr++]=vv;}function int2char(n){return BI_RM.charAt(n);}function intAt(s,i){var c=BI_RC[s.charCodeAt(i)];return c==null?-1:c;}// (protected) copy this to r
	function bnpCopyTo(r){for(var i=this.t-1;i>=0;--i){r[i]=this[i];}r.t=this.t;r.s=this.s;}// (protected) set from integer value x, -DV <= x < DV
	function bnpFromInt(x){this.t=1;this.s=x<0?-1:0;if(x>0)this[0]=x;else if(x<-1)this[0]=x+DV;else this.t=0;}// return bigint initialized to value
	function nbv(i){var r=new BigInteger();r.fromInt(i);return r;}// (protected) set from string and radix
	function bnpFromString(s,b){var self=this;var k;if(b==16)k=4;else if(b==8)k=3;else if(b==256)k=8;// byte array
	else if(b==2)k=1;else if(b==32)k=5;else if(b==4)k=2;else{self.fromRadix(s,b);return;}self.t=0;self.s=0;var i=s.length,mi=false,sh=0;while(--i>=0){var x=k==8?s[i]&0xff:intAt(s,i);if(x<0){if(s.charAt(i)=="-")mi=true;continue;}mi=false;if(sh==0)self[self.t++]=x;else if(sh+k>self.DB){self[self.t-1]|=(x&(1<<self.DB-sh)-1)<<sh;self[self.t++]=x>>self.DB-sh;}else self[self.t-1]|=x<<sh;sh+=k;if(sh>=self.DB)sh-=self.DB;}if(k==8&&(s[0]&0x80)!=0){self.s=-1;if(sh>0)self[self.t-1]|=(1<<self.DB-sh)-1<<sh;}self.clamp();if(mi)BigInteger.ZERO.subTo(self,self);}// (protected) clamp off excess high words
	function bnpClamp(){var c=this.s&this.DM;while(this.t>0&&this[this.t-1]==c){--this.t;}}// (public) return string representation in given radix
	function bnToString(b){var self=this;if(self.s<0)return"-"+self.negate().toString(b);var k;if(b==16)k=4;else if(b==8)k=3;else if(b==2)k=1;else if(b==32)k=5;else if(b==4)k=2;else return self.toRadix(b);var km=(1<<k)-1,d,m=false,r="",i=self.t;var p=self.DB-i*self.DB%k;if(i-->0){if(p<self.DB&&(d=self[i]>>p)>0){m=true;r=int2char(d);}while(i>=0){if(p<k){d=(self[i]&(1<<p)-1)<<k-p;d|=self[--i]>>(p+=self.DB-k);}else{d=self[i]>>(p-=k)&km;if(p<=0){p+=self.DB;--i;}}if(d>0)m=true;if(m)r+=int2char(d);}}return m?r:"0";}// (public) -this
	function bnNegate(){var r=new BigInteger();BigInteger.ZERO.subTo(this,r);return r;}// (public) |this|
	function bnAbs(){return this.s<0?this.negate():this;}// (public) return + if this > a, - if this < a, 0 if equal
	function bnCompareTo(a){var r=this.s-a.s;if(r!=0)return r;var i=this.t;r=i-a.t;if(r!=0)return this.s<0?-r:r;while(--i>=0){if((r=this[i]-a[i])!=0)return r;}return 0;}// returns bit length of the integer x
	function nbits(x){var r=1,t;if((t=x>>>16)!=0){x=t;r+=16;}if((t=x>>8)!=0){x=t;r+=8;}if((t=x>>4)!=0){x=t;r+=4;}if((t=x>>2)!=0){x=t;r+=2;}if((t=x>>1)!=0){x=t;r+=1;}return r;}// (public) return the number of bits in "this"
	function bnBitLength(){if(this.t<=0)return 0;return this.DB*(this.t-1)+nbits(this[this.t-1]^this.s&this.DM);}// (public) return the number of bytes in "this"
	function bnByteLength(){return this.bitLength()>>3;}// (protected) r = this << n*DB
	function bnpDLShiftTo(n,r){var i;for(i=this.t-1;i>=0;--i){r[i+n]=this[i];}for(i=n-1;i>=0;--i){r[i]=0;}r.t=this.t+n;r.s=this.s;}// (protected) r = this >> n*DB
	function bnpDRShiftTo(n,r){for(var i=n;i<this.t;++i){r[i-n]=this[i];}r.t=Math.max(this.t-n,0);r.s=this.s;}// (protected) r = this << n
	function bnpLShiftTo(n,r){var self=this;var bs=n%self.DB;var cbs=self.DB-bs;var bm=(1<<cbs)-1;var ds=Math.floor(n/self.DB),c=self.s<<bs&self.DM,i;for(i=self.t-1;i>=0;--i){r[i+ds+1]=self[i]>>cbs|c;c=(self[i]&bm)<<bs;}for(i=ds-1;i>=0;--i){r[i]=0;}r[ds]=c;r.t=self.t+ds+1;r.s=self.s;r.clamp();}// (protected) r = this >> n
	function bnpRShiftTo(n,r){var self=this;r.s=self.s;var ds=Math.floor(n/self.DB);if(ds>=self.t){r.t=0;return;}var bs=n%self.DB;var cbs=self.DB-bs;var bm=(1<<bs)-1;r[0]=self[ds]>>bs;for(var i=ds+1;i<self.t;++i){r[i-ds-1]|=(self[i]&bm)<<cbs;r[i-ds]=self[i]>>bs;}if(bs>0)r[self.t-ds-1]|=(self.s&bm)<<cbs;r.t=self.t-ds;r.clamp();}// (protected) r = this - a
	function bnpSubTo(a,r){var self=this;var i=0,c=0,m=Math.min(a.t,self.t);while(i<m){c+=self[i]-a[i];r[i++]=c&self.DM;c>>=self.DB;}if(a.t<self.t){c-=a.s;while(i<self.t){c+=self[i];r[i++]=c&self.DM;c>>=self.DB;}c+=self.s;}else{c+=self.s;while(i<a.t){c-=a[i];r[i++]=c&self.DM;c>>=self.DB;}c-=a.s;}r.s=c<0?-1:0;if(c<-1)r[i++]=self.DV+c;else if(c>0)r[i++]=c;r.t=i;r.clamp();}// (protected) r = this * a, r != this,a (HAC 14.12)
	// "this" should be the larger one if appropriate.
	function bnpMultiplyTo(a,r){var x=this.abs(),y=a.abs();var i=x.t;r.t=i+y.t;while(--i>=0){r[i]=0;}for(i=0;i<y.t;++i){r[i+x.t]=x.am(0,y[i],r,i,0,x.t);}r.s=0;r.clamp();if(this.s!=a.s)BigInteger.ZERO.subTo(r,r);}// (protected) r = this^2, r != this (HAC 14.16)
	function bnpSquareTo(r){var x=this.abs();var i=r.t=2*x.t;while(--i>=0){r[i]=0;}for(i=0;i<x.t-1;++i){var c=x.am(i,x[i],r,2*i,0,1);if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1))>=x.DV){r[i+x.t]-=x.DV;r[i+x.t+1]=1;}}if(r.t>0)r[r.t-1]+=x.am(i,x[i],r,2*i,0,1);r.s=0;r.clamp();}// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
	// r != q, this != m.  q or r may be null.
	function bnpDivRemTo(m,q,r){var self=this;var pm=m.abs();if(pm.t<=0)return;var pt=self.abs();if(pt.t<pm.t){if(q!=null)q.fromInt(0);if(r!=null)self.copyTo(r);return;}if(r==null)r=new BigInteger();var y=new BigInteger(),ts=self.s,ms=m.s;var nsh=self.DB-nbits(pm[pm.t-1]);// normalize modulus
	if(nsh>0){pm.lShiftTo(nsh,y);pt.lShiftTo(nsh,r);}else{pm.copyTo(y);pt.copyTo(r);}var ys=y.t;var y0=y[ys-1];if(y0==0)return;var yt=y0*(1<<self.F1)+(ys>1?y[ys-2]>>self.F2:0);var d1=self.FV/yt,d2=(1<<self.F1)/yt,e=1<<self.F2;var i=r.t,j=i-ys,t=q==null?new BigInteger():q;y.dlShiftTo(j,t);if(r.compareTo(t)>=0){r[r.t++]=1;r.subTo(t,r);}BigInteger.ONE.dlShiftTo(ys,t);t.subTo(y,y);// "negative" y so we can replace sub with am later
	while(y.t<ys){y[y.t++]=0;}while(--j>=0){// Estimate quotient digit
	var qd=r[--i]==y0?self.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);if((r[i]+=y.am(0,qd,r,j,0,ys))<qd){// Try it out
	y.dlShiftTo(j,t);r.subTo(t,r);while(r[i]<--qd){r.subTo(t,r);}}}if(q!=null){r.drShiftTo(ys,q);if(ts!=ms)BigInteger.ZERO.subTo(q,q);}r.t=ys;r.clamp();if(nsh>0)r.rShiftTo(nsh,r);// Denormalize remainder
	if(ts<0)BigInteger.ZERO.subTo(r,r);}// (public) this mod a
	function bnMod(a){var r=new BigInteger();this.abs().divRemTo(a,null,r);if(this.s<0&&r.compareTo(BigInteger.ZERO)>0)a.subTo(r,r);return r;}// Modular reduction using "classic" algorithm
	function Classic(m){this.m=m;}function cConvert(x){if(x.s<0||x.compareTo(this.m)>=0)return x.mod(this.m);else return x;}function cRevert(x){return x;}function cReduce(x){x.divRemTo(this.m,null,x);}function cMulTo(x,y,r){x.multiplyTo(y,r);this.reduce(r);}function cSqrTo(x,r){x.squareTo(r);this.reduce(r);}Classic.prototype.convert=cConvert;Classic.prototype.revert=cRevert;Classic.prototype.reduce=cReduce;Classic.prototype.mulTo=cMulTo;Classic.prototype.sqrTo=cSqrTo;// (protected) return "-1/this % 2^DB"; useful for Mont. reduction
	// justification:
	//         xy == 1 (mod m)
	//         xy =  1+km
	//   xy(2-xy) = (1+km)(1-km)
	// x[y(2-xy)] = 1-k^2m^2
	// x[y(2-xy)] == 1 (mod m^2)
	// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
	// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
	// JS multiply "overflows" differently from C/C++, so care is needed here.
	function bnpInvDigit(){if(this.t<1)return 0;var x=this[0];if((x&1)==0)return 0;var y=x&3;// y == 1/x mod 2^2
	y=y*(2-(x&0xf)*y)&0xf;// y == 1/x mod 2^4
	y=y*(2-(x&0xff)*y)&0xff;// y == 1/x mod 2^8
	y=y*(2-((x&0xffff)*y&0xffff))&0xffff;// y == 1/x mod 2^16
	// last step - calculate inverse mod DV directly
	// assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
	y=y*(2-x*y%this.DV)%this.DV;// y == 1/x mod 2^dbits
	// we really want the negative inverse, and -DV < y < DV
	return y>0?this.DV-y:-y;}// Montgomery reduction
	function Montgomery(m){this.m=m;this.mp=m.invDigit();this.mpl=this.mp&0x7fff;this.mph=this.mp>>15;this.um=(1<<m.DB-15)-1;this.mt2=2*m.t;}// xR mod m
	function montConvert(x){var r=new BigInteger();x.abs().dlShiftTo(this.m.t,r);r.divRemTo(this.m,null,r);if(x.s<0&&r.compareTo(BigInteger.ZERO)>0)this.m.subTo(r,r);return r;}// x/R mod m
	function montRevert(x){var r=new BigInteger();x.copyTo(r);this.reduce(r);return r;}// x = x/R mod m (HAC 14.32)
	function montReduce(x){while(x.t<=this.mt2){// pad x so am has enough room later
	x[x.t++]=0;}for(var i=0;i<this.m.t;++i){// faster way of calculating u0 = x[i]*mp mod DV
	var j=x[i]&0x7fff;var u0=j*this.mpl+((j*this.mph+(x[i]>>15)*this.mpl&this.um)<<15)&x.DM;// use am to combine the multiply-shift-add into one call
	j=i+this.m.t;x[j]+=this.m.am(0,u0,x,i,0,this.m.t);// propagate carry
	while(x[j]>=x.DV){x[j]-=x.DV;x[++j]++;}}x.clamp();x.drShiftTo(this.m.t,x);if(x.compareTo(this.m)>=0)x.subTo(this.m,x);}// r = "x^2/R mod m"; x != r
	function montSqrTo(x,r){x.squareTo(r);this.reduce(r);}// r = "xy/R mod m"; x,y != r
	function montMulTo(x,y,r){x.multiplyTo(y,r);this.reduce(r);}Montgomery.prototype.convert=montConvert;Montgomery.prototype.revert=montRevert;Montgomery.prototype.reduce=montReduce;Montgomery.prototype.mulTo=montMulTo;Montgomery.prototype.sqrTo=montSqrTo;// (protected) true iff this is even
	function bnpIsEven(){return(this.t>0?this[0]&1:this.s)==0;}// (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
	function bnpExp(e,z){if(e>0xffffffff||e<1)return BigInteger.ONE;var r=new BigInteger(),r2=new BigInteger(),g=z.convert(this),i=nbits(e)-1;g.copyTo(r);while(--i>=0){z.sqrTo(r,r2);if((e&1<<i)>0)z.mulTo(r2,g,r);else{var t=r;r=r2;r2=t;}}return z.revert(r);}// (public) this^e % m, 0 <= e < 2^32
	function bnModPowInt(e,m){var z;if(e<256||m.isEven())z=new Classic(m);else z=new Montgomery(m);return this.exp(e,z);}// protected
	proto.copyTo=bnpCopyTo;proto.fromInt=bnpFromInt;proto.fromString=bnpFromString;proto.clamp=bnpClamp;proto.dlShiftTo=bnpDLShiftTo;proto.drShiftTo=bnpDRShiftTo;proto.lShiftTo=bnpLShiftTo;proto.rShiftTo=bnpRShiftTo;proto.subTo=bnpSubTo;proto.multiplyTo=bnpMultiplyTo;proto.squareTo=bnpSquareTo;proto.divRemTo=bnpDivRemTo;proto.invDigit=bnpInvDigit;proto.isEven=bnpIsEven;proto.exp=bnpExp;// public
	proto.toString=bnToString;proto.negate=bnNegate;proto.abs=bnAbs;proto.compareTo=bnCompareTo;proto.bitLength=bnBitLength;proto.byteLength=bnByteLength;proto.mod=bnMod;proto.modPowInt=bnModPowInt;// (public)
	function bnClone(){var r=new BigInteger();this.copyTo(r);return r;}// (public) return value as integer
	function bnIntValue(){if(this.s<0){if(this.t==1)return this[0]-this.DV;else if(this.t==0)return-1;}else if(this.t==1)return this[0];else if(this.t==0)return 0;// assumes 16 < DB < 32
	return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0];}// (public) return value as byte
	function bnByteValue(){return this.t==0?this.s:this[0]<<24>>24;}// (public) return value as short (assumes DB>=16)
	function bnShortValue(){return this.t==0?this.s:this[0]<<16>>16;}// (protected) return x s.t. r^x < DV
	function bnpChunkSize(r){return Math.floor(Math.LN2*this.DB/Math.log(r));}// (public) 0 if this == 0, 1 if this > 0
	function bnSigNum(){if(this.s<0)return-1;else if(this.t<=0||this.t==1&&this[0]<=0)return 0;else return 1;}// (protected) convert to radix string
	function bnpToRadix(b){if(b==null)b=10;if(this.signum()==0||b<2||b>36)return"0";var cs=this.chunkSize(b);var a=Math.pow(b,cs);var d=nbv(a),y=new BigInteger(),z=new BigInteger(),r="";this.divRemTo(d,y,z);while(y.signum()>0){r=(a+z.intValue()).toString(b).substr(1)+r;y.divRemTo(d,y,z);}return z.intValue().toString(b)+r;}// (protected) convert from radix string
	function bnpFromRadix(s,b){var self=this;self.fromInt(0);if(b==null)b=10;var cs=self.chunkSize(b);var d=Math.pow(b,cs),mi=false,j=0,w=0;for(var i=0;i<s.length;++i){var x=intAt(s,i);if(x<0){if(s.charAt(i)=="-"&&self.signum()==0)mi=true;continue;}w=b*w+x;if(++j>=cs){self.dMultiply(d);self.dAddOffset(w,0);j=0;w=0;}}if(j>0){self.dMultiply(Math.pow(b,j));self.dAddOffset(w,0);}if(mi)BigInteger.ZERO.subTo(self,self);}// (protected) alternate constructor
	function bnpFromNumber(a,b,c){var self=this;if("number"==typeof b){// new BigInteger(int,int,RNG)
	if(a<2)self.fromInt(1);else{self.fromNumber(a,c);if(!self.testBit(a-1))// force MSB set
	self.bitwiseTo(BigInteger.ONE.shiftLeft(a-1),op_or,self);if(self.isEven())self.dAddOffset(1,0);// force odd
	while(!self.isProbablePrime(b)){self.dAddOffset(2,0);if(self.bitLength()>a)self.subTo(BigInteger.ONE.shiftLeft(a-1),self);}}}else{// new BigInteger(int,RNG)
	var x=new Array(),t=a&7;x.length=(a>>3)+1;b.nextBytes(x);if(t>0)x[0]&=(1<<t)-1;else x[0]=0;self.fromString(x,256);}}// (public) convert to bigendian byte array
	function bnToByteArray(){var self=this;var i=self.t,r=new Array();r[0]=self.s;var p=self.DB-i*self.DB%8,d,k=0;if(i-->0){if(p<self.DB&&(d=self[i]>>p)!=(self.s&self.DM)>>p)r[k++]=d|self.s<<self.DB-p;while(i>=0){if(p<8){d=(self[i]&(1<<p)-1)<<8-p;d|=self[--i]>>(p+=self.DB-8);}else{d=self[i]>>(p-=8)&0xff;if(p<=0){p+=self.DB;--i;}}if((d&0x80)!=0)d|=-256;if(k===0&&(self.s&0x80)!=(d&0x80))++k;if(k>0||d!=self.s)r[k++]=d;}}return r;}function bnEquals(a){return this.compareTo(a)==0;}function bnMin(a){return this.compareTo(a)<0?this:a;}function bnMax(a){return this.compareTo(a)>0?this:a;}// (protected) r = this op a (bitwise)
	function bnpBitwiseTo(a,op,r){var self=this;var i,f,m=Math.min(a.t,self.t);for(i=0;i<m;++i){r[i]=op(self[i],a[i]);}if(a.t<self.t){f=a.s&self.DM;for(i=m;i<self.t;++i){r[i]=op(self[i],f);}r.t=self.t;}else{f=self.s&self.DM;for(i=m;i<a.t;++i){r[i]=op(f,a[i]);}r.t=a.t;}r.s=op(self.s,a.s);r.clamp();}// (public) this & a
	function op_and(x,y){return x&y;}function bnAnd(a){var r=new BigInteger();this.bitwiseTo(a,op_and,r);return r;}// (public) this | a
	function op_or(x,y){return x|y;}function bnOr(a){var r=new BigInteger();this.bitwiseTo(a,op_or,r);return r;}// (public) this ^ a
	function op_xor(x,y){return x^y;}function bnXor(a){var r=new BigInteger();this.bitwiseTo(a,op_xor,r);return r;}// (public) this & ~a
	function op_andnot(x,y){return x&~y;}function bnAndNot(a){var r=new BigInteger();this.bitwiseTo(a,op_andnot,r);return r;}// (public) ~this
	function bnNot(){var r=new BigInteger();for(var i=0;i<this.t;++i){r[i]=this.DM&~this[i];}r.t=this.t;r.s=~this.s;return r;}// (public) this << n
	function bnShiftLeft(n){var r=new BigInteger();if(n<0)this.rShiftTo(-n,r);else this.lShiftTo(n,r);return r;}// (public) this >> n
	function bnShiftRight(n){var r=new BigInteger();if(n<0)this.lShiftTo(-n,r);else this.rShiftTo(n,r);return r;}// return index of lowest 1-bit in x, x < 2^31
	function lbit(x){if(x==0)return-1;var r=0;if((x&0xffff)==0){x>>=16;r+=16;}if((x&0xff)==0){x>>=8;r+=8;}if((x&0xf)==0){x>>=4;r+=4;}if((x&3)==0){x>>=2;r+=2;}if((x&1)==0)++r;return r;}// (public) returns index of lowest 1-bit (or -1 if none)
	function bnGetLowestSetBit(){for(var i=0;i<this.t;++i){if(this[i]!=0)return i*this.DB+lbit(this[i]);}if(this.s<0)return this.t*this.DB;return-1;}// return number of 1 bits in x
	function cbit(x){var r=0;while(x!=0){x&=x-1;++r;}return r;}// (public) return number of set bits
	function bnBitCount(){var r=0,x=this.s&this.DM;for(var i=0;i<this.t;++i){r+=cbit(this[i]^x);}return r;}// (public) true iff nth bit is set
	function bnTestBit(n){var j=Math.floor(n/this.DB);if(j>=this.t)return this.s!=0;return(this[j]&1<<n%this.DB)!=0;}// (protected) this op (1<<n)
	function bnpChangeBit(n,op){var r=BigInteger.ONE.shiftLeft(n);this.bitwiseTo(r,op,r);return r;}// (public) this | (1<<n)
	function bnSetBit(n){return this.changeBit(n,op_or);}// (public) this & ~(1<<n)
	function bnClearBit(n){return this.changeBit(n,op_andnot);}// (public) this ^ (1<<n)
	function bnFlipBit(n){return this.changeBit(n,op_xor);}// (protected) r = this + a
	function bnpAddTo(a,r){var self=this;var i=0,c=0,m=Math.min(a.t,self.t);while(i<m){c+=self[i]+a[i];r[i++]=c&self.DM;c>>=self.DB;}if(a.t<self.t){c+=a.s;while(i<self.t){c+=self[i];r[i++]=c&self.DM;c>>=self.DB;}c+=self.s;}else{c+=self.s;while(i<a.t){c+=a[i];r[i++]=c&self.DM;c>>=self.DB;}c+=a.s;}r.s=c<0?-1:0;if(c>0)r[i++]=c;else if(c<-1)r[i++]=self.DV+c;r.t=i;r.clamp();}// (public) this + a
	function bnAdd(a){var r=new BigInteger();this.addTo(a,r);return r;}// (public) this - a
	function bnSubtract(a){var r=new BigInteger();this.subTo(a,r);return r;}// (public) this * a
	function bnMultiply(a){var r=new BigInteger();this.multiplyTo(a,r);return r;}// (public) this^2
	function bnSquare(){var r=new BigInteger();this.squareTo(r);return r;}// (public) this / a
	function bnDivide(a){var r=new BigInteger();this.divRemTo(a,r,null);return r;}// (public) this % a
	function bnRemainder(a){var r=new BigInteger();this.divRemTo(a,null,r);return r;}// (public) [this/a,this%a]
	function bnDivideAndRemainder(a){var q=new BigInteger(),r=new BigInteger();this.divRemTo(a,q,r);return new Array(q,r);}// (protected) this *= n, this >= 0, 1 < n < DV
	function bnpDMultiply(n){this[this.t]=this.am(0,n-1,this,0,0,this.t);++this.t;this.clamp();}// (protected) this += n << w words, this >= 0
	function bnpDAddOffset(n,w){if(n==0)return;while(this.t<=w){this[this.t++]=0;}this[w]+=n;while(this[w]>=this.DV){this[w]-=this.DV;if(++w>=this.t)this[this.t++]=0;++this[w];}}// A "null" reducer
	function NullExp(){}function nNop(x){return x;}function nMulTo(x,y,r){x.multiplyTo(y,r);}function nSqrTo(x,r){x.squareTo(r);}NullExp.prototype.convert=nNop;NullExp.prototype.revert=nNop;NullExp.prototype.mulTo=nMulTo;NullExp.prototype.sqrTo=nSqrTo;// (public) this^e
	function bnPow(e){return this.exp(e,new NullExp());}// (protected) r = lower n words of "this * a", a.t <= n
	// "this" should be the larger one if appropriate.
	function bnpMultiplyLowerTo(a,n,r){var i=Math.min(this.t+a.t,n);r.s=0;// assumes a,this >= 0
	r.t=i;while(i>0){r[--i]=0;}var j;for(j=r.t-this.t;i<j;++i){r[i+this.t]=this.am(0,a[i],r,i,0,this.t);}for(j=Math.min(a.t,n);i<j;++i){this.am(0,a[i],r,i,0,n-i);}r.clamp();}// (protected) r = "this * a" without lower n words, n > 0
	// "this" should be the larger one if appropriate.
	function bnpMultiplyUpperTo(a,n,r){--n;var i=r.t=this.t+a.t-n;r.s=0;// assumes a,this >= 0
	while(--i>=0){r[i]=0;}for(i=Math.max(n-this.t,0);i<a.t;++i){r[this.t+i-n]=this.am(n-i,a[i],r,0,0,this.t+i-n);}r.clamp();r.drShiftTo(1,r);}// Barrett modular reduction
	function Barrett(m){// setup Barrett
	this.r2=new BigInteger();this.q3=new BigInteger();BigInteger.ONE.dlShiftTo(2*m.t,this.r2);this.mu=this.r2.divide(m);this.m=m;}function barrettConvert(x){if(x.s<0||x.t>2*this.m.t)return x.mod(this.m);else if(x.compareTo(this.m)<0)return x;else{var r=new BigInteger();x.copyTo(r);this.reduce(r);return r;}}function barrettRevert(x){return x;}// x = x mod m (HAC 14.42)
	function barrettReduce(x){var self=this;x.drShiftTo(self.m.t-1,self.r2);if(x.t>self.m.t+1){x.t=self.m.t+1;x.clamp();}self.mu.multiplyUpperTo(self.r2,self.m.t+1,self.q3);self.m.multiplyLowerTo(self.q3,self.m.t+1,self.r2);while(x.compareTo(self.r2)<0){x.dAddOffset(1,self.m.t+1);}x.subTo(self.r2,x);while(x.compareTo(self.m)>=0){x.subTo(self.m,x);}}// r = x^2 mod m; x != r
	function barrettSqrTo(x,r){x.squareTo(r);this.reduce(r);}// r = x*y mod m; x,y != r
	function barrettMulTo(x,y,r){x.multiplyTo(y,r);this.reduce(r);}Barrett.prototype.convert=barrettConvert;Barrett.prototype.revert=barrettRevert;Barrett.prototype.reduce=barrettReduce;Barrett.prototype.mulTo=barrettMulTo;Barrett.prototype.sqrTo=barrettSqrTo;// (public) this^e % m (HAC 14.85)
	function bnModPow(e,m){var i=e.bitLength(),k,r=nbv(1),z;if(i<=0)return r;else if(i<18)k=1;else if(i<48)k=3;else if(i<144)k=4;else if(i<768)k=5;else k=6;if(i<8)z=new Classic(m);else if(m.isEven())z=new Barrett(m);else z=new Montgomery(m);// precomputation
	var g=new Array(),n=3,k1=k-1,km=(1<<k)-1;g[1]=z.convert(this);if(k>1){var g2=new BigInteger();z.sqrTo(g[1],g2);while(n<=km){g[n]=new BigInteger();z.mulTo(g2,g[n-2],g[n]);n+=2;}}var j=e.t-1,w,is1=true,r2=new BigInteger(),t;i=nbits(e[j])-1;while(j>=0){if(i>=k1)w=e[j]>>i-k1&km;else{w=(e[j]&(1<<i+1)-1)<<k1-i;if(j>0)w|=e[j-1]>>this.DB+i-k1;}n=k;while((w&1)==0){w>>=1;--n;}if((i-=n)<0){i+=this.DB;--j;}if(is1){// ret == 1, don't bother squaring or multiplying it
	g[w].copyTo(r);is1=false;}else{while(n>1){z.sqrTo(r,r2);z.sqrTo(r2,r);n-=2;}if(n>0)z.sqrTo(r,r2);else{t=r;r=r2;r2=t;}z.mulTo(r2,g[w],r);}while(j>=0&&(e[j]&1<<i)==0){z.sqrTo(r,r2);t=r;r=r2;r2=t;if(--i<0){i=this.DB-1;--j;}}}return z.revert(r);}// (public) gcd(this,a) (HAC 14.54)
	function bnGCD(a){var x=this.s<0?this.negate():this.clone();var y=a.s<0?a.negate():a.clone();if(x.compareTo(y)<0){var t=x;x=y;y=t;}var i=x.getLowestSetBit(),g=y.getLowestSetBit();if(g<0)return x;if(i<g)g=i;if(g>0){x.rShiftTo(g,x);y.rShiftTo(g,y);}while(x.signum()>0){if((i=x.getLowestSetBit())>0)x.rShiftTo(i,x);if((i=y.getLowestSetBit())>0)y.rShiftTo(i,y);if(x.compareTo(y)>=0){x.subTo(y,x);x.rShiftTo(1,x);}else{y.subTo(x,y);y.rShiftTo(1,y);}}if(g>0)y.lShiftTo(g,y);return y;}// (protected) this % n, n < 2^26
	function bnpModInt(n){if(n<=0)return 0;var d=this.DV%n,r=this.s<0?n-1:0;if(this.t>0)if(d==0)r=this[0]%n;else for(var i=this.t-1;i>=0;--i){r=(d*r+this[i])%n;}return r;}// (public) 1/this % m (HAC 14.61)
	function bnModInverse(m){var ac=m.isEven();if(this.signum()===0)throw new Error('division by zero');if(this.isEven()&&ac||m.signum()==0)return BigInteger.ZERO;var u=m.clone(),v=this.clone();var a=nbv(1),b=nbv(0),c=nbv(0),d=nbv(1);while(u.signum()!=0){while(u.isEven()){u.rShiftTo(1,u);if(ac){if(!a.isEven()||!b.isEven()){a.addTo(this,a);b.subTo(m,b);}a.rShiftTo(1,a);}else if(!b.isEven())b.subTo(m,b);b.rShiftTo(1,b);}while(v.isEven()){v.rShiftTo(1,v);if(ac){if(!c.isEven()||!d.isEven()){c.addTo(this,c);d.subTo(m,d);}c.rShiftTo(1,c);}else if(!d.isEven())d.subTo(m,d);d.rShiftTo(1,d);}if(u.compareTo(v)>=0){u.subTo(v,u);if(ac)a.subTo(c,a);b.subTo(d,b);}else{v.subTo(u,v);if(ac)c.subTo(a,c);d.subTo(b,d);}}if(v.compareTo(BigInteger.ONE)!=0)return BigInteger.ZERO;while(d.compareTo(m)>=0){d.subTo(m,d);}while(d.signum()<0){d.addTo(m,d);}return d;}var lowprimes=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997];var lplim=(1<<26)/lowprimes[lowprimes.length-1];// (public) test primality with certainty >= 1-.5^t
	function bnIsProbablePrime(t){var i,x=this.abs();if(x.t==1&&x[0]<=lowprimes[lowprimes.length-1]){for(i=0;i<lowprimes.length;++i){if(x[0]==lowprimes[i])return true;}return false;}if(x.isEven())return false;i=1;while(i<lowprimes.length){var m=lowprimes[i],j=i+1;while(j<lowprimes.length&&m<lplim){m*=lowprimes[j++];}m=x.modInt(m);while(i<j){if(m%lowprimes[i++]==0)return false;}}return x.millerRabin(t);}// (protected) true if probably prime (HAC 4.24, Miller-Rabin)
	function bnpMillerRabin(t){var n1=this.subtract(BigInteger.ONE);var k=n1.getLowestSetBit();if(k<=0)return false;var r=n1.shiftRight(k);t=t+1>>1;if(t>lowprimes.length)t=lowprimes.length;var a=new BigInteger(null);var j,bases=[];for(var i=0;i<t;++i){for(;;){j=lowprimes[Math.floor(Math.random()*lowprimes.length)];if(bases.indexOf(j)==-1)break;}bases.push(j);a.fromInt(j);var y=a.modPow(r,this);if(y.compareTo(BigInteger.ONE)!=0&&y.compareTo(n1)!=0){var j=1;while(j++<k&&y.compareTo(n1)!=0){y=y.modPowInt(2,this);if(y.compareTo(BigInteger.ONE)==0)return false;}if(y.compareTo(n1)!=0)return false;}}return true;}// protected
	proto.chunkSize=bnpChunkSize;proto.toRadix=bnpToRadix;proto.fromRadix=bnpFromRadix;proto.fromNumber=bnpFromNumber;proto.bitwiseTo=bnpBitwiseTo;proto.changeBit=bnpChangeBit;proto.addTo=bnpAddTo;proto.dMultiply=bnpDMultiply;proto.dAddOffset=bnpDAddOffset;proto.multiplyLowerTo=bnpMultiplyLowerTo;proto.multiplyUpperTo=bnpMultiplyUpperTo;proto.modInt=bnpModInt;proto.millerRabin=bnpMillerRabin;// public
	proto.clone=bnClone;proto.intValue=bnIntValue;proto.byteValue=bnByteValue;proto.shortValue=bnShortValue;proto.signum=bnSigNum;proto.toByteArray=bnToByteArray;proto.equals=bnEquals;proto.min=bnMin;proto.max=bnMax;proto.and=bnAnd;proto.or=bnOr;proto.xor=bnXor;proto.andNot=bnAndNot;proto.not=bnNot;proto.shiftLeft=bnShiftLeft;proto.shiftRight=bnShiftRight;proto.getLowestSetBit=bnGetLowestSetBit;proto.bitCount=bnBitCount;proto.testBit=bnTestBit;proto.setBit=bnSetBit;proto.clearBit=bnClearBit;proto.flipBit=bnFlipBit;proto.add=bnAdd;proto.subtract=bnSubtract;proto.multiply=bnMultiply;proto.divide=bnDivide;proto.remainder=bnRemainder;proto.divideAndRemainder=bnDivideAndRemainder;proto.modPow=bnModPow;proto.modInverse=bnModInverse;proto.pow=bnPow;proto.gcd=bnGCD;proto.isProbablePrime=bnIsProbablePrime;// JSBN-specific extension
	proto.square=bnSquare;// constants
	BigInteger.ZERO=nbv(0);BigInteger.ONE=nbv(1);BigInteger.valueOf=nbv;module.exports=BigInteger;/***/},/* 25 *//***/function(module,exports,__webpack_require__){var assert=__webpack_require__(0);var Buffer=__webpack_require__(26).Buffer;var BigInteger=__webpack_require__(1);var THREE=BigInteger.valueOf(3);function Point(curve,x,y,z){assert.notStrictEqual(z,undefined,'Missing Z coordinate');this.curve=curve;this.x=x;this.y=y;this.z=z;this._zInv=null;this.compressed=true;}Object.defineProperty(Point.prototype,'zInv',{get:function get(){if(this._zInv===null){this._zInv=this.z.modInverse(this.curve.p);}return this._zInv;}});Object.defineProperty(Point.prototype,'affineX',{get:function get(){return this.x.multiply(this.zInv).mod(this.curve.p);}});Object.defineProperty(Point.prototype,'affineY',{get:function get(){return this.y.multiply(this.zInv).mod(this.curve.p);}});Point.fromAffine=function(curve,x,y){return new Point(curve,x,y,BigInteger.ONE);};Point.prototype.equals=function(other){if(other===this)return true;if(this.curve.isInfinity(this))return this.curve.isInfinity(other);if(this.curve.isInfinity(other))return this.curve.isInfinity(this);// u = Y2 * Z1 - Y1 * Z2
	var u=other.y.multiply(this.z).subtract(this.y.multiply(other.z)).mod(this.curve.p);if(u.signum()!==0)return false;// v = X2 * Z1 - X1 * Z2
	var v=other.x.multiply(this.z).subtract(this.x.multiply(other.z)).mod(this.curve.p);return v.signum()===0;};Point.prototype.negate=function(){var y=this.curve.p.subtract(this.y);return new Point(this.curve,this.x,y,this.z);};Point.prototype.add=function(b){if(this.curve.isInfinity(this))return b;if(this.curve.isInfinity(b))return this;var x1=this.x;var y1=this.y;var x2=b.x;var y2=b.y;// u = Y2 * Z1 - Y1 * Z2
	var u=y2.multiply(this.z).subtract(y1.multiply(b.z)).mod(this.curve.p);// v = X2 * Z1 - X1 * Z2
	var v=x2.multiply(this.z).subtract(x1.multiply(b.z)).mod(this.curve.p);if(v.signum()===0){if(u.signum()===0){return this.twice();// this == b, so double
	}return this.curve.infinity;// this = -b, so infinity
	}var v2=v.square();var v3=v2.multiply(v);var x1v2=x1.multiply(v2);var zu2=u.square().multiply(this.z);// x3 = v * (z2 * (z1 * u^2 - 2 * x1 * v^2) - v^3)
	var x3=zu2.subtract(x1v2.shiftLeft(1)).multiply(b.z).subtract(v3).multiply(v).mod(this.curve.p);// y3 = z2 * (3 * x1 * u * v^2 - y1 * v^3 - z1 * u^3) + u * v^3
	var y3=x1v2.multiply(THREE).multiply(u).subtract(y1.multiply(v3)).subtract(zu2.multiply(u)).multiply(b.z).add(u.multiply(v3)).mod(this.curve.p);// z3 = v^3 * z1 * z2
	var z3=v3.multiply(this.z).multiply(b.z).mod(this.curve.p);return new Point(this.curve,x3,y3,z3);};Point.prototype.twice=function(){if(this.curve.isInfinity(this))return this;if(this.y.signum()===0)return this.curve.infinity;var x1=this.x;var y1=this.y;var y1z1=y1.multiply(this.z).mod(this.curve.p);var y1sqz1=y1z1.multiply(y1).mod(this.curve.p);var a=this.curve.a;// w = 3 * x1^2 + a * z1^2
	var w=x1.square().multiply(THREE);if(a.signum()!==0){w=w.add(this.z.square().multiply(a));}w=w.mod(this.curve.p);// x3 = 2 * y1 * z1 * (w^2 - 8 * x1 * y1^2 * z1)
	var x3=w.square().subtract(x1.shiftLeft(3).multiply(y1sqz1)).shiftLeft(1).multiply(y1z1).mod(this.curve.p);// y3 = 4 * y1^2 * z1 * (3 * w * x1 - 2 * y1^2 * z1) - w^3
	var y3=w.multiply(THREE).multiply(x1).subtract(y1sqz1.shiftLeft(1)).shiftLeft(2).multiply(y1sqz1).subtract(w.pow(3)).mod(this.curve.p);// z3 = 8 * (y1 * z1)^3
	var z3=y1z1.pow(3).shiftLeft(3).mod(this.curve.p);return new Point(this.curve,x3,y3,z3);};// Simple NAF (Non-Adjacent Form) multiplication algorithm
	// TODO: modularize the multiplication algorithm
	Point.prototype.multiply=function(k){if(this.curve.isInfinity(this))return this;if(k.signum()===0)return this.curve.infinity;var e=k;var h=e.multiply(THREE);var neg=this.negate();var R=this;for(var i=h.bitLength()-2;i>0;--i){var hBit=h.testBit(i);var eBit=e.testBit(i);R=R.twice();if(hBit!==eBit){R=R.add(hBit?this:neg);}}return R;};// Compute this*j + x*k (simultaneous multiplication)
	Point.prototype.multiplyTwo=function(j,x,k){var i=Math.max(j.bitLength(),k.bitLength())-1;var R=this.curve.infinity;var both=this.add(x);while(i>=0){var jBit=j.testBit(i);var kBit=k.testBit(i);R=R.twice();if(jBit){if(kBit){R=R.add(both);}else{R=R.add(this);}}else if(kBit){R=R.add(x);}--i;}return R;};Point.prototype.getEncoded=function(compressed){if(compressed==null)compressed=this.compressed;if(this.curve.isInfinity(this))return Buffer.alloc(1,0);// Infinity point encoded is simply '00'
	var x=this.affineX;var y=this.affineY;var byteLength=this.curve.pLength;var buffer;// 0x02/0x03 | X
	if(compressed){buffer=Buffer.allocUnsafe(1+byteLength);buffer.writeUInt8(y.isEven()?0x02:0x03,0);// 0x04 | X | Y
	}else{buffer=Buffer.allocUnsafe(1+byteLength+byteLength);buffer.writeUInt8(0x04,0);y.toBuffer(byteLength).copy(buffer,1+byteLength);}x.toBuffer(byteLength).copy(buffer,1);return buffer;};Point.decodeFrom=function(curve,buffer){var type=buffer.readUInt8(0);var compressed=type!==4;var byteLength=Math.floor((curve.p.bitLength()+7)/8);var x=BigInteger.fromBuffer(buffer.slice(1,1+byteLength));var Q;if(compressed){assert.equal(buffer.length,byteLength+1,'Invalid sequence length');assert(type===0x02||type===0x03,'Invalid sequence tag');var isOdd=type===0x03;Q=curve.pointFromX(isOdd,x);}else{assert.equal(buffer.length,1+byteLength+byteLength,'Invalid sequence length');var y=BigInteger.fromBuffer(buffer.slice(1+byteLength));Q=Point.fromAffine(curve,x,y);}Q.compressed=compressed;return Q;};Point.prototype.toString=function(){if(this.curve.isInfinity(this))return'(INFINITY)';return'('+this.affineX.toString()+','+this.affineY.toString()+')';};module.exports=Point;/***/},/* 26 *//***/function(module,exports,__webpack_require__){/* eslint-disable node/no-deprecated-api */var buffer=__webpack_require__(23);var Buffer=buffer.Buffer;// alternative to using Object.keys for old browsers
	function copyProps(src,dst){for(var key in src){dst[key]=src[key];}}if(Buffer.from&&Buffer.alloc&&Buffer.allocUnsafe&&Buffer.allocUnsafeSlow){module.exports=buffer;}else{// Copy properties from require('buffer')
	copyProps(buffer,exports);exports.Buffer=SafeBuffer;}function SafeBuffer(arg,encodingOrOffset,length){return Buffer(arg,encodingOrOffset,length);}// Copy static methods from Buffer
	copyProps(Buffer,SafeBuffer);SafeBuffer.from=function(arg,encodingOrOffset,length){if(typeof arg==='number'){throw new TypeError('Argument must not be a number');}return Buffer(arg,encodingOrOffset,length);};SafeBuffer.alloc=function(size,fill,encoding){if(typeof size!=='number'){throw new TypeError('Argument must be a number');}var buf=Buffer(size);if(fill!==undefined){if(typeof encoding==='string'){buf.fill(fill,encoding);}else{buf.fill(fill);}}else{buf.fill(0);}return buf;};SafeBuffer.allocUnsafe=function(size){if(typeof size!=='number'){throw new TypeError('Argument must be a number');}return Buffer(size);};SafeBuffer.allocUnsafeSlow=function(size){if(typeof size!=='number'){throw new TypeError('Argument must be a number');}return buffer.SlowBuffer(size);};/***/},/* 27 *//***/function(module,exports,__webpack_require__){var assert=__webpack_require__(0);var BigInteger=__webpack_require__(1);var Point=__webpack_require__(25);function Curve(p,a,b,Gx,Gy,n,h){this.p=p;this.a=a;this.b=b;this.G=Point.fromAffine(this,Gx,Gy);this.n=n;this.h=h;this.infinity=new Point(this,null,null,BigInteger.ZERO);// result caching
	this.pOverFour=p.add(BigInteger.ONE).shiftRight(2);// determine size of p in bytes
	this.pLength=Math.floor((this.p.bitLength()+7)/8);}Curve.prototype.pointFromX=function(isOdd,x){var alpha=x.pow(3).add(this.a.multiply(x)).add(this.b).mod(this.p);var beta=alpha.modPow(this.pOverFour,this.p);// XXX: not compatible with all curves
	var y=beta;if(beta.isEven()^!isOdd){y=this.p.subtract(y);// -y % p
	}return Point.fromAffine(this,x,y);};Curve.prototype.isInfinity=function(Q){if(Q===this.infinity)return true;return Q.z.signum()===0&&Q.y.signum()!==0;};Curve.prototype.isOnCurve=function(Q){if(this.isInfinity(Q))return true;var x=Q.affineX;var y=Q.affineY;var a=this.a;var b=this.b;var p=this.p;// Check that xQ and yQ are integers in the interval [0, p - 1]
	if(x.signum()<0||x.compareTo(p)>=0)return false;if(y.signum()<0||y.compareTo(p)>=0)return false;// and check that y^2 = x^3 + ax + b (mod p)
	var lhs=y.square().mod(p);var rhs=x.pow(3).add(a.multiply(x)).add(b).mod(p);return lhs.equals(rhs);};/**
	 * Validate an elliptic curve point.
	 *
	 * See SEC 1, section 3.2.2.1: Elliptic Curve Public Key Validation Primitive
	 */Curve.prototype.validate=function(Q){// Check Q != O
	assert(!this.isInfinity(Q),'Point is at infinity');assert(this.isOnCurve(Q),'Point is not on the curve');// Check nQ = O (where Q is a scalar multiple of G)
	var nQ=Q.multiply(this.n);assert(this.isInfinity(nQ),'Point is not a scalar multiple of G');return true;};module.exports=Curve;/***/},/* 28 *//***/function(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_bytebuffer__=__webpack_require__(6);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_bytebuffer___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_bytebuffer__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__serializer_src_SerializerValidation__=__webpack_require__(9);var DB_MAX_INSTANCE_ID=__WEBPACK_IMPORTED_MODULE_0_bytebuffer__["Long"].fromNumber(Math.pow(2,48)-1);var ObjectId=function(){function ObjectId(space,type,instance){(0,_classCallCheck3.default)(this,ObjectId);this.space=space;this.type=type;this.instance=instance;var instance_string=this.instance.toString();var _ObjectId=this.space+'.'+this.type+'.'+instance_string;if(!__WEBPACK_IMPORTED_MODULE_1__serializer_src_SerializerValidation__["a"/* default */].is_digits(instance_string)){throw new('Invalid object id '+_ObjectId)();}}(0,_createClass3.default)(ObjectId,[{key:'toLong',value:function toLong(){return __WEBPACK_IMPORTED_MODULE_0_bytebuffer__["Long"].fromNumber(this.space).shiftLeft(56).or(__WEBPACK_IMPORTED_MODULE_0_bytebuffer__["Long"].fromNumber(this.type).shiftLeft(48).or(this.instance));}},{key:'appendByteBuffer',value:function appendByteBuffer(b){return b.writeUint64(this.toLong());}},{key:'toString',value:function toString(){return this.space+'.'+this.type+'.'+this.instance.toString();}}],[{key:'fromString',value:function fromString(value){if(value.space!==undefined&&value.type!==undefined&&value.instance!==undefined){return value;}var params=__WEBPACK_IMPORTED_MODULE_1__serializer_src_SerializerValidation__["a"/* default */].require_match(/^([0-9]+)\.([0-9]+)\.([0-9]+)$/,__WEBPACK_IMPORTED_MODULE_1__serializer_src_SerializerValidation__["a"/* default */].required(value,"ObjectId"),"ObjectId");return new ObjectId(parseInt(params[1]),parseInt(params[2]),__WEBPACK_IMPORTED_MODULE_0_bytebuffer__["Long"].fromString(params[3]));}},{key:'fromLong',value:function fromLong(long){var space=long.shiftRight(56).toInt();var type=long.shiftRight(48).toInt()&0x00ff;var instance=long.and(DB_MAX_INSTANCE_ID);return new ObjectId(space,type,instance);}},{key:'fromByteBuffer',value:function fromByteBuffer(b){return ObjectId.fromLong(b.readUint64());}}]);return ObjectId;}();/* harmony default export */__webpack_exports__["a"]=ObjectId;/***/},/* 29 *//***/function(module,exports,__webpack_require__){;(function(root,factory){if(true){// CommonJS
	module.exports=exports=factory(__webpack_require__(3));}else if(typeof define==="function"&&define.amd){// AMD
	define(["./core"],factory);}else{// Global (browser)
	factory(root.CryptoJS);}})(this,function(CryptoJS){(function(){// Shortcuts
	var C=CryptoJS;var C_lib=C.lib;var WordArray=C_lib.WordArray;var C_enc=C.enc;/**
		     * Base64 encoding strategy.
		     */var Base64=C_enc.Base64={/**
		         * Converts a word array to a Base64 string.
		         *
		         * @param {WordArray} wordArray The word array.
		         *
		         * @return {string} The Base64 string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
		         */stringify:function stringify(wordArray){// Shortcuts
	var words=wordArray.words;var sigBytes=wordArray.sigBytes;var map=this._map;// Clamp excess bits
	wordArray.clamp();// Convert
	var base64Chars=[];for(var i=0;i<sigBytes;i+=3){var byte1=words[i>>>2]>>>24-i%4*8&0xff;var byte2=words[i+1>>>2]>>>24-(i+1)%4*8&0xff;var byte3=words[i+2>>>2]>>>24-(i+2)%4*8&0xff;var triplet=byte1<<16|byte2<<8|byte3;for(var j=0;j<4&&i+j*0.75<sigBytes;j++){base64Chars.push(map.charAt(triplet>>>6*(3-j)&0x3f));}}// Add padding
	var paddingChar=map.charAt(64);if(paddingChar){while(base64Chars.length%4){base64Chars.push(paddingChar);}}return base64Chars.join('');},/**
		         * Converts a Base64 string to a word array.
		         *
		         * @param {string} base64Str The Base64 string.
		         *
		         * @return {WordArray} The word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
		         */parse:function parse(base64Str){// Shortcuts
	var base64StrLength=base64Str.length;var map=this._map;var reverseMap=this._reverseMap;if(!reverseMap){reverseMap=this._reverseMap=[];for(var j=0;j<map.length;j++){reverseMap[map.charCodeAt(j)]=j;}}// Ignore padding
	var paddingChar=map.charAt(64);if(paddingChar){var paddingIndex=base64Str.indexOf(paddingChar);if(paddingIndex!==-1){base64StrLength=paddingIndex;}}// Convert
	return parseLoop(base64Str,base64StrLength,reverseMap);},_map:'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='};function parseLoop(base64Str,base64StrLength,reverseMap){var words=[];var nBytes=0;for(var i=0;i<base64StrLength;i++){if(i%4){var bits1=reverseMap[base64Str.charCodeAt(i-1)]<<i%4*2;var bits2=reverseMap[base64Str.charCodeAt(i)]>>>6-i%4*2;words[nBytes>>>2]|=(bits1|bits2)<<24-nBytes%4*8;nBytes++;}}return WordArray.create(words,nBytes);}})();return CryptoJS.enc.Base64;});/***/},/* 30 *//***/function(module,exports,__webpack_require__){;(function(root,factory,undef){if(true){// CommonJS
	module.exports=exports=factory(__webpack_require__(3),__webpack_require__(53),__webpack_require__(54));}else if(typeof define==="function"&&define.amd){// AMD
	define(["./core","./sha1","./hmac"],factory);}else{// Global (browser)
	factory(root.CryptoJS);}})(this,function(CryptoJS){(function(){// Shortcuts
	var C=CryptoJS;var C_lib=C.lib;var Base=C_lib.Base;var WordArray=C_lib.WordArray;var C_algo=C.algo;var MD5=C_algo.MD5;/**
		     * This key derivation function is meant to conform with EVP_BytesToKey.
		     * www.openssl.org/docs/crypto/EVP_BytesToKey.html
		     */var EvpKDF=C_algo.EvpKDF=Base.extend({/**
		         * Configuration options.
		         *
		         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
		         * @property {Hasher} hasher The hash algorithm to use. Default: MD5
		         * @property {number} iterations The number of iterations to perform. Default: 1
		         */cfg:Base.extend({keySize:128/32,hasher:MD5,iterations:1}),/**
		         * Initializes a newly created key derivation function.
		         *
		         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
		         *
		         * @example
		         *
		         *     var kdf = CryptoJS.algo.EvpKDF.create();
		         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
		         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
		         */init:function init(cfg){this.cfg=this.cfg.extend(cfg);},/**
		         * Derives a key from a password.
		         *
		         * @param {WordArray|string} password The password.
		         * @param {WordArray|string} salt A salt.
		         *
		         * @return {WordArray} The derived key.
		         *
		         * @example
		         *
		         *     var key = kdf.compute(password, salt);
		         */compute:function compute(password,salt){// Shortcut
	var cfg=this.cfg;// Init hasher
	var hasher=cfg.hasher.create();// Initial values
	var derivedKey=WordArray.create();// Shortcuts
	var derivedKeyWords=derivedKey.words;var keySize=cfg.keySize;var iterations=cfg.iterations;// Generate key
	while(derivedKeyWords.length<keySize){if(block){hasher.update(block);}var block=hasher.update(password).finalize(salt);hasher.reset();// Iterations
	for(var i=1;i<iterations;i++){block=hasher.finalize(block);hasher.reset();}derivedKey.concat(block);}derivedKey.sigBytes=keySize*4;return derivedKey;}});/**
		     * Derives a key from a password.
		     *
		     * @param {WordArray|string} password The password.
		     * @param {WordArray|string} salt A salt.
		     * @param {Object} cfg (Optional) The configuration options to use for this computation.
		     *
		     * @return {WordArray} The derived key.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var key = CryptoJS.EvpKDF(password, salt);
		     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });
		     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });
		     */C.EvpKDF=function(password,salt,cfg){return EvpKDF.create(cfg).compute(password,salt);};})();return CryptoJS.EvpKDF;});/***/},/* 31 *//***/function(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__ecdsa__=__webpack_require__(57);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__hash__=__webpack_require__(2);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2_ecurve__=__webpack_require__(8);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2_ecurve___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_ecurve__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3_assert__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3_assert___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_assert__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4_bigi__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4_bigi___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_bigi__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5__PublicKey__=__webpack_require__(5);var secp256k1=Object(__WEBPACK_IMPORTED_MODULE_2_ecurve__["getCurveByName"])('secp256k1');var Signature=function(){function Signature(r1,s1,i1){(0,_classCallCheck3.default)(this,Signature);this.r=r1;this.s=s1;this.i=i1;__WEBPACK_IMPORTED_MODULE_3_assert___default.a.equal(this.r!=null,true,'Missing parameter');__WEBPACK_IMPORTED_MODULE_3_assert___default.a.equal(this.s!=null,true,'Missing parameter');__WEBPACK_IMPORTED_MODULE_3_assert___default.a.equal(this.i!=null,true,'Missing parameter');}(0,_createClass3.default)(Signature,[{key:'toBuffer',value:function toBuffer(){var buf;buf=new Buffer(65);buf.writeUInt8(this.i,0);this.r.toBuffer(32).copy(buf,1);this.s.toBuffer(32).copy(buf,33);return buf;}},{key:'recoverPublicKeyFromBuffer',value:function recoverPublicKeyFromBuffer(buffer){return this.recoverPublicKey(Object(__WEBPACK_IMPORTED_MODULE_1__hash__["sha256"])(buffer));}},{key:'recoverPublicKey',/**
	        @return {PublicKey}
	    */value:function recoverPublicKey(sha256_buffer){var Q=void 0,e=void 0,i=void 0;e=__WEBPACK_IMPORTED_MODULE_4_bigi___default.a.fromBuffer(sha256_buffer);i=this.i;i-=27;i=i&3;Q=Object(__WEBPACK_IMPORTED_MODULE_0__ecdsa__["b"/* recoverPubKey */])(secp256k1,e,this,i);return __WEBPACK_IMPORTED_MODULE_5__PublicKey__["a"/* default */].fromPoint(Q);}},{key:'verifyBuffer',/**
	        @param {Buffer} un-hashed
	        @param {./PublicKey}
	        @return {boolean}
	    */value:function verifyBuffer(buf,public_key){var _hash=Object(__WEBPACK_IMPORTED_MODULE_1__hash__["sha256"])(buf);return this.verifyHash(_hash,public_key);}},{key:'verifyHash',value:function verifyHash(hash,public_key){__WEBPACK_IMPORTED_MODULE_3_assert___default.a.equal(hash.length,32,"A SHA 256 should be 32 bytes long, instead got "+hash.length);return Object(__WEBPACK_IMPORTED_MODULE_0__ecdsa__["d"/* verify */])(secp256k1,hash,{r:this.r,s:this.s},public_key.Q);}},{key:'toByteBuffer',/* <HEX> */value:function toByteBuffer(){var b;b=new ByteBuffer(ByteBuffer.DEFAULT_CAPACITY,ByteBuffer.LITTLE_ENDIAN);this.appendByteBuffer(b);return b.copy(0,b.offset);}},{key:'toHex',value:function toHex(){return this.toBuffer().toString("hex");}},{key:'verifyHex',value:function verifyHex(hex,public_key){var buf;buf=new Buffer(hex,'hex');return this.verifyBuffer(buf,public_key);}}],[{key:'fromBuffer',value:function fromBuffer(buf){var i,r,s;__WEBPACK_IMPORTED_MODULE_3_assert___default.a.equal(buf.length,65,'Invalid signature length');i=buf.readUInt8(0);__WEBPACK_IMPORTED_MODULE_3_assert___default.a.equal(i-27,i-27&7,'Invalid signature parameter');r=__WEBPACK_IMPORTED_MODULE_4_bigi___default.a.fromBuffer(buf.slice(1,33));s=__WEBPACK_IMPORTED_MODULE_4_bigi___default.a.fromBuffer(buf.slice(33));return new Signature(r,s,i);}},{key:'signBuffer',/**
	        @param {Buffer} buf
	        @param {PrivateKey} private_key
	        @return {Signature}
	    */value:function signBuffer(buf,private_key){var _hash=Object(__WEBPACK_IMPORTED_MODULE_1__hash__["sha256"])(buf);return Signature.signBufferSha256(_hash,private_key);}/** Sign a buffer of exactally 32 bytes in size (sha256(text))
	        @param {Buffer} buf - 32 bytes binary
	        @param {PrivateKey} private_key
	        @return {Signature}
	    */},{key:'signBufferSha256',value:function signBufferSha256(buf_sha256,private_key){if(buf_sha256.length!==32||!Buffer.isBuffer(buf_sha256))throw new Error("buf_sha256: 32 byte buffer requred");var der,e,ecsignature,i,lenR,lenS,nonce;i=null;nonce=0;e=__WEBPACK_IMPORTED_MODULE_4_bigi___default.a.fromBuffer(buf_sha256);while(true){ecsignature=Object(__WEBPACK_IMPORTED_MODULE_0__ecdsa__["c"/* sign */])(secp256k1,buf_sha256,private_key.d,nonce++);der=ecsignature.toDER();lenR=der[3];lenS=der[5+lenR];if(lenR===32&&lenS===32){i=Object(__WEBPACK_IMPORTED_MODULE_0__ecdsa__["a"/* calcPubKeyRecoveryParam */])(secp256k1,e,ecsignature,private_key.toPublicKey().Q);i+=4;// compressed
	i+=27;// compact  //  24 or 27 :( forcing odd-y 2nd key candidate)
	break;}if(nonce%10===0){console.log("WARN: "+nonce+" attempts to find canonical signature");}}return new Signature(ecsignature.r,ecsignature.s,i);}},{key:'sign',value:function sign(string,private_key){return Signature.signBuffer(new Buffer(string),private_key);}},{key:'fromHex',value:function fromHex(hex){return Signature.fromBuffer(new Buffer(hex,"hex"));}},{key:'signHex',value:function signHex(hex,private_key){var buf;buf=new Buffer(hex,'hex');return Signature.signBuffer(buf,private_key);}}]);return Signature;}();/* harmony default export */__webpack_exports__["a"]=Signature;/***/},/* 32 *//***/function(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (immutable) */__webpack_exports__["a"]=enforce;function enforce(type,value){// Copied from https://github.com/bitcoinjs/bitcoinjs-lib
	switch(type){case'Array':{if(Array.isArray(value))return;break;}case'Boolean':{if(typeof value==='boolean')return;break;}case'Buffer':{if(Buffer.isBuffer(value))return;break;}case'Number':{if(typeof value==='number')return;break;}case'String':{if(typeof value==='string')return;break;}default:{if(getName(value.constructor)===getName(type))return;}}throw new TypeError('Expected '+(getName(type)||type)+', got '+value);}function getName(fn){// Why not fn.name: https://kangax.github.io/compat-table6/#function_name_property
	var match=fn.toString().match(/function (.*?)\(/);return match?match[1]:null;}/***/},/* 33 *//***/function(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (immutable) */__webpack_exports__["a"]=normalize;function normalize(brainKey){if(typeof brainKey!=='string'){throw new Error("string required for brainKey");}brainKey=brainKey.trim();return brainKey.split(/[\t\n\v\f\r ]+/).join(' ');}/***/},/* 34 *//***/function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;!function(globals){'use strict';//*** UMD BEGIN
	if(true){//require.js / AMD
	!(__WEBPACK_AMD_DEFINE_ARRAY__=[],__WEBPACK_AMD_DEFINE_RESULT__=function(){return secureRandom;}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__),__WEBPACK_AMD_DEFINE_RESULT__!==undefined&&(module.exports=__WEBPACK_AMD_DEFINE_RESULT__));}else if(typeof module!=='undefined'&&module.exports){//CommonJS
	module.exports=secureRandom;}else{//script / browser
	globals.secureRandom=secureRandom;}//*** UMD END
	//options.type is the only valid option
	function secureRandom(count,options){options=options||{type:'Array'//we check for process.pid to prevent browserify from tricking us
	};if(typeof process!='undefined'&&typeof process.pid=='number'){return nodeRandom(count,options);}else{var crypto=window.crypto||window.msCrypto;if(!crypto)throw new Error("Your browser does not support window.crypto.");return browserRandom(count,options);}}function nodeRandom(count,options){var crypto=__webpack_require__(14);var buf=crypto.randomBytes(count);switch(options.type){case'Array':return[].slice.call(buf);case'Buffer':return buf;case'Uint8Array':var arr=new Uint8Array(count);for(var i=0;i<count;++i){arr[i]=buf.readUInt8(i);}return arr;default:throw new Error(options.type+" is unsupported.");}}function browserRandom(count,options){var nativeArr=new Uint8Array(count);var crypto=window.crypto||window.msCrypto;crypto.getRandomValues(nativeArr);switch(options.type){case'Array':return[].slice.call(nativeArr);case'Buffer':try{var b=new Buffer(1);}catch(e){throw new Error('Buffer not supported in this environment. Use Node.js or Browserify for browser support.');}return new Buffer(nativeArr);case'Uint8Array':return nativeArr;default:throw new Error(options.type+" is unsupported.");}}secureRandom.randomArray=function(byteCount){return secureRandom(byteCount,{type:'Array'});};secureRandom.randomUint8Array=function(byteCount){return secureRandom(byteCount,{type:'Uint8Array'});};secureRandom.randomBuffer=function(byteCount){return secureRandom(byteCount,{type:'Buffer'});};}(this);/***/},/* 35 *//***/function(module,__webpack_exports__,__webpack_require__){"use strict";Object.defineProperty(__webpack_exports__,"__esModule",{value:true});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"operation",function(){return operation;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"void_ext",function(){return void_ext;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__types__=__webpack_require__(16);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__serializer__=__webpack_require__(11);var _WEBPACK_IMPORTED_MO=__WEBPACK_IMPORTED_MODULE_0__types__["a"/* default */],uint8=_WEBPACK_IMPORTED_MO.uint8,uint16=_WEBPACK_IMPORTED_MO.uint16,uint32=_WEBPACK_IMPORTED_MO.uint32,int64=_WEBPACK_IMPORTED_MO.int64,uint64=_WEBPACK_IMPORTED_MO.uint64,string=_WEBPACK_IMPORTED_MO.string,bytes=_WEBPACK_IMPORTED_MO.bytes,bool=_WEBPACK_IMPORTED_MO.bool,array=_WEBPACK_IMPORTED_MO.array,fixed_array=_WEBPACK_IMPORTED_MO.fixed_array,protocol_id_type=_WEBPACK_IMPORTED_MO.protocol_id_type,object_id_type=_WEBPACK_IMPORTED_MO.object_id_type,vote_id=_WEBPACK_IMPORTED_MO.vote_id,future_extensions=_WEBPACK_IMPORTED_MO.future_extensions,static_variant=_WEBPACK_IMPORTED_MO.static_variant,map=_WEBPACK_IMPORTED_MO.map,set=_WEBPACK_IMPORTED_MO.set,public_key=_WEBPACK_IMPORTED_MO.public_key,address=_WEBPACK_IMPORTED_MO.address,time_point_sec=_WEBPACK_IMPORTED_MO.time_point_sec,optional=_WEBPACK_IMPORTED_MO.optional;// future_extensions = types.void;
	/*
	When updating generated code
	Replace:  operation = static_variant [
	with:     operation.st_operations = [
	
	Delete:
	public_key = new Serializer(
	    "public_key"
	    key_data: bytes 33
	)
	
	*/// Place-holder, their are dependencies on "operation" .. The final list of
	// operations is not avialble until the very end of the generated code.
	// See: operation.st_operations = ...
	var operation=static_variant();// module.exports["operation"] = operation;
	// For module.exports
	var Serializer=function Serializer(operation_name,serilization_types_object){return new __WEBPACK_IMPORTED_MODULE_1__serializer__["a"/* default */](operation_name,serilization_types_object);// return module.exports[operation_name] = s;
	};var void_ext=new Serializer("void_ext");var cybex_ext_vesting=new Serializer("cybex_ext_vesting",{vesting_period:uint64,public_key:public_key});var cybex_ext_transfer_vesting=new Serializer("cybex_ext_transfer_vesting",{vesting_cliff:uint64,vesting_duration:uint64});var cybex_ext_swap=new Serializer("cybex_ext_swap",{cybex_ext_swap:string});var cybex_ext_xfer_to_name=new Serializer("cybex_ext_xfer_to_name",{name:string,asset_sym:string,fee_asset_sym:string,hw_cookie1:uint8,hw_cookie2:uint8});var cybex_xfer_item=new Serializer("cybex_xfer_item",{name:string,amount:string});var cybex_ext_xfer_to_many=new Serializer("cybex_ext_xfer_to_many",{list:array(cybex_xfer_item)});var future_extensions=static_variant([void_ext,cybex_ext_vesting,cybex_ext_swap,cybex_ext_transfer_vesting,cybex_ext_xfer_to_name,cybex_ext_xfer_to_many]);// Custom-types follow Generated code:
	// ##  Generated code follows
	// # programs/js_operation_serializer > npm i -g decaffeinate
	// ## -------------------------------
	var transfer_operation_fee_parameters=new Serializer("transfer_operation_fee_parameters",{fee:uint64,price_per_kbyte:uint32});/* harmony export (immutable) */__webpack_exports__["transfer_operation_fee_parameters"]=transfer_operation_fee_parameters;var limit_order_create_operation_fee_parameters=new Serializer("limit_order_create_operation_fee_parameters",{fee:uint64});/* harmony export (immutable) */__webpack_exports__["limit_order_create_operation_fee_parameters"]=limit_order_create_operation_fee_parameters;var limit_order_cancel_operation_fee_parameters=new Serializer("limit_order_cancel_operation_fee_parameters",{fee:uint64});/* harmony export (immutable) */__webpack_exports__["limit_order_cancel_operation_fee_parameters"]=limit_order_cancel_operation_fee_parameters;var call_order_update_operation_fee_parameters=new Serializer("call_order_update_operation_fee_parameters",{fee:uint64});/* harmony export (immutable) */__webpack_exports__["call_order_update_operation_fee_parameters"]=call_order_update_operation_fee_parameters;var fill_order_operation_fee_parameters=new Serializer("fill_order_operation_fee_parameters");/* harmony export (immutable) */__webpack_exports__["fill_order_operation_fee_parameters"]=fill_order_operation_fee_parameters;var account_create_operation_fee_parameters=new Serializer("account_create_operation_fee_parameters",{basic_fee:uint64,premium_fee:uint64,price_per_kbyte:uint32});/* harmony export (immutable) */__webpack_exports__["account_create_operation_fee_parameters"]=account_create_operation_fee_parameters;var account_update_operation_fee_parameters=new Serializer("account_update_operation_fee_parameters",{fee:int64,price_per_kbyte:uint32});/* harmony export (immutable) */__webpack_exports__["account_update_operation_fee_parameters"]=account_update_operation_fee_parameters;var account_whitelist_operation_fee_parameters=new Serializer("account_whitelist_operation_fee_parameters",{fee:int64});/* harmony export (immutable) */__webpack_exports__["account_whitelist_operation_fee_parameters"]=account_whitelist_operation_fee_parameters;var account_upgrade_operation_fee_parameters=new Serializer("account_upgrade_operation_fee_parameters",{membership_annual_fee:uint64,membership_lifetime_fee:uint64});/* harmony export (immutable) */__webpack_exports__["account_upgrade_operation_fee_parameters"]=account_upgrade_operation_fee_parameters;var account_transfer_operation_fee_parameters=new Serializer("account_transfer_operation_fee_parameters",{fee:uint64});/* harmony export (immutable) */__webpack_exports__["account_transfer_operation_fee_parameters"]=account_transfer_operation_fee_parameters;var asset_create_operation_fee_parameters=new Serializer("asset_create_operation_fee_parameters",{symbol3:uint64,symbol4:uint64,long_symbol:uint64,price_per_kbyte:uint32});/* harmony export (immutable) */__webpack_exports__["asset_create_operation_fee_parameters"]=asset_create_operation_fee_parameters;var asset_update_operation_fee_parameters=new Serializer("asset_update_operation_fee_parameters",{fee:uint64,price_per_kbyte:uint32});/* harmony export (immutable) */__webpack_exports__["asset_update_operation_fee_parameters"]=asset_update_operation_fee_parameters;var asset_update_bitasset_operation_fee_parameters=new Serializer("asset_update_bitasset_operation_fee_parameters",{fee:uint64});/* harmony export (immutable) */__webpack_exports__["asset_update_bitasset_operation_fee_parameters"]=asset_update_bitasset_operation_fee_parameters;var asset_update_feed_producers_operation_fee_parameters=new Serializer("asset_update_feed_producers_operation_fee_parameters",{fee:uint64});/* harmony export (immutable) */__webpack_exports__["asset_update_feed_producers_operation_fee_parameters"]=asset_update_feed_producers_operation_fee_parameters;var asset_issue_operation_fee_parameters=new Serializer("asset_issue_operation_fee_parameters",{fee:uint64,price_per_kbyte:uint32});/* harmony export (immutable) */__webpack_exports__["asset_issue_operation_fee_parameters"]=asset_issue_operation_fee_parameters;var initiate_crowdfund_operation_fee_parameters=new Serializer("initiate_crowdfund_operation_fee_parameters",{fee:uint64,price_per_kbyte:uint32});/* harmony export (immutable) */__webpack_exports__["initiate_crowdfund_operation_fee_parameters"]=initiate_crowdfund_operation_fee_parameters;var participate_crowdfund_operation_fee_parameters=new Serializer("participate_crowdfund_operation_fee_parameters",{fee:uint64,price_per_kbyte:uint32});/* harmony export (immutable) */__webpack_exports__["participate_crowdfund_operation_fee_parameters"]=participate_crowdfund_operation_fee_parameters;var withdraw_crowdfund_operation_fee_parameters=new Serializer("withdraw_crowdfund_operation_fee_parameters",{fee:uint64,price_per_kbyte:uint32});/* harmony export (immutable) */__webpack_exports__["withdraw_crowdfund_operation_fee_parameters"]=withdraw_crowdfund_operation_fee_parameters;var asset_reserve_operation_fee_parameters=new Serializer("asset_reserve_operation_fee_parameters",{fee:uint64});/* harmony export (immutable) */__webpack_exports__["asset_reserve_operation_fee_parameters"]=asset_reserve_operation_fee_parameters;var asset_fund_fee_pool_operation_fee_parameters=new Serializer("asset_fund_fee_pool_operation_fee_parameters",{fee:uint64});/* harmony export (immutable) */__webpack_exports__["asset_fund_fee_pool_operation_fee_parameters"]=asset_fund_fee_pool_operation_fee_parameters;var asset_settle_operation_fee_parameters=new Serializer("asset_settle_operation_fee_parameters",{fee:uint64});/* harmony export (immutable) */__webpack_exports__["asset_settle_operation_fee_parameters"]=asset_settle_operation_fee_parameters;var asset_global_settle_operation_fee_parameters=new Serializer("asset_global_settle_operation_fee_parameters",{fee:uint64});/* harmony export (immutable) */__webpack_exports__["asset_global_settle_operation_fee_parameters"]=asset_global_settle_operation_fee_parameters;var asset_publish_feed_operation_fee_parameters=new Serializer("asset_publish_feed_operation_fee_parameters",{fee:uint64});/* harmony export (immutable) */__webpack_exports__["asset_publish_feed_operation_fee_parameters"]=asset_publish_feed_operation_fee_parameters;var witness_create_operation_fee_parameters=new Serializer("witness_create_operation_fee_parameters",{fee:uint64});/* harmony export (immutable) */__webpack_exports__["witness_create_operation_fee_parameters"]=witness_create_operation_fee_parameters;var witness_update_operation_fee_parameters=new Serializer("witness_update_operation_fee_parameters",{fee:int64});/* harmony export (immutable) */__webpack_exports__["witness_update_operation_fee_parameters"]=witness_update_operation_fee_parameters;var proposal_create_operation_fee_parameters=new Serializer("proposal_create_operation_fee_parameters",{fee:uint64,price_per_kbyte:uint32});/* harmony export (immutable) */__webpack_exports__["proposal_create_operation_fee_parameters"]=proposal_create_operation_fee_parameters;var proposal_update_operation_fee_parameters=new Serializer("proposal_update_operation_fee_parameters",{fee:uint64,price_per_kbyte:uint32});/* harmony export (immutable) */__webpack_exports__["proposal_update_operation_fee_parameters"]=proposal_update_operation_fee_parameters;var proposal_delete_operation_fee_parameters=new Serializer("proposal_delete_operation_fee_parameters",{fee:uint64});/* harmony export (immutable) */__webpack_exports__["proposal_delete_operation_fee_parameters"]=proposal_delete_operation_fee_parameters;var withdraw_permission_create_operation_fee_parameters=new Serializer("withdraw_permission_create_operation_fee_parameters",{fee:uint64});/* harmony export (immutable) */__webpack_exports__["withdraw_permission_create_operation_fee_parameters"]=withdraw_permission_create_operation_fee_parameters;var withdraw_permission_update_operation_fee_parameters=new Serializer("withdraw_permission_update_operation_fee_parameters",{fee:uint64});/* harmony export (immutable) */__webpack_exports__["withdraw_permission_update_operation_fee_parameters"]=withdraw_permission_update_operation_fee_parameters;var withdraw_permission_claim_operation_fee_parameters=new Serializer("withdraw_permission_claim_operation_fee_parameters",{fee:uint64,price_per_kbyte:uint32});/* harmony export (immutable) */__webpack_exports__["withdraw_permission_claim_operation_fee_parameters"]=withdraw_permission_claim_operation_fee_parameters;var withdraw_permission_delete_operation_fee_parameters=new Serializer("withdraw_permission_delete_operation_fee_parameters",{fee:uint64});/* harmony export (immutable) */__webpack_exports__["withdraw_permission_delete_operation_fee_parameters"]=withdraw_permission_delete_operation_fee_parameters;var committee_member_create_operation_fee_parameters=new Serializer("committee_member_create_operation_fee_parameters",{fee:uint64});/* harmony export (immutable) */__webpack_exports__["committee_member_create_operation_fee_parameters"]=committee_member_create_operation_fee_parameters;var committee_member_update_operation_fee_parameters=new Serializer("committee_member_update_operation_fee_parameters",{fee:uint64});/* harmony export (immutable) */__webpack_exports__["committee_member_update_operation_fee_parameters"]=committee_member_update_operation_fee_parameters;var committee_member_update_global_parameters_operation_fee_parameters=new Serializer("committee_member_update_global_parameters_operation_fee_parameters",{fee:uint64});/* harmony export (immutable) */__webpack_exports__["committee_member_update_global_parameters_operation_fee_parameters"]=committee_member_update_global_parameters_operation_fee_parameters;var vesting_balance_create_operation_fee_parameters=new Serializer("vesting_balance_create_operation_fee_parameters",{fee:uint64});/* harmony export (immutable) */__webpack_exports__["vesting_balance_create_operation_fee_parameters"]=vesting_balance_create_operation_fee_parameters;var vesting_balance_withdraw_operation_fee_parameters=new Serializer("vesting_balance_withdraw_operation_fee_parameters",{fee:uint64});/* harmony export (immutable) */__webpack_exports__["vesting_balance_withdraw_operation_fee_parameters"]=vesting_balance_withdraw_operation_fee_parameters;var worker_create_operation_fee_parameters=new Serializer("worker_create_operation_fee_parameters",{fee:uint64});/* harmony export (immutable) */__webpack_exports__["worker_create_operation_fee_parameters"]=worker_create_operation_fee_parameters;var custom_operation_fee_parameters=new Serializer("custom_operation_fee_parameters",{fee:uint64,price_per_kbyte:uint32});/* harmony export (immutable) */__webpack_exports__["custom_operation_fee_parameters"]=custom_operation_fee_parameters;var assert_operation_fee_parameters=new Serializer("assert_operation_fee_parameters",{fee:uint64});/* harmony export (immutable) */__webpack_exports__["assert_operation_fee_parameters"]=assert_operation_fee_parameters;var balance_claim_operation_fee_parameters=new Serializer("balance_claim_operation_fee_parameters");/* harmony export (immutable) */__webpack_exports__["balance_claim_operation_fee_parameters"]=balance_claim_operation_fee_parameters;var override_transfer_operation_fee_parameters=new Serializer("override_transfer_operation_fee_parameters",{fee:uint64,price_per_kbyte:uint32});/* harmony export (immutable) */__webpack_exports__["override_transfer_operation_fee_parameters"]=override_transfer_operation_fee_parameters;var transfer_to_blind_operation_fee_parameters=new Serializer("transfer_to_blind_operation_fee_parameters",{fee:uint64,price_per_output:uint32});/* harmony export (immutable) */__webpack_exports__["transfer_to_blind_operation_fee_parameters"]=transfer_to_blind_operation_fee_parameters;var blind_transfer_operation_fee_parameters=new Serializer("blind_transfer_operation_fee_parameters",{fee:uint64,price_per_output:uint32});/* harmony export (immutable) */__webpack_exports__["blind_transfer_operation_fee_parameters"]=blind_transfer_operation_fee_parameters;var transfer_from_blind_operation_fee_parameters=new Serializer("transfer_from_blind_operation_fee_parameters",{fee:uint64});/* harmony export (immutable) */__webpack_exports__["transfer_from_blind_operation_fee_parameters"]=transfer_from_blind_operation_fee_parameters;var asset_settle_cancel_operation_fee_parameters=new Serializer("asset_settle_cancel_operation_fee_parameters");/* harmony export (immutable) */__webpack_exports__["asset_settle_cancel_operation_fee_parameters"]=asset_settle_cancel_operation_fee_parameters;var asset_claim_fees_operation_fee_parameters=new Serializer("asset_claim_fees_operation_fee_parameters",{fee:uint64});/* harmony export (immutable) */__webpack_exports__["asset_claim_fees_operation_fee_parameters"]=asset_claim_fees_operation_fee_parameters;var fee_parameters=static_variant([transfer_operation_fee_parameters,limit_order_create_operation_fee_parameters,limit_order_cancel_operation_fee_parameters,call_order_update_operation_fee_parameters,fill_order_operation_fee_parameters,account_create_operation_fee_parameters,account_update_operation_fee_parameters,account_whitelist_operation_fee_parameters,account_upgrade_operation_fee_parameters,account_transfer_operation_fee_parameters,asset_create_operation_fee_parameters,asset_update_operation_fee_parameters,asset_update_bitasset_operation_fee_parameters,asset_update_feed_producers_operation_fee_parameters,asset_issue_operation_fee_parameters,asset_reserve_operation_fee_parameters,asset_fund_fee_pool_operation_fee_parameters,asset_settle_operation_fee_parameters,asset_global_settle_operation_fee_parameters,asset_publish_feed_operation_fee_parameters,witness_create_operation_fee_parameters,witness_update_operation_fee_parameters,proposal_create_operation_fee_parameters,proposal_update_operation_fee_parameters,proposal_delete_operation_fee_parameters,withdraw_permission_create_operation_fee_parameters,withdraw_permission_update_operation_fee_parameters,withdraw_permission_claim_operation_fee_parameters,withdraw_permission_delete_operation_fee_parameters,committee_member_create_operation_fee_parameters,committee_member_update_operation_fee_parameters,committee_member_update_global_parameters_operation_fee_parameters,vesting_balance_create_operation_fee_parameters,vesting_balance_withdraw_operation_fee_parameters,worker_create_operation_fee_parameters,custom_operation_fee_parameters,assert_operation_fee_parameters,balance_claim_operation_fee_parameters,override_transfer_operation_fee_parameters,transfer_to_blind_operation_fee_parameters,blind_transfer_operation_fee_parameters,transfer_from_blind_operation_fee_parameters,asset_settle_cancel_operation_fee_parameters,asset_claim_fees_operation_fee_parameters,asset_settle_cancel_operation_fee_parameters,initiate_crowdfund_operation_fee_parameters,participate_crowdfund_operation_fee_parameters,withdraw_crowdfund_operation_fee_parameters]);var fee_schedule=new Serializer("fee_schedule",{parameters:set(fee_parameters),scale:uint32});/* harmony export (immutable) */__webpack_exports__["fee_schedule"]=fee_schedule;var void_result=new Serializer("void_result");/* harmony export (immutable) */__webpack_exports__["void_result"]=void_result;var asset=new Serializer("asset",{amount:int64,asset_id:protocol_id_type("asset")});/* harmony export (immutable) */__webpack_exports__["asset"]=asset;var operation_result=static_variant([void_result,object_id_type,asset]);var processed_transaction=new Serializer("processed_transaction",{ref_block_num:uint16,ref_block_prefix:uint32,expiration:time_point_sec,operations:array(operation),extensions:set(future_extensions),signatures:array(bytes(65)),operation_results:array(operation_result)});/* harmony export (immutable) */__webpack_exports__["processed_transaction"]=processed_transaction;var signed_block=new Serializer("signed_block",{previous:bytes(20),timestamp:time_point_sec,witness:protocol_id_type("witness"),transaction_merkle_root:bytes(20),extensions:set(future_extensions),witness_signature:bytes(65),transactions:array(processed_transaction)});/* harmony export (immutable) */__webpack_exports__["signed_block"]=signed_block;var block_header=new Serializer("block_header",{previous:bytes(20),timestamp:time_point_sec,witness:protocol_id_type("witness"),transaction_merkle_root:bytes(20),extensions:set(future_extensions)});/* harmony export (immutable) */__webpack_exports__["block_header"]=block_header;var signed_block_header=new Serializer("signed_block_header",{previous:bytes(20),timestamp:time_point_sec,witness:protocol_id_type("witness"),transaction_merkle_root:bytes(20),extensions:set(future_extensions),witness_signature:bytes(65)});/* harmony export (immutable) */__webpack_exports__["signed_block_header"]=signed_block_header;var memo_data=new Serializer("memo_data",{from:public_key,to:public_key,nonce:uint64,message:bytes()});/* harmony export (immutable) */__webpack_exports__["memo_data"]=memo_data;var transfer=new Serializer("transfer",{fee:asset,from:protocol_id_type("account"),to:protocol_id_type("account"),amount:asset,memo:optional(memo_data),extensions:set(future_extensions)});/* harmony export (immutable) */__webpack_exports__["transfer"]=transfer;var limit_order_create=new Serializer("limit_order_create",{fee:asset,seller:protocol_id_type("account"),amount_to_sell:asset,min_to_receive:asset,expiration:time_point_sec,fill_or_kill:bool,extensions:set(future_extensions)});/* harmony export (immutable) */__webpack_exports__["limit_order_create"]=limit_order_create;var limit_order_cancel=new Serializer("limit_order_cancel",{fee:asset,fee_paying_account:protocol_id_type("account"),order:protocol_id_type("limit_order"),extensions:set(future_extensions)});/* harmony export (immutable) */__webpack_exports__["limit_order_cancel"]=limit_order_cancel;var call_order_update=new Serializer("call_order_update",{fee:asset,funding_account:protocol_id_type("account"),delta_collateral:asset,delta_debt:asset,extensions:set(future_extensions)});/* harmony export (immutable) */__webpack_exports__["call_order_update"]=call_order_update;var fill_order=new Serializer("fill_order",{fee:asset,order_id:object_id_type,account_id:protocol_id_type("account"),pays:asset,receives:asset});/* harmony export (immutable) */__webpack_exports__["fill_order"]=fill_order;var authority=new Serializer("authority",{weight_threshold:uint32,account_auths:map(protocol_id_type("account"),uint16),key_auths:map(public_key,uint16),address_auths:map(address,uint16)});/* harmony export (immutable) */__webpack_exports__["authority"]=authority;var account_options=new Serializer("account_options",{memo_key:public_key,voting_account:protocol_id_type("account"),num_witness:uint16,num_committee:uint16,votes:set(vote_id),extensions:set(future_extensions)});/* harmony export (immutable) */__webpack_exports__["account_options"]=account_options;var account_create=new Serializer("account_create",{fee:asset,registrar:protocol_id_type("account"),referrer:protocol_id_type("account"),referrer_percent:uint16,name:string,owner:authority,active:authority,options:account_options,extensions:set(future_extensions)});/* harmony export (immutable) */__webpack_exports__["account_create"]=account_create;var account_update=new Serializer("account_update",{fee:asset,account:protocol_id_type("account"),owner:optional(authority),active:optional(authority),new_options:optional(account_options),extensions:set(future_extensions)});/* harmony export (immutable) */__webpack_exports__["account_update"]=account_update;var account_whitelist=new Serializer("account_whitelist",{fee:asset,authorizing_account:protocol_id_type("account"),account_to_list:protocol_id_type("account"),new_listing:uint8,extensions:set(future_extensions)});/* harmony export (immutable) */__webpack_exports__["account_whitelist"]=account_whitelist;var account_upgrade=new Serializer("account_upgrade",{fee:asset,account_to_upgrade:protocol_id_type("account"),upgrade_to_lifetime_member:bool,extensions:set(future_extensions)});/* harmony export (immutable) */__webpack_exports__["account_upgrade"]=account_upgrade;var account_transfer=new Serializer("account_transfer",{fee:asset,account_id:protocol_id_type("account"),new_owner:protocol_id_type("account"),extensions:set(future_extensions)});/* harmony export (immutable) */__webpack_exports__["account_transfer"]=account_transfer;var price=new Serializer("price",{base:asset,quote:asset});/* harmony export (immutable) */__webpack_exports__["price"]=price;var asset_options=new Serializer("asset_options",{max_supply:int64,market_fee_percent:uint16,max_market_fee:int64,issuer_permissions:uint16,flags:uint16,core_exchange_rate:price,whitelist_authorities:set(protocol_id_type("account")),blacklist_authorities:set(protocol_id_type("account")),whitelist_markets:set(protocol_id_type("asset")),blacklist_markets:set(protocol_id_type("asset")),description:string,extensions:set(future_extensions)});/* harmony export (immutable) */__webpack_exports__["asset_options"]=asset_options;var bitasset_options=new Serializer("bitasset_options",{feed_lifetime_sec:uint32,minimum_feeds:uint8,force_settlement_delay_sec:uint32,force_settlement_offset_percent:uint16,maximum_force_settlement_volume:uint16,short_backing_asset:protocol_id_type("asset"),extensions:set(future_extensions)});/* harmony export (immutable) */__webpack_exports__["bitasset_options"]=bitasset_options;var asset_create=new Serializer("asset_create",{fee:asset,issuer:protocol_id_type("account"),symbol:string,precision:uint8,common_options:asset_options,bitasset_opts:optional(bitasset_options),is_prediction_market:bool,extensions:set(future_extensions)});/* harmony export (immutable) */__webpack_exports__["asset_create"]=asset_create;var asset_update=new Serializer("asset_update",{fee:asset,issuer:protocol_id_type("account"),asset_to_update:protocol_id_type("asset"),new_issuer:optional(protocol_id_type("account")),new_options:asset_options,extensions:set(future_extensions)});/* harmony export (immutable) */__webpack_exports__["asset_update"]=asset_update;var asset_update_bitasset=new Serializer("asset_update_bitasset",{fee:asset,issuer:protocol_id_type("account"),asset_to_update:protocol_id_type("asset"),new_options:bitasset_options,extensions:set(future_extensions)});/* harmony export (immutable) */__webpack_exports__["asset_update_bitasset"]=asset_update_bitasset;var asset_update_feed_producers=new Serializer("asset_update_feed_producers",{fee:asset,issuer:protocol_id_type("account"),asset_to_update:protocol_id_type("asset"),new_feed_producers:set(protocol_id_type("account")),extensions:set(future_extensions)});/* harmony export (immutable) */__webpack_exports__["asset_update_feed_producers"]=asset_update_feed_producers;var asset_issue=new Serializer("asset_issue",{fee:asset,issuer:protocol_id_type("account"),asset_to_issue:asset,issue_to_account:protocol_id_type("account"),memo:optional(memo_data),extensions:set(future_extensions)});/* harmony export (immutable) */__webpack_exports__["asset_issue"]=asset_issue;var asset_reserve=new Serializer("asset_reserve",{fee:asset,payer:protocol_id_type("account"),amount_to_reserve:asset,extensions:set(future_extensions)});/* harmony export (immutable) */__webpack_exports__["asset_reserve"]=asset_reserve;var asset_fund_fee_pool=new Serializer("asset_fund_fee_pool",{fee:asset,from_account:protocol_id_type("account"),asset_id:protocol_id_type("asset"),amount:int64,extensions:set(future_extensions)});/* harmony export (immutable) */__webpack_exports__["asset_fund_fee_pool"]=asset_fund_fee_pool;var asset_settle=new Serializer("asset_settle",{fee:asset,account:protocol_id_type("account"),amount:asset,extensions:set(future_extensions)});/* harmony export (immutable) */__webpack_exports__["asset_settle"]=asset_settle;var asset_global_settle=new Serializer("asset_global_settle",{fee:asset,issuer:protocol_id_type("account"),asset_to_settle:protocol_id_type("asset"),settle_price:price,extensions:set(future_extensions)});/* harmony export (immutable) */__webpack_exports__["asset_global_settle"]=asset_global_settle;var participate_crowdfund=new Serializer("participate_crowdfund",{fee:asset,buyer:protocol_id_type("account"),valuation:int64,cap:int64,// pubkey: address,
	crowdfund:protocol_id_type("crowdfund")// extensions: set(future_extensions)
	});/* harmony export (immutable) */__webpack_exports__["participate_crowdfund"]=participate_crowdfund;var withdraw_crowdfund=new Serializer("withdraw_crowdfund",{fee:asset,buyer:protocol_id_type("account"),crowdfund_contract:protocol_id_type("crowdfund_contract")});/* harmony export (immutable) */__webpack_exports__["withdraw_crowdfund"]=withdraw_crowdfund;var initiate_crowdfund=new Serializer("initiate_crowdfund",{fee:asset,owner:protocol_id_type("account"),asset_id:protocol_id_type("asset"),t:uint64,u:uint64// v: uint64,
	// extensions: set(future_extensions)
	});/* harmony export (immutable) */__webpack_exports__["initiate_crowdfund"]=initiate_crowdfund;var price_feed=new Serializer("price_feed",{settlement_price:price,maintenance_collateral_ratio:uint16,maximum_short_squeeze_ratio:uint16,core_exchange_rate:price});/* harmony export (immutable) */__webpack_exports__["price_feed"]=price_feed;var asset_publish_feed=new Serializer("asset_publish_feed",{fee:asset,publisher:protocol_id_type("account"),asset_id:protocol_id_type("asset"),feed:price_feed,extensions:set(future_extensions)});/* harmony export (immutable) */__webpack_exports__["asset_publish_feed"]=asset_publish_feed;var witness_create=new Serializer("witness_create",{fee:asset,witness_account:protocol_id_type("account"),url:string,block_signing_key:public_key});/* harmony export (immutable) */__webpack_exports__["witness_create"]=witness_create;var witness_update=new Serializer("witness_update",{fee:asset,witness:protocol_id_type("witness"),witness_account:protocol_id_type("account"),new_url:optional(string),new_signing_key:optional(public_key)});/* harmony export (immutable) */__webpack_exports__["witness_update"]=witness_update;var op_wrapper=new Serializer("op_wrapper",{op:operation});/* harmony export (immutable) */__webpack_exports__["op_wrapper"]=op_wrapper;op_wrapper.nosort=true;var proposal_create=new Serializer("proposal_create",{fee:asset,fee_paying_account:protocol_id_type("account"),expiration_time:time_point_sec,proposed_ops:array(op_wrapper),review_period_seconds:optional(uint32),extensions:set(future_extensions)});/* harmony export (immutable) */__webpack_exports__["proposal_create"]=proposal_create;var proposal_update=new Serializer("proposal_update",{fee:asset,fee_paying_account:protocol_id_type("account"),proposal:protocol_id_type("proposal"),active_approvals_to_add:set(protocol_id_type("account")),active_approvals_to_remove:set(protocol_id_type("account")),owner_approvals_to_add:set(protocol_id_type("account")),owner_approvals_to_remove:set(protocol_id_type("account")),key_approvals_to_add:set(public_key),key_approvals_to_remove:set(public_key),extensions:set(future_extensions)});/* harmony export (immutable) */__webpack_exports__["proposal_update"]=proposal_update;var proposal_delete=new Serializer("proposal_delete",{fee:asset,fee_paying_account:protocol_id_type("account"),using_owner_authority:bool,proposal:protocol_id_type("proposal"),extensions:set(future_extensions)});/* harmony export (immutable) */__webpack_exports__["proposal_delete"]=proposal_delete;var withdraw_permission_create=new Serializer("withdraw_permission_create",{fee:asset,withdraw_from_account:protocol_id_type("account"),authorized_account:protocol_id_type("account"),withdrawal_limit:asset,withdrawal_period_sec:uint32,periods_until_expiration:uint32,period_start_time:time_point_sec});/* harmony export (immutable) */__webpack_exports__["withdraw_permission_create"]=withdraw_permission_create;var withdraw_permission_update=new Serializer("withdraw_permission_update",{fee:asset,withdraw_from_account:protocol_id_type("account"),authorized_account:protocol_id_type("account"),permission_to_update:protocol_id_type("withdraw_permission"),withdrawal_limit:asset,withdrawal_period_sec:uint32,period_start_time:time_point_sec,periods_until_expiration:uint32});/* harmony export (immutable) */__webpack_exports__["withdraw_permission_update"]=withdraw_permission_update;var withdraw_permission_claim=new Serializer("withdraw_permission_claim",{fee:asset,withdraw_permission:protocol_id_type("withdraw_permission"),withdraw_from_account:protocol_id_type("account"),withdraw_to_account:protocol_id_type("account"),amount_to_withdraw:asset,memo:optional(memo_data)});/* harmony export (immutable) */__webpack_exports__["withdraw_permission_claim"]=withdraw_permission_claim;var withdraw_permission_delete=new Serializer("withdraw_permission_delete",{fee:asset,withdraw_from_account:protocol_id_type("account"),authorized_account:protocol_id_type("account"),withdrawal_permission:protocol_id_type("withdraw_permission")});/* harmony export (immutable) */__webpack_exports__["withdraw_permission_delete"]=withdraw_permission_delete;var committee_member_create=new Serializer("committee_member_create",{fee:asset,committee_member_account:protocol_id_type("account"),url:string});/* harmony export (immutable) */__webpack_exports__["committee_member_create"]=committee_member_create;var committee_member_update=new Serializer("committee_member_update",{fee:asset,committee_member:protocol_id_type("committee_member"),committee_member_account:protocol_id_type("account"),new_url:optional(string)});/* harmony export (immutable) */__webpack_exports__["committee_member_update"]=committee_member_update;var chain_parameters=new Serializer("chain_parameters",{current_fees:fee_schedule,block_interval:uint8,maintenance_interval:uint32,maintenance_skip_slots:uint8,committee_proposal_review_period:uint32,maximum_transaction_size:uint32,maximum_block_size:uint32,maximum_time_until_expiration:uint32,maximum_proposal_lifetime:uint32,maximum_asset_whitelist_authorities:uint8,maximum_asset_feed_publishers:uint8,maximum_witness_count:uint16,maximum_committee_count:uint16,maximum_authority_membership:uint16,reserve_percent_of_fee:uint16,network_percent_of_fee:uint16,lifetime_referrer_percent_of_fee:uint16,cashback_vesting_period_seconds:uint32,cashback_vesting_threshold:int64,count_non_member_votes:bool,allow_non_member_whitelists:bool,witness_pay_per_block:int64,worker_budget_per_day:int64,max_predicate_opcode:uint16,fee_liquidation_threshold:int64,accounts_per_fee_scale:uint16,account_fee_scale_bitshifts:uint8,max_authority_depth:uint8,extensions:set(future_extensions)});/* harmony export (immutable) */__webpack_exports__["chain_parameters"]=chain_parameters;var committee_member_update_global_parameters=new Serializer("committee_member_update_global_parameters",{fee:asset,new_parameters:chain_parameters});/* harmony export (immutable) */__webpack_exports__["committee_member_update_global_parameters"]=committee_member_update_global_parameters;var linear_vesting_policy_initializer=new Serializer("linear_vesting_policy_initializer",{begin_timestamp:time_point_sec,vesting_cliff_seconds:uint32,vesting_duration_seconds:uint32});/* harmony export (immutable) */__webpack_exports__["linear_vesting_policy_initializer"]=linear_vesting_policy_initializer;var cdd_vesting_policy_initializer=new Serializer("cdd_vesting_policy_initializer",{start_claim:time_point_sec,vesting_seconds:uint32});/* harmony export (immutable) */__webpack_exports__["cdd_vesting_policy_initializer"]=cdd_vesting_policy_initializer;var vesting_policy_initializer=static_variant([linear_vesting_policy_initializer,cdd_vesting_policy_initializer]);var vesting_balance_create=new Serializer("vesting_balance_create",{fee:asset,creator:protocol_id_type("account"),owner:protocol_id_type("account"),amount:asset,policy:vesting_policy_initializer});/* harmony export (immutable) */__webpack_exports__["vesting_balance_create"]=vesting_balance_create;var vesting_balance_withdraw=new Serializer("vesting_balance_withdraw",{fee:asset,vesting_balance:protocol_id_type("vesting_balance"),owner:protocol_id_type("account"),amount:asset});/* harmony export (immutable) */__webpack_exports__["vesting_balance_withdraw"]=vesting_balance_withdraw;var refund_worker_initializer=new Serializer("refund_worker_initializer");/* harmony export (immutable) */__webpack_exports__["refund_worker_initializer"]=refund_worker_initializer;var vesting_balance_worker_initializer=new Serializer("vesting_balance_worker_initializer",{pay_vesting_period_days:uint16});/* harmony export (immutable) */__webpack_exports__["vesting_balance_worker_initializer"]=vesting_balance_worker_initializer;var burn_worker_initializer=new Serializer("burn_worker_initializer");/* harmony export (immutable) */__webpack_exports__["burn_worker_initializer"]=burn_worker_initializer;var worker_initializer=static_variant([refund_worker_initializer,vesting_balance_worker_initializer,burn_worker_initializer]);var worker_create=new Serializer("worker_create",{fee:asset,owner:protocol_id_type("account"),work_begin_date:time_point_sec,work_end_date:time_point_sec,daily_pay:int64,name:string,url:string,initializer:worker_initializer});/* harmony export (immutable) */__webpack_exports__["worker_create"]=worker_create;var custom=new Serializer("custom",{fee:asset,payer:protocol_id_type("account"),required_auths:set(protocol_id_type("account")),id:uint16,data:bytes()});/* harmony export (immutable) */__webpack_exports__["custom"]=custom;var account_name_eq_lit_predicate=new Serializer("account_name_eq_lit_predicate",{account_id:protocol_id_type("account"),name:string});/* harmony export (immutable) */__webpack_exports__["account_name_eq_lit_predicate"]=account_name_eq_lit_predicate;var asset_symbol_eq_lit_predicate=new Serializer("asset_symbol_eq_lit_predicate",{asset_id:protocol_id_type("asset"),symbol:string});/* harmony export (immutable) */__webpack_exports__["asset_symbol_eq_lit_predicate"]=asset_symbol_eq_lit_predicate;var block_id_predicate=new Serializer("block_id_predicate",{id:bytes(20)});/* harmony export (immutable) */__webpack_exports__["block_id_predicate"]=block_id_predicate;var predicate=static_variant([account_name_eq_lit_predicate,asset_symbol_eq_lit_predicate,block_id_predicate]);var assert=new Serializer("assert",{fee:asset,fee_paying_account:protocol_id_type("account"),predicates:array(predicate),required_auths:set(protocol_id_type("account")),extensions:set(future_extensions)});/* harmony export (immutable) */__webpack_exports__["assert"]=assert;var balance_claim=new Serializer("balance_claim",{fee:asset,deposit_to_account:protocol_id_type("account"),balance_to_claim:protocol_id_type("balance"),balance_owner_key:public_key,total_claimed:asset});/* harmony export (immutable) */__webpack_exports__["balance_claim"]=balance_claim;var override_transfer=new Serializer("override_transfer",{fee:asset,issuer:protocol_id_type("account"),from:protocol_id_type("account"),to:protocol_id_type("account"),amount:asset,memo:optional(memo_data),extensions:set(future_extensions)});/* harmony export (immutable) */__webpack_exports__["override_transfer"]=override_transfer;var stealth_confirmation=new Serializer("stealth_confirmation",{one_time_key:public_key,to:optional(public_key),encrypted_memo:bytes()});/* harmony export (immutable) */__webpack_exports__["stealth_confirmation"]=stealth_confirmation;var blind_output=new Serializer("blind_output",{commitment:bytes(33),range_proof:bytes(),owner:authority,stealth_memo:optional(stealth_confirmation)});/* harmony export (immutable) */__webpack_exports__["blind_output"]=blind_output;var transfer_to_blind=new Serializer("transfer_to_blind",{fee:asset,amount:asset,from:protocol_id_type("account"),blinding_factor:bytes(32),outputs:array(blind_output)});/* harmony export (immutable) */__webpack_exports__["transfer_to_blind"]=transfer_to_blind;var blind_input=new Serializer("blind_input",{commitment:bytes(33),owner:authority});/* harmony export (immutable) */__webpack_exports__["blind_input"]=blind_input;var blind_transfer=new Serializer("blind_transfer",{fee:asset,inputs:array(blind_input),outputs:array(blind_output)});/* harmony export (immutable) */__webpack_exports__["blind_transfer"]=blind_transfer;var transfer_from_blind=new Serializer("transfer_from_blind",{fee:asset,amount:asset,to:protocol_id_type("account"),blinding_factor:bytes(32),inputs:array(blind_input)});/* harmony export (immutable) */__webpack_exports__["transfer_from_blind"]=transfer_from_blind;var asset_settle_cancel=new Serializer("asset_settle_cancel",{fee:asset,settlement:protocol_id_type("force_settlement"),account:protocol_id_type("account"),amount:asset,extensions:set(future_extensions)});/* harmony export (immutable) */__webpack_exports__["asset_settle_cancel"]=asset_settle_cancel;var asset_claim_fees=new Serializer("asset_claim_fees",{fee:asset,issuer:protocol_id_type("account"),amount_to_claim:asset,extensions:set(future_extensions)});/* harmony export (immutable) */__webpack_exports__["asset_claim_fees"]=asset_claim_fees;operation.st_operations=[transfer,limit_order_create,limit_order_cancel,call_order_update,fill_order,account_create,account_update,account_whitelist,account_upgrade,account_transfer,asset_create,asset_update,asset_update_bitasset,asset_update_feed_producers,asset_issue,asset_reserve,asset_fund_fee_pool,asset_settle,asset_global_settle,asset_publish_feed,witness_create,witness_update,proposal_create,proposal_update,proposal_delete,withdraw_permission_create,withdraw_permission_update,withdraw_permission_claim,withdraw_permission_delete,committee_member_create,committee_member_update,committee_member_update_global_parameters,vesting_balance_create,vesting_balance_withdraw,worker_create,custom,assert,balance_claim,override_transfer,transfer_to_blind,blind_transfer,transfer_from_blind,asset_settle_cancel,asset_claim_fees,asset_settle_cancel,initiate_crowdfund,participate_crowdfund,withdraw_crowdfund];var transaction=new Serializer("transaction",{ref_block_num:uint16,ref_block_prefix:uint32,expiration:time_point_sec,operations:array(operation),extensions:set(future_extensions)});/* harmony export (immutable) */__webpack_exports__["transaction"]=transaction;var signed_transaction=new Serializer("signed_transaction",{ref_block_num:uint16,ref_block_prefix:uint32,expiration:time_point_sec,operations:array(operation),extensions:set(future_extensions),signatures:array(bytes(65))});/* harmony export (immutable) */__webpack_exports__["signed_transaction"]=signed_transaction;//# -------------------------------
	//#  Generated code end
	//# -------------------------------
	// Custom Types
	var stealth_memo_data=new Serializer("stealth_memo_data",{from:optional(public_key),amount:asset,blinding_factor:bytes(32),commitment:bytes(33),check:uint32});/* harmony export (immutable) */__webpack_exports__["stealth_memo_data"]=stealth_memo_data;var fund_query=new Serializer("fund_query",{accountName:string,asset:optional(string),fundType:optional(string),size:optional(uint32),offset:optional(uint32),expiration:time_point_sec});/* harmony export (immutable) */__webpack_exports__["fund_query"]=fund_query;// var stealth_confirmation = new Serializer(
	//     "stealth_confirmation", {
	//     one_time_key: public_key,
	//     to: optional( public_key ),
	//     encrypted_memo: stealth_memo_data
	// })
	/***/},/* 36 *//***/function(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (immutable) */__webpack_exports__["a"]=template;/** Console print any transaction object with zero default values. */function template(op){var object=op.toObject(void 0,{use_default:true,annotate:true});// visual (with descriptions)
	console.error((0,_stringify2.default)(object,null,4));// usable in a copy-paste
	object=op.toObject(void 0,{use_default:true,annotate:false});// copy-paste one-lineer
	console.error((0,_stringify2.default)(object));}/***/},/* 37 *//***/function(module,__webpack_exports__,__webpack_require__){"use strict";/**
	    Account names may contain one or more names separated by a dot.
	    Each name needs to start with a letter and may contain
	    numbers, or well placed dashes.
	    @see is_valid_name graphene/libraries/chain/protocol/account.cpp
	*/var id_regex=/\b\d+\.\d+\.(\d+)\b/;var chainValidation={is_account_name:function is_account_name(value){var allow_too_short=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var i,label,len,length,ref;if(this.is_empty(value)){return false;}length=value.length;if(!allow_too_short&&length<3||length>63){return false;}ref=value.split('.');for(i=0,len=ref.length;i<len;i++){label=ref[i];if(!(/^[a-z][a-z0-9-]*$/.test(label)&&!/--/.test(label)&&/[a-z0-9]$/.test(label))){return false;}}return true;},is_object_id:function is_object_id(obj_id){if('string'!=typeof obj_id)return false;var match=id_regex.exec(obj_id);return match!==null&&obj_id.split(".").length===3;},is_empty:function is_empty(value){return value==null||value.length===0;},is_account_name_error:function is_account_name_error(value,allow_too_short){var i,label,len,length,ref,suffix;if(allow_too_short==null){allow_too_short=false;}suffix="Account name should ";if(this.is_empty(value)){return suffix+"not be empty.";}length=value.length;if(!allow_too_short&&length<3){return suffix+"be longer.";}if(length>63){return suffix+"be shorter.";}if(/\./.test(value)){suffix="Each account segment should ";}ref=value.split('.');for(i=0,len=ref.length;i<len;i++){label=ref[i];if(!/^[~a-z]/.test(label)){return suffix+"start with a letter.";}if(!/^[~a-z0-9-]*$/.test(label)){return suffix+"have only letters, digits, or dashes.";}if(/--/.test(label)){return suffix+"have only one dash in a row.";}if(!/[a-z0-9]$/.test(label)){return suffix+"end with a letter or digit.";}if(!(label.length>=3)){return suffix+"be longer";}}return null;},is_cheap_name:function is_cheap_name(account_name){return /[0-9-]/.test(account_name)||!/[aeiouy]/.test(account_name);},is_empty_user_input:function is_empty_user_input(value){if(this.is_empty(value)){return true;}if((value+"").trim()===""){return true;}return false;},required:function required(value){var field_name=arguments.length>1&&arguments[1]!==undefined?arguments[1]:"";if(this.is_empty(value)){throw new Error("value required for "+field_name+": "+value);}return value;},/** @see is_valid_symbol graphene/libraries/chain/protocol/asset_ops.cpp */is_valid_symbol_error:function is_valid_symbol_error(value){var suffix="Asset name should ";if(this.is_empty(value)){return suffix+"not be empty.";}if(value.split('.').length>2){return suffix+"have only one dot.";}if(value.length<3){return suffix+"be longer.";}if(value.length>16){return suffix+"be shorter.";}if(!/^[A-Z]/.test(value)){return suffix+"start with a letter";}if(!/[A-Z]$/.test(value)){return suffix+"end with a letter";}if(/^[A-Z0-9\.]$/.test(value)){return suffix+"contain only letters numbers and perhaps a dot.";}return null;}/* harmony default export */};__webpack_exports__["a"]=chainValidation;/***/},/* 38 *//***/function(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (immutable) */__webpack_exports__["a"]=emitter;// import ee from "event-emitter";
	var ee=__webpack_require__(61);var _emitter;function emitter(){if(!_emitter){_emitter=ee({});}return _emitter;}/***/},/* 39 *//***/function(module,__webpack_exports__,__webpack_require__){"use strict";Object.defineProperty(__webpack_exports__,"__esModule",{value:true});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"FetchChainObjects",function(){return FetchChainObjects;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"FetchChain",function(){return FetchChain;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__serializer_src_serializer__=__webpack_require__(11);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__serializer_src_FastParser__=__webpack_require__(12);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__serializer_src_types__=__webpack_require__(16);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__serializer_src_operations__=__webpack_require__(35);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__serializer_src_template__=__webpack_require__(36);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5__serializer_src_SerializerValidation__=__webpack_require__(9);/* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__,"Serializer",function(){return __WEBPACK_IMPORTED_MODULE_0__serializer_src_serializer__["a"];});/* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__,"fp",function(){return __WEBPACK_IMPORTED_MODULE_1__serializer_src_FastParser__["a"];});/* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__,"types",function(){return __WEBPACK_IMPORTED_MODULE_2__serializer_src_types__["a"];});/* harmony reexport (module object) */__webpack_require__.d(__webpack_exports__,"ops",function(){return __WEBPACK_IMPORTED_MODULE_3__serializer_src_operations__;});/* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__,"template",function(){return __WEBPACK_IMPORTED_MODULE_4__serializer_src_template__["a"];});/* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__,"SerializerValidation",function(){return __WEBPACK_IMPORTED_MODULE_5__serializer_src_SerializerValidation__["a"];});/* harmony import */var __WEBPACK_IMPORTED_MODULE_6__ecc_src_address__=__webpack_require__(18);/* harmony import */var __WEBPACK_IMPORTED_MODULE_7__ecc_src_aes__=__webpack_require__(19);/* harmony import */var __WEBPACK_IMPORTED_MODULE_8__ecc_src_PrivateKey__=__webpack_require__(10);/* harmony import */var __WEBPACK_IMPORTED_MODULE_9__ecc_src_PublicKey__=__webpack_require__(5);/* harmony import */var __WEBPACK_IMPORTED_MODULE_10__ecc_src_signature__=__webpack_require__(31);/* harmony import */var __WEBPACK_IMPORTED_MODULE_11__ecc_src_BrainKey__=__webpack_require__(33);/* harmony import */var __WEBPACK_IMPORTED_MODULE_12__ecc_src_hash__=__webpack_require__(2);/* harmony import */var __WEBPACK_IMPORTED_MODULE_13__ecc_src_KeyUtils__=__webpack_require__(20);/* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__,"Address",function(){return __WEBPACK_IMPORTED_MODULE_6__ecc_src_address__["a"];});/* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__,"Aes",function(){return __WEBPACK_IMPORTED_MODULE_7__ecc_src_aes__["a"];});/* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__,"PrivateKey",function(){return __WEBPACK_IMPORTED_MODULE_8__ecc_src_PrivateKey__["a"];});/* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__,"PublicKey",function(){return __WEBPACK_IMPORTED_MODULE_9__ecc_src_PublicKey__["a"];});/* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__,"Signature",function(){return __WEBPACK_IMPORTED_MODULE_10__ecc_src_signature__["a"];});/* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__,"brainKey",function(){return __WEBPACK_IMPORTED_MODULE_11__ecc_src_BrainKey__["a"];});/* harmony reexport (module object) */__webpack_require__.d(__webpack_exports__,"hash",function(){return __WEBPACK_IMPORTED_MODULE_12__ecc_src_hash__;});/* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__,"key",function(){return __WEBPACK_IMPORTED_MODULE_13__ecc_src_KeyUtils__["a"];});/* harmony import */var __WEBPACK_IMPORTED_MODULE_14__chain_src_ChainStore__=__webpack_require__(59);/* harmony import */var __WEBPACK_IMPORTED_MODULE_15__chain_src_TransactionBuilder__=__webpack_require__(77);/* harmony import */var __WEBPACK_IMPORTED_MODULE_16__chain_src_ChainTypes__=__webpack_require__(7);/* harmony import */var __WEBPACK_IMPORTED_MODULE_17__chain_src_ObjectId__=__webpack_require__(28);/* harmony import */var __WEBPACK_IMPORTED_MODULE_18__chain_src_NumberUtils__=__webpack_require__(78);/* harmony import */var __WEBPACK_IMPORTED_MODULE_19__chain_src_TransactionHelper__=__webpack_require__(79);/* harmony import */var __WEBPACK_IMPORTED_MODULE_20__chain_src_ChainValidation__=__webpack_require__(37);/* harmony import */var __WEBPACK_IMPORTED_MODULE_21__chain_src_EmitterInstance__=__webpack_require__(38);/* harmony import */var __WEBPACK_IMPORTED_MODULE_22__chain_src_AccountLogin__=__webpack_require__(80);/* harmony import */var __WEBPACK_IMPORTED_MODULE_23__serializer__=__webpack_require__(22);/* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__,"ChainStore",function(){return __WEBPACK_IMPORTED_MODULE_14__chain_src_ChainStore__["a"];});/* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__,"TransactionBuilder",function(){return __WEBPACK_IMPORTED_MODULE_15__chain_src_TransactionBuilder__["a"];});/* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__,"Operations",function(){return __WEBPACK_IMPORTED_MODULE_23__serializer__["a"];});/* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__,"ChainTypes",function(){return __WEBPACK_IMPORTED_MODULE_16__chain_src_ChainTypes__["a"];});/* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__,"EmitterInstance",function(){return __WEBPACK_IMPORTED_MODULE_21__chain_src_EmitterInstance__["a"];});/* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__,"ObjectId",function(){return __WEBPACK_IMPORTED_MODULE_17__chain_src_ObjectId__["a"];});/* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__,"NumberUtils",function(){return __WEBPACK_IMPORTED_MODULE_18__chain_src_NumberUtils__["a"];});/* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__,"TransactionHelper",function(){return __WEBPACK_IMPORTED_MODULE_19__chain_src_TransactionHelper__["a"];});/* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__,"ChainValidation",function(){return __WEBPACK_IMPORTED_MODULE_20__chain_src_ChainValidation__["a"];});/* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__,"Login",function(){return __WEBPACK_IMPORTED_MODULE_22__chain_src_AccountLogin__["a"];});/* Serializer *//* ECC *//* Chain */var _WEBPACK_IMPORTED_MO2=__WEBPACK_IMPORTED_MODULE_14__chain_src_ChainStore__["a"/* default */],FetchChainObjects=_WEBPACK_IMPORTED_MO2.FetchChainObjects,FetchChain=_WEBPACK_IMPORTED_MO2.FetchChain;/***/},/* 40 *//***/function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_FACTORY__,__WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;/*
	 Copyright 2013 Daniel Wirtz <dcode@dcode.io>
	 Copyright 2009 The Closure Library Authors. All Rights Reserved.
	
	 Licensed under the Apache License, Version 2.0 (the "License");
	 you may not use this file except in compliance with the License.
	 You may obtain a copy of the License at
	
	 http://www.apache.org/licenses/LICENSE-2.0
	
	 Unless required by applicable law or agreed to in writing, software
	 distributed under the License is distributed on an "AS-IS" BASIS,
	 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 See the License for the specific language governing permissions and
	 limitations under the License.
	 *//**
	 * @license long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>
	 * Released under the Apache License, Version 2.0
	 * see: https://github.com/dcodeIO/long.js for details
	 */(function(global,factory){/* AMD */if(true)!(__WEBPACK_AMD_DEFINE_ARRAY__=[],__WEBPACK_AMD_DEFINE_FACTORY__=factory,__WEBPACK_AMD_DEFINE_RESULT__=typeof __WEBPACK_AMD_DEFINE_FACTORY__==='function'?__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__):__WEBPACK_AMD_DEFINE_FACTORY__,__WEBPACK_AMD_DEFINE_RESULT__!==undefined&&(module.exports=__WEBPACK_AMD_DEFINE_RESULT__));/* CommonJS */else if(typeof require==='function'&&(typeof module==='undefined'?'undefined':(0,_typeof3.default)(module))==="object"&&module&&module["exports"])module["exports"]=factory();/* Global */else(global["dcodeIO"]=global["dcodeIO"]||{})["Long"]=factory();})(this,function(){"use strict";/**
	     * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
	     *  See the from* functions below for more convenient ways of constructing Longs.
	     * @exports Long
	     * @class A Long class for representing a 64 bit two's-complement integer value.
	     * @param {number} low The low (signed) 32 bits of the long
	     * @param {number} high The high (signed) 32 bits of the long
	     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
	     * @constructor
	     */function Long(low,high,unsigned){/**
	         * The low 32 bits as a signed value.
	         * @type {number}
	         */this.low=low|0;/**
	         * The high 32 bits as a signed value.
	         * @type {number}
	         */this.high=high|0;/**
	         * Whether unsigned or not.
	         * @type {boolean}
	         */this.unsigned=!!unsigned;}// The internal representation of a long is the two given signed, 32-bit values.
	// We use 32-bit pieces because these are the size of integers on which
	// Javascript performs bit-operations.  For operations like addition and
	// multiplication, we split each number into 16 bit pieces, which can easily be
	// multiplied within Javascript's floating-point representation without overflow
	// or change in sign.
	//
	// In the algorithms below, we frequently reduce the negative case to the
	// positive case by negating the input(s) and then post-processing the result.
	// Note that we must ALWAYS check specially whether those values are MIN_VALUE
	// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
	// a positive number, it overflows back into a negative).  Not handling this
	// case would often result in infinite recursion.
	//
	// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
	// methods on which they depend.
	/**
	     * An indicator used to reliably determine if an object is a Long or not.
	     * @type {boolean}
	     * @const
	     * @private
	     */Long.prototype.__isLong__;Object.defineProperty(Long.prototype,"__isLong__",{value:true,enumerable:false,configurable:false});/**
	     * @function
	     * @param {*} obj Object
	     * @returns {boolean}
	     * @inner
	     */function isLong(obj){return(obj&&obj["__isLong__"])===true;}/**
	     * Tests if the specified object is a Long.
	     * @function
	     * @param {*} obj Object
	     * @returns {boolean}
	     */Long.isLong=isLong;/**
	     * A cache of the Long representations of small integer values.
	     * @type {!Object}
	     * @inner
	     */var INT_CACHE={};/**
	     * A cache of the Long representations of small unsigned integer values.
	     * @type {!Object}
	     * @inner
	     */var UINT_CACHE={};/**
	     * @param {number} value
	     * @param {boolean=} unsigned
	     * @returns {!Long}
	     * @inner
	     */function fromInt(value,unsigned){var obj,cachedObj,cache;if(unsigned){value>>>=0;if(cache=0<=value&&value<256){cachedObj=UINT_CACHE[value];if(cachedObj)return cachedObj;}obj=fromBits(value,(value|0)<0?-1:0,true);if(cache)UINT_CACHE[value]=obj;return obj;}else{value|=0;if(cache=-128<=value&&value<128){cachedObj=INT_CACHE[value];if(cachedObj)return cachedObj;}obj=fromBits(value,value<0?-1:0,false);if(cache)INT_CACHE[value]=obj;return obj;}}/**
	     * Returns a Long representing the given 32 bit integer value.
	     * @function
	     * @param {number} value The 32 bit integer in question
	     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
	     * @returns {!Long} The corresponding Long value
	     */Long.fromInt=fromInt;/**
	     * @param {number} value
	     * @param {boolean=} unsigned
	     * @returns {!Long}
	     * @inner
	     */function fromNumber(value,unsigned){if(isNaN(value)||!isFinite(value))return unsigned?UZERO:ZERO;if(unsigned){if(value<0)return UZERO;if(value>=TWO_PWR_64_DBL)return MAX_UNSIGNED_VALUE;}else{if(value<=-TWO_PWR_63_DBL)return MIN_VALUE;if(value+1>=TWO_PWR_63_DBL)return MAX_VALUE;}if(value<0)return fromNumber(-value,unsigned).neg();return fromBits(value%TWO_PWR_32_DBL|0,value/TWO_PWR_32_DBL|0,unsigned);}/**
	     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
	     * @function
	     * @param {number} value The number in question
	     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
	     * @returns {!Long} The corresponding Long value
	     */Long.fromNumber=fromNumber;/**
	     * @param {number} lowBits
	     * @param {number} highBits
	     * @param {boolean=} unsigned
	     * @returns {!Long}
	     * @inner
	     */function fromBits(lowBits,highBits,unsigned){return new Long(lowBits,highBits,unsigned);}/**
	     * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
	     *  assumed to use 32 bits.
	     * @function
	     * @param {number} lowBits The low 32 bits
	     * @param {number} highBits The high 32 bits
	     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
	     * @returns {!Long} The corresponding Long value
	     */Long.fromBits=fromBits;/**
	     * @function
	     * @param {number} base
	     * @param {number} exponent
	     * @returns {number}
	     * @inner
	     */var pow_dbl=Math.pow;// Used 4 times (4*8 to 15+4)
	/**
	     * @param {string} str
	     * @param {(boolean|number)=} unsigned
	     * @param {number=} radix
	     * @returns {!Long}
	     * @inner
	     */function fromString(str,unsigned,radix){if(str.length===0)throw Error('empty string');if(str==="NaN"||str==="Infinity"||str==="+Infinity"||str==="-Infinity")return ZERO;if(typeof unsigned==='number'){// For goog.math.long compatibility
	radix=unsigned,unsigned=false;}else{unsigned=!!unsigned;}radix=radix||10;if(radix<2||36<radix)throw RangeError('radix');var p;if((p=str.indexOf('-'))>0)throw Error('interior hyphen');else if(p===0){return fromString(str.substring(1),unsigned,radix).neg();}// Do several (8) digits each time through the loop, so as to
	// minimize the calls to the very expensive emulated div.
	var radixToPower=fromNumber(pow_dbl(radix,8));var result=ZERO;for(var i=0;i<str.length;i+=8){var size=Math.min(8,str.length-i),value=parseInt(str.substring(i,i+size),radix);if(size<8){var power=fromNumber(pow_dbl(radix,size));result=result.mul(power).add(fromNumber(value));}else{result=result.mul(radixToPower);result=result.add(fromNumber(value));}}result.unsigned=unsigned;return result;}/**
	     * Returns a Long representation of the given string, written using the specified radix.
	     * @function
	     * @param {string} str The textual representation of the Long
	     * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to `false` for signed
	     * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
	     * @returns {!Long} The corresponding Long value
	     */Long.fromString=fromString;/**
	     * @function
	     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val
	     * @returns {!Long}
	     * @inner
	     */function fromValue(val){if(val/* is compatible */instanceof Long)return val;if(typeof val==='number')return fromNumber(val);if(typeof val==='string')return fromString(val);// Throws for non-objects, converts non-instanceof Long:
	return fromBits(val.low,val.high,val.unsigned);}/**
	     * Converts the specified value to a Long.
	     * @function
	     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
	     * @returns {!Long}
	     */Long.fromValue=fromValue;// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
	// no runtime penalty for these.
	/**
	     * @type {number}
	     * @const
	     * @inner
	     */var TWO_PWR_16_DBL=1<<16;/**
	     * @type {number}
	     * @const
	     * @inner
	     */var TWO_PWR_24_DBL=1<<24;/**
	     * @type {number}
	     * @const
	     * @inner
	     */var TWO_PWR_32_DBL=TWO_PWR_16_DBL*TWO_PWR_16_DBL;/**
	     * @type {number}
	     * @const
	     * @inner
	     */var TWO_PWR_64_DBL=TWO_PWR_32_DBL*TWO_PWR_32_DBL;/**
	     * @type {number}
	     * @const
	     * @inner
	     */var TWO_PWR_63_DBL=TWO_PWR_64_DBL/2;/**
	     * @type {!Long}
	     * @const
	     * @inner
	     */var TWO_PWR_24=fromInt(TWO_PWR_24_DBL);/**
	     * @type {!Long}
	     * @inner
	     */var ZERO=fromInt(0);/**
	     * Signed zero.
	     * @type {!Long}
	     */Long.ZERO=ZERO;/**
	     * @type {!Long}
	     * @inner
	     */var UZERO=fromInt(0,true);/**
	     * Unsigned zero.
	     * @type {!Long}
	     */Long.UZERO=UZERO;/**
	     * @type {!Long}
	     * @inner
	     */var ONE=fromInt(1);/**
	     * Signed one.
	     * @type {!Long}
	     */Long.ONE=ONE;/**
	     * @type {!Long}
	     * @inner
	     */var UONE=fromInt(1,true);/**
	     * Unsigned one.
	     * @type {!Long}
	     */Long.UONE=UONE;/**
	     * @type {!Long}
	     * @inner
	     */var NEG_ONE=fromInt(-1);/**
	     * Signed negative one.
	     * @type {!Long}
	     */Long.NEG_ONE=NEG_ONE;/**
	     * @type {!Long}
	     * @inner
	     */var MAX_VALUE=fromBits(0xFFFFFFFF|0,0x7FFFFFFF|0,false);/**
	     * Maximum signed value.
	     * @type {!Long}
	     */Long.MAX_VALUE=MAX_VALUE;/**
	     * @type {!Long}
	     * @inner
	     */var MAX_UNSIGNED_VALUE=fromBits(0xFFFFFFFF|0,0xFFFFFFFF|0,true);/**
	     * Maximum unsigned value.
	     * @type {!Long}
	     */Long.MAX_UNSIGNED_VALUE=MAX_UNSIGNED_VALUE;/**
	     * @type {!Long}
	     * @inner
	     */var MIN_VALUE=fromBits(0,0x80000000|0,false);/**
	     * Minimum signed value.
	     * @type {!Long}
	     */Long.MIN_VALUE=MIN_VALUE;/**
	     * @alias Long.prototype
	     * @inner
	     */var LongPrototype=Long.prototype;/**
	     * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
	     * @returns {number}
	     */LongPrototype.toInt=function toInt(){return this.unsigned?this.low>>>0:this.low;};/**
	     * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
	     * @returns {number}
	     */LongPrototype.toNumber=function toNumber(){if(this.unsigned)return(this.high>>>0)*TWO_PWR_32_DBL+(this.low>>>0);return this.high*TWO_PWR_32_DBL+(this.low>>>0);};/**
	     * Converts the Long to a string written in the specified radix.
	     * @param {number=} radix Radix (2-36), defaults to 10
	     * @returns {string}
	     * @override
	     * @throws {RangeError} If `radix` is out of range
	     */LongPrototype.toString=function toString(radix){radix=radix||10;if(radix<2||36<radix)throw RangeError('radix');if(this.isZero())return'0';if(this.isNegative()){// Unsigned Longs are never negative
	if(this.eq(MIN_VALUE)){// We need to change the Long value before it can be negated, so we remove
	// the bottom-most digit in this base and then recurse to do the rest.
	var radixLong=fromNumber(radix),div=this.div(radixLong),rem1=div.mul(radixLong).sub(this);return div.toString(radix)+rem1.toInt().toString(radix);}else return'-'+this.neg().toString(radix);}// Do several (6) digits each time through the loop, so as to
	// minimize the calls to the very expensive emulated div.
	var radixToPower=fromNumber(pow_dbl(radix,6),this.unsigned),rem=this;var result='';while(true){var remDiv=rem.div(radixToPower),intval=rem.sub(remDiv.mul(radixToPower)).toInt()>>>0,digits=intval.toString(radix);rem=remDiv;if(rem.isZero())return digits+result;else{while(digits.length<6){digits='0'+digits;}result=''+digits+result;}}};/**
	     * Gets the high 32 bits as a signed integer.
	     * @returns {number} Signed high bits
	     */LongPrototype.getHighBits=function getHighBits(){return this.high;};/**
	     * Gets the high 32 bits as an unsigned integer.
	     * @returns {number} Unsigned high bits
	     */LongPrototype.getHighBitsUnsigned=function getHighBitsUnsigned(){return this.high>>>0;};/**
	     * Gets the low 32 bits as a signed integer.
	     * @returns {number} Signed low bits
	     */LongPrototype.getLowBits=function getLowBits(){return this.low;};/**
	     * Gets the low 32 bits as an unsigned integer.
	     * @returns {number} Unsigned low bits
	     */LongPrototype.getLowBitsUnsigned=function getLowBitsUnsigned(){return this.low>>>0;};/**
	     * Gets the number of bits needed to represent the absolute value of this Long.
	     * @returns {number}
	     */LongPrototype.getNumBitsAbs=function getNumBitsAbs(){if(this.isNegative())// Unsigned Longs are never negative
	return this.eq(MIN_VALUE)?64:this.neg().getNumBitsAbs();var val=this.high!=0?this.high:this.low;for(var bit=31;bit>0;bit--){if((val&1<<bit)!=0)break;}return this.high!=0?bit+33:bit+1;};/**
	     * Tests if this Long's value equals zero.
	     * @returns {boolean}
	     */LongPrototype.isZero=function isZero(){return this.high===0&&this.low===0;};/**
	     * Tests if this Long's value is negative.
	     * @returns {boolean}
	     */LongPrototype.isNegative=function isNegative(){return!this.unsigned&&this.high<0;};/**
	     * Tests if this Long's value is positive.
	     * @returns {boolean}
	     */LongPrototype.isPositive=function isPositive(){return this.unsigned||this.high>=0;};/**
	     * Tests if this Long's value is odd.
	     * @returns {boolean}
	     */LongPrototype.isOdd=function isOdd(){return(this.low&1)===1;};/**
	     * Tests if this Long's value is even.
	     * @returns {boolean}
	     */LongPrototype.isEven=function isEven(){return(this.low&1)===0;};/**
	     * Tests if this Long's value equals the specified's.
	     * @param {!Long|number|string} other Other value
	     * @returns {boolean}
	     */LongPrototype.equals=function equals(other){if(!isLong(other))other=fromValue(other);if(this.unsigned!==other.unsigned&&this.high>>>31===1&&other.high>>>31===1)return false;return this.high===other.high&&this.low===other.low;};/**
	     * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.
	     * @function
	     * @param {!Long|number|string} other Other value
	     * @returns {boolean}
	     */LongPrototype.eq=LongPrototype.equals;/**
	     * Tests if this Long's value differs from the specified's.
	     * @param {!Long|number|string} other Other value
	     * @returns {boolean}
	     */LongPrototype.notEquals=function notEquals(other){return!this.eq(/* validates */other);};/**
	     * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
	     * @function
	     * @param {!Long|number|string} other Other value
	     * @returns {boolean}
	     */LongPrototype.neq=LongPrototype.notEquals;/**
	     * Tests if this Long's value is less than the specified's.
	     * @param {!Long|number|string} other Other value
	     * @returns {boolean}
	     */LongPrototype.lessThan=function lessThan(other){return this.comp(/* validates */other)<0;};/**
	     * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.
	     * @function
	     * @param {!Long|number|string} other Other value
	     * @returns {boolean}
	     */LongPrototype.lt=LongPrototype.lessThan;/**
	     * Tests if this Long's value is less than or equal the specified's.
	     * @param {!Long|number|string} other Other value
	     * @returns {boolean}
	     */LongPrototype.lessThanOrEqual=function lessThanOrEqual(other){return this.comp(/* validates */other)<=0;};/**
	     * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
	     * @function
	     * @param {!Long|number|string} other Other value
	     * @returns {boolean}
	     */LongPrototype.lte=LongPrototype.lessThanOrEqual;/**
	     * Tests if this Long's value is greater than the specified's.
	     * @param {!Long|number|string} other Other value
	     * @returns {boolean}
	     */LongPrototype.greaterThan=function greaterThan(other){return this.comp(/* validates */other)>0;};/**
	     * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.
	     * @function
	     * @param {!Long|number|string} other Other value
	     * @returns {boolean}
	     */LongPrototype.gt=LongPrototype.greaterThan;/**
	     * Tests if this Long's value is greater than or equal the specified's.
	     * @param {!Long|number|string} other Other value
	     * @returns {boolean}
	     */LongPrototype.greaterThanOrEqual=function greaterThanOrEqual(other){return this.comp(/* validates */other)>=0;};/**
	     * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
	     * @function
	     * @param {!Long|number|string} other Other value
	     * @returns {boolean}
	     */LongPrototype.gte=LongPrototype.greaterThanOrEqual;/**
	     * Compares this Long's value with the specified's.
	     * @param {!Long|number|string} other Other value
	     * @returns {number} 0 if they are the same, 1 if the this is greater and -1
	     *  if the given one is greater
	     */LongPrototype.compare=function compare(other){if(!isLong(other))other=fromValue(other);if(this.eq(other))return 0;var thisNeg=this.isNegative(),otherNeg=other.isNegative();if(thisNeg&&!otherNeg)return-1;if(!thisNeg&&otherNeg)return 1;// At this point the sign bits are the same
	if(!this.unsigned)return this.sub(other).isNegative()?-1:1;// Both are positive if at least one is unsigned
	return other.high>>>0>this.high>>>0||other.high===this.high&&other.low>>>0>this.low>>>0?-1:1;};/**
	     * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.
	     * @function
	     * @param {!Long|number|string} other Other value
	     * @returns {number} 0 if they are the same, 1 if the this is greater and -1
	     *  if the given one is greater
	     */LongPrototype.comp=LongPrototype.compare;/**
	     * Negates this Long's value.
	     * @returns {!Long} Negated Long
	     */LongPrototype.negate=function negate(){if(!this.unsigned&&this.eq(MIN_VALUE))return MIN_VALUE;return this.not().add(ONE);};/**
	     * Negates this Long's value. This is an alias of {@link Long#negate}.
	     * @function
	     * @returns {!Long} Negated Long
	     */LongPrototype.neg=LongPrototype.negate;/**
	     * Returns the sum of this and the specified Long.
	     * @param {!Long|number|string} addend Addend
	     * @returns {!Long} Sum
	     */LongPrototype.add=function add(addend){if(!isLong(addend))addend=fromValue(addend);// Divide each number into 4 chunks of 16 bits, and then sum the chunks.
	var a48=this.high>>>16;var a32=this.high&0xFFFF;var a16=this.low>>>16;var a00=this.low&0xFFFF;var b48=addend.high>>>16;var b32=addend.high&0xFFFF;var b16=addend.low>>>16;var b00=addend.low&0xFFFF;var c48=0,c32=0,c16=0,c00=0;c00+=a00+b00;c16+=c00>>>16;c00&=0xFFFF;c16+=a16+b16;c32+=c16>>>16;c16&=0xFFFF;c32+=a32+b32;c48+=c32>>>16;c32&=0xFFFF;c48+=a48+b48;c48&=0xFFFF;return fromBits(c16<<16|c00,c48<<16|c32,this.unsigned);};/**
	     * Returns the difference of this and the specified Long.
	     * @param {!Long|number|string} subtrahend Subtrahend
	     * @returns {!Long} Difference
	     */LongPrototype.subtract=function subtract(subtrahend){if(!isLong(subtrahend))subtrahend=fromValue(subtrahend);return this.add(subtrahend.neg());};/**
	     * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.
	     * @function
	     * @param {!Long|number|string} subtrahend Subtrahend
	     * @returns {!Long} Difference
	     */LongPrototype.sub=LongPrototype.subtract;/**
	     * Returns the product of this and the specified Long.
	     * @param {!Long|number|string} multiplier Multiplier
	     * @returns {!Long} Product
	     */LongPrototype.multiply=function multiply(multiplier){if(this.isZero())return ZERO;if(!isLong(multiplier))multiplier=fromValue(multiplier);if(multiplier.isZero())return ZERO;if(this.eq(MIN_VALUE))return multiplier.isOdd()?MIN_VALUE:ZERO;if(multiplier.eq(MIN_VALUE))return this.isOdd()?MIN_VALUE:ZERO;if(this.isNegative()){if(multiplier.isNegative())return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();}else if(multiplier.isNegative())return this.mul(multiplier.neg()).neg();// If both longs are small, use float multiplication
	if(this.lt(TWO_PWR_24)&&multiplier.lt(TWO_PWR_24))return fromNumber(this.toNumber()*multiplier.toNumber(),this.unsigned);// Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
	// We can skip products that would overflow.
	var a48=this.high>>>16;var a32=this.high&0xFFFF;var a16=this.low>>>16;var a00=this.low&0xFFFF;var b48=multiplier.high>>>16;var b32=multiplier.high&0xFFFF;var b16=multiplier.low>>>16;var b00=multiplier.low&0xFFFF;var c48=0,c32=0,c16=0,c00=0;c00+=a00*b00;c16+=c00>>>16;c00&=0xFFFF;c16+=a16*b00;c32+=c16>>>16;c16&=0xFFFF;c16+=a00*b16;c32+=c16>>>16;c16&=0xFFFF;c32+=a32*b00;c48+=c32>>>16;c32&=0xFFFF;c32+=a16*b16;c48+=c32>>>16;c32&=0xFFFF;c32+=a00*b32;c48+=c32>>>16;c32&=0xFFFF;c48+=a48*b00+a32*b16+a16*b32+a00*b48;c48&=0xFFFF;return fromBits(c16<<16|c00,c48<<16|c32,this.unsigned);};/**
	     * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.
	     * @function
	     * @param {!Long|number|string} multiplier Multiplier
	     * @returns {!Long} Product
	     */LongPrototype.mul=LongPrototype.multiply;/**
	     * Returns this Long divided by the specified. The result is signed if this Long is signed or
	     *  unsigned if this Long is unsigned.
	     * @param {!Long|number|string} divisor Divisor
	     * @returns {!Long} Quotient
	     */LongPrototype.divide=function divide(divisor){if(!isLong(divisor))divisor=fromValue(divisor);if(divisor.isZero())throw Error('division by zero');if(this.isZero())return this.unsigned?UZERO:ZERO;var approx,rem,res;if(!this.unsigned){// This section is only relevant for signed longs and is derived from the
	// closure library as a whole.
	if(this.eq(MIN_VALUE)){if(divisor.eq(ONE)||divisor.eq(NEG_ONE))return MIN_VALUE;// recall that -MIN_VALUE == MIN_VALUE
	else if(divisor.eq(MIN_VALUE))return ONE;else{// At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
	var halfThis=this.shr(1);approx=halfThis.div(divisor).shl(1);if(approx.eq(ZERO)){return divisor.isNegative()?ONE:NEG_ONE;}else{rem=this.sub(divisor.mul(approx));res=approx.add(rem.div(divisor));return res;}}}else if(divisor.eq(MIN_VALUE))return this.unsigned?UZERO:ZERO;if(this.isNegative()){if(divisor.isNegative())return this.neg().div(divisor.neg());return this.neg().div(divisor).neg();}else if(divisor.isNegative())return this.div(divisor.neg()).neg();res=ZERO;}else{// The algorithm below has not been made for unsigned longs. It's therefore
	// required to take special care of the MSB prior to running it.
	if(!divisor.unsigned)divisor=divisor.toUnsigned();if(divisor.gt(this))return UZERO;if(divisor.gt(this.shru(1)))// 15 >>> 1 = 7 ; with divisor = 8 ; true
	return UONE;res=UZERO;}// Repeat the following until the remainder is less than other:  find a
	// floating-point that approximates remainder / other *from below*, add this
	// into the result, and subtract it from the remainder.  It is critical that
	// the approximate value is less than or equal to the real value so that the
	// remainder never becomes negative.
	rem=this;while(rem.gte(divisor)){// Approximate the result of division. This may be a little greater or
	// smaller than the actual value.
	approx=Math.max(1,Math.floor(rem.toNumber()/divisor.toNumber()));// We will tweak the approximate result by changing it in the 48-th digit or
	// the smallest non-fractional digit, whichever is larger.
	var log2=Math.ceil(Math.log(approx)/Math.LN2),delta=log2<=48?1:pow_dbl(2,log2-48),// Decrease the approximation until it is smaller than the remainder.  Note
	// that if it is too large, the product overflows and is negative.
	approxRes=fromNumber(approx),approxRem=approxRes.mul(divisor);while(approxRem.isNegative()||approxRem.gt(rem)){approx-=delta;approxRes=fromNumber(approx,this.unsigned);approxRem=approxRes.mul(divisor);}// We know the answer can't be zero... and actually, zero would cause
	// infinite recursion since we would make no progress.
	if(approxRes.isZero())approxRes=ONE;res=res.add(approxRes);rem=rem.sub(approxRem);}return res;};/**
	     * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.
	     * @function
	     * @param {!Long|number|string} divisor Divisor
	     * @returns {!Long} Quotient
	     */LongPrototype.div=LongPrototype.divide;/**
	     * Returns this Long modulo the specified.
	     * @param {!Long|number|string} divisor Divisor
	     * @returns {!Long} Remainder
	     */LongPrototype.modulo=function modulo(divisor){if(!isLong(divisor))divisor=fromValue(divisor);return this.sub(this.div(divisor).mul(divisor));};/**
	     * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
	     * @function
	     * @param {!Long|number|string} divisor Divisor
	     * @returns {!Long} Remainder
	     */LongPrototype.mod=LongPrototype.modulo;/**
	     * Returns the bitwise NOT of this Long.
	     * @returns {!Long}
	     */LongPrototype.not=function not(){return fromBits(~this.low,~this.high,this.unsigned);};/**
	     * Returns the bitwise AND of this Long and the specified.
	     * @param {!Long|number|string} other Other Long
	     * @returns {!Long}
	     */LongPrototype.and=function and(other){if(!isLong(other))other=fromValue(other);return fromBits(this.low&other.low,this.high&other.high,this.unsigned);};/**
	     * Returns the bitwise OR of this Long and the specified.
	     * @param {!Long|number|string} other Other Long
	     * @returns {!Long}
	     */LongPrototype.or=function or(other){if(!isLong(other))other=fromValue(other);return fromBits(this.low|other.low,this.high|other.high,this.unsigned);};/**
	     * Returns the bitwise XOR of this Long and the given one.
	     * @param {!Long|number|string} other Other Long
	     * @returns {!Long}
	     */LongPrototype.xor=function xor(other){if(!isLong(other))other=fromValue(other);return fromBits(this.low^other.low,this.high^other.high,this.unsigned);};/**
	     * Returns this Long with bits shifted to the left by the given amount.
	     * @param {number|!Long} numBits Number of bits
	     * @returns {!Long} Shifted Long
	     */LongPrototype.shiftLeft=function shiftLeft(numBits){if(isLong(numBits))numBits=numBits.toInt();if((numBits&=63)===0)return this;else if(numBits<32)return fromBits(this.low<<numBits,this.high<<numBits|this.low>>>32-numBits,this.unsigned);else return fromBits(0,this.low<<numBits-32,this.unsigned);};/**
	     * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.
	     * @function
	     * @param {number|!Long} numBits Number of bits
	     * @returns {!Long} Shifted Long
	     */LongPrototype.shl=LongPrototype.shiftLeft;/**
	     * Returns this Long with bits arithmetically shifted to the right by the given amount.
	     * @param {number|!Long} numBits Number of bits
	     * @returns {!Long} Shifted Long
	     */LongPrototype.shiftRight=function shiftRight(numBits){if(isLong(numBits))numBits=numBits.toInt();if((numBits&=63)===0)return this;else if(numBits<32)return fromBits(this.low>>>numBits|this.high<<32-numBits,this.high>>numBits,this.unsigned);else return fromBits(this.high>>numBits-32,this.high>=0?0:-1,this.unsigned);};/**
	     * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.
	     * @function
	     * @param {number|!Long} numBits Number of bits
	     * @returns {!Long} Shifted Long
	     */LongPrototype.shr=LongPrototype.shiftRight;/**
	     * Returns this Long with bits logically shifted to the right by the given amount.
	     * @param {number|!Long} numBits Number of bits
	     * @returns {!Long} Shifted Long
	     */LongPrototype.shiftRightUnsigned=function shiftRightUnsigned(numBits){if(isLong(numBits))numBits=numBits.toInt();numBits&=63;if(numBits===0)return this;else{var high=this.high;if(numBits<32){var low=this.low;return fromBits(low>>>numBits|high<<32-numBits,high>>>numBits,this.unsigned);}else if(numBits===32)return fromBits(high,0,this.unsigned);else return fromBits(high>>>numBits-32,0,this.unsigned);}};/**
	     * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
	     * @function
	     * @param {number|!Long} numBits Number of bits
	     * @returns {!Long} Shifted Long
	     */LongPrototype.shru=LongPrototype.shiftRightUnsigned;/**
	     * Converts this Long to signed.
	     * @returns {!Long} Signed long
	     */LongPrototype.toSigned=function toSigned(){if(!this.unsigned)return this;return fromBits(this.low,this.high,false);};/**
	     * Converts this Long to unsigned.
	     * @returns {!Long} Unsigned long
	     */LongPrototype.toUnsigned=function toUnsigned(){if(this.unsigned)return this;return fromBits(this.low,this.high,true);};/**
	     * Converts this Long to its byte representation.
	     * @param {boolean=} le Whether little or big endian, defaults to big endian
	     * @returns {!Array.<number>} Byte representation
	     */LongPrototype.toBytes=function(le){return le?this.toBytesLE():this.toBytesBE();};/**
	     * Converts this Long to its little endian byte representation.
	     * @returns {!Array.<number>} Little endian byte representation
	     */LongPrototype.toBytesLE=function(){var hi=this.high,lo=this.low;return[lo&0xff,lo>>>8&0xff,lo>>>16&0xff,lo>>>24&0xff,hi&0xff,hi>>>8&0xff,hi>>>16&0xff,hi>>>24&0xff];};/**
	     * Converts this Long to its big endian byte representation.
	     * @returns {!Array.<number>} Big endian byte representation
	     */LongPrototype.toBytesBE=function(){var hi=this.high,lo=this.low;return[hi>>>24&0xff,hi>>>16&0xff,hi>>>8&0xff,hi&0xff,lo>>>24&0xff,lo>>>16&0xff,lo>>>8&0xff,lo&0xff];};return Long;});/***/},/* 41 *//***/function(module,__webpack_exports__,__webpack_require__){"use strict";/** Exception nesting.  */var ErrorWithCause=function(){function ErrorWithCause(message,cause){(0,_classCallCheck3.default)(this,ErrorWithCause);this.message=message;if(typeof cause!=="undefined"&&cause!==null?cause.message:undefined){this.message='cause\t'+cause.message+'\t'+this.message;}var stack="";//(new Error).stack
	if(typeof cause!=="undefined"&&cause!==null?cause.stack:undefined){stack='caused by\n\t'+cause.stack+'\t'+stack;}this.stack=this.message+"\n"+stack;}(0,_createClass3.default)(ErrorWithCause,null,[{key:'throw',value:function _throw(message,cause){var msg=message;if(typeof cause!=="undefined"&&cause!==null?cause.message:undefined){msg+='\t cause: '+cause.message+' ';}if(typeof cause!=="undefined"&&cause!==null?cause.stack:undefined){msg+='\n stack: '+cause.stack+' ';}throw new Error(msg);}}]);return ErrorWithCause;}();/* harmony default export */__webpack_exports__["a"]=ErrorWithCause;/***/},/* 42 *//***/function(module,exports){module.exports={"name":"bigi","version":"1.4.2","description":"Big integers.","keywords":["cryptography","math","bitcoin","arbitrary","precision","arithmetic","big","integer","int","number","biginteger","bigint","bignumber","decimal","float"],"devDependencies":{"coveralls":"^2.11.2","istanbul":"^0.3.5","jshint":"^2.5.1","mocha":"^2.1.0","mochify":"^2.1.0"},"repository":{"url":"https://github.com/cryptocoinjs/bigi","type":"git"},"main":"./lib/index.js","scripts":{"browser-test":"./node_modules/.bin/mochify --wd -R spec","test":"./node_modules/.bin/_mocha -- test/*.js","jshint":"./node_modules/.bin/jshint --config jshint.json lib/*.js ; true","unit":"./node_modules/.bin/mocha","coverage":"./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha -- --reporter list test/*.js","coveralls":"npm run-script coverage && node ./node_modules/.bin/coveralls < coverage/lcov.info"},"dependencies":{},"testling":{"files":"test/*.js","harness":"mocha","browsers":["ie/9..latest","firefox/latest","chrome/latest","safari/6.0..latest","iphone/6.0..latest","android-browser/4.2..latest"]}/***/};},/* 43 *//***/function(module,exports,__webpack_require__){// FIXME: Kind of a weird way to throw exceptions, consider removing
	var assert=__webpack_require__(0);var BigInteger=__webpack_require__(24);/**
	 * Turns a byte array into a big integer.
	 *
	 * This function will interpret a byte array as a big integer in big
	 * endian notation.
	 */BigInteger.fromByteArrayUnsigned=function(byteArray){// BigInteger expects a DER integer conformant byte array
	if(byteArray[0]&0x80){return new BigInteger([0].concat(byteArray));}return new BigInteger(byteArray);};/**
	 * Returns a byte array representation of the big integer.
	 *
	 * This returns the absolute of the contained value in big endian
	 * form. A value of zero results in an empty array.
	 */BigInteger.prototype.toByteArrayUnsigned=function(){var byteArray=this.toByteArray();return byteArray[0]===0?byteArray.slice(1):byteArray;};BigInteger.fromDERInteger=function(byteArray){return new BigInteger(byteArray);};/*
	 * Converts BigInteger to a DER integer representation.
	 *
	 * The format for this value uses the most significant bit as a sign
	 * bit.  If the most significant bit is already set and the integer is
	 * positive, a 0x00 is prepended.
	 *
	 * Examples:
	 *
	 *      0 =>     0x00
	 *      1 =>     0x01
	 *     -1 =>     0xff
	 *    127 =>     0x7f
	 *   -127 =>     0x81
	 *    128 =>   0x0080
	 *   -128 =>     0x80
	 *    255 =>   0x00ff
	 *   -255 =>   0xff01
	 *  16300 =>   0x3fac
	 * -16300 =>   0xc054
	 *  62300 => 0x00f35c
	 * -62300 => 0xff0ca4
	*/BigInteger.prototype.toDERInteger=BigInteger.prototype.toByteArray;BigInteger.fromBuffer=function(buffer){// BigInteger expects a DER integer conformant byte array
	if(buffer[0]&0x80){var byteArray=Array.prototype.slice.call(buffer);return new BigInteger([0].concat(byteArray));}return new BigInteger(buffer);};BigInteger.fromHex=function(hex){if(hex==='')return BigInteger.ZERO;assert.equal(hex,hex.match(/^[A-Fa-f0-9]+/),'Invalid hex string');assert.equal(hex.length%2,0,'Incomplete hex');return new BigInteger(hex,16);};BigInteger.prototype.toBuffer=function(size){var byteArray=this.toByteArrayUnsigned();var zeros=[];var padding=size-byteArray.length;while(zeros.length<padding){zeros.push(0);}return new Buffer(zeros.concat(byteArray));};BigInteger.prototype.toHex=function(size){return this.toBuffer(size).toString('hex');};/***/},/* 44 *//***/function(module,exports,__webpack_require__){var BigInteger=__webpack_require__(1);var curves=__webpack_require__(45);var Curve=__webpack_require__(27);function getCurveByName(name){var curve=curves[name];if(!curve)return null;var p=new BigInteger(curve.p,16);var a=new BigInteger(curve.a,16);var b=new BigInteger(curve.b,16);var n=new BigInteger(curve.n,16);var h=new BigInteger(curve.h,16);var Gx=new BigInteger(curve.Gx,16);var Gy=new BigInteger(curve.Gy,16);return new Curve(p,a,b,Gx,Gy,n,h);}module.exports=getCurveByName;/***/},/* 45 *//***/function(module,exports){module.exports={"secp128r1":{"p":"fffffffdffffffffffffffffffffffff","a":"fffffffdfffffffffffffffffffffffc","b":"e87579c11079f43dd824993c2cee5ed3","n":"fffffffe0000000075a30d1b9038a115","h":"01","Gx":"161ff7528b899b2d0c28607ca52c5b86","Gy":"cf5ac8395bafeb13c02da292dded7a83"},"secp160k1":{"p":"fffffffffffffffffffffffffffffffeffffac73","a":"00","b":"07","n":"0100000000000000000001b8fa16dfab9aca16b6b3","h":"01","Gx":"3b4c382ce37aa192a4019e763036f4f5dd4d7ebb","Gy":"938cf935318fdced6bc28286531733c3f03c4fee"},"secp160r1":{"p":"ffffffffffffffffffffffffffffffff7fffffff","a":"ffffffffffffffffffffffffffffffff7ffffffc","b":"1c97befc54bd7a8b65acf89f81d4d4adc565fa45","n":"0100000000000000000001f4c8f927aed3ca752257","h":"01","Gx":"4a96b5688ef573284664698968c38bb913cbfc82","Gy":"23a628553168947d59dcc912042351377ac5fb32"},"secp192k1":{"p":"fffffffffffffffffffffffffffffffffffffffeffffee37","a":"00","b":"03","n":"fffffffffffffffffffffffe26f2fc170f69466a74defd8d","h":"01","Gx":"db4ff10ec057e9ae26b07d0280b7f4341da5d1b1eae06c7d","Gy":"9b2f2f6d9c5628a7844163d015be86344082aa88d95e2f9d"},"secp192r1":{"p":"fffffffffffffffffffffffffffffffeffffffffffffffff","a":"fffffffffffffffffffffffffffffffefffffffffffffffc","b":"64210519e59c80e70fa7e9ab72243049feb8deecc146b9b1","n":"ffffffffffffffffffffffff99def836146bc9b1b4d22831","h":"01","Gx":"188da80eb03090f67cbf20eb43a18800f4ff0afd82ff1012","Gy":"07192b95ffc8da78631011ed6b24cdd573f977a11e794811"},"secp256k1":{"p":"fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f","a":"00","b":"07","n":"fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141","h":"01","Gx":"79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798","Gy":"483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8"},"secp256r1":{"p":"ffffffff00000001000000000000000000000000ffffffffffffffffffffffff","a":"ffffffff00000001000000000000000000000000fffffffffffffffffffffffc","b":"5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b","n":"ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551","h":"01","Gx":"6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296","Gy":"4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5"}/***/};},/* 46 *//***/function(module,exports,__webpack_require__){// base-x encoding
	// Forked from https://github.com/cryptocoinjs/bs58
	// Originally written by Mike Hearn for BitcoinJ
	// Copyright (c) 2011 Google Inc
	// Ported to JavaScript by Stefan Thomas
	// Merged Buffer refactorings from base58-native by Stephen Pair
	// Copyright (c) 2013 BitPay Inc
	var Buffer=__webpack_require__(26).Buffer;module.exports=function base(ALPHABET){var ALPHABET_MAP={};var BASE=ALPHABET.length;var LEADER=ALPHABET.charAt(0);// pre-compute lookup table
	for(var z=0;z<ALPHABET.length;z++){var x=ALPHABET.charAt(z);if(ALPHABET_MAP[x]!==undefined)throw new TypeError(x+' is ambiguous');ALPHABET_MAP[x]=z;}function encode(source){if(source.length===0)return'';var digits=[0];for(var i=0;i<source.length;++i){for(var j=0,carry=source[i];j<digits.length;++j){carry+=digits[j]<<8;digits[j]=carry%BASE;carry=carry/BASE|0;}while(carry>0){digits.push(carry%BASE);carry=carry/BASE|0;}}var string='';// deal with leading zeros
	for(var k=0;source[k]===0&&k<source.length-1;++k){string+=ALPHABET[0];}// convert digits to a string
	for(var q=digits.length-1;q>=0;--q){string+=ALPHABET[digits[q]];}return string;}function decodeUnsafe(string){if(typeof string!=='string')throw new TypeError('Expected String');if(string.length===0)return Buffer.allocUnsafe(0);var bytes=[0];for(var i=0;i<string.length;i++){var value=ALPHABET_MAP[string[i]];if(value===undefined)return;for(var j=0,carry=value;j<bytes.length;++j){carry+=bytes[j]*BASE;bytes[j]=carry&0xff;carry>>=8;}while(carry>0){bytes.push(carry&0xff);carry>>=8;}}// deal with leading zeros
	for(var k=0;string[k]===LEADER&&k<string.length-1;++k){bytes.push(0);}return Buffer.from(bytes.reverse());}function decode(string){var buffer=decodeUnsafe(string);if(buffer)return buffer;throw new Error('Non-base'+BASE+' character');}return{encode:encode,decodeUnsafe:decodeUnsafe,decode:decode};};/***/},/* 47 *//***/function(module,exports,__webpack_require__){module.exports=__webpack_require__(14).createHash;/***/},/* 48 *//***/function(module,exports,__webpack_require__){module.exports=__webpack_require__(14).createHmac;/***/},/* 49 *//***/function(module,exports){exports=module.exports=typeof _keys2.default==='function'?_keys2.default:shim;exports.shim=shim;function shim(obj){var keys=[];for(var key in obj){keys.push(key);}return keys;}/***/},/* 50 *//***/function(module,exports){var supportsArgumentsClass=function(){return Object.prototype.toString.call(arguments);}()=='[object Arguments]';exports=module.exports=supportsArgumentsClass?supported:unsupported;exports.supported=supported;function supported(object){return Object.prototype.toString.call(object)=='[object Arguments]';};exports.unsupported=unsupported;function unsupported(object){return object&&(typeof object==='undefined'?'undefined':(0,_typeof3.default)(object))=='object'&&typeof object.length=='number'&&Object.prototype.hasOwnProperty.call(object,'callee')&&!Object.prototype.propertyIsEnumerable.call(object,'callee')||false;};/***/},/* 51 *//***/function(module,exports,__webpack_require__){;(function(root,factory,undef){if(true){// CommonJS
	module.exports=exports=factory(__webpack_require__(3),__webpack_require__(29),__webpack_require__(52),__webpack_require__(30),__webpack_require__(55));}else if(typeof define==="function"&&define.amd){// AMD
	define(["./core","./enc-base64","./md5","./evpkdf","./cipher-core"],factory);}else{// Global (browser)
	factory(root.CryptoJS);}})(this,function(CryptoJS){(function(){// Shortcuts
	var C=CryptoJS;var C_lib=C.lib;var BlockCipher=C_lib.BlockCipher;var C_algo=C.algo;// Lookup tables
	var SBOX=[];var INV_SBOX=[];var SUB_MIX_0=[];var SUB_MIX_1=[];var SUB_MIX_2=[];var SUB_MIX_3=[];var INV_SUB_MIX_0=[];var INV_SUB_MIX_1=[];var INV_SUB_MIX_2=[];var INV_SUB_MIX_3=[];// Compute lookup tables
	(function(){// Compute double table
	var d=[];for(var i=0;i<256;i++){if(i<128){d[i]=i<<1;}else{d[i]=i<<1^0x11b;}}// Walk GF(2^8)
	var x=0;var xi=0;for(var i=0;i<256;i++){// Compute sbox
	var sx=xi^xi<<1^xi<<2^xi<<3^xi<<4;sx=sx>>>8^sx&0xff^0x63;SBOX[x]=sx;INV_SBOX[sx]=x;// Compute multiplication
	var x2=d[x];var x4=d[x2];var x8=d[x4];// Compute sub bytes, mix columns tables
	var t=d[sx]*0x101^sx*0x1010100;SUB_MIX_0[x]=t<<24|t>>>8;SUB_MIX_1[x]=t<<16|t>>>16;SUB_MIX_2[x]=t<<8|t>>>24;SUB_MIX_3[x]=t;// Compute inv sub bytes, inv mix columns tables
	var t=x8*0x1010101^x4*0x10001^x2*0x101^x*0x1010100;INV_SUB_MIX_0[sx]=t<<24|t>>>8;INV_SUB_MIX_1[sx]=t<<16|t>>>16;INV_SUB_MIX_2[sx]=t<<8|t>>>24;INV_SUB_MIX_3[sx]=t;// Compute next counter
	if(!x){x=xi=1;}else{x=x2^d[d[d[x8^x2]]];xi^=d[d[xi]];}}})();// Precomputed Rcon lookup
	var RCON=[0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1b,0x36];/**
		     * AES block cipher algorithm.
		     */var AES=C_algo.AES=BlockCipher.extend({_doReset:function _doReset(){// Skip reset of nRounds has been set before and key did not change
	if(this._nRounds&&this._keyPriorReset===this._key){return;}// Shortcuts
	var key=this._keyPriorReset=this._key;var keyWords=key.words;var keySize=key.sigBytes/4;// Compute number of rounds
	var nRounds=this._nRounds=keySize+6;// Compute number of key schedule rows
	var ksRows=(nRounds+1)*4;// Compute key schedule
	var keySchedule=this._keySchedule=[];for(var ksRow=0;ksRow<ksRows;ksRow++){if(ksRow<keySize){keySchedule[ksRow]=keyWords[ksRow];}else{var t=keySchedule[ksRow-1];if(!(ksRow%keySize)){// Rot word
	t=t<<8|t>>>24;// Sub word
	t=SBOX[t>>>24]<<24|SBOX[t>>>16&0xff]<<16|SBOX[t>>>8&0xff]<<8|SBOX[t&0xff];// Mix Rcon
	t^=RCON[ksRow/keySize|0]<<24;}else if(keySize>6&&ksRow%keySize==4){// Sub word
	t=SBOX[t>>>24]<<24|SBOX[t>>>16&0xff]<<16|SBOX[t>>>8&0xff]<<8|SBOX[t&0xff];}keySchedule[ksRow]=keySchedule[ksRow-keySize]^t;}}// Compute inv key schedule
	var invKeySchedule=this._invKeySchedule=[];for(var invKsRow=0;invKsRow<ksRows;invKsRow++){var ksRow=ksRows-invKsRow;if(invKsRow%4){var t=keySchedule[ksRow];}else{var t=keySchedule[ksRow-4];}if(invKsRow<4||ksRow<=4){invKeySchedule[invKsRow]=t;}else{invKeySchedule[invKsRow]=INV_SUB_MIX_0[SBOX[t>>>24]]^INV_SUB_MIX_1[SBOX[t>>>16&0xff]]^INV_SUB_MIX_2[SBOX[t>>>8&0xff]]^INV_SUB_MIX_3[SBOX[t&0xff]];}}},encryptBlock:function encryptBlock(M,offset){this._doCryptBlock(M,offset,this._keySchedule,SUB_MIX_0,SUB_MIX_1,SUB_MIX_2,SUB_MIX_3,SBOX);},decryptBlock:function decryptBlock(M,offset){// Swap 2nd and 4th rows
	var t=M[offset+1];M[offset+1]=M[offset+3];M[offset+3]=t;this._doCryptBlock(M,offset,this._invKeySchedule,INV_SUB_MIX_0,INV_SUB_MIX_1,INV_SUB_MIX_2,INV_SUB_MIX_3,INV_SBOX);// Inv swap 2nd and 4th rows
	var t=M[offset+1];M[offset+1]=M[offset+3];M[offset+3]=t;},_doCryptBlock:function _doCryptBlock(M,offset,keySchedule,SUB_MIX_0,SUB_MIX_1,SUB_MIX_2,SUB_MIX_3,SBOX){// Shortcut
	var nRounds=this._nRounds;// Get input, add round key
	var s0=M[offset]^keySchedule[0];var s1=M[offset+1]^keySchedule[1];var s2=M[offset+2]^keySchedule[2];var s3=M[offset+3]^keySchedule[3];// Key schedule row counter
	var ksRow=4;// Rounds
	for(var round=1;round<nRounds;round++){// Shift rows, sub bytes, mix columns, add round key
	var t0=SUB_MIX_0[s0>>>24]^SUB_MIX_1[s1>>>16&0xff]^SUB_MIX_2[s2>>>8&0xff]^SUB_MIX_3[s3&0xff]^keySchedule[ksRow++];var t1=SUB_MIX_0[s1>>>24]^SUB_MIX_1[s2>>>16&0xff]^SUB_MIX_2[s3>>>8&0xff]^SUB_MIX_3[s0&0xff]^keySchedule[ksRow++];var t2=SUB_MIX_0[s2>>>24]^SUB_MIX_1[s3>>>16&0xff]^SUB_MIX_2[s0>>>8&0xff]^SUB_MIX_3[s1&0xff]^keySchedule[ksRow++];var t3=SUB_MIX_0[s3>>>24]^SUB_MIX_1[s0>>>16&0xff]^SUB_MIX_2[s1>>>8&0xff]^SUB_MIX_3[s2&0xff]^keySchedule[ksRow++];// Update state
	s0=t0;s1=t1;s2=t2;s3=t3;}// Shift rows, sub bytes, add round key
	var t0=(SBOX[s0>>>24]<<24|SBOX[s1>>>16&0xff]<<16|SBOX[s2>>>8&0xff]<<8|SBOX[s3&0xff])^keySchedule[ksRow++];var t1=(SBOX[s1>>>24]<<24|SBOX[s2>>>16&0xff]<<16|SBOX[s3>>>8&0xff]<<8|SBOX[s0&0xff])^keySchedule[ksRow++];var t2=(SBOX[s2>>>24]<<24|SBOX[s3>>>16&0xff]<<16|SBOX[s0>>>8&0xff]<<8|SBOX[s1&0xff])^keySchedule[ksRow++];var t3=(SBOX[s3>>>24]<<24|SBOX[s0>>>16&0xff]<<16|SBOX[s1>>>8&0xff]<<8|SBOX[s2&0xff])^keySchedule[ksRow++];// Set output
	M[offset]=t0;M[offset+1]=t1;M[offset+2]=t2;M[offset+3]=t3;},keySize:256/32});/**
		     * Shortcut functions to the cipher's object interface.
		     *
		     * @example
		     *
		     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);
		     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);
		     */C.AES=BlockCipher._createHelper(AES);})();return CryptoJS.AES;});/***/},/* 52 *//***/function(module,exports,__webpack_require__){;(function(root,factory){if(true){// CommonJS
	module.exports=exports=factory(__webpack_require__(3));}else if(typeof define==="function"&&define.amd){// AMD
	define(["./core"],factory);}else{// Global (browser)
	factory(root.CryptoJS);}})(this,function(CryptoJS){(function(Math){// Shortcuts
	var C=CryptoJS;var C_lib=C.lib;var WordArray=C_lib.WordArray;var Hasher=C_lib.Hasher;var C_algo=C.algo;// Constants table
	var T=[];// Compute constants
	(function(){for(var i=0;i<64;i++){T[i]=Math.abs(Math.sin(i+1))*0x100000000|0;}})();/**
		     * MD5 hash algorithm.
		     */var MD5=C_algo.MD5=Hasher.extend({_doReset:function _doReset(){this._hash=new WordArray.init([0x67452301,0xefcdab89,0x98badcfe,0x10325476]);},_doProcessBlock:function _doProcessBlock(M,offset){// Swap endian
	for(var i=0;i<16;i++){// Shortcuts
	var offset_i=offset+i;var M_offset_i=M[offset_i];M[offset_i]=(M_offset_i<<8|M_offset_i>>>24)&0x00ff00ff|(M_offset_i<<24|M_offset_i>>>8)&0xff00ff00;}// Shortcuts
	var H=this._hash.words;var M_offset_0=M[offset+0];var M_offset_1=M[offset+1];var M_offset_2=M[offset+2];var M_offset_3=M[offset+3];var M_offset_4=M[offset+4];var M_offset_5=M[offset+5];var M_offset_6=M[offset+6];var M_offset_7=M[offset+7];var M_offset_8=M[offset+8];var M_offset_9=M[offset+9];var M_offset_10=M[offset+10];var M_offset_11=M[offset+11];var M_offset_12=M[offset+12];var M_offset_13=M[offset+13];var M_offset_14=M[offset+14];var M_offset_15=M[offset+15];// Working varialbes
	var a=H[0];var b=H[1];var c=H[2];var d=H[3];// Computation
	a=FF(a,b,c,d,M_offset_0,7,T[0]);d=FF(d,a,b,c,M_offset_1,12,T[1]);c=FF(c,d,a,b,M_offset_2,17,T[2]);b=FF(b,c,d,a,M_offset_3,22,T[3]);a=FF(a,b,c,d,M_offset_4,7,T[4]);d=FF(d,a,b,c,M_offset_5,12,T[5]);c=FF(c,d,a,b,M_offset_6,17,T[6]);b=FF(b,c,d,a,M_offset_7,22,T[7]);a=FF(a,b,c,d,M_offset_8,7,T[8]);d=FF(d,a,b,c,M_offset_9,12,T[9]);c=FF(c,d,a,b,M_offset_10,17,T[10]);b=FF(b,c,d,a,M_offset_11,22,T[11]);a=FF(a,b,c,d,M_offset_12,7,T[12]);d=FF(d,a,b,c,M_offset_13,12,T[13]);c=FF(c,d,a,b,M_offset_14,17,T[14]);b=FF(b,c,d,a,M_offset_15,22,T[15]);a=GG(a,b,c,d,M_offset_1,5,T[16]);d=GG(d,a,b,c,M_offset_6,9,T[17]);c=GG(c,d,a,b,M_offset_11,14,T[18]);b=GG(b,c,d,a,M_offset_0,20,T[19]);a=GG(a,b,c,d,M_offset_5,5,T[20]);d=GG(d,a,b,c,M_offset_10,9,T[21]);c=GG(c,d,a,b,M_offset_15,14,T[22]);b=GG(b,c,d,a,M_offset_4,20,T[23]);a=GG(a,b,c,d,M_offset_9,5,T[24]);d=GG(d,a,b,c,M_offset_14,9,T[25]);c=GG(c,d,a,b,M_offset_3,14,T[26]);b=GG(b,c,d,a,M_offset_8,20,T[27]);a=GG(a,b,c,d,M_offset_13,5,T[28]);d=GG(d,a,b,c,M_offset_2,9,T[29]);c=GG(c,d,a,b,M_offset_7,14,T[30]);b=GG(b,c,d,a,M_offset_12,20,T[31]);a=HH(a,b,c,d,M_offset_5,4,T[32]);d=HH(d,a,b,c,M_offset_8,11,T[33]);c=HH(c,d,a,b,M_offset_11,16,T[34]);b=HH(b,c,d,a,M_offset_14,23,T[35]);a=HH(a,b,c,d,M_offset_1,4,T[36]);d=HH(d,a,b,c,M_offset_4,11,T[37]);c=HH(c,d,a,b,M_offset_7,16,T[38]);b=HH(b,c,d,a,M_offset_10,23,T[39]);a=HH(a,b,c,d,M_offset_13,4,T[40]);d=HH(d,a,b,c,M_offset_0,11,T[41]);c=HH(c,d,a,b,M_offset_3,16,T[42]);b=HH(b,c,d,a,M_offset_6,23,T[43]);a=HH(a,b,c,d,M_offset_9,4,T[44]);d=HH(d,a,b,c,M_offset_12,11,T[45]);c=HH(c,d,a,b,M_offset_15,16,T[46]);b=HH(b,c,d,a,M_offset_2,23,T[47]);a=II(a,b,c,d,M_offset_0,6,T[48]);d=II(d,a,b,c,M_offset_7,10,T[49]);c=II(c,d,a,b,M_offset_14,15,T[50]);b=II(b,c,d,a,M_offset_5,21,T[51]);a=II(a,b,c,d,M_offset_12,6,T[52]);d=II(d,a,b,c,M_offset_3,10,T[53]);c=II(c,d,a,b,M_offset_10,15,T[54]);b=II(b,c,d,a,M_offset_1,21,T[55]);a=II(a,b,c,d,M_offset_8,6,T[56]);d=II(d,a,b,c,M_offset_15,10,T[57]);c=II(c,d,a,b,M_offset_6,15,T[58]);b=II(b,c,d,a,M_offset_13,21,T[59]);a=II(a,b,c,d,M_offset_4,6,T[60]);d=II(d,a,b,c,M_offset_11,10,T[61]);c=II(c,d,a,b,M_offset_2,15,T[62]);b=II(b,c,d,a,M_offset_9,21,T[63]);// Intermediate hash value
	H[0]=H[0]+a|0;H[1]=H[1]+b|0;H[2]=H[2]+c|0;H[3]=H[3]+d|0;},_doFinalize:function _doFinalize(){// Shortcuts
	var data=this._data;var dataWords=data.words;var nBitsTotal=this._nDataBytes*8;var nBitsLeft=data.sigBytes*8;// Add padding
	dataWords[nBitsLeft>>>5]|=0x80<<24-nBitsLeft%32;var nBitsTotalH=Math.floor(nBitsTotal/0x100000000);var nBitsTotalL=nBitsTotal;dataWords[(nBitsLeft+64>>>9<<4)+15]=(nBitsTotalH<<8|nBitsTotalH>>>24)&0x00ff00ff|(nBitsTotalH<<24|nBitsTotalH>>>8)&0xff00ff00;dataWords[(nBitsLeft+64>>>9<<4)+14]=(nBitsTotalL<<8|nBitsTotalL>>>24)&0x00ff00ff|(nBitsTotalL<<24|nBitsTotalL>>>8)&0xff00ff00;data.sigBytes=(dataWords.length+1)*4;// Hash final blocks
	this._process();// Shortcuts
	var hash=this._hash;var H=hash.words;// Swap endian
	for(var i=0;i<4;i++){// Shortcut
	var H_i=H[i];H[i]=(H_i<<8|H_i>>>24)&0x00ff00ff|(H_i<<24|H_i>>>8)&0xff00ff00;}// Return final computed hash
	return hash;},clone:function clone(){var clone=Hasher.clone.call(this);clone._hash=this._hash.clone();return clone;}});function FF(a,b,c,d,x,s,t){var n=a+(b&c|~b&d)+x+t;return(n<<s|n>>>32-s)+b;}function GG(a,b,c,d,x,s,t){var n=a+(b&d|c&~d)+x+t;return(n<<s|n>>>32-s)+b;}function HH(a,b,c,d,x,s,t){var n=a+(b^c^d)+x+t;return(n<<s|n>>>32-s)+b;}function II(a,b,c,d,x,s,t){var n=a+(c^(b|~d))+x+t;return(n<<s|n>>>32-s)+b;}/**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.MD5('message');
		     *     var hash = CryptoJS.MD5(wordArray);
		     */C.MD5=Hasher._createHelper(MD5);/**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacMD5(message, key);
		     */C.HmacMD5=Hasher._createHmacHelper(MD5);})(Math);return CryptoJS.MD5;});/***/},/* 53 *//***/function(module,exports,__webpack_require__){;(function(root,factory){if(true){// CommonJS
	module.exports=exports=factory(__webpack_require__(3));}else if(typeof define==="function"&&define.amd){// AMD
	define(["./core"],factory);}else{// Global (browser)
	factory(root.CryptoJS);}})(this,function(CryptoJS){(function(){// Shortcuts
	var C=CryptoJS;var C_lib=C.lib;var WordArray=C_lib.WordArray;var Hasher=C_lib.Hasher;var C_algo=C.algo;// Reusable object
	var W=[];/**
		     * SHA-1 hash algorithm.
		     */var SHA1=C_algo.SHA1=Hasher.extend({_doReset:function _doReset(){this._hash=new WordArray.init([0x67452301,0xefcdab89,0x98badcfe,0x10325476,0xc3d2e1f0]);},_doProcessBlock:function _doProcessBlock(M,offset){// Shortcut
	var H=this._hash.words;// Working variables
	var a=H[0];var b=H[1];var c=H[2];var d=H[3];var e=H[4];// Computation
	for(var i=0;i<80;i++){if(i<16){W[i]=M[offset+i]|0;}else{var n=W[i-3]^W[i-8]^W[i-14]^W[i-16];W[i]=n<<1|n>>>31;}var t=(a<<5|a>>>27)+e+W[i];if(i<20){t+=(b&c|~b&d)+0x5a827999;}else if(i<40){t+=(b^c^d)+0x6ed9eba1;}else if(i<60){t+=(b&c|b&d|c&d)-0x70e44324;}else/* if (i < 80) */{t+=(b^c^d)-0x359d3e2a;}e=d;d=c;c=b<<30|b>>>2;b=a;a=t;}// Intermediate hash value
	H[0]=H[0]+a|0;H[1]=H[1]+b|0;H[2]=H[2]+c|0;H[3]=H[3]+d|0;H[4]=H[4]+e|0;},_doFinalize:function _doFinalize(){// Shortcuts
	var data=this._data;var dataWords=data.words;var nBitsTotal=this._nDataBytes*8;var nBitsLeft=data.sigBytes*8;// Add padding
	dataWords[nBitsLeft>>>5]|=0x80<<24-nBitsLeft%32;dataWords[(nBitsLeft+64>>>9<<4)+14]=Math.floor(nBitsTotal/0x100000000);dataWords[(nBitsLeft+64>>>9<<4)+15]=nBitsTotal;data.sigBytes=dataWords.length*4;// Hash final blocks
	this._process();// Return final computed hash
	return this._hash;},clone:function clone(){var clone=Hasher.clone.call(this);clone._hash=this._hash.clone();return clone;}});/**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.SHA1('message');
		     *     var hash = CryptoJS.SHA1(wordArray);
		     */C.SHA1=Hasher._createHelper(SHA1);/**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacSHA1(message, key);
		     */C.HmacSHA1=Hasher._createHmacHelper(SHA1);})();return CryptoJS.SHA1;});/***/},/* 54 *//***/function(module,exports,__webpack_require__){;(function(root,factory){if(true){// CommonJS
	module.exports=exports=factory(__webpack_require__(3));}else if(typeof define==="function"&&define.amd){// AMD
	define(["./core"],factory);}else{// Global (browser)
	factory(root.CryptoJS);}})(this,function(CryptoJS){(function(){// Shortcuts
	var C=CryptoJS;var C_lib=C.lib;var Base=C_lib.Base;var C_enc=C.enc;var Utf8=C_enc.Utf8;var C_algo=C.algo;/**
		     * HMAC algorithm.
		     */var HMAC=C_algo.HMAC=Base.extend({/**
		         * Initializes a newly created HMAC.
		         *
		         * @param {Hasher} hasher The hash algorithm to use.
		         * @param {WordArray|string} key The secret key.
		         *
		         * @example
		         *
		         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
		         */init:function init(hasher,key){// Init hasher
	hasher=this._hasher=new hasher.init();// Convert string to WordArray, else assume WordArray already
	if(typeof key=='string'){key=Utf8.parse(key);}// Shortcuts
	var hasherBlockSize=hasher.blockSize;var hasherBlockSizeBytes=hasherBlockSize*4;// Allow arbitrary length keys
	if(key.sigBytes>hasherBlockSizeBytes){key=hasher.finalize(key);}// Clamp excess bits
	key.clamp();// Clone key for inner and outer pads
	var oKey=this._oKey=key.clone();var iKey=this._iKey=key.clone();// Shortcuts
	var oKeyWords=oKey.words;var iKeyWords=iKey.words;// XOR keys with pad constants
	for(var i=0;i<hasherBlockSize;i++){oKeyWords[i]^=0x5c5c5c5c;iKeyWords[i]^=0x36363636;}oKey.sigBytes=iKey.sigBytes=hasherBlockSizeBytes;// Set initial values
	this.reset();},/**
		         * Resets this HMAC to its initial state.
		         *
		         * @example
		         *
		         *     hmacHasher.reset();
		         */reset:function reset(){// Shortcut
	var hasher=this._hasher;// Reset
	hasher.reset();hasher.update(this._iKey);},/**
		         * Updates this HMAC with a message.
		         *
		         * @param {WordArray|string} messageUpdate The message to append.
		         *
		         * @return {HMAC} This HMAC instance.
		         *
		         * @example
		         *
		         *     hmacHasher.update('message');
		         *     hmacHasher.update(wordArray);
		         */update:function update(messageUpdate){this._hasher.update(messageUpdate);// Chainable
	return this;},/**
		         * Finalizes the HMAC computation.
		         * Note that the finalize operation is effectively a destructive, read-once operation.
		         *
		         * @param {WordArray|string} messageUpdate (Optional) A final message update.
		         *
		         * @return {WordArray} The HMAC.
		         *
		         * @example
		         *
		         *     var hmac = hmacHasher.finalize();
		         *     var hmac = hmacHasher.finalize('message');
		         *     var hmac = hmacHasher.finalize(wordArray);
		         */finalize:function finalize(messageUpdate){// Shortcut
	var hasher=this._hasher;// Compute HMAC
	var innerHash=hasher.finalize(messageUpdate);hasher.reset();var hmac=hasher.finalize(this._oKey.clone().concat(innerHash));return hmac;}});})();});/***/},/* 55 *//***/function(module,exports,__webpack_require__){;(function(root,factory,undef){if(true){// CommonJS
	module.exports=exports=factory(__webpack_require__(3),__webpack_require__(30));}else if(typeof define==="function"&&define.amd){// AMD
	define(["./core","./evpkdf"],factory);}else{// Global (browser)
	factory(root.CryptoJS);}})(this,function(CryptoJS){/**
		 * Cipher core components.
		 */CryptoJS.lib.Cipher||function(undefined){// Shortcuts
	var C=CryptoJS;var C_lib=C.lib;var Base=C_lib.Base;var WordArray=C_lib.WordArray;var BufferedBlockAlgorithm=C_lib.BufferedBlockAlgorithm;var C_enc=C.enc;var Utf8=C_enc.Utf8;var Base64=C_enc.Base64;var C_algo=C.algo;var EvpKDF=C_algo.EvpKDF;/**
		     * Abstract base cipher template.
		     *
		     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
		     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
		     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
		     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
		     */var Cipher=C_lib.Cipher=BufferedBlockAlgorithm.extend({/**
		         * Configuration options.
		         *
		         * @property {WordArray} iv The IV to use for this operation.
		         */cfg:Base.extend(),/**
		         * Creates this cipher in encryption mode.
		         *
		         * @param {WordArray} key The key.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @return {Cipher} A cipher instance.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
		         */createEncryptor:function createEncryptor(key,cfg){return this.create(this._ENC_XFORM_MODE,key,cfg);},/**
		         * Creates this cipher in decryption mode.
		         *
		         * @param {WordArray} key The key.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @return {Cipher} A cipher instance.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
		         */createDecryptor:function createDecryptor(key,cfg){return this.create(this._DEC_XFORM_MODE,key,cfg);},/**
		         * Initializes a newly created cipher.
		         *
		         * @param {number} xformMode Either the encryption or decryption transormation mode constant.
		         * @param {WordArray} key The key.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @example
		         *
		         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
		         */init:function init(xformMode,key,cfg){// Apply config defaults
	this.cfg=this.cfg.extend(cfg);// Store transform mode and key
	this._xformMode=xformMode;this._key=key;// Set initial values
	this.reset();},/**
		         * Resets this cipher to its initial state.
		         *
		         * @example
		         *
		         *     cipher.reset();
		         */reset:function reset(){// Reset data buffer
	BufferedBlockAlgorithm.reset.call(this);// Perform concrete-cipher logic
	this._doReset();},/**
		         * Adds data to be encrypted or decrypted.
		         *
		         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
		         *
		         * @return {WordArray} The data after processing.
		         *
		         * @example
		         *
		         *     var encrypted = cipher.process('data');
		         *     var encrypted = cipher.process(wordArray);
		         */process:function process(dataUpdate){// Append
	this._append(dataUpdate);// Process available blocks
	return this._process();},/**
		         * Finalizes the encryption or decryption process.
		         * Note that the finalize operation is effectively a destructive, read-once operation.
		         *
		         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
		         *
		         * @return {WordArray} The data after final processing.
		         *
		         * @example
		         *
		         *     var encrypted = cipher.finalize();
		         *     var encrypted = cipher.finalize('data');
		         *     var encrypted = cipher.finalize(wordArray);
		         */finalize:function finalize(dataUpdate){// Final data update
	if(dataUpdate){this._append(dataUpdate);}// Perform concrete-cipher logic
	var finalProcessedData=this._doFinalize();return finalProcessedData;},keySize:128/32,ivSize:128/32,_ENC_XFORM_MODE:1,_DEC_XFORM_MODE:2,/**
		         * Creates shortcut functions to a cipher's object interface.
		         *
		         * @param {Cipher} cipher The cipher to create a helper for.
		         *
		         * @return {Object} An object with encrypt and decrypt shortcut functions.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
		         */_createHelper:function(){function selectCipherStrategy(key){if(typeof key=='string'){return PasswordBasedCipher;}else{return SerializableCipher;}}return function(cipher){return{encrypt:function encrypt(message,key,cfg){return selectCipherStrategy(key).encrypt(cipher,message,key,cfg);},decrypt:function decrypt(ciphertext,key,cfg){return selectCipherStrategy(key).decrypt(cipher,ciphertext,key,cfg);}};};}()});/**
		     * Abstract base stream cipher template.
		     *
		     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
		     */var StreamCipher=C_lib.StreamCipher=Cipher.extend({_doFinalize:function _doFinalize(){// Process partial blocks
	var finalProcessedBlocks=this._process(!!'flush');return finalProcessedBlocks;},blockSize:1});/**
		     * Mode namespace.
		     */var C_mode=C.mode={};/**
		     * Abstract base block cipher mode template.
		     */var BlockCipherMode=C_lib.BlockCipherMode=Base.extend({/**
		         * Creates this mode for encryption.
		         *
		         * @param {Cipher} cipher A block cipher instance.
		         * @param {Array} iv The IV words.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
		         */createEncryptor:function createEncryptor(cipher,iv){return this.Encryptor.create(cipher,iv);},/**
		         * Creates this mode for decryption.
		         *
		         * @param {Cipher} cipher A block cipher instance.
		         * @param {Array} iv The IV words.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
		         */createDecryptor:function createDecryptor(cipher,iv){return this.Decryptor.create(cipher,iv);},/**
		         * Initializes a newly created mode.
		         *
		         * @param {Cipher} cipher A block cipher instance.
		         * @param {Array} iv The IV words.
		         *
		         * @example
		         *
		         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
		         */init:function init(cipher,iv){this._cipher=cipher;this._iv=iv;}});/**
		     * Cipher Block Chaining mode.
		     */var CBC=C_mode.CBC=function(){/**
		         * Abstract base CBC mode.
		         */var CBC=BlockCipherMode.extend();/**
		         * CBC encryptor.
		         */CBC.Encryptor=CBC.extend({/**
		             * Processes the data block at offset.
		             *
		             * @param {Array} words The data words to operate on.
		             * @param {number} offset The offset where the block starts.
		             *
		             * @example
		             *
		             *     mode.processBlock(data.words, offset);
		             */processBlock:function processBlock(words,offset){// Shortcuts
	var cipher=this._cipher;var blockSize=cipher.blockSize;// XOR and encrypt
	xorBlock.call(this,words,offset,blockSize);cipher.encryptBlock(words,offset);// Remember this block to use with next block
	this._prevBlock=words.slice(offset,offset+blockSize);}});/**
		         * CBC decryptor.
		         */CBC.Decryptor=CBC.extend({/**
		             * Processes the data block at offset.
		             *
		             * @param {Array} words The data words to operate on.
		             * @param {number} offset The offset where the block starts.
		             *
		             * @example
		             *
		             *     mode.processBlock(data.words, offset);
		             */processBlock:function processBlock(words,offset){// Shortcuts
	var cipher=this._cipher;var blockSize=cipher.blockSize;// Remember this block to use with next block
	var thisBlock=words.slice(offset,offset+blockSize);// Decrypt and XOR
	cipher.decryptBlock(words,offset);xorBlock.call(this,words,offset,blockSize);// This block becomes the previous block
	this._prevBlock=thisBlock;}});function xorBlock(words,offset,blockSize){// Shortcut
	var iv=this._iv;// Choose mixing block
	if(iv){var block=iv;// Remove IV for subsequent blocks
	this._iv=undefined;}else{var block=this._prevBlock;}// XOR blocks
	for(var i=0;i<blockSize;i++){words[offset+i]^=block[i];}}return CBC;}();/**
		     * Padding namespace.
		     */var C_pad=C.pad={};/**
		     * PKCS #5/7 padding strategy.
		     */var Pkcs7=C_pad.Pkcs7={/**
		         * Pads data using the algorithm defined in PKCS #5/7.
		         *
		         * @param {WordArray} data The data to pad.
		         * @param {number} blockSize The multiple that the data should be padded to.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
		         */pad:function pad(data,blockSize){// Shortcut
	var blockSizeBytes=blockSize*4;// Count padding bytes
	var nPaddingBytes=blockSizeBytes-data.sigBytes%blockSizeBytes;// Create padding word
	var paddingWord=nPaddingBytes<<24|nPaddingBytes<<16|nPaddingBytes<<8|nPaddingBytes;// Create padding
	var paddingWords=[];for(var i=0;i<nPaddingBytes;i+=4){paddingWords.push(paddingWord);}var padding=WordArray.create(paddingWords,nPaddingBytes);// Add padding
	data.concat(padding);},/**
		         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
		         *
		         * @param {WordArray} data The data to unpad.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     CryptoJS.pad.Pkcs7.unpad(wordArray);
		         */unpad:function unpad(data){// Get number of padding bytes from last byte
	var nPaddingBytes=data.words[data.sigBytes-1>>>2]&0xff;// Remove padding
	data.sigBytes-=nPaddingBytes;}};/**
		     * Abstract base block cipher template.
		     *
		     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
		     */var BlockCipher=C_lib.BlockCipher=Cipher.extend({/**
		         * Configuration options.
		         *
		         * @property {Mode} mode The block mode to use. Default: CBC
		         * @property {Padding} padding The padding strategy to use. Default: Pkcs7
		         */cfg:Cipher.cfg.extend({mode:CBC,padding:Pkcs7}),reset:function reset(){// Reset cipher
	Cipher.reset.call(this);// Shortcuts
	var cfg=this.cfg;var iv=cfg.iv;var mode=cfg.mode;// Reset block mode
	if(this._xformMode==this._ENC_XFORM_MODE){var modeCreator=mode.createEncryptor;}else/* if (this._xformMode == this._DEC_XFORM_MODE) */{var modeCreator=mode.createDecryptor;// Keep at least one block in the buffer for unpadding
	this._minBufferSize=1;}if(this._mode&&this._mode.__creator==modeCreator){this._mode.init(this,iv&&iv.words);}else{this._mode=modeCreator.call(mode,this,iv&&iv.words);this._mode.__creator=modeCreator;}},_doProcessBlock:function _doProcessBlock(words,offset){this._mode.processBlock(words,offset);},_doFinalize:function _doFinalize(){// Shortcut
	var padding=this.cfg.padding;// Finalize
	if(this._xformMode==this._ENC_XFORM_MODE){// Pad data
	padding.pad(this._data,this.blockSize);// Process final blocks
	var finalProcessedBlocks=this._process(!!'flush');}else/* if (this._xformMode == this._DEC_XFORM_MODE) */{// Process final blocks
	var finalProcessedBlocks=this._process(!!'flush');// Unpad data
	padding.unpad(finalProcessedBlocks);}return finalProcessedBlocks;},blockSize:128/32});/**
		     * A collection of cipher parameters.
		     *
		     * @property {WordArray} ciphertext The raw ciphertext.
		     * @property {WordArray} key The key to this ciphertext.
		     * @property {WordArray} iv The IV used in the ciphering operation.
		     * @property {WordArray} salt The salt used with a key derivation function.
		     * @property {Cipher} algorithm The cipher algorithm.
		     * @property {Mode} mode The block mode used in the ciphering operation.
		     * @property {Padding} padding The padding scheme used in the ciphering operation.
		     * @property {number} blockSize The block size of the cipher.
		     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
		     */var CipherParams=C_lib.CipherParams=Base.extend({/**
		         * Initializes a newly created cipher params object.
		         *
		         * @param {Object} cipherParams An object with any of the possible cipher parameters.
		         *
		         * @example
		         *
		         *     var cipherParams = CryptoJS.lib.CipherParams.create({
		         *         ciphertext: ciphertextWordArray,
		         *         key: keyWordArray,
		         *         iv: ivWordArray,
		         *         salt: saltWordArray,
		         *         algorithm: CryptoJS.algo.AES,
		         *         mode: CryptoJS.mode.CBC,
		         *         padding: CryptoJS.pad.PKCS7,
		         *         blockSize: 4,
		         *         formatter: CryptoJS.format.OpenSSL
		         *     });
		         */init:function init(cipherParams){this.mixIn(cipherParams);},/**
		         * Converts this cipher params object to a string.
		         *
		         * @param {Format} formatter (Optional) The formatting strategy to use.
		         *
		         * @return {string} The stringified cipher params.
		         *
		         * @throws Error If neither the formatter nor the default formatter is set.
		         *
		         * @example
		         *
		         *     var string = cipherParams + '';
		         *     var string = cipherParams.toString();
		         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
		         */toString:function toString(formatter){return(formatter||this.formatter).stringify(this);}});/**
		     * Format namespace.
		     */var C_format=C.format={};/**
		     * OpenSSL formatting strategy.
		     */var OpenSSLFormatter=C_format.OpenSSL={/**
		         * Converts a cipher params object to an OpenSSL-compatible string.
		         *
		         * @param {CipherParams} cipherParams The cipher params object.
		         *
		         * @return {string} The OpenSSL-compatible string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
		         */stringify:function stringify(cipherParams){// Shortcuts
	var ciphertext=cipherParams.ciphertext;var salt=cipherParams.salt;// Format
	if(salt){var wordArray=WordArray.create([0x53616c74,0x65645f5f]).concat(salt).concat(ciphertext);}else{var wordArray=ciphertext;}return wordArray.toString(Base64);},/**
		         * Converts an OpenSSL-compatible string to a cipher params object.
		         *
		         * @param {string} openSSLStr The OpenSSL-compatible string.
		         *
		         * @return {CipherParams} The cipher params object.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
		         */parse:function parse(openSSLStr){// Parse base64
	var ciphertext=Base64.parse(openSSLStr);// Shortcut
	var ciphertextWords=ciphertext.words;// Test for salt
	if(ciphertextWords[0]==0x53616c74&&ciphertextWords[1]==0x65645f5f){// Extract salt
	var salt=WordArray.create(ciphertextWords.slice(2,4));// Remove salt from ciphertext
	ciphertextWords.splice(0,4);ciphertext.sigBytes-=16;}return CipherParams.create({ciphertext:ciphertext,salt:salt});}};/**
		     * A cipher wrapper that returns ciphertext as a serializable cipher params object.
		     */var SerializableCipher=C_lib.SerializableCipher=Base.extend({/**
		         * Configuration options.
		         *
		         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
		         */cfg:Base.extend({format:OpenSSLFormatter}),/**
		         * Encrypts a message.
		         *
		         * @param {Cipher} cipher The cipher algorithm to use.
		         * @param {WordArray|string} message The message to encrypt.
		         * @param {WordArray} key The key.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @return {CipherParams} A cipher params object.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
		         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
		         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
		         */encrypt:function encrypt(cipher,message,key,cfg){// Apply config defaults
	cfg=this.cfg.extend(cfg);// Encrypt
	var encryptor=cipher.createEncryptor(key,cfg);var ciphertext=encryptor.finalize(message);// Shortcut
	var cipherCfg=encryptor.cfg;// Create and return serializable cipher params
	return CipherParams.create({ciphertext:ciphertext,key:key,iv:cipherCfg.iv,algorithm:cipher,mode:cipherCfg.mode,padding:cipherCfg.padding,blockSize:cipher.blockSize,formatter:cfg.format});},/**
		         * Decrypts serialized ciphertext.
		         *
		         * @param {Cipher} cipher The cipher algorithm to use.
		         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
		         * @param {WordArray} key The key.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @return {WordArray} The plaintext.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
		         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
		         */decrypt:function decrypt(cipher,ciphertext,key,cfg){// Apply config defaults
	cfg=this.cfg.extend(cfg);// Convert string to CipherParams
	ciphertext=this._parse(ciphertext,cfg.format);// Decrypt
	var plaintext=cipher.createDecryptor(key,cfg).finalize(ciphertext.ciphertext);return plaintext;},/**
		         * Converts serialized ciphertext to CipherParams,
		         * else assumed CipherParams already and returns ciphertext unchanged.
		         *
		         * @param {CipherParams|string} ciphertext The ciphertext.
		         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
		         *
		         * @return {CipherParams} The unserialized ciphertext.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
		         */_parse:function _parse(ciphertext,format){if(typeof ciphertext=='string'){return format.parse(ciphertext,this);}else{return ciphertext;}}});/**
		     * Key derivation function namespace.
		     */var C_kdf=C.kdf={};/**
		     * OpenSSL key derivation function.
		     */var OpenSSLKdf=C_kdf.OpenSSL={/**
		         * Derives a key and IV from a password.
		         *
		         * @param {string} password The password to derive from.
		         * @param {number} keySize The size in words of the key to generate.
		         * @param {number} ivSize The size in words of the IV to generate.
		         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
		         *
		         * @return {CipherParams} A cipher params object with the key, IV, and salt.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
		         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
		         */execute:function execute(password,keySize,ivSize,salt){// Generate random salt
	if(!salt){salt=WordArray.random(64/8);}// Derive key and IV
	var key=EvpKDF.create({keySize:keySize+ivSize}).compute(password,salt);// Separate key and IV
	var iv=WordArray.create(key.words.slice(keySize),ivSize*4);key.sigBytes=keySize*4;// Return params
	return CipherParams.create({key:key,iv:iv,salt:salt});}};/**
		     * A serializable cipher wrapper that derives the key from a password,
		     * and returns ciphertext as a serializable cipher params object.
		     */var PasswordBasedCipher=C_lib.PasswordBasedCipher=SerializableCipher.extend({/**
		         * Configuration options.
		         *
		         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
		         */cfg:SerializableCipher.cfg.extend({kdf:OpenSSLKdf}),/**
		         * Encrypts a message using a password.
		         *
		         * @param {Cipher} cipher The cipher algorithm to use.
		         * @param {WordArray|string} message The message to encrypt.
		         * @param {string} password The password.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @return {CipherParams} A cipher params object.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
		         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
		         */encrypt:function encrypt(cipher,message,password,cfg){// Apply config defaults
	cfg=this.cfg.extend(cfg);// Derive key and other params
	var derivedParams=cfg.kdf.execute(password,cipher.keySize,cipher.ivSize);// Add IV to config
	cfg.iv=derivedParams.iv;// Encrypt
	var ciphertext=SerializableCipher.encrypt.call(this,cipher,message,derivedParams.key,cfg);// Mix in derived params
	ciphertext.mixIn(derivedParams);return ciphertext;},/**
		         * Decrypts serialized ciphertext using a password.
		         *
		         * @param {Cipher} cipher The cipher algorithm to use.
		         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
		         * @param {string} password The password.
		         * @param {Object} cfg (Optional) The configuration options to use for this operation.
		         *
		         * @return {WordArray} The plaintext.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
		         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
		         */decrypt:function decrypt(cipher,ciphertext,password,cfg){// Apply config defaults
	cfg=this.cfg.extend(cfg);// Convert string to CipherParams
	ciphertext=this._parse(ciphertext,cfg.format);// Derive key and other params
	var derivedParams=cfg.kdf.execute(password,cipher.keySize,cipher.ivSize,ciphertext.salt);// Add IV to config
	cfg.iv=derivedParams.iv;// Decrypt
	var plaintext=SerializableCipher.decrypt.call(this,cipher,ciphertext,derivedParams.key,cfg);return plaintext;}});}();});/***/},/* 56 *//***/function(module,exports,__webpack_require__){;(function(root,factory){if(true){// CommonJS
	module.exports=exports=factory(__webpack_require__(3));}else if(typeof define==="function"&&define.amd){// AMD
	define(["./core"],factory);}else{// Global (browser)
	factory(root.CryptoJS);}})(this,function(CryptoJS){return CryptoJS.enc.Hex;});/***/},/* 57 *//***/function(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return calcPubKeyRecoveryParam;});/* unused harmony export deterministicGenerateK *//* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"b",function(){return recoverPubKey;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"c",function(){return sign;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"d",function(){return verify;});/* unused harmony export verifyRaw *//* harmony import */var __WEBPACK_IMPORTED_MODULE_0_assert__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_assert___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_assert__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__hash__=__webpack_require__(2);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__enforce_types__=__webpack_require__(32);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3_bigi__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3_bigi___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_bigi__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__ecsignature__=__webpack_require__(58);// from github.com/bitcoinjs/bitcoinjs-lib from github.com/cryptocoinjs/ecdsa
	// https://tools.ietf.org/html/rfc6979#section-3.2
	function deterministicGenerateK(curve,hash,d,checkSig,nonce){Object(__WEBPACK_IMPORTED_MODULE_2__enforce_types__["a"/* default */])('Buffer',hash);Object(__WEBPACK_IMPORTED_MODULE_2__enforce_types__["a"/* default */])(__WEBPACK_IMPORTED_MODULE_3_bigi___default.a,d);if(nonce){hash=Object(__WEBPACK_IMPORTED_MODULE_1__hash__["sha256"])(Buffer.concat([hash,new Buffer(nonce)]));}// sanity check
	__WEBPACK_IMPORTED_MODULE_0_assert___default.a.equal(hash.length,32,'Hash must be 256 bit');var x=d.toBuffer(32);var k=new Buffer(32);var v=new Buffer(32);// Step B
	v.fill(1);// Step C
	k.fill(0);// Step D
	k=Object(__WEBPACK_IMPORTED_MODULE_1__hash__["HmacSHA256"])(Buffer.concat([v,new Buffer([0]),x,hash]),k);// Step E
	v=Object(__WEBPACK_IMPORTED_MODULE_1__hash__["HmacSHA256"])(v,k);// Step F
	k=Object(__WEBPACK_IMPORTED_MODULE_1__hash__["HmacSHA256"])(Buffer.concat([v,new Buffer([1]),x,hash]),k);// Step G
	v=Object(__WEBPACK_IMPORTED_MODULE_1__hash__["HmacSHA256"])(v,k);// Step H1/H2a, ignored as tlen === qlen (256 bit)
	// Step H2b
	v=Object(__WEBPACK_IMPORTED_MODULE_1__hash__["HmacSHA256"])(v,k);var T=__WEBPACK_IMPORTED_MODULE_3_bigi___default.a.fromBuffer(v);// Step H3, repeat until T is within the interval [1, n - 1]
	while(T.signum()<=0||T.compareTo(curve.n)>=0||!checkSig(T)){k=Object(__WEBPACK_IMPORTED_MODULE_1__hash__["HmacSHA256"])(Buffer.concat([v,new Buffer([0])]),k);v=Object(__WEBPACK_IMPORTED_MODULE_1__hash__["HmacSHA256"])(v,k);// Step H1/H2a, again, ignored as tlen === qlen (256 bit)
	// Step H2b again
	v=Object(__WEBPACK_IMPORTED_MODULE_1__hash__["HmacSHA256"])(v,k);T=__WEBPACK_IMPORTED_MODULE_3_bigi___default.a.fromBuffer(v);}return T;}function sign(curve,hash,d,nonce){var e=__WEBPACK_IMPORTED_MODULE_3_bigi___default.a.fromBuffer(hash);var n=curve.n;var G=curve.G;var r,s;var k=deterministicGenerateK(curve,hash,d,function(k){// find canonically valid signature
	var Q=G.multiply(k);if(curve.isInfinity(Q))return false;r=Q.affineX.mod(n);if(r.signum()===0)return false;s=k.modInverse(n).multiply(e.add(d.multiply(r))).mod(n);if(s.signum()===0)return false;return true;},nonce);var N_OVER_TWO=n.shiftRight(1);// enforce low S values, see bip62: 'low s values in signatures'
	if(s.compareTo(N_OVER_TWO)>0){s=n.subtract(s);}return new __WEBPACK_IMPORTED_MODULE_4__ecsignature__["a"/* default */](r,s);}function verifyRaw(curve,e,signature,Q){var n=curve.n;var G=curve.G;var r=signature.r;var s=signature.s;// 1.4.1 Enforce r and s are both integers in the interval [1, n − 1]
	if(r.signum()<=0||r.compareTo(n)>=0)return false;if(s.signum()<=0||s.compareTo(n)>=0)return false;// c = s^-1 mod n
	var c=s.modInverse(n);// 1.4.4 Compute u1 = es^−1 mod n
	//               u2 = rs^−1 mod n
	var u1=e.multiply(c).mod(n);var u2=r.multiply(c).mod(n);// 1.4.5 Compute R = (xR, yR) = u1G + u2Q
	var R=G.multiplyTwo(u1,Q,u2);// 1.4.5 (cont.) Enforce R is not at infinity
	if(curve.isInfinity(R))return false;// 1.4.6 Convert the field element R.x to an integer
	var xR=R.affineX;// 1.4.7 Set v = xR mod n
	var v=xR.mod(n);// 1.4.8 If v = r, output "valid", and if v != r, output "invalid"
	return v.equals(r);}function verify(curve,hash,signature,Q){// 1.4.2 H = Hash(M), already done by the user
	// 1.4.3 e = H
	var e=__WEBPACK_IMPORTED_MODULE_3_bigi___default.a.fromBuffer(hash);return verifyRaw(curve,e,signature,Q);}/**
	  * Recover a public key from a signature.
	  *
	  * See SEC 1: Elliptic Curve Cryptography, section 4.1.6, "Public
	  * Key Recovery Operation".
	  *
	  * http://www.secg.org/download/aid-780/sec1-v2.pdf
	  */function recoverPubKey(curve,e,signature,i){__WEBPACK_IMPORTED_MODULE_0_assert___default.a.strictEqual(i&3,i,'Recovery param is more than two bits');var n=curve.n;var G=curve.G;var r=signature.r;var s=signature.s;__WEBPACK_IMPORTED_MODULE_0_assert___default()(r.signum()>0&&r.compareTo(n)<0,'Invalid r value');__WEBPACK_IMPORTED_MODULE_0_assert___default()(s.signum()>0&&s.compareTo(n)<0,'Invalid s value');// A set LSB signifies that the y-coordinate is odd
	var isYOdd=i&1;// The more significant bit specifies whether we should use the
	// first or second candidate key.
	var isSecondKey=i>>1;// 1.1 Let x = r + jn
	var x=isSecondKey?r.add(n):r;var R=curve.pointFromX(isYOdd,x);// 1.4 Check that nR is at infinity
	var nR=R.multiply(n);__WEBPACK_IMPORTED_MODULE_0_assert___default()(curve.isInfinity(nR),'nR is not a valid curve point');// Compute -e from e
	var eNeg=e.negate().mod(n);// 1.6.1 Compute Q = r^-1 (sR -  eG)
	//               Q = r^-1 (sR + -eG)
	var rInv=r.modInverse(n);var Q=R.multiplyTwo(s,G,eNeg).multiply(rInv);curve.validate(Q);return Q;}/**
	  * Calculate pubkey extraction parameter.
	  *
	  * When extracting a pubkey from a signature, we have to
	  * distinguish four different cases. Rather than putting this
	  * burden on the verifier, Bitcoin includes a 2-bit value with the
	  * signature.
	  *
	  * This function simply tries all four cases and returns the value
	  * that resulted in a successful pubkey recovery.
	  */function calcPubKeyRecoveryParam(curve,e,signature,Q){for(var i=0;i<4;i++){var Qprime=recoverPubKey(curve,e,signature,i);// 1.6.2 Verify Q
	if(Qprime.equals(Q)){return i;}}throw new Error('Unable to find valid recovery factor');}/***/},/* 58 *//***/function(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_assert__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_assert___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_assert__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__enforce_types__=__webpack_require__(32);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2_bigi__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2_bigi___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_bigi__);// from https://github.com/bitcoinjs/bitcoinjs-lib
	function ECSignature(r,s){Object(__WEBPACK_IMPORTED_MODULE_1__enforce_types__["a"/* default */])(__WEBPACK_IMPORTED_MODULE_2_bigi___default.a,r);Object(__WEBPACK_IMPORTED_MODULE_1__enforce_types__["a"/* default */])(__WEBPACK_IMPORTED_MODULE_2_bigi___default.a,s);this.r=r;this.s=s;}// Import operations
	ECSignature.parseCompact=function(buffer){__WEBPACK_IMPORTED_MODULE_0_assert___default.a.equal(buffer.length,65,'Invalid signature length');var i=buffer.readUInt8(0)-27;// At most 3 bits
	__WEBPACK_IMPORTED_MODULE_0_assert___default.a.equal(i,i&7,'Invalid signature parameter');var compressed=!!(i&4);// Recovery param only
	i=i&3;var r=__WEBPACK_IMPORTED_MODULE_2_bigi___default.a.fromBuffer(buffer.slice(1,33));var s=__WEBPACK_IMPORTED_MODULE_2_bigi___default.a.fromBuffer(buffer.slice(33));return{compressed:compressed,i:i,signature:new ECSignature(r,s)};};ECSignature.fromDER=function(buffer){__WEBPACK_IMPORTED_MODULE_0_assert___default.a.equal(buffer.readUInt8(0),0x30,'Not a DER sequence');__WEBPACK_IMPORTED_MODULE_0_assert___default.a.equal(buffer.readUInt8(1),buffer.length-2,'Invalid sequence length');__WEBPACK_IMPORTED_MODULE_0_assert___default.a.equal(buffer.readUInt8(2),0x02,'Expected a DER integer');var rLen=buffer.readUInt8(3);__WEBPACK_IMPORTED_MODULE_0_assert___default()(rLen>0,'R length is zero');var offset=4+rLen;__WEBPACK_IMPORTED_MODULE_0_assert___default.a.equal(buffer.readUInt8(offset),0x02,'Expected a DER integer (2)');var sLen=buffer.readUInt8(offset+1);__WEBPACK_IMPORTED_MODULE_0_assert___default()(sLen>0,'S length is zero');var rB=buffer.slice(4,offset);var sB=buffer.slice(offset+2);offset+=2+sLen;if(rLen>1&&rB.readUInt8(0)===0x00){__WEBPACK_IMPORTED_MODULE_0_assert___default()(rB.readUInt8(1)&0x80,'R value excessively padded');}if(sLen>1&&sB.readUInt8(0)===0x00){__WEBPACK_IMPORTED_MODULE_0_assert___default()(sB.readUInt8(1)&0x80,'S value excessively padded');}__WEBPACK_IMPORTED_MODULE_0_assert___default.a.equal(offset,buffer.length,'Invalid DER encoding');var r=__WEBPACK_IMPORTED_MODULE_2_bigi___default.a.fromDERInteger(rB);var s=__WEBPACK_IMPORTED_MODULE_2_bigi___default.a.fromDERInteger(sB);__WEBPACK_IMPORTED_MODULE_0_assert___default()(r.signum()>=0,'R value is negative');__WEBPACK_IMPORTED_MODULE_0_assert___default()(s.signum()>=0,'S value is negative');return new ECSignature(r,s);};// FIXME: 0x00, 0x04, 0x80 are SIGHASH_* boundary constants, importing Transaction causes a circular dependency
	ECSignature.parseScriptSignature=function(buffer){var hashType=buffer.readUInt8(buffer.length-1);var hashTypeMod=hashType&~0x80;__WEBPACK_IMPORTED_MODULE_0_assert___default()(hashTypeMod>0x00&&hashTypeMod<0x04,'Invalid hashType');return{signature:ECSignature.fromDER(buffer.slice(0,-1)),hashType:hashType};};// Export operations
	ECSignature.prototype.toCompact=function(i,compressed){if(compressed)i+=4;i+=27;var buffer=new Buffer(65);buffer.writeUInt8(i,0);this.r.toBuffer(32).copy(buffer,1);this.s.toBuffer(32).copy(buffer,33);return buffer;};ECSignature.prototype.toDER=function(){var rBa=this.r.toDERInteger();var sBa=this.s.toDERInteger();var sequence=[];// INTEGER
	sequence.push(0x02,rBa.length);sequence=sequence.concat(rBa);// INTEGER
	sequence.push(0x02,sBa.length);sequence=sequence.concat(sBa);// SEQUENCE
	sequence.unshift(0x30,sequence.length);return new Buffer(sequence);};ECSignature.prototype.toScriptSignature=function(hashType){var hashTypeBuffer=new Buffer(1);hashTypeBuffer.writeUInt8(hashType,0);return Buffer.concat([this.toDER(),hashTypeBuffer]);};/* harmony default export */__webpack_exports__["a"]=ECSignature;/***/},/* 59 *//***/function(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_immutable__=__webpack_require__(60);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_immutable___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_immutable__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_cybexjs_ws__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_cybexjs_ws___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_cybexjs_ws__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__ChainTypes__=__webpack_require__(7);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__ChainValidation__=__webpack_require__(37);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4_bigi__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4_bigi___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_bigi__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5__EmitterInstance__=__webpack_require__(38);var _WEBPACK_IMPORTED_MO3=__WEBPACK_IMPORTED_MODULE_2__ChainTypes__["a"/* default */],object_type=_WEBPACK_IMPORTED_MO3.object_type,impl_object_type=_WEBPACK_IMPORTED_MO3.impl_object_type;var emitter=Object(__WEBPACK_IMPORTED_MODULE_5__EmitterInstance__["a"/* default */])();var op_history=parseInt(object_type.operation_history,10);var limit_order=parseInt(object_type.limit_order,10);var call_order=parseInt(object_type.call_order,10);var proposal=parseInt(object_type.proposal,10);// let balance_type  = parseInt(object_type.balance, 10);
	// let vesting_balance_type  = parseInt(object_type.vesting_balance, 10);
	var witness_object_type=parseInt(object_type.witness,10);var worker_object_type=parseInt(object_type.worker,10);var committee_member_object_type=parseInt(object_type.committee_member,10);var account_object_type=parseInt(object_type.account,10);var asset_object_type=parseInt(object_type.asset,10);var order_prefix="1."+limit_order+".";var call_order_prefix="1."+call_order+".";var proposal_prefix="1."+proposal+".";var operation_history_prefix="1."+op_history+".";var balance_prefix="2."+parseInt(impl_object_type.account_balance,10)+".";var account_stats_prefix="2."+parseInt(impl_object_type.account_statistics,10)+".";var transaction_prefix="2."+parseInt(impl_object_type.transaction,10)+".";var account_transaction_history_prefix="2."+parseInt(impl_object_type.account_transaction_history,10)+".";var asset_dynamic_data_prefix="2."+parseInt(impl_object_type.asset_dynamic_data,10)+".";var bitasset_data_prefix="2."+parseInt(impl_object_type.asset_bitasset_data,10)+".";var block_summary_prefix="2."+parseInt(impl_object_type.block_summary,10)+".";// let vesting_balance_prefix = "1." + vesting_balance_type + ".";
	var witness_prefix="1."+witness_object_type+".";var worker_prefix="1."+worker_object_type+".";var committee_prefix="1."+committee_member_object_type+".";var asset_prefix="1."+asset_object_type+".";var account_prefix="1."+account_object_type+".";var DEBUG=JSON.parse(process.env.npm_config__graphene_chain_chain_debug||false);/**
	*  @brief maintains a local cache of blockchain state
	*
	*  The ChainStore maintains a local cache of blockchain state and exposes
	*  an API that makes it easy to query objects and receive updates when
	*  objects are available.
	*/var ChainStore=function(){function ChainStore(){(0,_classCallCheck3.default)(this,ChainStore);/** tracks everyone who wants to receive updates when the cache changes */this.subscribers=new _set2.default();this.subscribed=false;this.clearCache();// this.progress = 0;
	// this.chain_time_offset is used to estimate the blockchain time
	this.chain_time_offset=[];this.dispatchFrequency=40;}/**
	    * Clears all cached state.  This should be called any time the network connection is
	    * reset.
	    */(0,_createClass3.default)(ChainStore,[{key:'clearCache',value:function clearCache(){/*
	        * Tracks specific objects such as accounts that can trigger additional
	        * fetching that should only happen if we're actually interested in the account
	        */this.subbed_accounts=new _set2.default();this.subbed_witnesses=new _set2.default();this.subbed_committee=new _set2.default();this.objects_by_id=new _map2.default();this.accounts_by_name=new _map2.default();this.assets_by_symbol=new _map2.default();this.account_ids_by_key=__WEBPACK_IMPORTED_MODULE_0_immutable___default.a.Map();this.account_ids_by_account=__WEBPACK_IMPORTED_MODULE_0_immutable___default.a.Map();this.balance_objects_by_address=new _map2.default();this.get_account_refs_of_keys_calls=new _set2.default();this.get_account_refs_of_accounts_calls=new _set2.default();this.account_history_requests=new _map2.default();///< tracks pending history requests
	this.witness_by_account_id=new _map2.default();this.committee_by_account_id=new _map2.default();this.objects_by_vote_id=new _map2.default();this.fetching_get_full_accounts=new _map2.default();this.get_full_accounts_subscriptions=new _map2.default();clearTimeout(this.timeout);this.dispatched=false;}},{key:'resetCache',value:function resetCache(){this.subscribed=false;this.subError=null;this.clearCache();this.head_block_time_string=null;return this.init().catch(function(err){console.log("resetCache init error:",err);});}},{key:'setDispatchFrequency',value:function setDispatchFrequency(freq){this.dispatchFrequency=freq;}},{key:'init',value:function init(){var _this=this;var reconnectCounter=0;var _init=function _init(resolve,reject){if(_this.subscribed)return resolve();var db_api=__WEBPACK_IMPORTED_MODULE_1_cybexjs_ws__["Apis"].instance().db_api();if(!db_api){return reject(new Error("Api not found, please initialize the api instance before calling the ChainStore"));}return db_api.exec("get_objects",[["2.1.0"]]).then(function(optional_objects){//if(DEBUG) console.log("... optional_objects",optional_objects ? optional_objects[0].id : null)
	for(var i=0;i<optional_objects.length;i++){var optional_object=optional_objects[i];if(optional_object){/*
	                        ** Because 2.1.0 gets fetched here before the set_subscribe_callback,
	                        ** the new witness_node subscription model makes it so we
	                        ** never get subscribed to that object, therefore
	                        ** this._updateObject is commented out here
	                        */// this._updateObject( optional_object, true );
	var head_time=new Date(optional_object.time+"+00:00").getTime();_this.head_block_time_string=optional_object.time;_this.chain_time_offset.push(new Date().getTime()-timeStringToDate(optional_object.time).getTime());var now=new Date().getTime();var delta=(now-head_time)/1000;// let start = Date.parse("Sep 1, 2015");
	// let progress_delta = head_time - start;
	// this.progress = progress_delta / (now-start);
	if(delta<60){__WEBPACK_IMPORTED_MODULE_1_cybexjs_ws__["Apis"].instance().db_api().exec("set_subscribe_callback",[_this.onUpdate.bind(_this),true]).then(function(){console.log("synced and subscribed, chainstore ready");_this.subscribed=true;_this.subError=null;_this.notifySubscribers();resolve();}).catch(function(error){_this.subscribed=false;_this.subError=error;_this.notifySubscribers();reject(error);console.log("Error: ",error);});}else{console.log("not yet synced, retrying in 1s");_this.subscribed=false;reconnectCounter++;_this.notifySubscribers();if(reconnectCounter>5){_this.subError=new Error("ChainStore sync error, please check your system clock");return reject(_this.subError);}setTimeout(_init.bind(_this,resolve,reject),1000);}}else{setTimeout(_init.bind(_this,resolve,reject),1000);}}}).catch(function(error){// in the event of an error clear the pending state for id
	console.log("!!! Chain API error",error);_this.objects_by_id.delete("2.1.0");reject(error);});};return new _promise2.default(function(resolve,reject){return _init(resolve,reject);});}},{key:'_subTo',value:function _subTo(type,id){var key="subbed_"+type;if(!this[key].has(id))this[key].add(id);}},{key:'unSubFrom',value:function unSubFrom(type,id){var key="subbed_"+type;this[key].delete(id);this.objects_by_id.delete(id);}},{key:'_isSubbedTo',value:function _isSubbedTo(type,id){var key="subbed_"+type;return this[key].has(id);}},{key:'onUpdate',value:function onUpdate(updated_objects)/// map from account id to objects
	{var cancelledOrders=[];var closedCallOrders=[];for(var a=0;a<updated_objects.length;++a){for(var i=0;i<updated_objects[a].length;++i){var _obj=updated_objects[a][i];if(__WEBPACK_IMPORTED_MODULE_3__ChainValidation__["a"/* default */].is_object_id(_obj)){// An entry containing only an object ID means that object was removed
	// console.log("removed obj", obj);
	// Check if the object exists in the ChainStore
	var old_obj=this.objects_by_id.get(_obj);if(_obj.search(order_prefix)==0){// Limit orders
	cancelledOrders.push(_obj);if(old_obj){var account=this.objects_by_id.get(old_obj.get("seller"));if(account&&account.has("orders")){var limit_orders=account.get("orders");if(account.get("orders").has(_obj)){account=account.set("orders",limit_orders.delete(_obj));this.objects_by_id.set(account.get("id"),account);}}}}if(_obj.search(call_order_prefix)==0){// Call orders
	closedCallOrders.push(_obj);if(old_obj){var _account=this.objects_by_id.get(old_obj.get("borrower"));if(_account&&_account.has("call_orders")){var call_orders=_account.get("call_orders");if(_account.get("call_orders").has(_obj)){_account=_account.set("call_orders",call_orders.delete(_obj));this.objects_by_id.set(_account.get("id"),_account);}}}}// Remove the object (if it already exists), set to null to indicate it does not exist
	if(old_obj)this.objects_by_id.set(_obj,null);}else{this._updateObject(_obj);}}}// Cancelled limit order(s), emit event for any listeners to update their state
	if(cancelledOrders.length)emitter.emit("cancel-order",cancelledOrders);// Closed call order, emit event for any listeners to update their state
	if(closedCallOrders.length)emitter.emit("close-call",closedCallOrders);// console.log("objects in store count:", this.objects_by_id.size, updated_objects[0].reduce((final, o) => {
	//     if (o && o.id) {
	//         final.changed.push(o.id);
	//     } else {
	//         final.removed.push(o);
	//     }
	//     return final;
	// }, {changed: [], removed: []}));
	this.notifySubscribers();}},{key:'notifySubscribers',value:function notifySubscribers(){var _this2=this;// Dispatch at most only once every x milliseconds
	if(!this.dispatched){this.dispatched=true;this.timeout=setTimeout(function(){_this2.dispatched=false;_this2.subscribers.forEach(function(callback){callback();});},this.dispatchFrequency);}}/**
	    *  Add a callback that will be called anytime any object in the cache is updated
	    */},{key:'subscribe',value:function subscribe(callback){if(this.subscribers.has(callback))return console.error("Subscribe callback already exists",callback);this.subscribers.add(callback);}/**
	    *  Remove a callback that was previously added via subscribe
	    */},{key:'unsubscribe',value:function unsubscribe(callback){if(!this.subscribers.has(callback))return console.error("Unsubscribe callback does not exists",callback);this.subscribers.delete(callback);}/** Clear an object from the cache to force it to be fetched again. This may
	    * be useful if a query failed the first time and the wallet has reason to believe
	    * it may succeede the second time.
	    */},{key:'clearObjectCache',value:function clearObjectCache(id){this.objects_by_id.delete(id);}/**
	    * There are three states an object id could be in:
	    *
	    * 1. undefined       - returned if a query is pending
	    * 3. defined         - return an object
	    * 4. null            - query return null
	    *
	    */},{key:'getObject',value:function getObject(id){var force=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var autosubscribe=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;if(!__WEBPACK_IMPORTED_MODULE_3__ChainValidation__["a"/* default */].is_object_id(id))throw Error("argument is not an object id: "+(0,_stringify2.default)(id));var result=this.objects_by_id.get(id);var subChange=id.substring(0,account_prefix.length)==account_prefix&&!this.get_full_accounts_subscriptions.get(id,false)&&autosubscribe;if(result===undefined||force||subChange)return this.fetchObject(id,force,autosubscribe);if(result===true)return undefined;return result;}/**
	    *  @return undefined if a query is pending
	    *  @return null if id_or_symbol has been queired and does not exist
	    *  @return object if the id_or_symbol exists
	    */},{key:'getAsset',value:function getAsset(id_or_symbol){var _this3=this;if(!id_or_symbol)return null;if(__WEBPACK_IMPORTED_MODULE_3__ChainValidation__["a"/* default */].is_object_id(id_or_symbol)){var asset=this.getObject(id_or_symbol);if(asset&&asset.get("bitasset")&&!asset.getIn(["bitasset","current_feed"])){return undefined;}return asset;}/// TODO: verify id_or_symbol is a valid symbol name
	var asset_id=this.assets_by_symbol.get(id_or_symbol);if(__WEBPACK_IMPORTED_MODULE_3__ChainValidation__["a"/* default */].is_object_id(asset_id)){var _asset=this.getObject(asset_id);if(_asset&&_asset.get("bitasset")&&!_asset.getIn(["bitasset","current_feed"])){return undefined;}return _asset;}if(asset_id===null)return null;if(asset_id===true)return undefined;__WEBPACK_IMPORTED_MODULE_1_cybexjs_ws__["Apis"].instance().db_api().exec("lookup_asset_symbols",[[id_or_symbol]]).then(function(asset_objects){// console.log( "lookup symbol ", id_or_symbol )
	if(asset_objects.length&&asset_objects[0])_this3._updateObject(asset_objects[0],true);else{_this3.assets_by_symbol.set(id_or_symbol,null);_this3.notifySubscribers();}}).catch(function(error){console.log("Error: ",error);_this3.assets_by_symbol.delete(id_or_symbol);});return undefined;}/**
	    *  @param the public key to find accounts that reference it
	    *
	    *  @return Set of account ids that reference the given key
	    *  @return a empty Set if no items are found
	    *  @return undefined if the result is unknown
	    *
	    *  If this method returns undefined, then it will send a request to
	    *  the server for the current set of accounts after which the
	    *  server will notify us of any accounts that reference these keys
	    */},{key:'getAccountRefsOfKey',value:function getAccountRefsOfKey(key){var _this4=this;if(this.get_account_refs_of_keys_calls.has(key))return this.account_ids_by_key.get(key);else{this.get_account_refs_of_keys_calls.add(key);__WEBPACK_IMPORTED_MODULE_1_cybexjs_ws__["Apis"].instance().db_api().exec("get_key_references",[[key]]).then(function(vec_account_id){var refs=__WEBPACK_IMPORTED_MODULE_0_immutable___default.a.Set();vec_account_id=vec_account_id[0];refs=refs.withMutations(function(r){for(var i=0;i<vec_account_id.length;++i){r.add(vec_account_id[i]);}});_this4.account_ids_by_key=_this4.account_ids_by_key.set(key,refs);_this4.notifySubscribers();}).catch(function(err){console.error("get_key_references",err);_this4.account_ids_by_key=_this4.account_ids_by_key.delete(key);_this4.get_account_refs_of_keys_calls.delete(key);});return undefined;}return undefined;}/**
	    *  @param the account id to find accounts that reference it
	    *
	    *  @return Set of account ids that reference the given key
	    *  @return a empty Set if no items are found
	    *  @return undefined if the result is unknown
	    *
	    *  If this method returns undefined, then it will send a request to
	    *  the server for the current set of accounts after which the
	    *  server will notify us of any accounts that reference these keys
	    */},{key:'getAccountRefsOfAccount',value:function getAccountRefsOfAccount(account_id){var _this5=this;if(this.get_account_refs_of_accounts_calls.has(account_id))return this.account_ids_by_account.get(account_id);else{this.get_account_refs_of_accounts_calls.add(account_id);__WEBPACK_IMPORTED_MODULE_1_cybexjs_ws__["Apis"].instance().db_api().exec("get_account_references",[account_id]).then(function(vec_account_id){var refs=__WEBPACK_IMPORTED_MODULE_0_immutable___default.a.Set();refs=refs.withMutations(function(r){for(var i=0;i<vec_account_id.length;++i){r.add(vec_account_id[i]);}});_this5.account_ids_by_account=_this5.account_ids_by_account.set(account_id,refs);_this5.notifySubscribers();}).catch(function(err){console.error("get_account_references",err);_this5.account_ids_by_account=_this5.account_ids_by_account.delete(account_id);_this5.get_account_refs_of_accounts_calls.delete(account_id);});return undefined;}return undefined;}/**
	    * @return a Set of balance ids that are claimable with the given address
	    * @return undefined if a query is pending and the set is not known at this time
	    * @return a empty Set if no items are found
	    *
	    * If this method returns undefined, then it will send a request to the server for
	    * the current state after which it will be subscribed to changes to this set.
	    */},{key:'getBalanceObjects',value:function getBalanceObjects(address){var _this6=this;var current=this.balance_objects_by_address.get(address);if(current===undefined){/** because balance objects are simply part of the genesis state, there is no need to worry about
	            * having to update them / merge them or index them in updateObject.
	            */this.balance_objects_by_address.set(address,__WEBPACK_IMPORTED_MODULE_0_immutable___default.a.Set());__WEBPACK_IMPORTED_MODULE_1_cybexjs_ws__["Apis"].instance().db_api().exec("get_balance_objects",[[address]]).then(function(balance_objects){var set=new _set2.default();for(var i=0;i<balance_objects.length;++i){_this6._updateObject(balance_objects[i]);set.add(balance_objects[i].id);}_this6.balance_objects_by_address.set(address,__WEBPACK_IMPORTED_MODULE_0_immutable___default.a.Set(set));_this6.notifySubscribers();},function(){_this6.balance_objects_by_address.delete(address);});}return this.balance_objects_by_address.get(address);}/**
	    *  If there is not already a pending request to fetch this object, a new
	    *  request will be made.
	    *
	    *  @return null if the object does not exist,
	    *  @return undefined if the object might exist but is not in cache
	    *  @return the object if it does exist and is in our cache
	    */},{key:'fetchObject',value:function fetchObject(id){var _this7=this;var force=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var autosubscribe=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;if(typeof id!=="string"){var _result=[];for(var i=0;i<id.length;++i){_result.push(this.fetchObject(id[i],force,autosubscribe));}return _result;}if(DEBUG)console.log("!!! fetchObject: ",id,this.subscribed,!this.subscribed&&!force);if(!this.subscribed&&!force)return undefined;if(DEBUG)console.log("maybe fetch object: ",id);if(!__WEBPACK_IMPORTED_MODULE_3__ChainValidation__["a"/* default */].is_object_id(id))throw Error("argument is not an object id: "+id);if(id.search("1.2.")===0)return this.fetchFullAccount(id,autosubscribe);if(id.search(witness_prefix)===0)this._subTo("witnesses",id);if(id.search(committee_prefix)===0)this._subTo("committee",id);var result=this.objects_by_id.get(id);if(result===undefined){// the fetch
	if(DEBUG)console.log("fetching object: ",id);this.objects_by_id.set(id,true);if(!__WEBPACK_IMPORTED_MODULE_1_cybexjs_ws__["Apis"].instance().db_api())return null;__WEBPACK_IMPORTED_MODULE_1_cybexjs_ws__["Apis"].instance().db_api().exec("get_objects",[[id]]).then(function(optional_objects){//if(DEBUG) console.log("... optional_objects",optional_objects ? optional_objects[0].id : null)
	for(var _i=0;_i<optional_objects.length;_i++){var optional_object=optional_objects[_i];if(optional_object)_this7._updateObject(optional_object,true);else{_this7.objects_by_id.set(id,null);_this7.notifySubscribers();}}}).catch(function(error){// in the event of an error clear the pending state for id
	console.log("!!! Chain API error",error);_this7.objects_by_id.delete(id);});}else if(result===true)// then we are waiting a response
	return undefined;return result;// we have a response, return it
	}/**
	    *  @return null if no such account exists
	    *  @return undefined if such an account may exist, and fetch the the full account if not already pending
	    *  @return the account object if it does exist
	    */},{key:'getAccount',value:function getAccount(name_or_id){var autosubscribe=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;if(!name_or_id)return null;if((typeof name_or_id==='undefined'?'undefined':(0,_typeof3.default)(name_or_id))==="object"){if(name_or_id.id)return this.getAccount(name_or_id.id,autosubscribe);else if(name_or_id.get)return this.getAccount(name_or_id.get("id"),autosubscribe);else return undefined;}if(__WEBPACK_IMPORTED_MODULE_3__ChainValidation__["a"/* default */].is_object_id(name_or_id)){var account=this.getObject(name_or_id,false,autosubscribe);if(account===null){return null;}/* If sub status changes from false to true, force full fetch */var currentSub=this.get_full_accounts_subscriptions.get(name_or_id,false);if(!currentSub&&autosubscribe||account===undefined||account.get("name")===undefined){return this.fetchFullAccount(name_or_id,autosubscribe);}return account;}else if(__WEBPACK_IMPORTED_MODULE_3__ChainValidation__["a"/* default */].is_account_name(name_or_id,true)){var account_id=this.accounts_by_name.get(name_or_id);if(account_id===null)return null;// already fetched and it wasn't found
	if(account_id===undefined)// then no query, fetch it
	return this.fetchFullAccount(name_or_id,autosubscribe);return this.getObject(account_id,false,autosubscribe);// return it
	}//throw Error( `Argument is not an account name or id: ${name_or_id}` )
	}/**
	    * This method will attempt to lookup witness by account_id.
	    * If witness doesn't exist it will return null, if witness is found it will return witness object,
	    * if it's not fetched yet it will return undefined.
	    * @param account_id - account id
	    */},{key:'getWitnessById',value:function getWitnessById(account_id){var witness_id=this.witness_by_account_id.get(account_id);if(witness_id===undefined){this.fetchWitnessByAccount(account_id);return undefined;}else if(witness_id){this._subTo("witnesses",witness_id);}return witness_id?this.getObject(witness_id):null;}/**
	    * This method will attempt to lookup committee member by account_id.
	    * If committee member doesn't exist it will return null, if committee member is found it will return committee member object,
	    * if it's not fetched yet it will return undefined.
	    * @param account_id - account id
	    */},{key:'getCommitteeMemberById',value:function getCommitteeMemberById(account_id){var cm_id=this.committee_by_account_id.get(account_id);if(cm_id===undefined){this.fetchCommitteeMemberByAccount(account_id);return undefined;}else if(cm_id){this._subTo("committee",cm_id);}return cm_id?this.getObject(cm_id):null;}/**
	    * Obsolete! Please use getWitnessById
	    * This method will attempt to lookup the account, and then query to see whether or not there is
	    * a witness for this account.  If the answer is known, it will return the witness_object, otherwise
	    * it will attempt to look it up and return null.   Once the lookup has completed on_update will
	    * be called.
	    *
	    * @param id_or_account may either be an account_id, a witness_id, or an account_name
	    */// getWitness( id_or_account )
	// {
	//     let account = this.getAccount( id_or_account );
	//     if( !account ) return null;
	//     let account_id = account.get("id");
	//
	//     let witness_id = this.witness_by_account_id.get( account_id );
	//     if( witness_id === undefined )
	//         this.fetchWitnessByAccount( account_id );
	//     return this.getObject( witness_id );
	//
	//     if( ChainValidation.is_account_name(id_or_account, true) || (id_or_account.substring(0,4) == "1.2."))
	//     {
	//         let account = this.getAccount( id_or_account );
	//         if( !account )
	//         {
	//             this.lookupAccountByName( id_or_account ).then ( account => {
	//                 if( !account ) return null;
	//
	//                 let account_id = account.get("id");
	//                 let witness_id = this.witness_by_account_id.get( account_id );
	//                 if( ChainValidation.is_object_id( witness_id ) )
	//                     return this.getObject( witness_id, on_update );
	//
	//                 if( witness_id == undefined )
	//                     this.fetchWitnessByAccount( account_id ).then( witness => {
	//                         this.witness_by_account_id.set( account_id, witness?witness.get("id"):null );
	//                         if( witness && on_update ) on_update();
	//                     })
	//                 }, () => {
	//                     let witness_id = this.witness_by_account_id.set( id_or_account, null )
	//                 } )
	//         }
	//         else
	//         {
	//             let account_id = account.get("id")
	//             let witness_id = this.witness_by_account_id.get( account_id )
	//             if( ChainValidation.is_object_id( witness_id ) )
	//             return this.getObject( witness_id, on_update )
	//
	//             if( witness_id == undefined )
	//             this.fetchWitnessByAccount( account_id ).then( witness => {
	//                 this.witness_by_account_id.set( account_id, witness?witness.get("id"):null )
	//                 if( witness && on_update ) on_update()
	//             })
	//         }
	//         return null
	//     }
	//     return null
	// }
	// Obsolete! Please use getCommitteeMemberById
	// getCommitteeMember( id_or_account, on_update = null )
	// {
	//     if( ChainValidation.is_account_name(id_or_account, true) || (id_or_account.substring(0,4) == "1.2."))
	//     {
	//         let account = this.getAccount( id_or_account )
	//
	//         if( !account )
	//         {
	//             this.lookupAccountByName( id_or_account ).then( account=>{
	//                 let account_id = account.get("id")
	//                 let committee_id = this.committee_by_account_id.get( account_id )
	//                 if( ChainValidation.is_object_id( committee_id ) ) return this.getObject( committee_id, on_update )
	//
	//                 if( committee_id == undefined )
	//                 {
	//                     this.fetchCommitteeMemberByAccount( account_id ).then( committee => {
	//                         this.committee_by_account_id.set( account_id, committee ? committee.get("id") : null )
	//                         if( on_update && committee) on_update()
	//                     } )
	//                 }
	//             }, error => {
	//                 let witness_id = this.committee_by_account_id.set( id_or_account, null )
	//             })
	//         }
	//         else
	//         {
	//             let account_id = account.get("id")
	//             let committee_id = this.committee_by_account_id.get( account_id )
	//             if( ChainValidation.is_object_id( committee_id ) ) return this.getObject( committee_id, on_update )
	//
	//             if( committee_id == undefined )
	//             {
	//                 this.fetchCommitteeMemberByAccount( account_id ).then( committee => {
	//                     this.committee_by_account_id.set( account_id, committee ? committee.get("id") : null )
	//                     if( on_update && committee) on_update()
	//                 } )
	//             }
	//         }
	//     }
	//     return null
	// }
	/**
	    *
	    * @return a promise with the witness object
	    */},{key:'fetchWitnessByAccount',value:function fetchWitnessByAccount(account_id){var _this8=this;return new _promise2.default(function(resolve,reject){__WEBPACK_IMPORTED_MODULE_1_cybexjs_ws__["Apis"].instance().db_api().exec("get_witness_by_account",[account_id]).then(function(optional_witness_object){if(optional_witness_object){_this8._subTo("witnesses",optional_witness_object.id);_this8.witness_by_account_id=_this8.witness_by_account_id.set(optional_witness_object.witness_account,optional_witness_object.id);var witness_object=_this8._updateObject(optional_witness_object,true);resolve(witness_object);}else{_this8.witness_by_account_id=_this8.witness_by_account_id.set(account_id,null);_this8.notifySubscribers();resolve(null);}},reject);});}/**
	    *
	    * @return a promise with the witness object
	    */},{key:'fetchCommitteeMemberByAccount',value:function fetchCommitteeMemberByAccount(account_id){var _this9=this;return new _promise2.default(function(resolve,reject){__WEBPACK_IMPORTED_MODULE_1_cybexjs_ws__["Apis"].instance().db_api().exec("get_committee_member_by_account",[account_id]).then(function(optional_committee_object){if(optional_committee_object){_this9._subTo("committee",optional_committee_object.id);_this9.committee_by_account_id=_this9.committee_by_account_id.set(optional_committee_object.committee_member_account,optional_committee_object.id);var committee_object=_this9._updateObject(optional_committee_object,true);resolve(committee_object);}else{_this9.committee_by_account_id=_this9.committee_by_account_id.set(account_id,null);_this9.notifySubscribers();resolve(null);}},reject);});}/**
	    *  Fetches an account and all of its associated data in a single query
	    *
	    *  @param an account name or account id
	    *
	    *  @return undefined if the account in question is in the process of being fetched
	    *  @return the object if it has already been fetched
	    *  @return null if the object has been queried and was not found
	    */},{key:'fetchFullAccount',value:function fetchFullAccount(name_or_id){var _this10=this;var autosubscribe=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;if(DEBUG)console.log("Fetch full account: ",name_or_id);var fetch_account=false;var subChanged=this.get_full_accounts_subscriptions.has(name_or_id)&&this.get_full_accounts_subscriptions.get(name_or_id)===false&&autosubscribe;if(__WEBPACK_IMPORTED_MODULE_3__ChainValidation__["a"/* default */].is_object_id(name_or_id)&&!subChanged){var current=this.objects_by_id.get(name_or_id);fetch_account=current===undefined;if(!fetch_account&&current&&current.get("name"))return current;}else if(!subChanged){if(!__WEBPACK_IMPORTED_MODULE_3__ChainValidation__["a"/* default */].is_account_name(name_or_id,true))throw Error("argument is not an account name: "+name_or_id);var account_id=this.accounts_by_name.get(name_or_id);if(__WEBPACK_IMPORTED_MODULE_3__ChainValidation__["a"/* default */].is_object_id(account_id))return this.getAccount(account_id,autosubscribe);}/// only fetch once every 5 seconds if it wasn't found, or if the subscribe status changed to true
	if(subChanged||!this.fetching_get_full_accounts.has(name_or_id)||Date.now()-this.fetching_get_full_accounts.get(name_or_id)>5000){this.fetching_get_full_accounts.set(name_or_id,Date.now());// console.log( "FETCHING FULL ACCOUNT: ", name_or_id, autosubscribe );
	__WEBPACK_IMPORTED_MODULE_1_cybexjs_ws__["Apis"].instance().db_api().exec("get_full_accounts",[[name_or_id],autosubscribe]).then(function(results){if(results.length===0){if(__WEBPACK_IMPORTED_MODULE_3__ChainValidation__["a"/* default */].is_object_id(name_or_id)){_this10.objects_by_id.set(name_or_id,null);_this10.notifySubscribers();}return;}var full_account=results[0][1];_this10.get_full_accounts_subscriptions.set(full_account.account.name,autosubscribe);_this10.get_full_accounts_subscriptions.set(full_account.account.id,autosubscribe);if(DEBUG)console.log("full_account: ",full_account);/* Add this account to list of subbed accounts */_this10._subTo("accounts",full_account.account.id);var account=full_account.account,assets=full_account.assets,vesting_balances=full_account.vesting_balances,statistics=full_account.statistics,call_orders=full_account.call_orders,limit_orders=full_account.limit_orders,referrer_name=full_account.referrer_name,registrar_name=full_account.registrar_name,lifetime_referrer_name=full_account.lifetime_referrer_name,votes=full_account.votes,proposals=full_account.proposals;_this10.accounts_by_name.set(account.name,account.id);account.assets=new __WEBPACK_IMPORTED_MODULE_0_immutable___default.a.List(assets||[]);account.referrer_name=referrer_name;account.lifetime_referrer_name=lifetime_referrer_name;account.registrar_name=registrar_name;account.balances={};account.orders=new __WEBPACK_IMPORTED_MODULE_0_immutable___default.a.Set();account.vesting_balances=new __WEBPACK_IMPORTED_MODULE_0_immutable___default.a.Set();account.balances=new __WEBPACK_IMPORTED_MODULE_0_immutable___default.a.Map();account.call_orders=new __WEBPACK_IMPORTED_MODULE_0_immutable___default.a.Set();account.proposals=new __WEBPACK_IMPORTED_MODULE_0_immutable___default.a.Set();account.vesting_balances=account.vesting_balances.withMutations(function(set){vesting_balances.forEach(function(vb){_this10._updateObject(vb);set.add(vb.id);});});var sub_to_objects=[];votes.forEach(function(v){return _this10._updateObject(v);});account.balances=account.balances.withMutations(function(map){full_account.balances.forEach(function(b){_this10._updateObject(b);map.set(b.asset_type,b.id);sub_to_objects.push(b.id);});});account.orders=account.orders.withMutations(function(set){limit_orders.forEach(function(order){_this10._updateObject(order);set.add(order.id);sub_to_objects.push(order.id);});});account.call_orders=account.call_orders.withMutations(function(set){call_orders.forEach(function(co){_this10._updateObject(co);set.add(co.id);sub_to_objects.push(co.id);});});account.proposals=account.proposals.withMutations(function(set){proposals.forEach(function(p){_this10._updateObject(p);set.add(p.id);sub_to_objects.push(p.id);});});if(sub_to_objects.length)__WEBPACK_IMPORTED_MODULE_1_cybexjs_ws__["Apis"].instance().db_api().exec("get_objects",[sub_to_objects]);_this10._updateObject(statistics);var updated_account=_this10._updateObject(account);_this10.fetchRecentHistory(updated_account);_this10.notifySubscribers();},function(error){console.log("Error: ",error);if(__WEBPACK_IMPORTED_MODULE_3__ChainValidation__["a"/* default */].is_object_id(name_or_id))_this10.objects_by_id.delete(name_or_id);else _this10.accounts_by_name.delete(name_or_id);});}return undefined;}},{key:'getAccountMemberStatus',value:function getAccountMemberStatus(account){if(account===undefined)return undefined;if(account===null)return"unknown";if(account.get("lifetime_referrer")==account.get("id"))return"lifetime";var exp=new Date(account.get("membership_expiration_date")).getTime();var now=new Date().getTime();if(exp<now)return"basic";return"annual";}},{key:'getAccountBalance',value:function getAccountBalance(account,asset_type){var balances=account.get("balances");if(!balances)return 0;var balance_obj_id=balances.get(asset_type);if(balance_obj_id){var bal_obj=this.objects_by_id.get(balance_obj_id);if(bal_obj)return bal_obj.get("balance");}return 0;}/**
	    * There are two ways to extend the account history, add new more
	    * recent history, and extend historic hstory. This method will fetch
	    * the most recent account history and prepend it to the list of
	    * historic operations.
	    *
	    *  @param account immutable account object
	    *  @return a promise with the account history
	    */},{key:'fetchRecentHistory',value:function fetchRecentHistory(account){var _this11=this;var limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:100;// console.log( "get account history: ", account )
	/// TODO: make sure we do not submit a query if there is already one
	/// in flight...
	var account_id=account;if(!__WEBPACK_IMPORTED_MODULE_3__ChainValidation__["a"/* default */].is_object_id(account_id)&&account.toJS)account_id=account.get("id");if(!__WEBPACK_IMPORTED_MODULE_3__ChainValidation__["a"/* default */].is_object_id(account_id))return;account=this.objects_by_id.get(account_id);if(!account)return;var pending_request=this.account_history_requests.get(account_id);if(pending_request){pending_request.requests++;return pending_request.promise;}else pending_request={requests:0};var most_recent="1."+op_history+".0";var history=account.get("history");if(history&&history.size)most_recent=history.first().get("id");/// starting at 0 means start at NOW, set this to something other than 0
	/// to skip recent transactions and fetch the tail
	var start="1."+op_history+".0";pending_request.promise=new _promise2.default(function(resolve,reject){__WEBPACK_IMPORTED_MODULE_1_cybexjs_ws__["Apis"].instance().history_api().exec("get_account_history",[account_id,most_recent,limit,start]).then(function(operations){var current_account=_this11.objects_by_id.get(account_id);if(!current_account)return;var current_history=current_account.get("history");if(!current_history)current_history=__WEBPACK_IMPORTED_MODULE_0_immutable___default.a.List();var updated_history=__WEBPACK_IMPORTED_MODULE_0_immutable___default.a.fromJS(operations);updated_history=updated_history.withMutations(function(list){for(var i=0;i<current_history.size;++i){list.push(current_history.get(i));}});var updated_account=current_account.set("history",updated_history);_this11.objects_by_id.set(account_id,updated_account);//if( current_history != updated_history )
	//   this._notifyAccountSubscribers( account_id )
	var pending_request=_this11.account_history_requests.get(account_id);_this11.account_history_requests.delete(account_id);if(pending_request.requests>0){// it looks like some more history may have come in while we were
	// waiting on the result, lets fetch anything new before we resolve
	// this query.
	_this11.fetchRecentHistory(updated_account,limit).then(resolve,reject);}else resolve(updated_account);});// end then
	});this.account_history_requests.set(account_id,pending_request);return pending_request.promise;}//_notifyAccountSubscribers( account_id )
	//{
	//   let sub = this.subscriptions_by_account.get( account_id )
	//   let acnt = this.objects_by_id.get(account_id)
	//   if( !sub ) return
	//   for( let item of sub.subscriptions )
	//      item( acnt )
	//}
	/**
	    *  Callback that receives notification of objects that have been
	    *  added, remove, or changed and are relevant to account_id
	    *
	    *  This method updates or removes objects from the main index and
	    *  then updates the account object with relevant meta-info depending
	    *  upon the type of account
	    */// _updateAccount( account_id, payload )
	// {
	//    let updates = payload[0]
	//    for( let i = 0; i < updates.length; ++i )
	//    {
	//       let update = updates[i]
	//       if( typeof update  == 'string' )
	//       {
	//          let old_obj = this._removeObject( update )
	//          if( update.search( order_prefix ) == 0 )
	//          {
	//                acnt = acnt.setIn( ['orders'], set => set.delete(update) )
	//          }
	//          else if( update.search( vesting_balance_prefix ) == 0 )
	//          {
	//                acnt = acnt.setIn( ['vesting_balances'], set => set.delete(update) )
	//          }
	//       }
	//       else
	//       {
	//          let updated_obj = this._updateObject( update )
	//          if( update.id.search( balance_prefix ) == 0 )
	//          {
	//             if( update.owner == account_id )
	//                acnt = acnt.setIn( ["balances"], map => map.set(update.asset_type,update.id) )
	//          }
	//          else if( update.id.search( order_prefix ) == 0 )
	//          {
	//             if( update.owner == account_id )
	//                acnt = acnt.setIn( ['orders'], set => set.add(update.id) )
	//          }
	//          else if( update.id.search( vesting_balance_prefix ) == 0 )
	//          {
	//             if( update.owner == account_id )
	//                acnt = acnt.setIn( ['vesting_balances'], set => set.add(update.id) )
	//          }
	//          this.objects_by_id.set( acnt.id, acnt )
	//       }
	//    }
	//    this.fetchRecentHistory( acnt )
	// }
	/**
	    *  Updates the object in place by only merging the set
	    *  properties of object.
	    *
	    *  This method will create an immutable object with the given ID if
	    *  it does not already exist.
	    *
	    *  This is a "private" method called when data is received from the
	    *  server and should not be used by others.
	    *
	    *  @pre object.id must be a valid object ID
	    *  @return an Immutable constructed from object and deep merged with the current state
	    */},{key:'_updateObject',value:function _updateObject(object){var notify_subscribers=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var emit=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;if(!("id"in object)){console.log("object with no id:",object);/* Settle order updates look different and need special handling */if("balance"in object&&"owner"in object&&"settlement_date"in object){// Settle order object
	emitter.emit("settle-order-update",object);}return;}/*
	        * A lot of objects get spammed by the API that we don't care about, filter these out here
	        */// Transaction object
	if(object.id.substring(0,transaction_prefix.length)==transaction_prefix){return;// console.log("not interested in transaction:", object);
	}else if(object.id.substring(0,account_transaction_history_prefix.length)==account_transaction_history_prefix){// transaction_history object
	if(!this._isSubbedTo("accounts",object.account)){return;// console.log("not interested in transaction_history of", object.account);
	}}else if(object.id.substring(0,order_prefix.length)==order_prefix){// limit_order object
	if(!this._isSubbedTo("accounts",object.seller)){return;// console.log("not interested in limit_orders of", object.seller);
	}}else if(object.id.substring(0,call_order_prefix.length)==call_order_prefix){// call_order object
	if(!this._isSubbedTo("accounts",object.borrower)){return;// console.log("not interested in call_orders of", object.borrower);
	}}else if(object.id.substring(0,balance_prefix.length)==balance_prefix){// balance object
	if(!this._isSubbedTo("accounts",object.owner)){return;// console.log("not interested in balance_object of", object.owner);
	}}else if(object.id.substring(0,operation_history_prefix.length)==operation_history_prefix){// operation_history object
	return;// console.log("not interested in operation_history", object);
	}else if(object.id.substring(0,block_summary_prefix.length)==block_summary_prefix){// block_summary object
	return;// console.log("not interested in block_summary_prefix", object);
	}else if(object.id.substring(0,account_stats_prefix.length)==account_stats_prefix){// account_stats object
	if(!this._isSubbedTo("accounts",object.owner)){return;// console.log("not interested in stats of", object.owner);
	}}else if(object.id.substring(0,witness_prefix.length)==witness_prefix){// witness object
	if(!this._isSubbedTo("witnesses",object.id)){return;}}else if(object.id.substring(0,committee_prefix.length)==committee_prefix){// committee_member object
	if(!this._isSubbedTo("committee",object.id)){return;}}else if(object.id.substring(0,4)==="0.0."||object.id.substring(0,4)==="5.1."){/*
	            ** The witness node spams these random objects related to markets,
	            ** they are never needed by the GUI and thus only fill up the memory,
	            ** so we ignore them
	            */return;}// DYNAMIC GLOBAL OBJECT
	if(object.id=="2.1.0"){object.participation=100*(__WEBPACK_IMPORTED_MODULE_4_bigi___default()(object.recent_slots_filled).bitCount()/128.0);this.head_block_time_string=object.time;this.chain_time_offset.push(Date.now()-timeStringToDate(object.time).getTime());if(this.chain_time_offset.length>10)this.chain_time_offset.shift();// remove first
	}var current=this.objects_by_id.get(object.id);if(!current){// console.log("add object:", object.id);
	current=__WEBPACK_IMPORTED_MODULE_0_immutable___default.a.Map();}var prior=current;if(current===undefined||current===true)this.objects_by_id.set(object.id,current=__WEBPACK_IMPORTED_MODULE_0_immutable___default.a.fromJS(object));else{this.objects_by_id.set(object.id,current=current.mergeDeep(__WEBPACK_IMPORTED_MODULE_0_immutable___default.a.fromJS(object)));}// BALANCE OBJECT
	if(object.id.substring(0,balance_prefix.length)==balance_prefix){var owner=this.objects_by_id.get(object.owner);if(owner===undefined||owner===null){return;/*  This prevents the full account from being looked up later
	                owner = {id:object.owner, balances:{ } }
	                owner.balances[object.asset_type] = object.id
	                owner = Immutable.fromJS( owner )
	                */}else{var balances=owner.get("balances");if(!balances)owner=owner.set("balances",__WEBPACK_IMPORTED_MODULE_0_immutable___default.a.Map());owner=owner.setIn(["balances",object.asset_type],object.id);}this.objects_by_id.set(object.owner,owner);}else if(object.id.substring(0,account_stats_prefix.length)==account_stats_prefix){// ACCOUNT STATS OBJECT
	try{var prior_most_recent_op=prior.get("most_recent_op","2.9.0");if(prior_most_recent_op!=object.most_recent_op){this.fetchRecentHistory(object.owner);}}catch(err){console.log("prior error:","object:",obj,"prior",prior,"err:",err);}}else if(object.id.substring(0,witness_prefix.length)==witness_prefix){// WITNESS OBJECT
	if(this._isSubbedTo("witnesses",object.id)){this.witness_by_account_id.set(object.witness_account,object.id);this.objects_by_vote_id.set(object.vote_id,object.id);}else{return;}}else if(object.id.substring(0,committee_prefix.length)==committee_prefix){// COMMITTEE MEMBER OBJECT
	if(this._isSubbedTo("committee",object.id)){this.committee_by_account_id.set(object.committee_member_account,object.id);this.objects_by_vote_id.set(object.vote_id,object.id);}else{return;}}else if(object.id.substring(0,account_prefix.length)==account_prefix){// ACCOUNT OBJECT
	current=current.set("active",__WEBPACK_IMPORTED_MODULE_0_immutable___default.a.fromJS(object.active));current=current.set("owner",__WEBPACK_IMPORTED_MODULE_0_immutable___default.a.fromJS(object.owner));current=current.set("options",__WEBPACK_IMPORTED_MODULE_0_immutable___default.a.fromJS(object.options));current=current.set("whitelisting_accounts",__WEBPACK_IMPORTED_MODULE_0_immutable___default.a.fromJS(object.whitelisting_accounts));current=current.set("blacklisting_accounts",__WEBPACK_IMPORTED_MODULE_0_immutable___default.a.fromJS(object.blacklisting_accounts));current=current.set("whitelisted_accounts",__WEBPACK_IMPORTED_MODULE_0_immutable___default.a.fromJS(object.whitelisted_accounts));current=current.set("blacklisted_accounts",__WEBPACK_IMPORTED_MODULE_0_immutable___default.a.fromJS(object.blacklisted_accounts));this.objects_by_id.set(object.id,current);this.accounts_by_name.set(object.name,object.id);}else if(object.id.substring(0,asset_prefix.length)==asset_prefix){// ASSET OBJECT
	this.assets_by_symbol.set(object.symbol,object.id);var dynamic=current.get("dynamic");if(!dynamic){var dad=this.getObject(object.dynamic_asset_data_id,true);if(!dad)dad=__WEBPACK_IMPORTED_MODULE_0_immutable___default.a.Map();if(!dad.get("asset_id")){dad=dad.set("asset_id",object.id);}this.objects_by_id.set(object.dynamic_asset_data_id,dad);current=current.set("dynamic",dad);this.objects_by_id.set(object.id,current);}var bitasset=current.get("bitasset");if(!bitasset&&object.bitasset_data_id){var bad=this.getObject(object.bitasset_data_id,true);if(!bad)bad=__WEBPACK_IMPORTED_MODULE_0_immutable___default.a.Map();if(!bad.get("asset_id")){bad=bad.set("asset_id",object.id);}this.objects_by_id.set(object.bitasset_data_id,bad);current=current.set("bitasset",bad);this.objects_by_id.set(object.id,current);}}else if(object.id.substring(0,asset_dynamic_data_prefix.length)==asset_dynamic_data_prefix){// ASSET DYNAMIC DATA OBJECT
	// let asset_id = asset_prefix + object.id.substring( asset_dynamic_data_prefix.length )
	var asset_id=current.get("asset_id");if(asset_id){var asset_obj=this.getObject(asset_id);if(asset_obj&&asset_obj.set){asset_obj=asset_obj.set("dynamic",current);this.objects_by_id.set(asset_id,asset_obj);}}}else if(object.id.substring(0,worker_prefix.length)==worker_prefix){// WORKER OBJECT
	this.objects_by_vote_id.set(object.vote_for,object.id);this.objects_by_vote_id.set(object.vote_against,object.id);}else if(object.id.substring(0,bitasset_data_prefix.length)==bitasset_data_prefix){// BITASSET DATA OBJECT
	var _asset_id=current.get("asset_id");if(_asset_id){var asset=this.getObject(_asset_id);if(asset){asset=asset.set("bitasset",current);emitter.emit("bitasset-update",asset);this.objects_by_id.set(_asset_id,asset);}}}else if(object.id.substring(0,call_order_prefix.length)==call_order_prefix){// CALL ORDER OBJECT
	// Update nested call_orders inside account object
	if(emit){emitter.emit("call-order-update",object);}var account=this.objects_by_id.get(object.borrower);if(account){if(!account.has("call_orders"))account=account.set("call_orders",new __WEBPACK_IMPORTED_MODULE_0_immutable___default.a.Set());var call_orders=account.get("call_orders");if(!call_orders.has(object.id)){account=account.set("call_orders",call_orders.add(object.id));this.objects_by_id.set(account.get("id"),account);__WEBPACK_IMPORTED_MODULE_1_cybexjs_ws__["Apis"].instance().db_api().exec("get_objects",[[object.id]]);// Force subscription to the object in the witness node by calling get_objects
	}}}else if(object.id.substring(0,order_prefix.length)==order_prefix){// LIMIT ORDER OBJECT
	var _account2=this.objects_by_id.get(object.seller);if(_account2){if(!_account2.has("orders"))_account2=_account2.set("orders",new __WEBPACK_IMPORTED_MODULE_0_immutable___default.a.Set());var limit_orders=_account2.get("orders");if(!limit_orders.has(object.id)){_account2=_account2.set("orders",limit_orders.add(object.id));this.objects_by_id.set(_account2.get("id"),_account2);__WEBPACK_IMPORTED_MODULE_1_cybexjs_ws__["Apis"].instance().db_api().exec("get_objects",[[object.id]]);// Force subscription to the object in the witness node by calling get_objects
	}}// POROPOSAL OBJECT
	}else if(object.id.substring(0,proposal_prefix.length)==proposal_prefix){this.addProposalData(object.required_active_approvals,object.id);this.addProposalData(object.required_owner_approvals,object.id);}if(notify_subscribers){this.notifySubscribers();}return current;}},{key:'getObjectsByVoteIds',value:function getObjectsByVoteIds(vote_ids){var _this12=this;var result=[];var missing=[];for(var i=0;i<vote_ids.length;++i){var _obj2=this.objects_by_vote_id.get(vote_ids[i]);if(_obj2)result.push(this.getObject(_obj2));else{result.push(null);missing.push(vote_ids[i]);}}if(missing.length){// we may need to fetch some objects
	__WEBPACK_IMPORTED_MODULE_1_cybexjs_ws__["Apis"].instance().db_api().exec("lookup_vote_ids",[missing]).then(function(vote_obj_array){console.log("missing ===========> ",missing);console.log("vote objects ===========> ",vote_obj_array);for(var _i2=0;_i2<vote_obj_array.length;++_i2){if(vote_obj_array[_i2]){var isWitness=vote_obj_array[_i2].id.substring(0,witness_prefix.length)==witness_prefix;_this12._subTo(isWitness?"witnesses":"committee",vote_obj_array[_i2].id);_this12._updateObject(vote_obj_array[_i2]);}}},function(error){return console.log("Error looking up vote ids: ",error);});}return result;}},{key:'getObjectByVoteID',value:function getObjectByVoteID(vote_id){var obj_id=this.objects_by_vote_id.get(vote_id);if(obj_id)return this.getObject(obj_id);return undefined;}},{key:'getHeadBlockDate',value:function getHeadBlockDate(){return timeStringToDate(this.head_block_time_string);}},{key:'getEstimatedChainTimeOffset',value:function getEstimatedChainTimeOffset(){if(this.chain_time_offset.length===0)return 0;// Immutable is fast, sorts numbers correctly, and leaves the original unmodified
	// This will fix itself if the user changes their clock
	var median_offset=__WEBPACK_IMPORTED_MODULE_0_immutable___default.a.List(this.chain_time_offset).sort().get(Math.floor((this.chain_time_offset.length-1)/2));// console.log("median_offset", median_offset)
	return median_offset;}},{key:'addProposalData',value:function addProposalData(approvals,objectId){var _this13=this;approvals.forEach(function(id){var impactedAccount=_this13.objects_by_id.get(id);if(impactedAccount){var proposals=impactedAccount.get("proposals",__WEBPACK_IMPORTED_MODULE_0_immutable___default.a.Set());if(!proposals.includes(objectId)){proposals=proposals.add(objectId);impactedAccount=impactedAccount.set("proposals",proposals);_this13._updateObject(impactedAccount.toJS());}}});}}]);return ChainStore;}();var chain_store=new ChainStore();function FetchChainObjects(method,object_ids,timeout,subMap){var get_object=method.bind(chain_store);return new _promise2.default(function(resolve,reject){var timeout_handle=null;function onUpdate(){var not_subscribed_yet=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var res=object_ids.map(function(id){if(method.name==="getAccount")return get_object(id,subMap[id]);if(method.name==="getObject")return get_object(id,false,subMap[id]);return get_object(id);});if(res.findIndex(function(o){return o===undefined;})===-1){if(timeout_handle)clearTimeout(timeout_handle);if(!not_subscribed_yet)chain_store.unsubscribe(onUpdate);resolve(res);return true;}return false;}var resolved=onUpdate(true);if(!resolved)chain_store.subscribe(onUpdate);if(timeout&&!resolved)timeout_handle=setTimeout(function(){chain_store.unsubscribe(onUpdate);reject("timeout");},timeout);});}chain_store.FetchChainObjects=FetchChainObjects;function FetchChain(methodName,objectIds){var timeout=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1900;var subMap=arguments.length>3&&arguments[3]!==undefined?arguments[3]:{};var method=chain_store[methodName];if(!method)throw new Error("ChainStore does not have method "+methodName);var arrayIn=Array.isArray(objectIds);if(!arrayIn)objectIds=[objectIds];return chain_store.FetchChainObjects(method,__WEBPACK_IMPORTED_MODULE_0_immutable___default.a.List(objectIds),timeout,subMap).then(function(res){return arrayIn?res:res.get(0);});}chain_store.FetchChain=FetchChain;function timeStringToDate(time_string){if(!time_string)return new Date("1970-01-01T00:00:00.000Z");if(!/Z$/.test(time_string));//does not end in Z
	// https://github.com/cryptonomex/graphene/issues/368
	time_string=time_string+"Z";return new Date(time_string);}/* harmony default export */__webpack_exports__["a"]=chain_store;/***/},/* 60 *//***/function(module,exports,__webpack_require__){/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */(function(global,factory){true?module.exports=factory():typeof define==='function'&&define.amd?define(factory):global.Immutable=factory();})(this,function(){'use strict';var SLICE$0=Array.prototype.slice;function createClass(ctor,superClass){if(superClass){ctor.prototype=(0,_create2.default)(superClass.prototype);}ctor.prototype.constructor=ctor;}function Iterable(value){return isIterable(value)?value:Seq(value);}createClass(KeyedIterable,Iterable);function KeyedIterable(value){return isKeyed(value)?value:KeyedSeq(value);}createClass(IndexedIterable,Iterable);function IndexedIterable(value){return isIndexed(value)?value:IndexedSeq(value);}createClass(SetIterable,Iterable);function SetIterable(value){return isIterable(value)&&!isAssociative(value)?value:SetSeq(value);}function isIterable(maybeIterable){return!!(maybeIterable&&maybeIterable[IS_ITERABLE_SENTINEL]);}function isKeyed(maybeKeyed){return!!(maybeKeyed&&maybeKeyed[IS_KEYED_SENTINEL]);}function isIndexed(maybeIndexed){return!!(maybeIndexed&&maybeIndexed[IS_INDEXED_SENTINEL]);}function isAssociative(maybeAssociative){return isKeyed(maybeAssociative)||isIndexed(maybeAssociative);}function isOrdered(maybeOrdered){return!!(maybeOrdered&&maybeOrdered[IS_ORDERED_SENTINEL]);}Iterable.isIterable=isIterable;Iterable.isKeyed=isKeyed;Iterable.isIndexed=isIndexed;Iterable.isAssociative=isAssociative;Iterable.isOrdered=isOrdered;Iterable.Keyed=KeyedIterable;Iterable.Indexed=IndexedIterable;Iterable.Set=SetIterable;var IS_ITERABLE_SENTINEL='@@__IMMUTABLE_ITERABLE__@@';var IS_KEYED_SENTINEL='@@__IMMUTABLE_KEYED__@@';var IS_INDEXED_SENTINEL='@@__IMMUTABLE_INDEXED__@@';var IS_ORDERED_SENTINEL='@@__IMMUTABLE_ORDERED__@@';// Used for setting prototype methods that IE8 chokes on.
	var DELETE='delete';// Constants describing the size of trie nodes.
	var SHIFT=5;// Resulted in best performance after ______?
	var SIZE=1<<SHIFT;var MASK=SIZE-1;// A consistent shared value representing "not set" which equals nothing other
	// than itself, and nothing that could be provided externally.
	var NOT_SET={};// Boolean references, Rough equivalent of `bool &`.
	var CHANGE_LENGTH={value:false};var DID_ALTER={value:false};function MakeRef(ref){ref.value=false;return ref;}function SetRef(ref){ref&&(ref.value=true);}// A function which returns a value representing an "owner" for transient writes
	// to tries. The return value will only ever equal itself, and will not equal
	// the return of any subsequent call of this function.
	function OwnerID(){}// http://jsperf.com/copy-array-inline
	function arrCopy(arr,offset){offset=offset||0;var len=Math.max(0,arr.length-offset);var newArr=new Array(len);for(var ii=0;ii<len;ii++){newArr[ii]=arr[ii+offset];}return newArr;}function ensureSize(iter){if(iter.size===undefined){iter.size=iter.__iterate(returnTrue);}return iter.size;}function wrapIndex(iter,index){// This implements "is array index" which the ECMAString spec defines as:
	//
	//     A String property name P is an array index if and only if
	//     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal
	//     to 2^32−1.
	//
	// http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects
	if(typeof index!=='number'){var uint32Index=index>>>0;// N >>> 0 is shorthand for ToUint32
	if(''+uint32Index!==index||uint32Index===4294967295){return NaN;}index=uint32Index;}return index<0?ensureSize(iter)+index:index;}function returnTrue(){return true;}function wholeSlice(begin,end,size){return(begin===0||size!==undefined&&begin<=-size)&&(end===undefined||size!==undefined&&end>=size);}function resolveBegin(begin,size){return resolveIndex(begin,size,0);}function resolveEnd(end,size){return resolveIndex(end,size,size);}function resolveIndex(index,size,defaultIndex){return index===undefined?defaultIndex:index<0?Math.max(0,size+index):size===undefined?index:Math.min(size,index);}/* global Symbol */var ITERATE_KEYS=0;var ITERATE_VALUES=1;var ITERATE_ENTRIES=2;var REAL_ITERATOR_SYMBOL=typeof _symbol2.default==='function'&&_iterator5.default;var FAUX_ITERATOR_SYMBOL='@@iterator';var ITERATOR_SYMBOL=REAL_ITERATOR_SYMBOL||FAUX_ITERATOR_SYMBOL;function Iterator(next){this.next=next;}Iterator.prototype.toString=function(){return'[Iterator]';};Iterator.KEYS=ITERATE_KEYS;Iterator.VALUES=ITERATE_VALUES;Iterator.ENTRIES=ITERATE_ENTRIES;Iterator.prototype.inspect=Iterator.prototype.toSource=function(){return this.toString();};Iterator.prototype[ITERATOR_SYMBOL]=function(){return this;};function iteratorValue(type,k,v,iteratorResult){var value=type===0?k:type===1?v:[k,v];iteratorResult?iteratorResult.value=value:iteratorResult={value:value,done:false};return iteratorResult;}function iteratorDone(){return{value:undefined,done:true};}function hasIterator(maybeIterable){return!!getIteratorFn(maybeIterable);}function isIterator(maybeIterator){return maybeIterator&&typeof maybeIterator.next==='function';}function getIterator(iterable){var iteratorFn=getIteratorFn(iterable);return iteratorFn&&iteratorFn.call(iterable);}function getIteratorFn(iterable){var iteratorFn=iterable&&(REAL_ITERATOR_SYMBOL&&iterable[REAL_ITERATOR_SYMBOL]||iterable[FAUX_ITERATOR_SYMBOL]);if(typeof iteratorFn==='function'){return iteratorFn;}}function isArrayLike(value){return value&&typeof value.length==='number';}createClass(Seq,Iterable);function Seq(value){return value===null||value===undefined?emptySequence():isIterable(value)?value.toSeq():seqFromValue(value);}Seq.of=function()/*...values*/{return Seq(arguments);};Seq.prototype.toSeq=function(){return this;};Seq.prototype.toString=function(){return this.__toString('Seq {','}');};Seq.prototype.cacheResult=function(){if(!this._cache&&this.__iterateUncached){this._cache=this.entrySeq().toArray();this.size=this._cache.length;}return this;};// abstract __iterateUncached(fn, reverse)
	Seq.prototype.__iterate=function(fn,reverse){return seqIterate(this,fn,reverse,true);};// abstract __iteratorUncached(type, reverse)
	Seq.prototype.__iterator=function(type,reverse){return seqIterator(this,type,reverse,true);};createClass(KeyedSeq,Seq);function KeyedSeq(value){return value===null||value===undefined?emptySequence().toKeyedSeq():isIterable(value)?isKeyed(value)?value.toSeq():value.fromEntrySeq():keyedSeqFromValue(value);}KeyedSeq.prototype.toKeyedSeq=function(){return this;};createClass(IndexedSeq,Seq);function IndexedSeq(value){return value===null||value===undefined?emptySequence():!isIterable(value)?indexedSeqFromValue(value):isKeyed(value)?value.entrySeq():value.toIndexedSeq();}IndexedSeq.of=function()/*...values*/{return IndexedSeq(arguments);};IndexedSeq.prototype.toIndexedSeq=function(){return this;};IndexedSeq.prototype.toString=function(){return this.__toString('Seq [',']');};IndexedSeq.prototype.__iterate=function(fn,reverse){return seqIterate(this,fn,reverse,false);};IndexedSeq.prototype.__iterator=function(type,reverse){return seqIterator(this,type,reverse,false);};createClass(SetSeq,Seq);function SetSeq(value){return(value===null||value===undefined?emptySequence():!isIterable(value)?indexedSeqFromValue(value):isKeyed(value)?value.entrySeq():value).toSetSeq();}SetSeq.of=function()/*...values*/{return SetSeq(arguments);};SetSeq.prototype.toSetSeq=function(){return this;};Seq.isSeq=isSeq;Seq.Keyed=KeyedSeq;Seq.Set=SetSeq;Seq.Indexed=IndexedSeq;var IS_SEQ_SENTINEL='@@__IMMUTABLE_SEQ__@@';Seq.prototype[IS_SEQ_SENTINEL]=true;createClass(ArraySeq,IndexedSeq);function ArraySeq(array){this._array=array;this.size=array.length;}ArraySeq.prototype.get=function(index,notSetValue){return this.has(index)?this._array[wrapIndex(this,index)]:notSetValue;};ArraySeq.prototype.__iterate=function(fn,reverse){var array=this._array;var maxIndex=array.length-1;for(var ii=0;ii<=maxIndex;ii++){if(fn(array[reverse?maxIndex-ii:ii],ii,this)===false){return ii+1;}}return ii;};ArraySeq.prototype.__iterator=function(type,reverse){var array=this._array;var maxIndex=array.length-1;var ii=0;return new Iterator(function(){return ii>maxIndex?iteratorDone():iteratorValue(type,ii,array[reverse?maxIndex-ii++:ii++]);});};createClass(ObjectSeq,KeyedSeq);function ObjectSeq(object){var keys=(0,_keys2.default)(object);this._object=object;this._keys=keys;this.size=keys.length;}ObjectSeq.prototype.get=function(key,notSetValue){if(notSetValue!==undefined&&!this.has(key)){return notSetValue;}return this._object[key];};ObjectSeq.prototype.has=function(key){return this._object.hasOwnProperty(key);};ObjectSeq.prototype.__iterate=function(fn,reverse){var object=this._object;var keys=this._keys;var maxIndex=keys.length-1;for(var ii=0;ii<=maxIndex;ii++){var key=keys[reverse?maxIndex-ii:ii];if(fn(object[key],key,this)===false){return ii+1;}}return ii;};ObjectSeq.prototype.__iterator=function(type,reverse){var object=this._object;var keys=this._keys;var maxIndex=keys.length-1;var ii=0;return new Iterator(function(){var key=keys[reverse?maxIndex-ii:ii];return ii++>maxIndex?iteratorDone():iteratorValue(type,key,object[key]);});};ObjectSeq.prototype[IS_ORDERED_SENTINEL]=true;createClass(IterableSeq,IndexedSeq);function IterableSeq(iterable){this._iterable=iterable;this.size=iterable.length||iterable.size;}IterableSeq.prototype.__iterateUncached=function(fn,reverse){if(reverse){return this.cacheResult().__iterate(fn,reverse);}var iterable=this._iterable;var iterator=getIterator(iterable);var iterations=0;if(isIterator(iterator)){var step;while(!(step=iterator.next()).done){if(fn(step.value,iterations++,this)===false){break;}}}return iterations;};IterableSeq.prototype.__iteratorUncached=function(type,reverse){if(reverse){return this.cacheResult().__iterator(type,reverse);}var iterable=this._iterable;var iterator=getIterator(iterable);if(!isIterator(iterator)){return new Iterator(iteratorDone);}var iterations=0;return new Iterator(function(){var step=iterator.next();return step.done?step:iteratorValue(type,iterations++,step.value);});};createClass(IteratorSeq,IndexedSeq);function IteratorSeq(iterator){this._iterator=iterator;this._iteratorCache=[];}IteratorSeq.prototype.__iterateUncached=function(fn,reverse){if(reverse){return this.cacheResult().__iterate(fn,reverse);}var iterator=this._iterator;var cache=this._iteratorCache;var iterations=0;while(iterations<cache.length){if(fn(cache[iterations],iterations++,this)===false){return iterations;}}var step;while(!(step=iterator.next()).done){var val=step.value;cache[iterations]=val;if(fn(val,iterations++,this)===false){break;}}return iterations;};IteratorSeq.prototype.__iteratorUncached=function(type,reverse){if(reverse){return this.cacheResult().__iterator(type,reverse);}var iterator=this._iterator;var cache=this._iteratorCache;var iterations=0;return new Iterator(function(){if(iterations>=cache.length){var step=iterator.next();if(step.done){return step;}cache[iterations]=step.value;}return iteratorValue(type,iterations,cache[iterations++]);});};// # pragma Helper functions
	function isSeq(maybeSeq){return!!(maybeSeq&&maybeSeq[IS_SEQ_SENTINEL]);}var EMPTY_SEQ;function emptySequence(){return EMPTY_SEQ||(EMPTY_SEQ=new ArraySeq([]));}function keyedSeqFromValue(value){var seq=Array.isArray(value)?new ArraySeq(value).fromEntrySeq():isIterator(value)?new IteratorSeq(value).fromEntrySeq():hasIterator(value)?new IterableSeq(value).fromEntrySeq():(typeof value==='undefined'?'undefined':(0,_typeof3.default)(value))==='object'?new ObjectSeq(value):undefined;if(!seq){throw new TypeError('Expected Array or iterable object of [k, v] entries, '+'or keyed object: '+value);}return seq;}function indexedSeqFromValue(value){var seq=maybeIndexedSeqFromValue(value);if(!seq){throw new TypeError('Expected Array or iterable object of values: '+value);}return seq;}function seqFromValue(value){var seq=maybeIndexedSeqFromValue(value)||(typeof value==='undefined'?'undefined':(0,_typeof3.default)(value))==='object'&&new ObjectSeq(value);if(!seq){throw new TypeError('Expected Array or iterable object of values, or keyed object: '+value);}return seq;}function maybeIndexedSeqFromValue(value){return isArrayLike(value)?new ArraySeq(value):isIterator(value)?new IteratorSeq(value):hasIterator(value)?new IterableSeq(value):undefined;}function seqIterate(seq,fn,reverse,useKeys){var cache=seq._cache;if(cache){var maxIndex=cache.length-1;for(var ii=0;ii<=maxIndex;ii++){var entry=cache[reverse?maxIndex-ii:ii];if(fn(entry[1],useKeys?entry[0]:ii,seq)===false){return ii+1;}}return ii;}return seq.__iterateUncached(fn,reverse);}function seqIterator(seq,type,reverse,useKeys){var cache=seq._cache;if(cache){var maxIndex=cache.length-1;var ii=0;return new Iterator(function(){var entry=cache[reverse?maxIndex-ii:ii];return ii++>maxIndex?iteratorDone():iteratorValue(type,useKeys?entry[0]:ii-1,entry[1]);});}return seq.__iteratorUncached(type,reverse);}function fromJS(json,converter){return converter?fromJSWith(converter,json,'',{'':json}):fromJSDefault(json);}function fromJSWith(converter,json,key,parentJSON){if(Array.isArray(json)){return converter.call(parentJSON,key,IndexedSeq(json).map(function(v,k){return fromJSWith(converter,v,k,json);}));}if(isPlainObj(json)){return converter.call(parentJSON,key,KeyedSeq(json).map(function(v,k){return fromJSWith(converter,v,k,json);}));}return json;}function fromJSDefault(json){if(Array.isArray(json)){return IndexedSeq(json).map(fromJSDefault).toList();}if(isPlainObj(json)){return KeyedSeq(json).map(fromJSDefault).toMap();}return json;}function isPlainObj(value){return value&&(value.constructor===Object||value.constructor===undefined);}/**
	   * An extension of the "same-value" algorithm as [described for use by ES6 Map
	   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)
	   *
	   * NaN is considered the same as NaN, however -0 and 0 are considered the same
	   * value, which is different from the algorithm described by
	   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).
	   *
	   * This is extended further to allow Objects to describe the values they
	   * represent, by way of `valueOf` or `equals` (and `hashCode`).
	   *
	   * Note: because of this extension, the key equality of Immutable.Map and the
	   * value equality of Immutable.Set will differ from ES6 Map and Set.
	   *
	   * ### Defining custom values
	   *
	   * The easiest way to describe the value an object represents is by implementing
	   * `valueOf`. For example, `Date` represents a value by returning a unix
	   * timestamp for `valueOf`:
	   *
	   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...
	   *     var date2 = new Date(1234567890000);
	   *     date1.valueOf(); // 1234567890000
	   *     assert( date1 !== date2 );
	   *     assert( Immutable.is( date1, date2 ) );
	   *
	   * Note: overriding `valueOf` may have other implications if you use this object
	   * where JavaScript expects a primitive, such as implicit string coercion.
	   *
	   * For more complex types, especially collections, implementing `valueOf` may
	   * not be performant. An alternative is to implement `equals` and `hashCode`.
	   *
	   * `equals` takes another object, presumably of similar type, and returns true
	   * if the it is equal. Equality is symmetrical, so the same result should be
	   * returned if this and the argument are flipped.
	   *
	   *     assert( a.equals(b) === b.equals(a) );
	   *
	   * `hashCode` returns a 32bit integer number representing the object which will
	   * be used to determine how to store the value object in a Map or Set. You must
	   * provide both or neither methods, one must not exist without the other.
	   *
	   * Also, an important relationship between these methods must be upheld: if two
	   * values are equal, they *must* return the same hashCode. If the values are not
	   * equal, they might have the same hashCode; this is called a hash collision,
	   * and while undesirable for performance reasons, it is acceptable.
	   *
	   *     if (a.equals(b)) {
	   *       assert( a.hashCode() === b.hashCode() );
	   *     }
	   *
	   * All Immutable collections implement `equals` and `hashCode`.
	   *
	   */function is(valueA,valueB){if(valueA===valueB||valueA!==valueA&&valueB!==valueB){return true;}if(!valueA||!valueB){return false;}if(typeof valueA.valueOf==='function'&&typeof valueB.valueOf==='function'){valueA=valueA.valueOf();valueB=valueB.valueOf();if(valueA===valueB||valueA!==valueA&&valueB!==valueB){return true;}if(!valueA||!valueB){return false;}}if(typeof valueA.equals==='function'&&typeof valueB.equals==='function'&&valueA.equals(valueB)){return true;}return false;}function deepEqual(a,b){if(a===b){return true;}if(!isIterable(b)||a.size!==undefined&&b.size!==undefined&&a.size!==b.size||a.__hash!==undefined&&b.__hash!==undefined&&a.__hash!==b.__hash||isKeyed(a)!==isKeyed(b)||isIndexed(a)!==isIndexed(b)||isOrdered(a)!==isOrdered(b)){return false;}if(a.size===0&&b.size===0){return true;}var notAssociative=!isAssociative(a);if(isOrdered(a)){var entries=a.entries();return b.every(function(v,k){var entry=entries.next().value;return entry&&is(entry[1],v)&&(notAssociative||is(entry[0],k));})&&entries.next().done;}var flipped=false;if(a.size===undefined){if(b.size===undefined){if(typeof a.cacheResult==='function'){a.cacheResult();}}else{flipped=true;var _=a;a=b;b=_;}}var allEqual=true;var bSize=b.__iterate(function(v,k){if(notAssociative?!a.has(v):flipped?!is(v,a.get(k,NOT_SET)):!is(a.get(k,NOT_SET),v)){allEqual=false;return false;}});return allEqual&&a.size===bSize;}createClass(Repeat,IndexedSeq);function Repeat(value,times){if(!(this instanceof Repeat)){return new Repeat(value,times);}this._value=value;this.size=times===undefined?Infinity:Math.max(0,times);if(this.size===0){if(EMPTY_REPEAT){return EMPTY_REPEAT;}EMPTY_REPEAT=this;}}Repeat.prototype.toString=function(){if(this.size===0){return'Repeat []';}return'Repeat [ '+this._value+' '+this.size+' times ]';};Repeat.prototype.get=function(index,notSetValue){return this.has(index)?this._value:notSetValue;};Repeat.prototype.includes=function(searchValue){return is(this._value,searchValue);};Repeat.prototype.slice=function(begin,end){var size=this.size;return wholeSlice(begin,end,size)?this:new Repeat(this._value,resolveEnd(end,size)-resolveBegin(begin,size));};Repeat.prototype.reverse=function(){return this;};Repeat.prototype.indexOf=function(searchValue){if(is(this._value,searchValue)){return 0;}return-1;};Repeat.prototype.lastIndexOf=function(searchValue){if(is(this._value,searchValue)){return this.size;}return-1;};Repeat.prototype.__iterate=function(fn,reverse){for(var ii=0;ii<this.size;ii++){if(fn(this._value,ii,this)===false){return ii+1;}}return ii;};Repeat.prototype.__iterator=function(type,reverse){var this$0=this;var ii=0;return new Iterator(function(){return ii<this$0.size?iteratorValue(type,ii++,this$0._value):iteratorDone();});};Repeat.prototype.equals=function(other){return other instanceof Repeat?is(this._value,other._value):deepEqual(other);};var EMPTY_REPEAT;function invariant(condition,error){if(!condition)throw new Error(error);}createClass(Range,IndexedSeq);function Range(start,end,step){if(!(this instanceof Range)){return new Range(start,end,step);}invariant(step!==0,'Cannot step a Range by 0');start=start||0;if(end===undefined){end=Infinity;}step=step===undefined?1:Math.abs(step);if(end<start){step=-step;}this._start=start;this._end=end;this._step=step;this.size=Math.max(0,Math.ceil((end-start)/step-1)+1);if(this.size===0){if(EMPTY_RANGE){return EMPTY_RANGE;}EMPTY_RANGE=this;}}Range.prototype.toString=function(){if(this.size===0){return'Range []';}return'Range [ '+this._start+'...'+this._end+(this._step!==1?' by '+this._step:'')+' ]';};Range.prototype.get=function(index,notSetValue){return this.has(index)?this._start+wrapIndex(this,index)*this._step:notSetValue;};Range.prototype.includes=function(searchValue){var possibleIndex=(searchValue-this._start)/this._step;return possibleIndex>=0&&possibleIndex<this.size&&possibleIndex===Math.floor(possibleIndex);};Range.prototype.slice=function(begin,end){if(wholeSlice(begin,end,this.size)){return this;}begin=resolveBegin(begin,this.size);end=resolveEnd(end,this.size);if(end<=begin){return new Range(0,0);}return new Range(this.get(begin,this._end),this.get(end,this._end),this._step);};Range.prototype.indexOf=function(searchValue){var offsetValue=searchValue-this._start;if(offsetValue%this._step===0){var index=offsetValue/this._step;if(index>=0&&index<this.size){return index;}}return-1;};Range.prototype.lastIndexOf=function(searchValue){return this.indexOf(searchValue);};Range.prototype.__iterate=function(fn,reverse){var maxIndex=this.size-1;var step=this._step;var value=reverse?this._start+maxIndex*step:this._start;for(var ii=0;ii<=maxIndex;ii++){if(fn(value,ii,this)===false){return ii+1;}value+=reverse?-step:step;}return ii;};Range.prototype.__iterator=function(type,reverse){var maxIndex=this.size-1;var step=this._step;var value=reverse?this._start+maxIndex*step:this._start;var ii=0;return new Iterator(function(){var v=value;value+=reverse?-step:step;return ii>maxIndex?iteratorDone():iteratorValue(type,ii++,v);});};Range.prototype.equals=function(other){return other instanceof Range?this._start===other._start&&this._end===other._end&&this._step===other._step:deepEqual(this,other);};var EMPTY_RANGE;createClass(Collection,Iterable);function Collection(){throw TypeError('Abstract');}createClass(KeyedCollection,Collection);function KeyedCollection(){}createClass(IndexedCollection,Collection);function IndexedCollection(){}createClass(SetCollection,Collection);function SetCollection(){}Collection.Keyed=KeyedCollection;Collection.Indexed=IndexedCollection;Collection.Set=SetCollection;var imul=typeof _imul2.default==='function'&&(0,_imul2.default)(0xffffffff,2)===-2?_imul2.default:function imul(a,b){a=a|0;// int
	b=b|0;// int
	var c=a&0xffff;var d=b&0xffff;// Shift by 0 fixes the sign on the high part.
	return c*d+((a>>>16)*d+c*(b>>>16)<<16>>>0)|0;// int
	};// v8 has an optimization for storing 31-bit signed numbers.
	// Values which have either 00 or 11 as the high order bits qualify.
	// This function drops the highest order bit in a signed number, maintaining
	// the sign bit.
	function smi(i32){return i32>>>1&0x40000000|i32&0xBFFFFFFF;}function hash(o){if(o===false||o===null||o===undefined){return 0;}if(typeof o.valueOf==='function'){o=o.valueOf();if(o===false||o===null||o===undefined){return 0;}}if(o===true){return 1;}var type=typeof o==='undefined'?'undefined':(0,_typeof3.default)(o);if(type==='number'){if(o!==o||o===Infinity){return 0;}var h=o|0;if(h!==o){h^=o*0xFFFFFFFF;}while(o>0xFFFFFFFF){o/=0xFFFFFFFF;h^=o;}return smi(h);}if(type==='string'){return o.length>STRING_HASH_CACHE_MIN_STRLEN?cachedHashString(o):hashString(o);}if(typeof o.hashCode==='function'){return o.hashCode();}if(type==='object'){return hashJSObj(o);}if(typeof o.toString==='function'){return hashString(o.toString());}throw new Error('Value type '+type+' cannot be hashed.');}function cachedHashString(string){var hash=stringHashCache[string];if(hash===undefined){hash=hashString(string);if(STRING_HASH_CACHE_SIZE===STRING_HASH_CACHE_MAX_SIZE){STRING_HASH_CACHE_SIZE=0;stringHashCache={};}STRING_HASH_CACHE_SIZE++;stringHashCache[string]=hash;}return hash;}// http://jsperf.com/hashing-strings
	function hashString(string){// This is the hash from JVM
	// The hash code for a string is computed as
	// s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],
	// where s[i] is the ith character of the string and n is the length of
	// the string. We "mod" the result to make it between 0 (inclusive) and 2^31
	// (exclusive) by dropping high bits.
	var hash=0;for(var ii=0;ii<string.length;ii++){hash=31*hash+string.charCodeAt(ii)|0;}return smi(hash);}function hashJSObj(obj){var hash;if(usingWeakMap){hash=weakMap.get(obj);if(hash!==undefined){return hash;}}hash=obj[UID_HASH_KEY];if(hash!==undefined){return hash;}if(!canDefineProperty){hash=obj.propertyIsEnumerable&&obj.propertyIsEnumerable[UID_HASH_KEY];if(hash!==undefined){return hash;}hash=getIENodeHash(obj);if(hash!==undefined){return hash;}}hash=++objHashUID;if(objHashUID&0x40000000){objHashUID=0;}if(usingWeakMap){weakMap.set(obj,hash);}else if(isExtensible!==undefined&&isExtensible(obj)===false){throw new Error('Non-extensible objects are not allowed as keys.');}else if(canDefineProperty){(0,_defineProperty2.default)(obj,UID_HASH_KEY,{'enumerable':false,'configurable':false,'writable':false,'value':hash});}else if(obj.propertyIsEnumerable!==undefined&&obj.propertyIsEnumerable===obj.constructor.prototype.propertyIsEnumerable){// Since we can't define a non-enumerable property on the object
	// we'll hijack one of the less-used non-enumerable properties to
	// save our hash on it. Since this is a function it will not show up in
	// `JSON.stringify` which is what we want.
	obj.propertyIsEnumerable=function(){return this.constructor.prototype.propertyIsEnumerable.apply(this,arguments);};obj.propertyIsEnumerable[UID_HASH_KEY]=hash;}else if(obj.nodeType!==undefined){// At this point we couldn't get the IE `uniqueID` to use as a hash
	// and we couldn't use a non-enumerable property to exploit the
	// dontEnum bug so we simply add the `UID_HASH_KEY` on the node
	// itself.
	obj[UID_HASH_KEY]=hash;}else{throw new Error('Unable to set a non-enumerable property on object.');}return hash;}// Get references to ES5 object methods.
	var isExtensible=_isExtensible2.default;// True if Object.defineProperty works as expected. IE8 fails this test.
	var canDefineProperty=function(){try{Object.defineProperty({},'@',{});return true;}catch(e){return false;}}();// IE has a `uniqueID` property on DOM nodes. We can construct the hash from it
	// and avoid memory leaks from the IE cloneNode bug.
	function getIENodeHash(node){if(node&&node.nodeType>0){switch(node.nodeType){case 1:// Element
	return node.uniqueID;case 9:// Document
	return node.documentElement&&node.documentElement.uniqueID;}}}// If possible, use a WeakMap.
	var usingWeakMap=typeof _weakMap2.default==='function';var weakMap;if(usingWeakMap){weakMap=new _weakMap2.default();}var objHashUID=0;var UID_HASH_KEY='__immutablehash__';if(typeof _symbol2.default==='function'){UID_HASH_KEY=(0,_symbol2.default)(UID_HASH_KEY);}var STRING_HASH_CACHE_MIN_STRLEN=16;var STRING_HASH_CACHE_MAX_SIZE=255;var STRING_HASH_CACHE_SIZE=0;var stringHashCache={};function assertNotInfinite(size){invariant(size!==Infinity,'Cannot perform this action with an infinite size.');}createClass(Map,KeyedCollection);// @pragma Construction
	function Map(value){return value===null||value===undefined?emptyMap():isMap(value)&&!isOrdered(value)?value:emptyMap().withMutations(function(map){var iter=KeyedIterable(value);assertNotInfinite(iter.size);iter.forEach(function(v,k){return map.set(k,v);});});}Map.of=function(){var keyValues=SLICE$0.call(arguments,0);return emptyMap().withMutations(function(map){for(var i=0;i<keyValues.length;i+=2){if(i+1>=keyValues.length){throw new Error('Missing value for key: '+keyValues[i]);}map.set(keyValues[i],keyValues[i+1]);}});};Map.prototype.toString=function(){return this.__toString('Map {','}');};// @pragma Access
	Map.prototype.get=function(k,notSetValue){return this._root?this._root.get(0,undefined,k,notSetValue):notSetValue;};// @pragma Modification
	Map.prototype.set=function(k,v){return updateMap(this,k,v);};Map.prototype.setIn=function(keyPath,v){return this.updateIn(keyPath,NOT_SET,function(){return v;});};Map.prototype.remove=function(k){return updateMap(this,k,NOT_SET);};Map.prototype.deleteIn=function(keyPath){return this.updateIn(keyPath,function(){return NOT_SET;});};Map.prototype.update=function(k,notSetValue,updater){return arguments.length===1?k(this):this.updateIn([k],notSetValue,updater);};Map.prototype.updateIn=function(keyPath,notSetValue,updater){if(!updater){updater=notSetValue;notSetValue=undefined;}var updatedValue=updateInDeepMap(this,forceIterator(keyPath),notSetValue,updater);return updatedValue===NOT_SET?undefined:updatedValue;};Map.prototype.clear=function(){if(this.size===0){return this;}if(this.__ownerID){this.size=0;this._root=null;this.__hash=undefined;this.__altered=true;return this;}return emptyMap();};// @pragma Composition
	Map.prototype.merge=function()/*...iters*/{return mergeIntoMapWith(this,undefined,arguments);};Map.prototype.mergeWith=function(merger){var iters=SLICE$0.call(arguments,1);return mergeIntoMapWith(this,merger,iters);};Map.prototype.mergeIn=function(keyPath){var iters=SLICE$0.call(arguments,1);return this.updateIn(keyPath,emptyMap(),function(m){return typeof m.merge==='function'?m.merge.apply(m,iters):iters[iters.length-1];});};Map.prototype.mergeDeep=function()/*...iters*/{return mergeIntoMapWith(this,deepMerger,arguments);};Map.prototype.mergeDeepWith=function(merger){var iters=SLICE$0.call(arguments,1);return mergeIntoMapWith(this,deepMergerWith(merger),iters);};Map.prototype.mergeDeepIn=function(keyPath){var iters=SLICE$0.call(arguments,1);return this.updateIn(keyPath,emptyMap(),function(m){return typeof m.mergeDeep==='function'?m.mergeDeep.apply(m,iters):iters[iters.length-1];});};Map.prototype.sort=function(comparator){// Late binding
	return OrderedMap(sortFactory(this,comparator));};Map.prototype.sortBy=function(mapper,comparator){// Late binding
	return OrderedMap(sortFactory(this,comparator,mapper));};// @pragma Mutability
	Map.prototype.withMutations=function(fn){var mutable=this.asMutable();fn(mutable);return mutable.wasAltered()?mutable.__ensureOwner(this.__ownerID):this;};Map.prototype.asMutable=function(){return this.__ownerID?this:this.__ensureOwner(new OwnerID());};Map.prototype.asImmutable=function(){return this.__ensureOwner();};Map.prototype.wasAltered=function(){return this.__altered;};Map.prototype.__iterator=function(type,reverse){return new MapIterator(this,type,reverse);};Map.prototype.__iterate=function(fn,reverse){var this$0=this;var iterations=0;this._root&&this._root.iterate(function(entry){iterations++;return fn(entry[1],entry[0],this$0);},reverse);return iterations;};Map.prototype.__ensureOwner=function(ownerID){if(ownerID===this.__ownerID){return this;}if(!ownerID){this.__ownerID=ownerID;this.__altered=false;return this;}return makeMap(this.size,this._root,ownerID,this.__hash);};function isMap(maybeMap){return!!(maybeMap&&maybeMap[IS_MAP_SENTINEL]);}Map.isMap=isMap;var IS_MAP_SENTINEL='@@__IMMUTABLE_MAP__@@';var MapPrototype=Map.prototype;MapPrototype[IS_MAP_SENTINEL]=true;MapPrototype[DELETE]=MapPrototype.remove;MapPrototype.removeIn=MapPrototype.deleteIn;// #pragma Trie Nodes
	function ArrayMapNode(ownerID,entries){this.ownerID=ownerID;this.entries=entries;}ArrayMapNode.prototype.get=function(shift,keyHash,key,notSetValue){var entries=this.entries;for(var ii=0,len=entries.length;ii<len;ii++){if(is(key,entries[ii][0])){return entries[ii][1];}}return notSetValue;};ArrayMapNode.prototype.update=function(ownerID,shift,keyHash,key,value,didChangeSize,didAlter){var removed=value===NOT_SET;var entries=this.entries;var idx=0;for(var len=entries.length;idx<len;idx++){if(is(key,entries[idx][0])){break;}}var exists=idx<len;if(exists?entries[idx][1]===value:removed){return this;}SetRef(didAlter);(removed||!exists)&&SetRef(didChangeSize);if(removed&&entries.length===1){return;// undefined
	}if(!exists&&!removed&&entries.length>=MAX_ARRAY_MAP_SIZE){return createNodes(ownerID,entries,key,value);}var isEditable=ownerID&&ownerID===this.ownerID;var newEntries=isEditable?entries:arrCopy(entries);if(exists){if(removed){idx===len-1?newEntries.pop():newEntries[idx]=newEntries.pop();}else{newEntries[idx]=[key,value];}}else{newEntries.push([key,value]);}if(isEditable){this.entries=newEntries;return this;}return new ArrayMapNode(ownerID,newEntries);};function BitmapIndexedNode(ownerID,bitmap,nodes){this.ownerID=ownerID;this.bitmap=bitmap;this.nodes=nodes;}BitmapIndexedNode.prototype.get=function(shift,keyHash,key,notSetValue){if(keyHash===undefined){keyHash=hash(key);}var bit=1<<((shift===0?keyHash:keyHash>>>shift)&MASK);var bitmap=this.bitmap;return(bitmap&bit)===0?notSetValue:this.nodes[popCount(bitmap&bit-1)].get(shift+SHIFT,keyHash,key,notSetValue);};BitmapIndexedNode.prototype.update=function(ownerID,shift,keyHash,key,value,didChangeSize,didAlter){if(keyHash===undefined){keyHash=hash(key);}var keyHashFrag=(shift===0?keyHash:keyHash>>>shift)&MASK;var bit=1<<keyHashFrag;var bitmap=this.bitmap;var exists=(bitmap&bit)!==0;if(!exists&&value===NOT_SET){return this;}var idx=popCount(bitmap&bit-1);var nodes=this.nodes;var node=exists?nodes[idx]:undefined;var newNode=updateNode(node,ownerID,shift+SHIFT,keyHash,key,value,didChangeSize,didAlter);if(newNode===node){return this;}if(!exists&&newNode&&nodes.length>=MAX_BITMAP_INDEXED_SIZE){return expandNodes(ownerID,nodes,bitmap,keyHashFrag,newNode);}if(exists&&!newNode&&nodes.length===2&&isLeafNode(nodes[idx^1])){return nodes[idx^1];}if(exists&&newNode&&nodes.length===1&&isLeafNode(newNode)){return newNode;}var isEditable=ownerID&&ownerID===this.ownerID;var newBitmap=exists?newNode?bitmap:bitmap^bit:bitmap|bit;var newNodes=exists?newNode?setIn(nodes,idx,newNode,isEditable):spliceOut(nodes,idx,isEditable):spliceIn(nodes,idx,newNode,isEditable);if(isEditable){this.bitmap=newBitmap;this.nodes=newNodes;return this;}return new BitmapIndexedNode(ownerID,newBitmap,newNodes);};function HashArrayMapNode(ownerID,count,nodes){this.ownerID=ownerID;this.count=count;this.nodes=nodes;}HashArrayMapNode.prototype.get=function(shift,keyHash,key,notSetValue){if(keyHash===undefined){keyHash=hash(key);}var idx=(shift===0?keyHash:keyHash>>>shift)&MASK;var node=this.nodes[idx];return node?node.get(shift+SHIFT,keyHash,key,notSetValue):notSetValue;};HashArrayMapNode.prototype.update=function(ownerID,shift,keyHash,key,value,didChangeSize,didAlter){if(keyHash===undefined){keyHash=hash(key);}var idx=(shift===0?keyHash:keyHash>>>shift)&MASK;var removed=value===NOT_SET;var nodes=this.nodes;var node=nodes[idx];if(removed&&!node){return this;}var newNode=updateNode(node,ownerID,shift+SHIFT,keyHash,key,value,didChangeSize,didAlter);if(newNode===node){return this;}var newCount=this.count;if(!node){newCount++;}else if(!newNode){newCount--;if(newCount<MIN_HASH_ARRAY_MAP_SIZE){return packNodes(ownerID,nodes,newCount,idx);}}var isEditable=ownerID&&ownerID===this.ownerID;var newNodes=setIn(nodes,idx,newNode,isEditable);if(isEditable){this.count=newCount;this.nodes=newNodes;return this;}return new HashArrayMapNode(ownerID,newCount,newNodes);};function HashCollisionNode(ownerID,keyHash,entries){this.ownerID=ownerID;this.keyHash=keyHash;this.entries=entries;}HashCollisionNode.prototype.get=function(shift,keyHash,key,notSetValue){var entries=this.entries;for(var ii=0,len=entries.length;ii<len;ii++){if(is(key,entries[ii][0])){return entries[ii][1];}}return notSetValue;};HashCollisionNode.prototype.update=function(ownerID,shift,keyHash,key,value,didChangeSize,didAlter){if(keyHash===undefined){keyHash=hash(key);}var removed=value===NOT_SET;if(keyHash!==this.keyHash){if(removed){return this;}SetRef(didAlter);SetRef(didChangeSize);return mergeIntoNode(this,ownerID,shift,keyHash,[key,value]);}var entries=this.entries;var idx=0;for(var len=entries.length;idx<len;idx++){if(is(key,entries[idx][0])){break;}}var exists=idx<len;if(exists?entries[idx][1]===value:removed){return this;}SetRef(didAlter);(removed||!exists)&&SetRef(didChangeSize);if(removed&&len===2){return new ValueNode(ownerID,this.keyHash,entries[idx^1]);}var isEditable=ownerID&&ownerID===this.ownerID;var newEntries=isEditable?entries:arrCopy(entries);if(exists){if(removed){idx===len-1?newEntries.pop():newEntries[idx]=newEntries.pop();}else{newEntries[idx]=[key,value];}}else{newEntries.push([key,value]);}if(isEditable){this.entries=newEntries;return this;}return new HashCollisionNode(ownerID,this.keyHash,newEntries);};function ValueNode(ownerID,keyHash,entry){this.ownerID=ownerID;this.keyHash=keyHash;this.entry=entry;}ValueNode.prototype.get=function(shift,keyHash,key,notSetValue){return is(key,this.entry[0])?this.entry[1]:notSetValue;};ValueNode.prototype.update=function(ownerID,shift,keyHash,key,value,didChangeSize,didAlter){var removed=value===NOT_SET;var keyMatch=is(key,this.entry[0]);if(keyMatch?value===this.entry[1]:removed){return this;}SetRef(didAlter);if(removed){SetRef(didChangeSize);return;// undefined
	}if(keyMatch){if(ownerID&&ownerID===this.ownerID){this.entry[1]=value;return this;}return new ValueNode(ownerID,this.keyHash,[key,value]);}SetRef(didChangeSize);return mergeIntoNode(this,ownerID,shift,hash(key),[key,value]);};// #pragma Iterators
	ArrayMapNode.prototype.iterate=HashCollisionNode.prototype.iterate=function(fn,reverse){var entries=this.entries;for(var ii=0,maxIndex=entries.length-1;ii<=maxIndex;ii++){if(fn(entries[reverse?maxIndex-ii:ii])===false){return false;}}};BitmapIndexedNode.prototype.iterate=HashArrayMapNode.prototype.iterate=function(fn,reverse){var nodes=this.nodes;for(var ii=0,maxIndex=nodes.length-1;ii<=maxIndex;ii++){var node=nodes[reverse?maxIndex-ii:ii];if(node&&node.iterate(fn,reverse)===false){return false;}}};ValueNode.prototype.iterate=function(fn,reverse){return fn(this.entry);};createClass(MapIterator,Iterator);function MapIterator(map,type,reverse){this._type=type;this._reverse=reverse;this._stack=map._root&&mapIteratorFrame(map._root);}MapIterator.prototype.next=function(){var type=this._type;var stack=this._stack;while(stack){var node=stack.node;var index=stack.index++;var maxIndex;if(node.entry){if(index===0){return mapIteratorValue(type,node.entry);}}else if(node.entries){maxIndex=node.entries.length-1;if(index<=maxIndex){return mapIteratorValue(type,node.entries[this._reverse?maxIndex-index:index]);}}else{maxIndex=node.nodes.length-1;if(index<=maxIndex){var subNode=node.nodes[this._reverse?maxIndex-index:index];if(subNode){if(subNode.entry){return mapIteratorValue(type,subNode.entry);}stack=this._stack=mapIteratorFrame(subNode,stack);}continue;}}stack=this._stack=this._stack.__prev;}return iteratorDone();};function mapIteratorValue(type,entry){return iteratorValue(type,entry[0],entry[1]);}function mapIteratorFrame(node,prev){return{node:node,index:0,__prev:prev};}function makeMap(size,root,ownerID,hash){var map=(0,_create2.default)(MapPrototype);map.size=size;map._root=root;map.__ownerID=ownerID;map.__hash=hash;map.__altered=false;return map;}var EMPTY_MAP;function emptyMap(){return EMPTY_MAP||(EMPTY_MAP=makeMap(0));}function updateMap(map,k,v){var newRoot;var newSize;if(!map._root){if(v===NOT_SET){return map;}newSize=1;newRoot=new ArrayMapNode(map.__ownerID,[[k,v]]);}else{var didChangeSize=MakeRef(CHANGE_LENGTH);var didAlter=MakeRef(DID_ALTER);newRoot=updateNode(map._root,map.__ownerID,0,undefined,k,v,didChangeSize,didAlter);if(!didAlter.value){return map;}newSize=map.size+(didChangeSize.value?v===NOT_SET?-1:1:0);}if(map.__ownerID){map.size=newSize;map._root=newRoot;map.__hash=undefined;map.__altered=true;return map;}return newRoot?makeMap(newSize,newRoot):emptyMap();}function updateNode(node,ownerID,shift,keyHash,key,value,didChangeSize,didAlter){if(!node){if(value===NOT_SET){return node;}SetRef(didAlter);SetRef(didChangeSize);return new ValueNode(ownerID,keyHash,[key,value]);}return node.update(ownerID,shift,keyHash,key,value,didChangeSize,didAlter);}function isLeafNode(node){return node.constructor===ValueNode||node.constructor===HashCollisionNode;}function mergeIntoNode(node,ownerID,shift,keyHash,entry){if(node.keyHash===keyHash){return new HashCollisionNode(ownerID,keyHash,[node.entry,entry]);}var idx1=(shift===0?node.keyHash:node.keyHash>>>shift)&MASK;var idx2=(shift===0?keyHash:keyHash>>>shift)&MASK;var newNode;var nodes=idx1===idx2?[mergeIntoNode(node,ownerID,shift+SHIFT,keyHash,entry)]:(newNode=new ValueNode(ownerID,keyHash,entry),idx1<idx2?[node,newNode]:[newNode,node]);return new BitmapIndexedNode(ownerID,1<<idx1|1<<idx2,nodes);}function createNodes(ownerID,entries,key,value){if(!ownerID){ownerID=new OwnerID();}var node=new ValueNode(ownerID,hash(key),[key,value]);for(var ii=0;ii<entries.length;ii++){var entry=entries[ii];node=node.update(ownerID,0,undefined,entry[0],entry[1]);}return node;}function packNodes(ownerID,nodes,count,excluding){var bitmap=0;var packedII=0;var packedNodes=new Array(count);for(var ii=0,bit=1,len=nodes.length;ii<len;ii++,bit<<=1){var node=nodes[ii];if(node!==undefined&&ii!==excluding){bitmap|=bit;packedNodes[packedII++]=node;}}return new BitmapIndexedNode(ownerID,bitmap,packedNodes);}function expandNodes(ownerID,nodes,bitmap,including,node){var count=0;var expandedNodes=new Array(SIZE);for(var ii=0;bitmap!==0;ii++,bitmap>>>=1){expandedNodes[ii]=bitmap&1?nodes[count++]:undefined;}expandedNodes[including]=node;return new HashArrayMapNode(ownerID,count+1,expandedNodes);}function mergeIntoMapWith(map,merger,iterables){var iters=[];for(var ii=0;ii<iterables.length;ii++){var value=iterables[ii];var iter=KeyedIterable(value);if(!isIterable(value)){iter=iter.map(function(v){return fromJS(v);});}iters.push(iter);}return mergeIntoCollectionWith(map,merger,iters);}function deepMerger(existing,value,key){return existing&&existing.mergeDeep&&isIterable(value)?existing.mergeDeep(value):is(existing,value)?existing:value;}function deepMergerWith(merger){return function(existing,value,key){if(existing&&existing.mergeDeepWith&&isIterable(value)){return existing.mergeDeepWith(merger,value);}var nextValue=merger(existing,value,key);return is(existing,nextValue)?existing:nextValue;};}function mergeIntoCollectionWith(collection,merger,iters){iters=iters.filter(function(x){return x.size!==0;});if(iters.length===0){return collection;}if(collection.size===0&&!collection.__ownerID&&iters.length===1){return collection.constructor(iters[0]);}return collection.withMutations(function(collection){var mergeIntoMap=merger?function(value,key){collection.update(key,NOT_SET,function(existing){return existing===NOT_SET?value:merger(existing,value,key);});}:function(value,key){collection.set(key,value);};for(var ii=0;ii<iters.length;ii++){iters[ii].forEach(mergeIntoMap);}});}function updateInDeepMap(existing,keyPathIter,notSetValue,updater){var isNotSet=existing===NOT_SET;var step=keyPathIter.next();if(step.done){var existingValue=isNotSet?notSetValue:existing;var newValue=updater(existingValue);return newValue===existingValue?existing:newValue;}invariant(isNotSet||existing&&existing.set,'invalid keyPath');var key=step.value;var nextExisting=isNotSet?NOT_SET:existing.get(key,NOT_SET);var nextUpdated=updateInDeepMap(nextExisting,keyPathIter,notSetValue,updater);return nextUpdated===nextExisting?existing:nextUpdated===NOT_SET?existing.remove(key):(isNotSet?emptyMap():existing).set(key,nextUpdated);}function popCount(x){x=x-(x>>1&0x55555555);x=(x&0x33333333)+(x>>2&0x33333333);x=x+(x>>4)&0x0f0f0f0f;x=x+(x>>8);x=x+(x>>16);return x&0x7f;}function setIn(array,idx,val,canEdit){var newArray=canEdit?array:arrCopy(array);newArray[idx]=val;return newArray;}function spliceIn(array,idx,val,canEdit){var newLen=array.length+1;if(canEdit&&idx+1===newLen){array[idx]=val;return array;}var newArray=new Array(newLen);var after=0;for(var ii=0;ii<newLen;ii++){if(ii===idx){newArray[ii]=val;after=-1;}else{newArray[ii]=array[ii+after];}}return newArray;}function spliceOut(array,idx,canEdit){var newLen=array.length-1;if(canEdit&&idx===newLen){array.pop();return array;}var newArray=new Array(newLen);var after=0;for(var ii=0;ii<newLen;ii++){if(ii===idx){after=1;}newArray[ii]=array[ii+after];}return newArray;}var MAX_ARRAY_MAP_SIZE=SIZE/4;var MAX_BITMAP_INDEXED_SIZE=SIZE/2;var MIN_HASH_ARRAY_MAP_SIZE=SIZE/4;createClass(List,IndexedCollection);// @pragma Construction
	function List(value){var empty=emptyList();if(value===null||value===undefined){return empty;}if(isList(value)){return value;}var iter=IndexedIterable(value);var size=iter.size;if(size===0){return empty;}assertNotInfinite(size);if(size>0&&size<SIZE){return makeList(0,size,SHIFT,null,new VNode(iter.toArray()));}return empty.withMutations(function(list){list.setSize(size);iter.forEach(function(v,i){return list.set(i,v);});});}List.of=function()/*...values*/{return this(arguments);};List.prototype.toString=function(){return this.__toString('List [',']');};// @pragma Access
	List.prototype.get=function(index,notSetValue){index=wrapIndex(this,index);if(index>=0&&index<this.size){index+=this._origin;var node=listNodeFor(this,index);return node&&node.array[index&MASK];}return notSetValue;};// @pragma Modification
	List.prototype.set=function(index,value){return updateList(this,index,value);};List.prototype.remove=function(index){return!this.has(index)?this:index===0?this.shift():index===this.size-1?this.pop():this.splice(index,1);};List.prototype.insert=function(index,value){return this.splice(index,0,value);};List.prototype.clear=function(){if(this.size===0){return this;}if(this.__ownerID){this.size=this._origin=this._capacity=0;this._level=SHIFT;this._root=this._tail=null;this.__hash=undefined;this.__altered=true;return this;}return emptyList();};List.prototype.push=function()/*...values*/{var values=arguments;var oldSize=this.size;return this.withMutations(function(list){setListBounds(list,0,oldSize+values.length);for(var ii=0;ii<values.length;ii++){list.set(oldSize+ii,values[ii]);}});};List.prototype.pop=function(){return setListBounds(this,0,-1);};List.prototype.unshift=function()/*...values*/{var values=arguments;return this.withMutations(function(list){setListBounds(list,-values.length);for(var ii=0;ii<values.length;ii++){list.set(ii,values[ii]);}});};List.prototype.shift=function(){return setListBounds(this,1);};// @pragma Composition
	List.prototype.merge=function()/*...iters*/{return mergeIntoListWith(this,undefined,arguments);};List.prototype.mergeWith=function(merger){var iters=SLICE$0.call(arguments,1);return mergeIntoListWith(this,merger,iters);};List.prototype.mergeDeep=function()/*...iters*/{return mergeIntoListWith(this,deepMerger,arguments);};List.prototype.mergeDeepWith=function(merger){var iters=SLICE$0.call(arguments,1);return mergeIntoListWith(this,deepMergerWith(merger),iters);};List.prototype.setSize=function(size){return setListBounds(this,0,size);};// @pragma Iteration
	List.prototype.slice=function(begin,end){var size=this.size;if(wholeSlice(begin,end,size)){return this;}return setListBounds(this,resolveBegin(begin,size),resolveEnd(end,size));};List.prototype.__iterator=function(type,reverse){var index=0;var values=iterateList(this,reverse);return new Iterator(function(){var value=values();return value===DONE?iteratorDone():iteratorValue(type,index++,value);});};List.prototype.__iterate=function(fn,reverse){var index=0;var values=iterateList(this,reverse);var value;while((value=values())!==DONE){if(fn(value,index++,this)===false){break;}}return index;};List.prototype.__ensureOwner=function(ownerID){if(ownerID===this.__ownerID){return this;}if(!ownerID){this.__ownerID=ownerID;return this;}return makeList(this._origin,this._capacity,this._level,this._root,this._tail,ownerID,this.__hash);};function isList(maybeList){return!!(maybeList&&maybeList[IS_LIST_SENTINEL]);}List.isList=isList;var IS_LIST_SENTINEL='@@__IMMUTABLE_LIST__@@';var ListPrototype=List.prototype;ListPrototype[IS_LIST_SENTINEL]=true;ListPrototype[DELETE]=ListPrototype.remove;ListPrototype.setIn=MapPrototype.setIn;ListPrototype.deleteIn=ListPrototype.removeIn=MapPrototype.removeIn;ListPrototype.update=MapPrototype.update;ListPrototype.updateIn=MapPrototype.updateIn;ListPrototype.mergeIn=MapPrototype.mergeIn;ListPrototype.mergeDeepIn=MapPrototype.mergeDeepIn;ListPrototype.withMutations=MapPrototype.withMutations;ListPrototype.asMutable=MapPrototype.asMutable;ListPrototype.asImmutable=MapPrototype.asImmutable;ListPrototype.wasAltered=MapPrototype.wasAltered;function VNode(array,ownerID){this.array=array;this.ownerID=ownerID;}// TODO: seems like these methods are very similar
	VNode.prototype.removeBefore=function(ownerID,level,index){if(index===level?1<<level:0||this.array.length===0){return this;}var originIndex=index>>>level&MASK;if(originIndex>=this.array.length){return new VNode([],ownerID);}var removingFirst=originIndex===0;var newChild;if(level>0){var oldChild=this.array[originIndex];newChild=oldChild&&oldChild.removeBefore(ownerID,level-SHIFT,index);if(newChild===oldChild&&removingFirst){return this;}}if(removingFirst&&!newChild){return this;}var editable=editableVNode(this,ownerID);if(!removingFirst){for(var ii=0;ii<originIndex;ii++){editable.array[ii]=undefined;}}if(newChild){editable.array[originIndex]=newChild;}return editable;};VNode.prototype.removeAfter=function(ownerID,level,index){if(index===(level?1<<level:0)||this.array.length===0){return this;}var sizeIndex=index-1>>>level&MASK;if(sizeIndex>=this.array.length){return this;}var newChild;if(level>0){var oldChild=this.array[sizeIndex];newChild=oldChild&&oldChild.removeAfter(ownerID,level-SHIFT,index);if(newChild===oldChild&&sizeIndex===this.array.length-1){return this;}}var editable=editableVNode(this,ownerID);editable.array.splice(sizeIndex+1);if(newChild){editable.array[sizeIndex]=newChild;}return editable;};var DONE={};function iterateList(list,reverse){var left=list._origin;var right=list._capacity;var tailPos=getTailOffset(right);var tail=list._tail;return iterateNodeOrLeaf(list._root,list._level,0);function iterateNodeOrLeaf(node,level,offset){return level===0?iterateLeaf(node,offset):iterateNode(node,level,offset);}function iterateLeaf(node,offset){var array=offset===tailPos?tail&&tail.array:node&&node.array;var from=offset>left?0:left-offset;var to=right-offset;if(to>SIZE){to=SIZE;}return function(){if(from===to){return DONE;}var idx=reverse?--to:from++;return array&&array[idx];};}function iterateNode(node,level,offset){var values;var array=node&&node.array;var from=offset>left?0:left-offset>>level;var to=(right-offset>>level)+1;if(to>SIZE){to=SIZE;}return function(){do{if(values){var value=values();if(value!==DONE){return value;}values=null;}if(from===to){return DONE;}var idx=reverse?--to:from++;values=iterateNodeOrLeaf(array&&array[idx],level-SHIFT,offset+(idx<<level));}while(true);};}}function makeList(origin,capacity,level,root,tail,ownerID,hash){var list=(0,_create2.default)(ListPrototype);list.size=capacity-origin;list._origin=origin;list._capacity=capacity;list._level=level;list._root=root;list._tail=tail;list.__ownerID=ownerID;list.__hash=hash;list.__altered=false;return list;}var EMPTY_LIST;function emptyList(){return EMPTY_LIST||(EMPTY_LIST=makeList(0,0,SHIFT));}function updateList(list,index,value){index=wrapIndex(list,index);if(index!==index){return list;}if(index>=list.size||index<0){return list.withMutations(function(list){index<0?setListBounds(list,index).set(0,value):setListBounds(list,0,index+1).set(index,value);});}index+=list._origin;var newTail=list._tail;var newRoot=list._root;var didAlter=MakeRef(DID_ALTER);if(index>=getTailOffset(list._capacity)){newTail=updateVNode(newTail,list.__ownerID,0,index,value,didAlter);}else{newRoot=updateVNode(newRoot,list.__ownerID,list._level,index,value,didAlter);}if(!didAlter.value){return list;}if(list.__ownerID){list._root=newRoot;list._tail=newTail;list.__hash=undefined;list.__altered=true;return list;}return makeList(list._origin,list._capacity,list._level,newRoot,newTail);}function updateVNode(node,ownerID,level,index,value,didAlter){var idx=index>>>level&MASK;var nodeHas=node&&idx<node.array.length;if(!nodeHas&&value===undefined){return node;}var newNode;if(level>0){var lowerNode=node&&node.array[idx];var newLowerNode=updateVNode(lowerNode,ownerID,level-SHIFT,index,value,didAlter);if(newLowerNode===lowerNode){return node;}newNode=editableVNode(node,ownerID);newNode.array[idx]=newLowerNode;return newNode;}if(nodeHas&&node.array[idx]===value){return node;}SetRef(didAlter);newNode=editableVNode(node,ownerID);if(value===undefined&&idx===newNode.array.length-1){newNode.array.pop();}else{newNode.array[idx]=value;}return newNode;}function editableVNode(node,ownerID){if(ownerID&&node&&ownerID===node.ownerID){return node;}return new VNode(node?node.array.slice():[],ownerID);}function listNodeFor(list,rawIndex){if(rawIndex>=getTailOffset(list._capacity)){return list._tail;}if(rawIndex<1<<list._level+SHIFT){var node=list._root;var level=list._level;while(node&&level>0){node=node.array[rawIndex>>>level&MASK];level-=SHIFT;}return node;}}function setListBounds(list,begin,end){// Sanitize begin & end using this shorthand for ToInt32(argument)
	// http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
	if(begin!==undefined){begin=begin|0;}if(end!==undefined){end=end|0;}var owner=list.__ownerID||new OwnerID();var oldOrigin=list._origin;var oldCapacity=list._capacity;var newOrigin=oldOrigin+begin;var newCapacity=end===undefined?oldCapacity:end<0?oldCapacity+end:oldOrigin+end;if(newOrigin===oldOrigin&&newCapacity===oldCapacity){return list;}// If it's going to end after it starts, it's empty.
	if(newOrigin>=newCapacity){return list.clear();}var newLevel=list._level;var newRoot=list._root;// New origin might need creating a higher root.
	var offsetShift=0;while(newOrigin+offsetShift<0){newRoot=new VNode(newRoot&&newRoot.array.length?[undefined,newRoot]:[],owner);newLevel+=SHIFT;offsetShift+=1<<newLevel;}if(offsetShift){newOrigin+=offsetShift;oldOrigin+=offsetShift;newCapacity+=offsetShift;oldCapacity+=offsetShift;}var oldTailOffset=getTailOffset(oldCapacity);var newTailOffset=getTailOffset(newCapacity);// New size might need creating a higher root.
	while(newTailOffset>=1<<newLevel+SHIFT){newRoot=new VNode(newRoot&&newRoot.array.length?[newRoot]:[],owner);newLevel+=SHIFT;}// Locate or create the new tail.
	var oldTail=list._tail;var newTail=newTailOffset<oldTailOffset?listNodeFor(list,newCapacity-1):newTailOffset>oldTailOffset?new VNode([],owner):oldTail;// Merge Tail into tree.
	if(oldTail&&newTailOffset>oldTailOffset&&newOrigin<oldCapacity&&oldTail.array.length){newRoot=editableVNode(newRoot,owner);var node=newRoot;for(var level=newLevel;level>SHIFT;level-=SHIFT){var idx=oldTailOffset>>>level&MASK;node=node.array[idx]=editableVNode(node.array[idx],owner);}node.array[oldTailOffset>>>SHIFT&MASK]=oldTail;}// If the size has been reduced, there's a chance the tail needs to be trimmed.
	if(newCapacity<oldCapacity){newTail=newTail&&newTail.removeAfter(owner,0,newCapacity);}// If the new origin is within the tail, then we do not need a root.
	if(newOrigin>=newTailOffset){newOrigin-=newTailOffset;newCapacity-=newTailOffset;newLevel=SHIFT;newRoot=null;newTail=newTail&&newTail.removeBefore(owner,0,newOrigin);// Otherwise, if the root has been trimmed, garbage collect.
	}else if(newOrigin>oldOrigin||newTailOffset<oldTailOffset){offsetShift=0;// Identify the new top root node of the subtree of the old root.
	while(newRoot){var beginIndex=newOrigin>>>newLevel&MASK;if(beginIndex!==newTailOffset>>>newLevel&MASK){break;}if(beginIndex){offsetShift+=(1<<newLevel)*beginIndex;}newLevel-=SHIFT;newRoot=newRoot.array[beginIndex];}// Trim the new sides of the new root.
	if(newRoot&&newOrigin>oldOrigin){newRoot=newRoot.removeBefore(owner,newLevel,newOrigin-offsetShift);}if(newRoot&&newTailOffset<oldTailOffset){newRoot=newRoot.removeAfter(owner,newLevel,newTailOffset-offsetShift);}if(offsetShift){newOrigin-=offsetShift;newCapacity-=offsetShift;}}if(list.__ownerID){list.size=newCapacity-newOrigin;list._origin=newOrigin;list._capacity=newCapacity;list._level=newLevel;list._root=newRoot;list._tail=newTail;list.__hash=undefined;list.__altered=true;return list;}return makeList(newOrigin,newCapacity,newLevel,newRoot,newTail);}function mergeIntoListWith(list,merger,iterables){var iters=[];var maxSize=0;for(var ii=0;ii<iterables.length;ii++){var value=iterables[ii];var iter=IndexedIterable(value);if(iter.size>maxSize){maxSize=iter.size;}if(!isIterable(value)){iter=iter.map(function(v){return fromJS(v);});}iters.push(iter);}if(maxSize>list.size){list=list.setSize(maxSize);}return mergeIntoCollectionWith(list,merger,iters);}function getTailOffset(size){return size<SIZE?0:size-1>>>SHIFT<<SHIFT;}createClass(OrderedMap,Map);// @pragma Construction
	function OrderedMap(value){return value===null||value===undefined?emptyOrderedMap():isOrderedMap(value)?value:emptyOrderedMap().withMutations(function(map){var iter=KeyedIterable(value);assertNotInfinite(iter.size);iter.forEach(function(v,k){return map.set(k,v);});});}OrderedMap.of=function()/*...values*/{return this(arguments);};OrderedMap.prototype.toString=function(){return this.__toString('OrderedMap {','}');};// @pragma Access
	OrderedMap.prototype.get=function(k,notSetValue){var index=this._map.get(k);return index!==undefined?this._list.get(index)[1]:notSetValue;};// @pragma Modification
	OrderedMap.prototype.clear=function(){if(this.size===0){return this;}if(this.__ownerID){this.size=0;this._map.clear();this._list.clear();return this;}return emptyOrderedMap();};OrderedMap.prototype.set=function(k,v){return updateOrderedMap(this,k,v);};OrderedMap.prototype.remove=function(k){return updateOrderedMap(this,k,NOT_SET);};OrderedMap.prototype.wasAltered=function(){return this._map.wasAltered()||this._list.wasAltered();};OrderedMap.prototype.__iterate=function(fn,reverse){var this$0=this;return this._list.__iterate(function(entry){return entry&&fn(entry[1],entry[0],this$0);},reverse);};OrderedMap.prototype.__iterator=function(type,reverse){return this._list.fromEntrySeq().__iterator(type,reverse);};OrderedMap.prototype.__ensureOwner=function(ownerID){if(ownerID===this.__ownerID){return this;}var newMap=this._map.__ensureOwner(ownerID);var newList=this._list.__ensureOwner(ownerID);if(!ownerID){this.__ownerID=ownerID;this._map=newMap;this._list=newList;return this;}return makeOrderedMap(newMap,newList,ownerID,this.__hash);};function isOrderedMap(maybeOrderedMap){return isMap(maybeOrderedMap)&&isOrdered(maybeOrderedMap);}OrderedMap.isOrderedMap=isOrderedMap;OrderedMap.prototype[IS_ORDERED_SENTINEL]=true;OrderedMap.prototype[DELETE]=OrderedMap.prototype.remove;function makeOrderedMap(map,list,ownerID,hash){var omap=(0,_create2.default)(OrderedMap.prototype);omap.size=map?map.size:0;omap._map=map;omap._list=list;omap.__ownerID=ownerID;omap.__hash=hash;return omap;}var EMPTY_ORDERED_MAP;function emptyOrderedMap(){return EMPTY_ORDERED_MAP||(EMPTY_ORDERED_MAP=makeOrderedMap(emptyMap(),emptyList()));}function updateOrderedMap(omap,k,v){var map=omap._map;var list=omap._list;var i=map.get(k);var has=i!==undefined;var newMap;var newList;if(v===NOT_SET){// removed
	if(!has){return omap;}if(list.size>=SIZE&&list.size>=map.size*2){newList=list.filter(function(entry,idx){return entry!==undefined&&i!==idx;});newMap=newList.toKeyedSeq().map(function(entry){return entry[0];}).flip().toMap();if(omap.__ownerID){newMap.__ownerID=newList.__ownerID=omap.__ownerID;}}else{newMap=map.remove(k);newList=i===list.size-1?list.pop():list.set(i,undefined);}}else{if(has){if(v===list.get(i)[1]){return omap;}newMap=map;newList=list.set(i,[k,v]);}else{newMap=map.set(k,list.size);newList=list.set(list.size,[k,v]);}}if(omap.__ownerID){omap.size=newMap.size;omap._map=newMap;omap._list=newList;omap.__hash=undefined;return omap;}return makeOrderedMap(newMap,newList);}createClass(ToKeyedSequence,KeyedSeq);function ToKeyedSequence(indexed,useKeys){this._iter=indexed;this._useKeys=useKeys;this.size=indexed.size;}ToKeyedSequence.prototype.get=function(key,notSetValue){return this._iter.get(key,notSetValue);};ToKeyedSequence.prototype.has=function(key){return this._iter.has(key);};ToKeyedSequence.prototype.valueSeq=function(){return this._iter.valueSeq();};ToKeyedSequence.prototype.reverse=function(){var this$0=this;var reversedSequence=reverseFactory(this,true);if(!this._useKeys){reversedSequence.valueSeq=function(){return this$0._iter.toSeq().reverse();};}return reversedSequence;};ToKeyedSequence.prototype.map=function(mapper,context){var this$0=this;var mappedSequence=mapFactory(this,mapper,context);if(!this._useKeys){mappedSequence.valueSeq=function(){return this$0._iter.toSeq().map(mapper,context);};}return mappedSequence;};ToKeyedSequence.prototype.__iterate=function(fn,reverse){var this$0=this;var ii;return this._iter.__iterate(this._useKeys?function(v,k){return fn(v,k,this$0);}:(ii=reverse?resolveSize(this):0,function(v){return fn(v,reverse?--ii:ii++,this$0);}),reverse);};ToKeyedSequence.prototype.__iterator=function(type,reverse){if(this._useKeys){return this._iter.__iterator(type,reverse);}var iterator=this._iter.__iterator(ITERATE_VALUES,reverse);var ii=reverse?resolveSize(this):0;return new Iterator(function(){var step=iterator.next();return step.done?step:iteratorValue(type,reverse?--ii:ii++,step.value,step);});};ToKeyedSequence.prototype[IS_ORDERED_SENTINEL]=true;createClass(ToIndexedSequence,IndexedSeq);function ToIndexedSequence(iter){this._iter=iter;this.size=iter.size;}ToIndexedSequence.prototype.includes=function(value){return this._iter.includes(value);};ToIndexedSequence.prototype.__iterate=function(fn,reverse){var this$0=this;var iterations=0;return this._iter.__iterate(function(v){return fn(v,iterations++,this$0);},reverse);};ToIndexedSequence.prototype.__iterator=function(type,reverse){var iterator=this._iter.__iterator(ITERATE_VALUES,reverse);var iterations=0;return new Iterator(function(){var step=iterator.next();return step.done?step:iteratorValue(type,iterations++,step.value,step);});};createClass(ToSetSequence,SetSeq);function ToSetSequence(iter){this._iter=iter;this.size=iter.size;}ToSetSequence.prototype.has=function(key){return this._iter.includes(key);};ToSetSequence.prototype.__iterate=function(fn,reverse){var this$0=this;return this._iter.__iterate(function(v){return fn(v,v,this$0);},reverse);};ToSetSequence.prototype.__iterator=function(type,reverse){var iterator=this._iter.__iterator(ITERATE_VALUES,reverse);return new Iterator(function(){var step=iterator.next();return step.done?step:iteratorValue(type,step.value,step.value,step);});};createClass(FromEntriesSequence,KeyedSeq);function FromEntriesSequence(entries){this._iter=entries;this.size=entries.size;}FromEntriesSequence.prototype.entrySeq=function(){return this._iter.toSeq();};FromEntriesSequence.prototype.__iterate=function(fn,reverse){var this$0=this;return this._iter.__iterate(function(entry){// Check if entry exists first so array access doesn't throw for holes
	// in the parent iteration.
	if(entry){validateEntry(entry);var indexedIterable=isIterable(entry);return fn(indexedIterable?entry.get(1):entry[1],indexedIterable?entry.get(0):entry[0],this$0);}},reverse);};FromEntriesSequence.prototype.__iterator=function(type,reverse){var iterator=this._iter.__iterator(ITERATE_VALUES,reverse);return new Iterator(function(){while(true){var step=iterator.next();if(step.done){return step;}var entry=step.value;// Check if entry exists first so array access doesn't throw for holes
	// in the parent iteration.
	if(entry){validateEntry(entry);var indexedIterable=isIterable(entry);return iteratorValue(type,indexedIterable?entry.get(0):entry[0],indexedIterable?entry.get(1):entry[1],step);}}});};ToIndexedSequence.prototype.cacheResult=ToKeyedSequence.prototype.cacheResult=ToSetSequence.prototype.cacheResult=FromEntriesSequence.prototype.cacheResult=cacheResultThrough;function flipFactory(iterable){var flipSequence=makeSequence(iterable);flipSequence._iter=iterable;flipSequence.size=iterable.size;flipSequence.flip=function(){return iterable;};flipSequence.reverse=function(){var reversedSequence=iterable.reverse.apply(this);// super.reverse()
	reversedSequence.flip=function(){return iterable.reverse();};return reversedSequence;};flipSequence.has=function(key){return iterable.includes(key);};flipSequence.includes=function(key){return iterable.has(key);};flipSequence.cacheResult=cacheResultThrough;flipSequence.__iterateUncached=function(fn,reverse){var this$0=this;return iterable.__iterate(function(v,k){return fn(k,v,this$0)!==false;},reverse);};flipSequence.__iteratorUncached=function(type,reverse){if(type===ITERATE_ENTRIES){var iterator=iterable.__iterator(type,reverse);return new Iterator(function(){var step=iterator.next();if(!step.done){var k=step.value[0];step.value[0]=step.value[1];step.value[1]=k;}return step;});}return iterable.__iterator(type===ITERATE_VALUES?ITERATE_KEYS:ITERATE_VALUES,reverse);};return flipSequence;}function mapFactory(iterable,mapper,context){var mappedSequence=makeSequence(iterable);mappedSequence.size=iterable.size;mappedSequence.has=function(key){return iterable.has(key);};mappedSequence.get=function(key,notSetValue){var v=iterable.get(key,NOT_SET);return v===NOT_SET?notSetValue:mapper.call(context,v,key,iterable);};mappedSequence.__iterateUncached=function(fn,reverse){var this$0=this;return iterable.__iterate(function(v,k,c){return fn(mapper.call(context,v,k,c),k,this$0)!==false;},reverse);};mappedSequence.__iteratorUncached=function(type,reverse){var iterator=iterable.__iterator(ITERATE_ENTRIES,reverse);return new Iterator(function(){var step=iterator.next();if(step.done){return step;}var entry=step.value;var key=entry[0];return iteratorValue(type,key,mapper.call(context,entry[1],key,iterable),step);});};return mappedSequence;}function reverseFactory(iterable,useKeys){var reversedSequence=makeSequence(iterable);reversedSequence._iter=iterable;reversedSequence.size=iterable.size;reversedSequence.reverse=function(){return iterable;};if(iterable.flip){reversedSequence.flip=function(){var flipSequence=flipFactory(iterable);flipSequence.reverse=function(){return iterable.flip();};return flipSequence;};}reversedSequence.get=function(key,notSetValue){return iterable.get(useKeys?key:-1-key,notSetValue);};reversedSequence.has=function(key){return iterable.has(useKeys?key:-1-key);};reversedSequence.includes=function(value){return iterable.includes(value);};reversedSequence.cacheResult=cacheResultThrough;reversedSequence.__iterate=function(fn,reverse){var this$0=this;return iterable.__iterate(function(v,k){return fn(v,k,this$0);},!reverse);};reversedSequence.__iterator=function(type,reverse){return iterable.__iterator(type,!reverse);};return reversedSequence;}function filterFactory(iterable,predicate,context,useKeys){var filterSequence=makeSequence(iterable);if(useKeys){filterSequence.has=function(key){var v=iterable.get(key,NOT_SET);return v!==NOT_SET&&!!predicate.call(context,v,key,iterable);};filterSequence.get=function(key,notSetValue){var v=iterable.get(key,NOT_SET);return v!==NOT_SET&&predicate.call(context,v,key,iterable)?v:notSetValue;};}filterSequence.__iterateUncached=function(fn,reverse){var this$0=this;var iterations=0;iterable.__iterate(function(v,k,c){if(predicate.call(context,v,k,c)){iterations++;return fn(v,useKeys?k:iterations-1,this$0);}},reverse);return iterations;};filterSequence.__iteratorUncached=function(type,reverse){var iterator=iterable.__iterator(ITERATE_ENTRIES,reverse);var iterations=0;return new Iterator(function(){while(true){var step=iterator.next();if(step.done){return step;}var entry=step.value;var key=entry[0];var value=entry[1];if(predicate.call(context,value,key,iterable)){return iteratorValue(type,useKeys?key:iterations++,value,step);}}});};return filterSequence;}function countByFactory(iterable,grouper,context){var groups=Map().asMutable();iterable.__iterate(function(v,k){groups.update(grouper.call(context,v,k,iterable),0,function(a){return a+1;});});return groups.asImmutable();}function groupByFactory(iterable,grouper,context){var isKeyedIter=isKeyed(iterable);var groups=(isOrdered(iterable)?OrderedMap():Map()).asMutable();iterable.__iterate(function(v,k){groups.update(grouper.call(context,v,k,iterable),function(a){return a=a||[],a.push(isKeyedIter?[k,v]:v),a;});});var coerce=iterableClass(iterable);return groups.map(function(arr){return reify(iterable,coerce(arr));});}function sliceFactory(iterable,begin,end,useKeys){var originalSize=iterable.size;// Sanitize begin & end using this shorthand for ToInt32(argument)
	// http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
	if(begin!==undefined){begin=begin|0;}if(end!==undefined){if(end===Infinity){end=originalSize;}else{end=end|0;}}if(wholeSlice(begin,end,originalSize)){return iterable;}var resolvedBegin=resolveBegin(begin,originalSize);var resolvedEnd=resolveEnd(end,originalSize);// begin or end will be NaN if they were provided as negative numbers and
	// this iterable's size is unknown. In that case, cache first so there is
	// a known size and these do not resolve to NaN.
	if(resolvedBegin!==resolvedBegin||resolvedEnd!==resolvedEnd){return sliceFactory(iterable.toSeq().cacheResult(),begin,end,useKeys);}// Note: resolvedEnd is undefined when the original sequence's length is
	// unknown and this slice did not supply an end and should contain all
	// elements after resolvedBegin.
	// In that case, resolvedSize will be NaN and sliceSize will remain undefined.
	var resolvedSize=resolvedEnd-resolvedBegin;var sliceSize;if(resolvedSize===resolvedSize){sliceSize=resolvedSize<0?0:resolvedSize;}var sliceSeq=makeSequence(iterable);// If iterable.size is undefined, the size of the realized sliceSeq is
	// unknown at this point unless the number of items to slice is 0
	sliceSeq.size=sliceSize===0?sliceSize:iterable.size&&sliceSize||undefined;if(!useKeys&&isSeq(iterable)&&sliceSize>=0){sliceSeq.get=function(index,notSetValue){index=wrapIndex(this,index);return index>=0&&index<sliceSize?iterable.get(index+resolvedBegin,notSetValue):notSetValue;};}sliceSeq.__iterateUncached=function(fn,reverse){var this$0=this;if(sliceSize===0){return 0;}if(reverse){return this.cacheResult().__iterate(fn,reverse);}var skipped=0;var isSkipping=true;var iterations=0;iterable.__iterate(function(v,k){if(!(isSkipping&&(isSkipping=skipped++<resolvedBegin))){iterations++;return fn(v,useKeys?k:iterations-1,this$0)!==false&&iterations!==sliceSize;}});return iterations;};sliceSeq.__iteratorUncached=function(type,reverse){if(sliceSize!==0&&reverse){return this.cacheResult().__iterator(type,reverse);}// Don't bother instantiating parent iterator if taking 0.
	var iterator=sliceSize!==0&&iterable.__iterator(type,reverse);var skipped=0;var iterations=0;return new Iterator(function(){while(skipped++<resolvedBegin){iterator.next();}if(++iterations>sliceSize){return iteratorDone();}var step=iterator.next();if(useKeys||type===ITERATE_VALUES){return step;}else if(type===ITERATE_KEYS){return iteratorValue(type,iterations-1,undefined,step);}else{return iteratorValue(type,iterations-1,step.value[1],step);}});};return sliceSeq;}function takeWhileFactory(iterable,predicate,context){var takeSequence=makeSequence(iterable);takeSequence.__iterateUncached=function(fn,reverse){var this$0=this;if(reverse){return this.cacheResult().__iterate(fn,reverse);}var iterations=0;iterable.__iterate(function(v,k,c){return predicate.call(context,v,k,c)&&++iterations&&fn(v,k,this$0);});return iterations;};takeSequence.__iteratorUncached=function(type,reverse){var this$0=this;if(reverse){return this.cacheResult().__iterator(type,reverse);}var iterator=iterable.__iterator(ITERATE_ENTRIES,reverse);var iterating=true;return new Iterator(function(){if(!iterating){return iteratorDone();}var step=iterator.next();if(step.done){return step;}var entry=step.value;var k=entry[0];var v=entry[1];if(!predicate.call(context,v,k,this$0)){iterating=false;return iteratorDone();}return type===ITERATE_ENTRIES?step:iteratorValue(type,k,v,step);});};return takeSequence;}function skipWhileFactory(iterable,predicate,context,useKeys){var skipSequence=makeSequence(iterable);skipSequence.__iterateUncached=function(fn,reverse){var this$0=this;if(reverse){return this.cacheResult().__iterate(fn,reverse);}var isSkipping=true;var iterations=0;iterable.__iterate(function(v,k,c){if(!(isSkipping&&(isSkipping=predicate.call(context,v,k,c)))){iterations++;return fn(v,useKeys?k:iterations-1,this$0);}});return iterations;};skipSequence.__iteratorUncached=function(type,reverse){var this$0=this;if(reverse){return this.cacheResult().__iterator(type,reverse);}var iterator=iterable.__iterator(ITERATE_ENTRIES,reverse);var skipping=true;var iterations=0;return new Iterator(function(){var step,k,v;do{step=iterator.next();if(step.done){if(useKeys||type===ITERATE_VALUES){return step;}else if(type===ITERATE_KEYS){return iteratorValue(type,iterations++,undefined,step);}else{return iteratorValue(type,iterations++,step.value[1],step);}}var entry=step.value;k=entry[0];v=entry[1];skipping&&(skipping=predicate.call(context,v,k,this$0));}while(skipping);return type===ITERATE_ENTRIES?step:iteratorValue(type,k,v,step);});};return skipSequence;}function concatFactory(iterable,values){var isKeyedIterable=isKeyed(iterable);var iters=[iterable].concat(values).map(function(v){if(!isIterable(v)){v=isKeyedIterable?keyedSeqFromValue(v):indexedSeqFromValue(Array.isArray(v)?v:[v]);}else if(isKeyedIterable){v=KeyedIterable(v);}return v;}).filter(function(v){return v.size!==0;});if(iters.length===0){return iterable;}if(iters.length===1){var singleton=iters[0];if(singleton===iterable||isKeyedIterable&&isKeyed(singleton)||isIndexed(iterable)&&isIndexed(singleton)){return singleton;}}var concatSeq=new ArraySeq(iters);if(isKeyedIterable){concatSeq=concatSeq.toKeyedSeq();}else if(!isIndexed(iterable)){concatSeq=concatSeq.toSetSeq();}concatSeq=concatSeq.flatten(true);concatSeq.size=iters.reduce(function(sum,seq){if(sum!==undefined){var size=seq.size;if(size!==undefined){return sum+size;}}},0);return concatSeq;}function flattenFactory(iterable,depth,useKeys){var flatSequence=makeSequence(iterable);flatSequence.__iterateUncached=function(fn,reverse){var iterations=0;var stopped=false;function flatDeep(iter,currentDepth){var this$0=this;iter.__iterate(function(v,k){if((!depth||currentDepth<depth)&&isIterable(v)){flatDeep(v,currentDepth+1);}else if(fn(v,useKeys?k:iterations++,this$0)===false){stopped=true;}return!stopped;},reverse);}flatDeep(iterable,0);return iterations;};flatSequence.__iteratorUncached=function(type,reverse){var iterator=iterable.__iterator(type,reverse);var stack=[];var iterations=0;return new Iterator(function(){while(iterator){var step=iterator.next();if(step.done!==false){iterator=stack.pop();continue;}var v=step.value;if(type===ITERATE_ENTRIES){v=v[1];}if((!depth||stack.length<depth)&&isIterable(v)){stack.push(iterator);iterator=v.__iterator(type,reverse);}else{return useKeys?step:iteratorValue(type,iterations++,v,step);}}return iteratorDone();});};return flatSequence;}function flatMapFactory(iterable,mapper,context){var coerce=iterableClass(iterable);return iterable.toSeq().map(function(v,k){return coerce(mapper.call(context,v,k,iterable));}).flatten(true);}function interposeFactory(iterable,separator){var interposedSequence=makeSequence(iterable);interposedSequence.size=iterable.size&&iterable.size*2-1;interposedSequence.__iterateUncached=function(fn,reverse){var this$0=this;var iterations=0;iterable.__iterate(function(v,k){return(!iterations||fn(separator,iterations++,this$0)!==false)&&fn(v,iterations++,this$0)!==false;},reverse);return iterations;};interposedSequence.__iteratorUncached=function(type,reverse){var iterator=iterable.__iterator(ITERATE_VALUES,reverse);var iterations=0;var step;return new Iterator(function(){if(!step||iterations%2){step=iterator.next();if(step.done){return step;}}return iterations%2?iteratorValue(type,iterations++,separator):iteratorValue(type,iterations++,step.value,step);});};return interposedSequence;}function sortFactory(iterable,comparator,mapper){if(!comparator){comparator=defaultComparator;}var isKeyedIterable=isKeyed(iterable);var index=0;var entries=iterable.toSeq().map(function(v,k){return[k,v,index++,mapper?mapper(v,k,iterable):v];}).toArray();entries.sort(function(a,b){return comparator(a[3],b[3])||a[2]-b[2];}).forEach(isKeyedIterable?function(v,i){entries[i].length=2;}:function(v,i){entries[i]=v[1];});return isKeyedIterable?KeyedSeq(entries):isIndexed(iterable)?IndexedSeq(entries):SetSeq(entries);}function maxFactory(iterable,comparator,mapper){if(!comparator){comparator=defaultComparator;}if(mapper){var entry=iterable.toSeq().map(function(v,k){return[v,mapper(v,k,iterable)];}).reduce(function(a,b){return maxCompare(comparator,a[1],b[1])?b:a;});return entry&&entry[0];}else{return iterable.reduce(function(a,b){return maxCompare(comparator,a,b)?b:a;});}}function maxCompare(comparator,a,b){var comp=comparator(b,a);// b is considered the new max if the comparator declares them equal, but
	// they are not equal and b is in fact a nullish value.
	return comp===0&&b!==a&&(b===undefined||b===null||b!==b)||comp>0;}function zipWithFactory(keyIter,zipper,iters){var zipSequence=makeSequence(keyIter);zipSequence.size=new ArraySeq(iters).map(function(i){return i.size;}).min();// Note: this a generic base implementation of __iterate in terms of
	// __iterator which may be more generically useful in the future.
	zipSequence.__iterate=function(fn,reverse){/* generic:
	      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);
	      var step;
	      var iterations = 0;
	      while (!(step = iterator.next()).done) {
	        iterations++;
	        if (fn(step.value[1], step.value[0], this) === false) {
	          break;
	        }
	      }
	      return iterations;
	      */// indexed:
	var iterator=this.__iterator(ITERATE_VALUES,reverse);var step;var iterations=0;while(!(step=iterator.next()).done){if(fn(step.value,iterations++,this)===false){break;}}return iterations;};zipSequence.__iteratorUncached=function(type,reverse){var iterators=iters.map(function(i){return i=Iterable(i),getIterator(reverse?i.reverse():i);});var iterations=0;var isDone=false;return new Iterator(function(){var steps;if(!isDone){steps=iterators.map(function(i){return i.next();});isDone=steps.some(function(s){return s.done;});}if(isDone){return iteratorDone();}return iteratorValue(type,iterations++,zipper.apply(null,steps.map(function(s){return s.value;})));});};return zipSequence;}// #pragma Helper Functions
	function reify(iter,seq){return isSeq(iter)?seq:iter.constructor(seq);}function validateEntry(entry){if(entry!==Object(entry)){throw new TypeError('Expected [K, V] tuple: '+entry);}}function resolveSize(iter){assertNotInfinite(iter.size);return ensureSize(iter);}function iterableClass(iterable){return isKeyed(iterable)?KeyedIterable:isIndexed(iterable)?IndexedIterable:SetIterable;}function makeSequence(iterable){return(0,_create2.default)((isKeyed(iterable)?KeyedSeq:isIndexed(iterable)?IndexedSeq:SetSeq).prototype);}function cacheResultThrough(){if(this._iter.cacheResult){this._iter.cacheResult();this.size=this._iter.size;return this;}else{return Seq.prototype.cacheResult.call(this);}}function defaultComparator(a,b){return a>b?1:a<b?-1:0;}function forceIterator(keyPath){var iter=getIterator(keyPath);if(!iter){// Array might not be iterable in this environment, so we need a fallback
	// to our wrapped type.
	if(!isArrayLike(keyPath)){throw new TypeError('Expected iterable or array-like: '+keyPath);}iter=getIterator(Iterable(keyPath));}return iter;}createClass(Record,KeyedCollection);function Record(defaultValues,name){var hasInitialized;var RecordType=function Record(values){if(values instanceof RecordType){return values;}if(!(this instanceof RecordType)){return new RecordType(values);}if(!hasInitialized){hasInitialized=true;var keys=(0,_keys2.default)(defaultValues);setProps(RecordTypePrototype,keys);RecordTypePrototype.size=keys.length;RecordTypePrototype._name=name;RecordTypePrototype._keys=keys;RecordTypePrototype._defaultValues=defaultValues;}this._map=Map(values);};var RecordTypePrototype=RecordType.prototype=(0,_create2.default)(RecordPrototype);RecordTypePrototype.constructor=RecordType;return RecordType;}Record.prototype.toString=function(){return this.__toString(recordName(this)+' {','}');};// @pragma Access
	Record.prototype.has=function(k){return this._defaultValues.hasOwnProperty(k);};Record.prototype.get=function(k,notSetValue){if(!this.has(k)){return notSetValue;}var defaultVal=this._defaultValues[k];return this._map?this._map.get(k,defaultVal):defaultVal;};// @pragma Modification
	Record.prototype.clear=function(){if(this.__ownerID){this._map&&this._map.clear();return this;}var RecordType=this.constructor;return RecordType._empty||(RecordType._empty=makeRecord(this,emptyMap()));};Record.prototype.set=function(k,v){if(!this.has(k)){throw new Error('Cannot set unknown key "'+k+'" on '+recordName(this));}if(this._map&&!this._map.has(k)){var defaultVal=this._defaultValues[k];if(v===defaultVal){return this;}}var newMap=this._map&&this._map.set(k,v);if(this.__ownerID||newMap===this._map){return this;}return makeRecord(this,newMap);};Record.prototype.remove=function(k){if(!this.has(k)){return this;}var newMap=this._map&&this._map.remove(k);if(this.__ownerID||newMap===this._map){return this;}return makeRecord(this,newMap);};Record.prototype.wasAltered=function(){return this._map.wasAltered();};Record.prototype.__iterator=function(type,reverse){var this$0=this;return KeyedIterable(this._defaultValues).map(function(_,k){return this$0.get(k);}).__iterator(type,reverse);};Record.prototype.__iterate=function(fn,reverse){var this$0=this;return KeyedIterable(this._defaultValues).map(function(_,k){return this$0.get(k);}).__iterate(fn,reverse);};Record.prototype.__ensureOwner=function(ownerID){if(ownerID===this.__ownerID){return this;}var newMap=this._map&&this._map.__ensureOwner(ownerID);if(!ownerID){this.__ownerID=ownerID;this._map=newMap;return this;}return makeRecord(this,newMap,ownerID);};var RecordPrototype=Record.prototype;RecordPrototype[DELETE]=RecordPrototype.remove;RecordPrototype.deleteIn=RecordPrototype.removeIn=MapPrototype.removeIn;RecordPrototype.merge=MapPrototype.merge;RecordPrototype.mergeWith=MapPrototype.mergeWith;RecordPrototype.mergeIn=MapPrototype.mergeIn;RecordPrototype.mergeDeep=MapPrototype.mergeDeep;RecordPrototype.mergeDeepWith=MapPrototype.mergeDeepWith;RecordPrototype.mergeDeepIn=MapPrototype.mergeDeepIn;RecordPrototype.setIn=MapPrototype.setIn;RecordPrototype.update=MapPrototype.update;RecordPrototype.updateIn=MapPrototype.updateIn;RecordPrototype.withMutations=MapPrototype.withMutations;RecordPrototype.asMutable=MapPrototype.asMutable;RecordPrototype.asImmutable=MapPrototype.asImmutable;function makeRecord(likeRecord,map,ownerID){var record=(0,_create2.default)((0,_getPrototypeOf2.default)(likeRecord));record._map=map;record.__ownerID=ownerID;return record;}function recordName(record){return record._name||record.constructor.name||'Record';}function setProps(prototype,names){try{names.forEach(setProp.bind(undefined,prototype));}catch(error){// Object.defineProperty failed. Probably IE8.
	}}function setProp(prototype,name){(0,_defineProperty2.default)(prototype,name,{get:function get(){return this.get(name);},set:function set(value){invariant(this.__ownerID,'Cannot set on an immutable record.');this.set(name,value);}});}createClass(Set,SetCollection);// @pragma Construction
	function Set(value){return value===null||value===undefined?emptySet():isSet(value)&&!isOrdered(value)?value:emptySet().withMutations(function(set){var iter=SetIterable(value);assertNotInfinite(iter.size);iter.forEach(function(v){return set.add(v);});});}Set.of=function()/*...values*/{return this(arguments);};Set.fromKeys=function(value){return this(KeyedIterable(value).keySeq());};Set.prototype.toString=function(){return this.__toString('Set {','}');};// @pragma Access
	Set.prototype.has=function(value){return this._map.has(value);};// @pragma Modification
	Set.prototype.add=function(value){return updateSet(this,this._map.set(value,true));};Set.prototype.remove=function(value){return updateSet(this,this._map.remove(value));};Set.prototype.clear=function(){return updateSet(this,this._map.clear());};// @pragma Composition
	Set.prototype.union=function(){var iters=SLICE$0.call(arguments,0);iters=iters.filter(function(x){return x.size!==0;});if(iters.length===0){return this;}if(this.size===0&&!this.__ownerID&&iters.length===1){return this.constructor(iters[0]);}return this.withMutations(function(set){for(var ii=0;ii<iters.length;ii++){SetIterable(iters[ii]).forEach(function(value){return set.add(value);});}});};Set.prototype.intersect=function(){var iters=SLICE$0.call(arguments,0);if(iters.length===0){return this;}iters=iters.map(function(iter){return SetIterable(iter);});var originalSet=this;return this.withMutations(function(set){originalSet.forEach(function(value){if(!iters.every(function(iter){return iter.includes(value);})){set.remove(value);}});});};Set.prototype.subtract=function(){var iters=SLICE$0.call(arguments,0);if(iters.length===0){return this;}iters=iters.map(function(iter){return SetIterable(iter);});var originalSet=this;return this.withMutations(function(set){originalSet.forEach(function(value){if(iters.some(function(iter){return iter.includes(value);})){set.remove(value);}});});};Set.prototype.merge=function(){return this.union.apply(this,arguments);};Set.prototype.mergeWith=function(merger){var iters=SLICE$0.call(arguments,1);return this.union.apply(this,iters);};Set.prototype.sort=function(comparator){// Late binding
	return OrderedSet(sortFactory(this,comparator));};Set.prototype.sortBy=function(mapper,comparator){// Late binding
	return OrderedSet(sortFactory(this,comparator,mapper));};Set.prototype.wasAltered=function(){return this._map.wasAltered();};Set.prototype.__iterate=function(fn,reverse){var this$0=this;return this._map.__iterate(function(_,k){return fn(k,k,this$0);},reverse);};Set.prototype.__iterator=function(type,reverse){return this._map.map(function(_,k){return k;}).__iterator(type,reverse);};Set.prototype.__ensureOwner=function(ownerID){if(ownerID===this.__ownerID){return this;}var newMap=this._map.__ensureOwner(ownerID);if(!ownerID){this.__ownerID=ownerID;this._map=newMap;return this;}return this.__make(newMap,ownerID);};function isSet(maybeSet){return!!(maybeSet&&maybeSet[IS_SET_SENTINEL]);}Set.isSet=isSet;var IS_SET_SENTINEL='@@__IMMUTABLE_SET__@@';var SetPrototype=Set.prototype;SetPrototype[IS_SET_SENTINEL]=true;SetPrototype[DELETE]=SetPrototype.remove;SetPrototype.mergeDeep=SetPrototype.merge;SetPrototype.mergeDeepWith=SetPrototype.mergeWith;SetPrototype.withMutations=MapPrototype.withMutations;SetPrototype.asMutable=MapPrototype.asMutable;SetPrototype.asImmutable=MapPrototype.asImmutable;SetPrototype.__empty=emptySet;SetPrototype.__make=makeSet;function updateSet(set,newMap){if(set.__ownerID){set.size=newMap.size;set._map=newMap;return set;}return newMap===set._map?set:newMap.size===0?set.__empty():set.__make(newMap);}function makeSet(map,ownerID){var set=(0,_create2.default)(SetPrototype);set.size=map?map.size:0;set._map=map;set.__ownerID=ownerID;return set;}var EMPTY_SET;function emptySet(){return EMPTY_SET||(EMPTY_SET=makeSet(emptyMap()));}createClass(OrderedSet,Set);// @pragma Construction
	function OrderedSet(value){return value===null||value===undefined?emptyOrderedSet():isOrderedSet(value)?value:emptyOrderedSet().withMutations(function(set){var iter=SetIterable(value);assertNotInfinite(iter.size);iter.forEach(function(v){return set.add(v);});});}OrderedSet.of=function()/*...values*/{return this(arguments);};OrderedSet.fromKeys=function(value){return this(KeyedIterable(value).keySeq());};OrderedSet.prototype.toString=function(){return this.__toString('OrderedSet {','}');};function isOrderedSet(maybeOrderedSet){return isSet(maybeOrderedSet)&&isOrdered(maybeOrderedSet);}OrderedSet.isOrderedSet=isOrderedSet;var OrderedSetPrototype=OrderedSet.prototype;OrderedSetPrototype[IS_ORDERED_SENTINEL]=true;OrderedSetPrototype.__empty=emptyOrderedSet;OrderedSetPrototype.__make=makeOrderedSet;function makeOrderedSet(map,ownerID){var set=(0,_create2.default)(OrderedSetPrototype);set.size=map?map.size:0;set._map=map;set.__ownerID=ownerID;return set;}var EMPTY_ORDERED_SET;function emptyOrderedSet(){return EMPTY_ORDERED_SET||(EMPTY_ORDERED_SET=makeOrderedSet(emptyOrderedMap()));}createClass(Stack,IndexedCollection);// @pragma Construction
	function Stack(value){return value===null||value===undefined?emptyStack():isStack(value)?value:emptyStack().unshiftAll(value);}Stack.of=function()/*...values*/{return this(arguments);};Stack.prototype.toString=function(){return this.__toString('Stack [',']');};// @pragma Access
	Stack.prototype.get=function(index,notSetValue){var head=this._head;index=wrapIndex(this,index);while(head&&index--){head=head.next;}return head?head.value:notSetValue;};Stack.prototype.peek=function(){return this._head&&this._head.value;};// @pragma Modification
	Stack.prototype.push=function()/*...values*/{if(arguments.length===0){return this;}var newSize=this.size+arguments.length;var head=this._head;for(var ii=arguments.length-1;ii>=0;ii--){head={value:arguments[ii],next:head};}if(this.__ownerID){this.size=newSize;this._head=head;this.__hash=undefined;this.__altered=true;return this;}return makeStack(newSize,head);};Stack.prototype.pushAll=function(iter){iter=IndexedIterable(iter);if(iter.size===0){return this;}assertNotInfinite(iter.size);var newSize=this.size;var head=this._head;iter.reverse().forEach(function(value){newSize++;head={value:value,next:head};});if(this.__ownerID){this.size=newSize;this._head=head;this.__hash=undefined;this.__altered=true;return this;}return makeStack(newSize,head);};Stack.prototype.pop=function(){return this.slice(1);};Stack.prototype.unshift=function()/*...values*/{return this.push.apply(this,arguments);};Stack.prototype.unshiftAll=function(iter){return this.pushAll(iter);};Stack.prototype.shift=function(){return this.pop.apply(this,arguments);};Stack.prototype.clear=function(){if(this.size===0){return this;}if(this.__ownerID){this.size=0;this._head=undefined;this.__hash=undefined;this.__altered=true;return this;}return emptyStack();};Stack.prototype.slice=function(begin,end){if(wholeSlice(begin,end,this.size)){return this;}var resolvedBegin=resolveBegin(begin,this.size);var resolvedEnd=resolveEnd(end,this.size);if(resolvedEnd!==this.size){// super.slice(begin, end);
	return IndexedCollection.prototype.slice.call(this,begin,end);}var newSize=this.size-resolvedBegin;var head=this._head;while(resolvedBegin--){head=head.next;}if(this.__ownerID){this.size=newSize;this._head=head;this.__hash=undefined;this.__altered=true;return this;}return makeStack(newSize,head);};// @pragma Mutability
	Stack.prototype.__ensureOwner=function(ownerID){if(ownerID===this.__ownerID){return this;}if(!ownerID){this.__ownerID=ownerID;this.__altered=false;return this;}return makeStack(this.size,this._head,ownerID,this.__hash);};// @pragma Iteration
	Stack.prototype.__iterate=function(fn,reverse){if(reverse){return this.reverse().__iterate(fn);}var iterations=0;var node=this._head;while(node){if(fn(node.value,iterations++,this)===false){break;}node=node.next;}return iterations;};Stack.prototype.__iterator=function(type,reverse){if(reverse){return this.reverse().__iterator(type);}var iterations=0;var node=this._head;return new Iterator(function(){if(node){var value=node.value;node=node.next;return iteratorValue(type,iterations++,value);}return iteratorDone();});};function isStack(maybeStack){return!!(maybeStack&&maybeStack[IS_STACK_SENTINEL]);}Stack.isStack=isStack;var IS_STACK_SENTINEL='@@__IMMUTABLE_STACK__@@';var StackPrototype=Stack.prototype;StackPrototype[IS_STACK_SENTINEL]=true;StackPrototype.withMutations=MapPrototype.withMutations;StackPrototype.asMutable=MapPrototype.asMutable;StackPrototype.asImmutable=MapPrototype.asImmutable;StackPrototype.wasAltered=MapPrototype.wasAltered;function makeStack(size,head,ownerID,hash){var map=(0,_create2.default)(StackPrototype);map.size=size;map._head=head;map.__ownerID=ownerID;map.__hash=hash;map.__altered=false;return map;}var EMPTY_STACK;function emptyStack(){return EMPTY_STACK||(EMPTY_STACK=makeStack(0));}/**
	   * Contributes additional methods to a constructor
	   */function mixin(ctor,methods){var keyCopier=function keyCopier(key){ctor.prototype[key]=methods[key];};(0,_keys2.default)(methods).forEach(keyCopier);_getOwnPropertySymbols2.default&&(0,_getOwnPropertySymbols2.default)(methods).forEach(keyCopier);return ctor;}Iterable.Iterator=Iterator;mixin(Iterable,{// ### Conversion to other types
	toArray:function toArray(){assertNotInfinite(this.size);var array=new Array(this.size||0);this.valueSeq().__iterate(function(v,i){array[i]=v;});return array;},toIndexedSeq:function toIndexedSeq(){return new ToIndexedSequence(this);},toJS:function toJS(){return this.toSeq().map(function(value){return value&&typeof value.toJS==='function'?value.toJS():value;}).__toJS();},toJSON:function toJSON(){return this.toSeq().map(function(value){return value&&typeof value.toJSON==='function'?value.toJSON():value;}).__toJS();},toKeyedSeq:function toKeyedSeq(){return new ToKeyedSequence(this,true);},toMap:function toMap(){// Use Late Binding here to solve the circular dependency.
	return Map(this.toKeyedSeq());},toObject:function toObject(){assertNotInfinite(this.size);var object={};this.__iterate(function(v,k){object[k]=v;});return object;},toOrderedMap:function toOrderedMap(){// Use Late Binding here to solve the circular dependency.
	return OrderedMap(this.toKeyedSeq());},toOrderedSet:function toOrderedSet(){// Use Late Binding here to solve the circular dependency.
	return OrderedSet(isKeyed(this)?this.valueSeq():this);},toSet:function toSet(){// Use Late Binding here to solve the circular dependency.
	return Set(isKeyed(this)?this.valueSeq():this);},toSetSeq:function toSetSeq(){return new ToSetSequence(this);},toSeq:function toSeq(){return isIndexed(this)?this.toIndexedSeq():isKeyed(this)?this.toKeyedSeq():this.toSetSeq();},toStack:function toStack(){// Use Late Binding here to solve the circular dependency.
	return Stack(isKeyed(this)?this.valueSeq():this);},toList:function toList(){// Use Late Binding here to solve the circular dependency.
	return List(isKeyed(this)?this.valueSeq():this);},// ### Common JavaScript methods and properties
	toString:function toString(){return'[Iterable]';},__toString:function __toString(head,tail){if(this.size===0){return head+tail;}return head+' '+this.toSeq().map(this.__toStringMapper).join(', ')+' '+tail;},// ### ES6 Collection methods (ES6 Array and Map)
	concat:function concat(){var values=SLICE$0.call(arguments,0);return reify(this,concatFactory(this,values));},includes:function includes(searchValue){return this.some(function(value){return is(value,searchValue);});},entries:function entries(){return this.__iterator(ITERATE_ENTRIES);},every:function every(predicate,context){assertNotInfinite(this.size);var returnValue=true;this.__iterate(function(v,k,c){if(!predicate.call(context,v,k,c)){returnValue=false;return false;}});return returnValue;},filter:function filter(predicate,context){return reify(this,filterFactory(this,predicate,context,true));},find:function find(predicate,context,notSetValue){var entry=this.findEntry(predicate,context);return entry?entry[1]:notSetValue;},forEach:function forEach(sideEffect,context){assertNotInfinite(this.size);return this.__iterate(context?sideEffect.bind(context):sideEffect);},join:function join(separator){assertNotInfinite(this.size);separator=separator!==undefined?''+separator:',';var joined='';var isFirst=true;this.__iterate(function(v){isFirst?isFirst=false:joined+=separator;joined+=v!==null&&v!==undefined?v.toString():'';});return joined;},keys:function keys(){return this.__iterator(ITERATE_KEYS);},map:function map(mapper,context){return reify(this,mapFactory(this,mapper,context));},reduce:function reduce(reducer,initialReduction,context){assertNotInfinite(this.size);var reduction;var useFirst;if(arguments.length<2){useFirst=true;}else{reduction=initialReduction;}this.__iterate(function(v,k,c){if(useFirst){useFirst=false;reduction=v;}else{reduction=reducer.call(context,reduction,v,k,c);}});return reduction;},reduceRight:function reduceRight(reducer,initialReduction,context){var reversed=this.toKeyedSeq().reverse();return reversed.reduce.apply(reversed,arguments);},reverse:function reverse(){return reify(this,reverseFactory(this,true));},slice:function slice(begin,end){return reify(this,sliceFactory(this,begin,end,true));},some:function some(predicate,context){return!this.every(not(predicate),context);},sort:function sort(comparator){return reify(this,sortFactory(this,comparator));},values:function values(){return this.__iterator(ITERATE_VALUES);},// ### More sequential methods
	butLast:function butLast(){return this.slice(0,-1);},isEmpty:function isEmpty(){return this.size!==undefined?this.size===0:!this.some(function(){return true;});},count:function count(predicate,context){return ensureSize(predicate?this.toSeq().filter(predicate,context):this);},countBy:function countBy(grouper,context){return countByFactory(this,grouper,context);},equals:function equals(other){return deepEqual(this,other);},entrySeq:function entrySeq(){var iterable=this;if(iterable._cache){// We cache as an entries array, so we can just return the cache!
	return new ArraySeq(iterable._cache);}var entriesSequence=iterable.toSeq().map(entryMapper).toIndexedSeq();entriesSequence.fromEntrySeq=function(){return iterable.toSeq();};return entriesSequence;},filterNot:function filterNot(predicate,context){return this.filter(not(predicate),context);},findEntry:function findEntry(predicate,context,notSetValue){var found=notSetValue;this.__iterate(function(v,k,c){if(predicate.call(context,v,k,c)){found=[k,v];return false;}});return found;},findKey:function findKey(predicate,context){var entry=this.findEntry(predicate,context);return entry&&entry[0];},findLast:function findLast(predicate,context,notSetValue){return this.toKeyedSeq().reverse().find(predicate,context,notSetValue);},findLastEntry:function findLastEntry(predicate,context,notSetValue){return this.toKeyedSeq().reverse().findEntry(predicate,context,notSetValue);},findLastKey:function findLastKey(predicate,context){return this.toKeyedSeq().reverse().findKey(predicate,context);},first:function first(){return this.find(returnTrue);},flatMap:function flatMap(mapper,context){return reify(this,flatMapFactory(this,mapper,context));},flatten:function flatten(depth){return reify(this,flattenFactory(this,depth,true));},fromEntrySeq:function fromEntrySeq(){return new FromEntriesSequence(this);},get:function get(searchKey,notSetValue){return this.find(function(_,key){return is(key,searchKey);},undefined,notSetValue);},getIn:function getIn(searchKeyPath,notSetValue){var nested=this;// Note: in an ES6 environment, we would prefer:
	// for (var key of searchKeyPath) {
	var iter=forceIterator(searchKeyPath);var step;while(!(step=iter.next()).done){var key=step.value;nested=nested&&nested.get?nested.get(key,NOT_SET):NOT_SET;if(nested===NOT_SET){return notSetValue;}}return nested;},groupBy:function groupBy(grouper,context){return groupByFactory(this,grouper,context);},has:function has(searchKey){return this.get(searchKey,NOT_SET)!==NOT_SET;},hasIn:function hasIn(searchKeyPath){return this.getIn(searchKeyPath,NOT_SET)!==NOT_SET;},isSubset:function isSubset(iter){iter=typeof iter.includes==='function'?iter:Iterable(iter);return this.every(function(value){return iter.includes(value);});},isSuperset:function isSuperset(iter){iter=typeof iter.isSubset==='function'?iter:Iterable(iter);return iter.isSubset(this);},keyOf:function keyOf(searchValue){return this.findKey(function(value){return is(value,searchValue);});},keySeq:function keySeq(){return this.toSeq().map(keyMapper).toIndexedSeq();},last:function last(){return this.toSeq().reverse().first();},lastKeyOf:function lastKeyOf(searchValue){return this.toKeyedSeq().reverse().keyOf(searchValue);},max:function max(comparator){return maxFactory(this,comparator);},maxBy:function maxBy(mapper,comparator){return maxFactory(this,comparator,mapper);},min:function min(comparator){return maxFactory(this,comparator?neg(comparator):defaultNegComparator);},minBy:function minBy(mapper,comparator){return maxFactory(this,comparator?neg(comparator):defaultNegComparator,mapper);},rest:function rest(){return this.slice(1);},skip:function skip(amount){return this.slice(Math.max(0,amount));},skipLast:function skipLast(amount){return reify(this,this.toSeq().reverse().skip(amount).reverse());},skipWhile:function skipWhile(predicate,context){return reify(this,skipWhileFactory(this,predicate,context,true));},skipUntil:function skipUntil(predicate,context){return this.skipWhile(not(predicate),context);},sortBy:function sortBy(mapper,comparator){return reify(this,sortFactory(this,comparator,mapper));},take:function take(amount){return this.slice(0,Math.max(0,amount));},takeLast:function takeLast(amount){return reify(this,this.toSeq().reverse().take(amount).reverse());},takeWhile:function takeWhile(predicate,context){return reify(this,takeWhileFactory(this,predicate,context));},takeUntil:function takeUntil(predicate,context){return this.takeWhile(not(predicate),context);},valueSeq:function valueSeq(){return this.toIndexedSeq();},// ### Hashable Object
	hashCode:function hashCode(){return this.__hash||(this.__hash=hashIterable(this));}// ### Internal
	// abstract __iterate(fn, reverse)
	// abstract __iterator(type, reverse)
	});// var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
	// var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
	// var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';
	// var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';
	var IterablePrototype=Iterable.prototype;IterablePrototype[IS_ITERABLE_SENTINEL]=true;IterablePrototype[ITERATOR_SYMBOL]=IterablePrototype.values;IterablePrototype.__toJS=IterablePrototype.toArray;IterablePrototype.__toStringMapper=quoteString;IterablePrototype.inspect=IterablePrototype.toSource=function(){return this.toString();};IterablePrototype.chain=IterablePrototype.flatMap;IterablePrototype.contains=IterablePrototype.includes;mixin(KeyedIterable,{// ### More sequential methods
	flip:function flip(){return reify(this,flipFactory(this));},mapEntries:function mapEntries(mapper,context){var this$0=this;var iterations=0;return reify(this,this.toSeq().map(function(v,k){return mapper.call(context,[k,v],iterations++,this$0);}).fromEntrySeq());},mapKeys:function mapKeys(mapper,context){var this$0=this;return reify(this,this.toSeq().flip().map(function(k,v){return mapper.call(context,k,v,this$0);}).flip());}});var KeyedIterablePrototype=KeyedIterable.prototype;KeyedIterablePrototype[IS_KEYED_SENTINEL]=true;KeyedIterablePrototype[ITERATOR_SYMBOL]=IterablePrototype.entries;KeyedIterablePrototype.__toJS=IterablePrototype.toObject;KeyedIterablePrototype.__toStringMapper=function(v,k){return(0,_stringify2.default)(k)+': '+quoteString(v);};mixin(IndexedIterable,{// ### Conversion to other types
	toKeyedSeq:function toKeyedSeq(){return new ToKeyedSequence(this,false);},// ### ES6 Collection methods (ES6 Array and Map)
	filter:function filter(predicate,context){return reify(this,filterFactory(this,predicate,context,false));},findIndex:function findIndex(predicate,context){var entry=this.findEntry(predicate,context);return entry?entry[0]:-1;},indexOf:function indexOf(searchValue){var key=this.keyOf(searchValue);return key===undefined?-1:key;},lastIndexOf:function lastIndexOf(searchValue){var key=this.lastKeyOf(searchValue);return key===undefined?-1:key;},reverse:function reverse(){return reify(this,reverseFactory(this,false));},slice:function slice(begin,end){return reify(this,sliceFactory(this,begin,end,false));},splice:function splice(index,removeNum/*, ...values*/){var numArgs=arguments.length;removeNum=Math.max(removeNum|0,0);if(numArgs===0||numArgs===2&&!removeNum){return this;}// If index is negative, it should resolve relative to the size of the
	// collection. However size may be expensive to compute if not cached, so
	// only call count() if the number is in fact negative.
	index=resolveBegin(index,index<0?this.count():this.size);var spliced=this.slice(0,index);return reify(this,numArgs===1?spliced:spliced.concat(arrCopy(arguments,2),this.slice(index+removeNum)));},// ### More collection methods
	findLastIndex:function findLastIndex(predicate,context){var entry=this.findLastEntry(predicate,context);return entry?entry[0]:-1;},first:function first(){return this.get(0);},flatten:function flatten(depth){return reify(this,flattenFactory(this,depth,false));},get:function get(index,notSetValue){index=wrapIndex(this,index);return index<0||this.size===Infinity||this.size!==undefined&&index>this.size?notSetValue:this.find(function(_,key){return key===index;},undefined,notSetValue);},has:function has(index){index=wrapIndex(this,index);return index>=0&&(this.size!==undefined?this.size===Infinity||index<this.size:this.indexOf(index)!==-1);},interpose:function interpose(separator){return reify(this,interposeFactory(this,separator));},interleave:function interleave()/*...iterables*/{var iterables=[this].concat(arrCopy(arguments));var zipped=zipWithFactory(this.toSeq(),IndexedSeq.of,iterables);var interleaved=zipped.flatten(true);if(zipped.size){interleaved.size=zipped.size*iterables.length;}return reify(this,interleaved);},keySeq:function keySeq(){return Range(0,this.size);},last:function last(){return this.get(-1);},skipWhile:function skipWhile(predicate,context){return reify(this,skipWhileFactory(this,predicate,context,false));},zip:function zip()/*, ...iterables */{var iterables=[this].concat(arrCopy(arguments));return reify(this,zipWithFactory(this,defaultZipper,iterables));},zipWith:function zipWith(zipper/*, ...iterables */){var iterables=arrCopy(arguments);iterables[0]=this;return reify(this,zipWithFactory(this,zipper,iterables));}});IndexedIterable.prototype[IS_INDEXED_SENTINEL]=true;IndexedIterable.prototype[IS_ORDERED_SENTINEL]=true;mixin(SetIterable,{// ### ES6 Collection methods (ES6 Array and Map)
	get:function get(value,notSetValue){return this.has(value)?value:notSetValue;},includes:function includes(value){return this.has(value);},// ### More sequential methods
	keySeq:function keySeq(){return this.valueSeq();}});SetIterable.prototype.has=IterablePrototype.includes;SetIterable.prototype.contains=SetIterable.prototype.includes;// Mixin subclasses
	mixin(KeyedSeq,KeyedIterable.prototype);mixin(IndexedSeq,IndexedIterable.prototype);mixin(SetSeq,SetIterable.prototype);mixin(KeyedCollection,KeyedIterable.prototype);mixin(IndexedCollection,IndexedIterable.prototype);mixin(SetCollection,SetIterable.prototype);// #pragma Helper functions
	function keyMapper(v,k){return k;}function entryMapper(v,k){return[k,v];}function not(predicate){return function(){return!predicate.apply(this,arguments);};}function neg(predicate){return function(){return-predicate.apply(this,arguments);};}function quoteString(value){return typeof value==='string'?(0,_stringify2.default)(value):String(value);}function defaultZipper(){return arrCopy(arguments);}function defaultNegComparator(a,b){return a<b?1:a>b?-1:0;}function hashIterable(iterable){if(iterable.size===Infinity){return 0;}var ordered=isOrdered(iterable);var keyed=isKeyed(iterable);var h=ordered?1:0;var size=iterable.__iterate(keyed?ordered?function(v,k){h=31*h+hashMerge(hash(v),hash(k))|0;}:function(v,k){h=h+hashMerge(hash(v),hash(k))|0;}:ordered?function(v){h=31*h+hash(v)|0;}:function(v){h=h+hash(v)|0;});return murmurHashOfSize(size,h);}function murmurHashOfSize(size,h){h=imul(h,0xCC9E2D51);h=imul(h<<15|h>>>-15,0x1B873593);h=imul(h<<13|h>>>-13,5);h=(h+0xE6546B64|0)^size;h=imul(h^h>>>16,0x85EBCA6B);h=imul(h^h>>>13,0xC2B2AE35);h=smi(h^h>>>16);return h;}function hashMerge(a,b){return a^b+0x9E3779B9+(a<<6)+(a>>2)|0;// int
	}var Immutable={Iterable:Iterable,Seq:Seq,Collection:Collection,Map:Map,OrderedMap:OrderedMap,List:List,Stack:Stack,Set:Set,OrderedSet:OrderedSet,Record:Record,Range:Range,Repeat:Repeat,is:is,fromJS:fromJS};return Immutable;});/***/},/* 61 *//***/function(module,exports,__webpack_require__){"use strict";var d=__webpack_require__(62),callable=__webpack_require__(76),apply=Function.prototype.apply,call=Function.prototype.call,create=_create2.default,defineProperty=_defineProperty2.default,defineProperties=_defineProperties2.default,hasOwnProperty=Object.prototype.hasOwnProperty,descriptor={configurable:true,enumerable:false,writable:true},on,_once2,off,emit,methods,descriptors,base;on=function on(type,listener){var data;callable(listener);if(!hasOwnProperty.call(this,'__ee__')){data=descriptor.value=create(null);defineProperty(this,'__ee__',descriptor);descriptor.value=null;}else{data=this.__ee__;}if(!data[type])data[type]=listener;else if((0,_typeof3.default)(data[type])==='object')data[type].push(listener);else data[type]=[data[type],listener];return this;};_once2=function once(type,listener){var _once,self;callable(listener);self=this;on.call(this,type,_once=function once(){off.call(self,type,_once);apply.call(listener,this,arguments);});_once.__eeOnceListener__=listener;return this;};off=function off(type,listener){var data,listeners,candidate,i;callable(listener);if(!hasOwnProperty.call(this,'__ee__'))return this;data=this.__ee__;if(!data[type])return this;listeners=data[type];if((typeof listeners==='undefined'?'undefined':(0,_typeof3.default)(listeners))==='object'){for(i=0;candidate=listeners[i];++i){if(candidate===listener||candidate.__eeOnceListener__===listener){if(listeners.length===2)data[type]=listeners[i?0:1];else listeners.splice(i,1);}}}else{if(listeners===listener||listeners.__eeOnceListener__===listener){delete data[type];}}return this;};emit=function emit(type){var i,l,listener,listeners,args;if(!hasOwnProperty.call(this,'__ee__'))return;listeners=this.__ee__[type];if(!listeners)return;if((typeof listeners==='undefined'?'undefined':(0,_typeof3.default)(listeners))==='object'){l=arguments.length;args=new Array(l-1);for(i=1;i<l;++i){args[i-1]=arguments[i];}listeners=listeners.slice();for(i=0;listener=listeners[i];++i){apply.call(listener,this,args);}}else{switch(arguments.length){case 1:call.call(listeners,this);break;case 2:call.call(listeners,this,arguments[1]);break;case 3:call.call(listeners,this,arguments[1],arguments[2]);break;default:l=arguments.length;args=new Array(l-1);for(i=1;i<l;++i){args[i-1]=arguments[i];}apply.call(listeners,this,args);}}};methods={on:on,once:_once2,off:off,emit:emit};descriptors={on:d(on),once:d(_once2),off:d(off),emit:d(emit)};base=defineProperties({},descriptors);module.exports=exports=function exports(o){return o==null?create(base):defineProperties(Object(o),descriptors);};exports.methods=methods;/***/},/* 62 *//***/function(module,exports,__webpack_require__){"use strict";var assign=__webpack_require__(63),normalizeOpts=__webpack_require__(71),isCallable=__webpack_require__(72),contains=__webpack_require__(73),d;d=module.exports=function(dscr,value/*, options*/){var c,e,w,options,desc;if(arguments.length<2||typeof dscr!=='string'){options=value;value=dscr;dscr=null;}else{options=arguments[2];}if(dscr==null){c=w=true;e=false;}else{c=contains.call(dscr,'c');e=contains.call(dscr,'e');w=contains.call(dscr,'w');}desc={value:value,configurable:c,enumerable:e,writable:w};return!options?desc:assign(normalizeOpts(options),desc);};d.gs=function(dscr,get,set/*, options*/){var c,e,options,desc;if(typeof dscr!=='string'){options=set;set=get;get=dscr;dscr=null;}else{options=arguments[3];}if(get==null){get=undefined;}else if(!isCallable(get)){options=get;get=set=undefined;}else if(set==null){set=undefined;}else if(!isCallable(set)){options=set;set=undefined;}if(dscr==null){c=true;e=false;}else{c=contains.call(dscr,'c');e=contains.call(dscr,'e');}desc={get:get,set:set,configurable:c,enumerable:e};return!options?desc:assign(normalizeOpts(options),desc);};/***/},/* 63 *//***/function(module,exports,__webpack_require__){"use strict";module.exports=__webpack_require__(64)()?_assign2.default:__webpack_require__(65);/***/},/* 64 *//***/function(module,exports,__webpack_require__){"use strict";module.exports=function(){var assign=_assign2.default,obj;if(typeof assign!=="function")return false;obj={foo:"raz"};assign(obj,{bar:"dwa"},{trzy:"trzy"});return obj.foo+obj.bar+obj.trzy==="razdwatrzy";};/***/},/* 65 *//***/function(module,exports,__webpack_require__){"use strict";var keys=__webpack_require__(66),value=__webpack_require__(70),max=Math.max;module.exports=function(dest,src/*, …srcn*/){var error,i,length=max(arguments.length,2),assign;dest=Object(value(dest));assign=function assign(key){try{dest[key]=src[key];}catch(e){if(!error)error=e;}};for(i=1;i<length;++i){src=arguments[i];keys(src).forEach(assign);}if(error!==undefined)throw error;return dest;};/***/},/* 66 *//***/function(module,exports,__webpack_require__){"use strict";module.exports=__webpack_require__(67)()?_keys2.default:__webpack_require__(68);/***/},/* 67 *//***/function(module,exports,__webpack_require__){"use strict";module.exports=function(){try{(0,_keys2.default)("primitive");return true;}catch(e){return false;}};/***/},/* 68 *//***/function(module,exports,__webpack_require__){"use strict";var isValue=__webpack_require__(21);var keys=_keys2.default;module.exports=function(object){return keys(isValue(object)?Object(object):object);};/***/},/* 69 *//***/function(module,exports,__webpack_require__){"use strict";// eslint-disable-next-line no-empty-function
	module.exports=function(){};/***/},/* 70 *//***/function(module,exports,__webpack_require__){"use strict";var isValue=__webpack_require__(21);module.exports=function(value){if(!isValue(value))throw new TypeError("Cannot use null or undefined");return value;};/***/},/* 71 *//***/function(module,exports,__webpack_require__){"use strict";var isValue=__webpack_require__(21);var forEach=Array.prototype.forEach,create=_create2.default;var process=function process(src,obj){var key;for(key in src){obj[key]=src[key];}};// eslint-disable-next-line no-unused-vars
	module.exports=function(opts1/*, …options*/){var result=create(null);forEach.call(arguments,function(options){if(!isValue(options))return;process(Object(options),result);});return result;};/***/},/* 72 *//***/function(module,exports,__webpack_require__){"use strict";// Deprecated
	module.exports=function(obj){return typeof obj==="function";};/***/},/* 73 *//***/function(module,exports,__webpack_require__){"use strict";module.exports=__webpack_require__(74)()?String.prototype.contains:__webpack_require__(75);/***/},/* 74 *//***/function(module,exports,__webpack_require__){"use strict";var str="razdwatrzy";module.exports=function(){if(typeof str.contains!=="function")return false;return str.contains("dwa")===true&&str.contains("foo")===false;};/***/},/* 75 *//***/function(module,exports,__webpack_require__){"use strict";var indexOf=String.prototype.indexOf;module.exports=function(searchString/*, position*/){return indexOf.call(this,searchString,arguments[1])>-1;};/***/},/* 76 *//***/function(module,exports,__webpack_require__){"use strict";module.exports=function(fn){if(typeof fn!=="function")throw new TypeError(fn+" is not a function");return fn;};/***/},/* 77 *//***/function(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_assert__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_assert___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_assert__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__ecc__=__webpack_require__(17);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__serializer__=__webpack_require__(22);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3_cybexjs_ws__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3_cybexjs_ws___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_cybexjs_ws__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__ChainTypes__=__webpack_require__(7);var head_block_time_string,committee_min_review;var TransactionBuilder=function(){function TransactionBuilder(){(0,_classCallCheck3.default)(this,TransactionBuilder);this.ref_block_num=0;this.ref_block_prefix=0;this.expiration=0;this.operations=[];this.signatures=[];this.signer_private_keys=[];// semi-private method bindings
	this._broadcast=_broadcast.bind(this);}/**
	        @arg {string} name - like "transfer"
	        @arg {object} operation - JSON matchching the operation's format
	    */(0,_createClass3.default)(TransactionBuilder,[{key:'add_type_operation',value:function add_type_operation(name,operation){this.add_operation(this.get_type_operation(name,operation));return;}/**
	        This does it all: set fees, finalize, sign, and broadcast (if wanted).
	
	        @arg {ConfidentialWallet} cwallet - must be unlocked, used to gather signing keys
	
	        @arg {array<string>} [signer_pubkeys = null] - Optional ["GPHAbc9Def0...", ...].  These are additional signing keys.  Some balance claims require propritary address formats, the witness node can't tell us which ones are needed so they must be passed in.  If the witness node can figure out a signing key (mostly all other transactions), it should not be passed in here.
	
	        @arg {boolean} [broadcast = false]
	    */},{key:'process_transaction',value:function process_transaction(cwallet){var _this14=this;var signer_pubkeys=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var broadcast=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var wallet_object=cwallet.wallet.wallet_object;if(__WEBPACK_IMPORTED_MODULE_3_cybexjs_ws__["Apis"].instance().chain_id!==wallet_object.get("chain_id"))return _promise2.default.reject("Mismatched chain_id; expecting "+wallet_object.get("chain_id")+", but got "+__WEBPACK_IMPORTED_MODULE_3_cybexjs_ws__["Apis"].instance().chain_id);return this.set_required_fees().then(function(){var signer_pubkeys_added={};if(signer_pubkeys){// Balance claims are by address, only the private
	// key holder can know about these additional
	// potential keys.
	var pubkeys=cwallet.getPubkeys_having_PrivateKey(signer_pubkeys);if(!pubkeys.length)throw new Error("Missing signing key");var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=(0,_getIterator3.default)(pubkeys),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var pubkey_string=_step.value;var private_key=cwallet.getPrivateKey(pubkey_string);_this14.add_signer(private_key,pubkey_string);signer_pubkeys_added[pubkey_string]=true;}}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(!_iteratorNormalCompletion&&_iterator.return){_iterator.return();}}finally{if(_didIteratorError){throw _iteratorError;}}}}return _this14.get_potential_signatures().then(function(_ref){var pubkeys=_ref.pubkeys,addys=_ref.addys;var my_pubkeys=cwallet.getPubkeys_having_PrivateKey(pubkeys,addys);//{//Testing only, don't send All public keys!
	//    var pubkeys_all = PrivateKeyStore.getPubkeys() // All public keys
	//    this.get_required_signatures(pubkeys_all).then( required_pubkey_strings =>
	//        console.log('get_required_signatures all\t',required_pubkey_strings.sort(), pubkeys_all))
	//    this.get_required_signatures(my_pubkeys).then( required_pubkey_strings =>
	//        console.log('get_required_signatures normal\t',required_pubkey_strings.sort(), pubkeys))
	//}
	return _this14.get_required_signatures(my_pubkeys).then(function(required_pubkeys){var _iteratorNormalCompletion2=true;var _didIteratorError2=false;var _iteratorError2=undefined;try{for(var _iterator2=(0,_getIterator3.default)(required_pubkeys),_step2;!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=true){var _pubkey_string=_step2.value;if(signer_pubkeys_added[_pubkey_string])continue;var private_key=cwallet.getPrivateKey(_pubkey_string);if(!private_key)// This should not happen, get_required_signatures will only
	// returned keys from my_pubkeys
	throw new Error("Missing signing key for "+_pubkey_string);_this14.add_signer(private_key,_pubkey_string);}}catch(err){_didIteratorError2=true;_iteratorError2=err;}finally{try{if(!_iteratorNormalCompletion2&&_iterator2.return){_iterator2.return();}}finally{if(_didIteratorError2){throw _iteratorError2;}}}});}).then(function(){return broadcast?_this14.broadcast():_this14.serialize();});});}/** Typically this is called automatically just prior to signing.  Once finalized this transaction can not be changed. */},{key:'finalize',value:function finalize(){var _this15=this;return new _promise2.default(function(resolve,reject){if(_this15.tr_buffer){throw new Error("already finalized");}resolve(__WEBPACK_IMPORTED_MODULE_3_cybexjs_ws__["Apis"].instance().db_api().exec("get_objects",[["2.1.0"]]).then(function(r){head_block_time_string=r[0].time;if(_this15.expiration===0)_this15.expiration=base_expiration_sec()+__WEBPACK_IMPORTED_MODULE_3_cybexjs_ws__["ChainConfig"].expire_in_secs;_this15.ref_block_num=r[0].head_block_number&0xffff;_this15.ref_block_prefix=new Buffer(r[0].head_block_id,"hex").readUInt32LE(4);//DEBUG console.log("ref_block",@ref_block_num,@ref_block_prefix,r)
	var iterable=_this15.operations;for(var i=0,op;i<iterable.length;i++){op=iterable[i];if(op[1]["finalize"]){op[1].finalize();}}_this15.tr_buffer=__WEBPACK_IMPORTED_MODULE_2__serializer__["a"/* ops */].transaction.toBuffer(_this15);}));});}/** @return {string} hex transaction ID */},{key:'id',value:function id(){if(!this.tr_buffer){throw new Error("not finalized");}return __WEBPACK_IMPORTED_MODULE_1__ecc__["d"/* hash */].sha256(this.tr_buffer).toString("hex").substring(0,40);}/**
	        Typically one will use {@link this.add_type_operation} instead.
	        @arg {array} operation - [operation_id, operation]
	    */},{key:'add_operation',value:function add_operation(operation){if(this.tr_buffer){throw new Error("already finalized");}__WEBPACK_IMPORTED_MODULE_0_assert___default()(operation,"operation");if(!Array.isArray(operation)){throw new Error("Expecting array [operation_id, operation]");}this.operations.push(operation);return;}},{key:'get_type_operation',value:function get_type_operation(name,operation){if(this.tr_buffer){throw new Error("already finalized");}__WEBPACK_IMPORTED_MODULE_0_assert___default()(name,"name");__WEBPACK_IMPORTED_MODULE_0_assert___default()(operation,"operation");var _type=__WEBPACK_IMPORTED_MODULE_2__serializer__["a"/* ops */][name];__WEBPACK_IMPORTED_MODULE_0_assert___default()(_type,'Unknown operation '+name);var operation_id=__WEBPACK_IMPORTED_MODULE_4__ChainTypes__["a"/* default */].operations[_type.operation_name];if(operation_id===undefined){throw new Error('unknown operation: '+_type.operation_name);}if(!operation.fee){operation.fee={amount:0,asset_id:0};}if(name==="proposal_create"){/*
	            * Proposals involving the committee account require a review
	            * period to be set, look for them here
	            */var requiresReview=false,extraReview=0;operation.proposed_ops.forEach(function(op){var COMMITTE_ACCOUNT=0;var key=void 0;switch(op.op[0]){case 0:// transfer
	key="from";break;case 6://account_update
	case 17:// asset_settle
	key="account";break;case 10:// asset_create
	case 11:// asset_update
	case 12:// asset_update_bitasset
	case 13:// asset_update_feed_producers
	case 14:// asset_issue
	case 18:// asset_global_settle
	case 43:// asset_claim_fees
	key="issuer";break;case 15:// asset_reserve
	key="payer";break;case 16:// asset_fund_fee_pool
	key="from_account";break;case 22:// proposal_create
	case 23:// proposal_update
	case 24:// proposal_delete
	key="fee_paying_account";break;case 45:// initiate_crowdfund
	key="owner";break;case 31:// committee_member_update_global_parameters
	requiresReview=true;extraReview=60*60*24*13;// Make the review period 2 weeks total
	break;}if(key in op.op[1]&&op.op[1][key]===COMMITTE_ACCOUNT){requiresReview=true;}});operation.expiration_time||(operation.expiration_time=base_expiration_sec()+__WEBPACK_IMPORTED_MODULE_3_cybexjs_ws__["ChainConfig"].expire_in_secs_proposal);if(requiresReview){operation.review_period_seconds=extraReview+Math.max(committee_min_review,24*60*60||__WEBPACK_IMPORTED_MODULE_3_cybexjs_ws__["ChainConfig"].review_in_secs_committee);/*
	                * Expiration time must be at least equal to
	                * now + review_period_seconds, so we add one hour to make sure
	                */operation.expiration_time+=60*60+extraReview;}}var operation_instance=_type.fromObject(operation);return[operation_id,operation_instance];}/* optional: fetch the current head block */},{key:'update_head_block',value:function update_head_block(){return _promise2.default.all([__WEBPACK_IMPORTED_MODULE_3_cybexjs_ws__["Apis"].instance().db_api().exec("get_objects",[["2.0.0"]]),__WEBPACK_IMPORTED_MODULE_3_cybexjs_ws__["Apis"].instance().db_api().exec("get_objects",[["2.1.0"]])]).then(function(res){var _res=(0,_slicedToArray3.default)(res,2),g=_res[0],r=_res[1];head_block_time_string=r[0].time;committee_min_review=g[0].parameters.committee_proposal_review_period;});}/** optional: there is a deafult expiration */},{key:'set_expire_seconds',value:function set_expire_seconds(sec){if(this.tr_buffer){throw new Error("already finalized");}return this.expiration=base_expiration_sec()+sec;}/* Wraps this transaction in a proposal_create transaction */},{key:'propose',value:function propose(proposal_create_options){if(this.tr_buffer){throw new Error("already finalized");}if(!this.operations.length){throw new Error("add operation first");}__WEBPACK_IMPORTED_MODULE_0_assert___default()(proposal_create_options,"proposal_create_options");__WEBPACK_IMPORTED_MODULE_0_assert___default()(proposal_create_options.fee_paying_account,"proposal_create_options.fee_paying_account");var proposed_ops=this.operations.map(function(op){return{op:op};});this.operations=[];this.signatures=[];this.signer_private_keys=[];proposal_create_options.proposed_ops=proposed_ops;this.add_type_operation("proposal_create",proposal_create_options);return this;}},{key:'has_proposed_operation',value:function has_proposed_operation(){var hasProposed=false;for(var i=0;i<this.operations.length;i++){if("proposed_ops"in this.operations[i][1]){hasProposed=true;break;}}return hasProposed;}/** optional: the fees can be obtained from the witness node */},{key:'set_required_fees',value:function set_required_fees(asset_id){var _this16=this;var fee_pool=void 0;if(this.tr_buffer){throw new Error("already finalized");}if(!this.operations.length){throw new Error("add operations first");}var operations=[];for(var i=0,op;i<this.operations.length;i++){op=this.operations[i];operations.push(__WEBPACK_IMPORTED_MODULE_2__serializer__["a"/* ops */].operation.toObject(op));}if(!asset_id){var op1_fee=operations[0][1].fee;if(op1_fee&&op1_fee.asset_id!==null){asset_id=op1_fee.asset_id;}else{asset_id="1.3.0";}}var promises=[__WEBPACK_IMPORTED_MODULE_3_cybexjs_ws__["Apis"].instance().db_api().exec("get_required_fees",[operations,asset_id])];if(asset_id!=="1.3.0"){// This handles the fallback to paying fees in CYB if the fee pool is empty.
	promises.push(__WEBPACK_IMPORTED_MODULE_3_cybexjs_ws__["Apis"].instance().db_api().exec("get_required_fees",[operations,"1.3.0"]));promises.push(__WEBPACK_IMPORTED_MODULE_3_cybexjs_ws__["Apis"].instance().db_api().exec("get_objects",[[asset_id]]));}var fees=void 0,coreFees=void 0,asset=void 0;return _promise2.default.all(promises).then(function(results){var _results=(0,_slicedToArray3.default)(results,3);fees=_results[0];coreFees=_results[1];asset=_results[2];asset=asset?asset[0]:null;var dynamicPromise=asset_id!=="1.3.0"&&asset?__WEBPACK_IMPORTED_MODULE_3_cybexjs_ws__["Apis"].instance().db_api().exec("get_objects",[[asset.dynamic_asset_data_id]]):new _promise2.default(function(resolve){return resolve();});return dynamicPromise;}).then(function(dynamicObject){if(asset_id!=="1.3.0"){fee_pool=dynamicObject?dynamicObject[0].fee_pool:0;var totalFees=0;for(var j=0,fee;j<coreFees.length;j++){fee=coreFees[j];totalFees+=fee.amount;}if(totalFees>parseInt(fee_pool,10)){fees=coreFees;asset_id="1.3.0";}}// Proposed transactions need to be flattened
	var flat_assets=[];var flatten=function flatten(obj){if(Array.isArray(obj)){for(var k=0,item;k<obj.length;k++){item=obj[k];flatten(item);}}else{flat_assets.push(obj);}return;};flatten(fees);var asset_index=0;var set_fee=function set_fee(operation){if(!operation.fee||operation.fee.amount===0||operation.fee.amount.toString&&operation.fee.amount.toString()==="0"// Long
	){operation.fee=flat_assets[asset_index];// console.log("new operation.fee", operation.fee)
	}else{// console.log("old operation.fee", operation.fee)
	}asset_index++;if(operation.proposed_ops){var result=[];for(var y=0;y<operation.proposed_ops.length;y++){result.push(set_fee(operation.proposed_ops[y].op[1]));}return result;}};for(var _i3=0;_i3<_this16.operations.length;_i3++){set_fee(_this16.operations[_i3][1]);}});//DEBUG console.log('... get_required_fees',operations,asset_id,flat_assets)
	}},{key:'get_potential_signatures',value:function get_potential_signatures(){var tr_object=__WEBPACK_IMPORTED_MODULE_2__serializer__["a"/* ops */].signed_transaction.toObject(this);return _promise2.default.all([__WEBPACK_IMPORTED_MODULE_3_cybexjs_ws__["Apis"].instance().db_api().exec("get_potential_signatures",[tr_object]),__WEBPACK_IMPORTED_MODULE_3_cybexjs_ws__["Apis"].instance().db_api().exec("get_potential_address_signatures",[tr_object])]).then(function(results){return{pubkeys:results[0],addys:results[1]};});}},{key:'get_required_signatures',value:function get_required_signatures(available_keys){console.log("AvL: ",available_keys);if(!available_keys.length){return _promise2.default.resolve([]);}var tr_object=__WEBPACK_IMPORTED_MODULE_2__serializer__["a"/* ops */].signed_transaction.toObject(this);//DEBUG console.log('... tr_object',tr_object)
	return __WEBPACK_IMPORTED_MODULE_3_cybexjs_ws__["Apis"].instance().db_api().exec("get_required_signatures",[tr_object,available_keys]).then(function(required_public_keys){//DEBUG console.log('... get_required_signatures',required_public_keys)
	return required_public_keys;});}},{key:'add_signer',value:function add_signer(private_key){var public_key=arguments.length>1&&arguments[1]!==undefined?arguments[1]:private_key.toPublicKey();__WEBPACK_IMPORTED_MODULE_0_assert___default()(private_key.d,"required PrivateKey object");if(this.signed){throw new Error("already signed");}if(!public_key.Q){public_key=__WEBPACK_IMPORTED_MODULE_1__ecc__["b"/* PublicKey */].fromPublicKeyString(public_key);}// prevent duplicates
	var spHex=private_key.toHex();var _iteratorNormalCompletion3=true;var _didIteratorError3=false;var _iteratorError3=undefined;try{for(var _iterator3=(0,_getIterator3.default)(this.signer_private_keys),_step3;!(_iteratorNormalCompletion3=(_step3=_iterator3.next()).done);_iteratorNormalCompletion3=true){var sp=_step3.value;if(sp[0].toHex()===spHex)return;}}catch(err){_didIteratorError3=true;_iteratorError3=err;}finally{try{if(!_iteratorNormalCompletion3&&_iterator3.return){_iterator3.return();}}finally{if(_didIteratorError3){throw _iteratorError3;}}}this.signer_private_keys.push([private_key,public_key]);}},{key:'sign',value:function sign(){var chain_id=arguments.length>0&&arguments[0]!==undefined?arguments[0]:__WEBPACK_IMPORTED_MODULE_3_cybexjs_ws__["Apis"].instance().chain_id;if(!this.tr_buffer){throw new Error("not finalized");}if(this.signed){throw new Error("already signed");}if(!this.signer_private_keys.length){throw new Error("Transaction was not signed. Do you have a private key? [no_signers]");}var end=this.signer_private_keys.length;for(var i=0;0<end?i<end:i>end;0<end?i++:i++){var _signer_private_keys$=(0,_slicedToArray3.default)(this.signer_private_keys[i],2),private_key=_signer_private_keys$[0],public_key=_signer_private_keys$[1];var sig=__WEBPACK_IMPORTED_MODULE_1__ecc__["c"/* Signature */].signBuffer(Buffer.concat([new Buffer(chain_id,"hex"),this.tr_buffer]),private_key,public_key);this.signatures.push(sig.toBuffer());}this.signer_private_keys=[];this.signed=true;return;}},{key:'serialize',value:function serialize(){return __WEBPACK_IMPORTED_MODULE_2__serializer__["a"/* ops */].signed_transaction.toObject(this);}},{key:'toObject',value:function toObject(){return __WEBPACK_IMPORTED_MODULE_2__serializer__["a"/* ops */].signed_transaction.toObject(this);}},{key:'broadcast',value:function broadcast(was_broadcast_callback){var _this17=this;if(this.tr_buffer){return this._broadcast(was_broadcast_callback);}else{return this.finalize().then(function(){return _this17._broadcast(was_broadcast_callback);});}}}]);return TransactionBuilder;}();var base_expiration_sec=function base_expiration_sec(){var head_block_sec=Math.ceil(getHeadBlockDate().getTime()/1000);var now_sec=Math.ceil(Date.now()/1000);// The head block time should be updated every 3 seconds.  If it isn't
	// then help the transaction to expire (use head_block_sec)
	if(now_sec-head_block_sec>30){return head_block_sec;}// If the user's clock is very far behind, use the head block time.
	return Math.max(now_sec,head_block_sec);};function _broadcast(was_broadcast_callback){var _this18=this;return new _promise2.default(function(resolve,reject){if(!_this18.signed){_this18.sign();}if(!_this18.tr_buffer){throw new Error("not finalized");}if(!_this18.signatures.length){throw new Error("not signed");}if(!_this18.operations.length){throw new Error("no operations");}var tr_object=__WEBPACK_IMPORTED_MODULE_2__serializer__["a"/* ops */].signed_transaction.toObject(_this18);// console.log('... broadcast_transaction_with_callback !!!')
	__WEBPACK_IMPORTED_MODULE_3_cybexjs_ws__["Apis"].instance().network_api().exec("broadcast_transaction_with_callback",[function(res){return resolve(res);},tr_object]).then(function(){//console.log('... broadcast success, waiting for callback')
	if(was_broadcast_callback)was_broadcast_callback();return;}).catch(function(error){// console.log may be redundant for network errors, other errors could occur
	console.log(error);var message=error.message;if(!message){message="";}reject(new Error(message+"\n"+"bitshares-crypto "+" digest "+__WEBPACK_IMPORTED_MODULE_1__ecc__["d"/* hash */].sha256(_this18.tr_buffer).toString("hex")+" transaction "+_this18.tr_buffer.toString("hex")+" "+(0,_stringify2.default)(tr_object)));return;});return;});}function getHeadBlockDate(){return timeStringToDate(head_block_time_string);}function timeStringToDate(time_string){if(!time_string)return new Date("1970-01-01T00:00:00.000Z");if(!/Z$/.test(time_string))//does not end in Z
	// https://github.com/cryptonomex/graphene/issues/368
	time_string=time_string+"Z";return new Date(time_string);}/* harmony default export */__webpack_exports__["a"]=TransactionBuilder;/***/},/* 78 *//***/function(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_assert__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_assert___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_assert__);/**
	    Convert 12.34 with a precision of 3 into 12340
	
	    @arg {number|string} number - Use strings for large numbers.  This may contain one decimal but no sign
	    @arg {number} precision - number of implied decimal places (usually causes right zero padding)
	    @return {string} -
	*/var NumberUtils={toImpliedDecimal:function toImpliedDecimal(number,precision){if(typeof number==="number"){__WEBPACK_IMPORTED_MODULE_0_assert___default()(number<=9007199254740991,"overflow");number=""+number;}else if(number.toString)number=number.toString();__WEBPACK_IMPORTED_MODULE_0_assert___default()(typeof number==="string","number should be an actual number or string: "+(typeof number==='undefined'?'undefined':(0,_typeof3.default)(number)));number=number.trim();__WEBPACK_IMPORTED_MODULE_0_assert___default()(/^[0-9]*\.?[0-9]*$/.test(number),"Invalid decimal number "+number);var _number$split=number.split("."),_number$split2=(0,_slicedToArray3.default)(_number$split,2),_number$split2$=_number$split2[0],whole=_number$split2$===undefined?"":_number$split2$,_number$split2$2=_number$split2[1],decimal=_number$split2$2===undefined?"":_number$split2$2;var padding=precision-decimal.length;__WEBPACK_IMPORTED_MODULE_0_assert___default()(padding>=0,"Too many decimal digits in "+number+" to create an implied decimal of "+precision);for(var i=0;i<padding;i++){decimal+="0";}while(whole.charAt(0)==="0"){whole=whole.substring(1);}return whole+decimal;}/* harmony default export */};__webpack_exports__["a"]=NumberUtils;/***/},/* 79 *//***/function(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_secure_random__=__webpack_require__(34);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_secure_random___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_secure_random__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_bytebuffer__=__webpack_require__(6);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_bytebuffer___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_bytebuffer__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__ecc__=__webpack_require__(17);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__serializer__=__webpack_require__(22);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4_cybexjs_ws__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4_cybexjs_ws___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_cybexjs_ws__);var helper={};helper.unique_nonce_entropy=null;helper.unique_nonce_uint64=function(){var entropy=helper.unique_nonce_entropy=function(){if(helper.unique_nonce_entropy===null){//console.log('... secureRandom.randomUint8Array(1)[0]',secureRandom.randomUint8Array(1)[0])
	return parseInt(__WEBPACK_IMPORTED_MODULE_0_secure_random___default.a.randomUint8Array(1)[0]);}else{return++helper.unique_nonce_entropy%256;}}();var long=__WEBPACK_IMPORTED_MODULE_1_bytebuffer__["Long"].fromNumber(Date.now());//console.log('unique_nonce_uint64 date\t',ByteBuffer.allocate(8).writeUint64(long).toHex(0))
	//console.log('unique_nonce_uint64 entropy\t',ByteBuffer.allocate(8).writeUint64(Long.fromNumber(entropy)).toHex(0))
	long=long.shiftLeft(8).or(__WEBPACK_IMPORTED_MODULE_1_bytebuffer__["Long"].fromNumber(entropy));//console.log('unique_nonce_uint64 shift8\t',ByteBuffer.allocate(8).writeUint64(long).toHex(0))
	return long.toString();};/* Todo, set fees */helper.to_json=function(tr){var broadcast=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;return function(tr,broadcast){var tr_object=__WEBPACK_IMPORTED_MODULE_3__serializer__["a"/* ops */].signed_transaction.toObject(tr);if(broadcast){var net=__WEBPACK_IMPORTED_MODULE_4_cybexjs_ws__["Apis"].instance().network_api();console.log('... tr_object',(0,_stringify2.default)(tr_object));return net.exec("broadcast_transaction",[tr_object]);}else{return tr_object;}}(tr,broadcast);};helper.signed_tr_json=function(tr,private_keys){var tr_buffer=__WEBPACK_IMPORTED_MODULE_3__serializer__["a"/* ops */].transaction.toBuffer(tr);tr=__WEBPACK_IMPORTED_MODULE_3__serializer__["a"/* ops */].transaction.toObject(tr);tr.signatures=function(){var result=[];for(var i=0;0<private_keys.length?i<private_keys.length:i>private_keys.length;0<private_keys.length?i++:i++){var private_key=private_keys[i];result.push(__WEBPACK_IMPORTED_MODULE_2__ecc__["c"/* Signature */].signBuffer(tr_buffer,private_key).toHex());}return result;}();return tr;};helper.expire_in_min=function(min){return Math.round(Date.now()/1000)+min*60;};helper.seconds_from_now=function(timeout_sec){return Math.round(Date.now()/1000)+timeout_sec;};/**
	    Print to the console a JSON representation of any object in
	    @graphene/serializer { types }
	*/helper.template=function(serializer_operation_type_name){var debug=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{use_default:true,annotate:true};var so=__WEBPACK_IMPORTED_MODULE_3__serializer__["a"/* ops */][serializer_operation_type_name];if(!so){throw new Error('unknown serializer_operation_type '+serializer_operation_type_name);}return so.toObject(undefined,debug);};helper.new_operation=function(serializer_operation_type_name){var so=__WEBPACK_IMPORTED_MODULE_3__serializer__["a"/* ops */][serializer_operation_type_name];if(!so){throw new Error('unknown serializer_operation_type '+serializer_operation_type_name);}var object=so.toObject(undefined,{use_default:true,annotate:true});return so.fromObject(object);};helper.instance=function(ObjectId){return ObjectId.substring("0.0.".length);};/* harmony default export */__webpack_exports__["a"]=helper;/***/},/* 80 *//***/function(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__ecc_src_PrivateKey__=__webpack_require__(10);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__ecc_src_KeyUtils__=__webpack_require__(20);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__state__=__webpack_require__(81);var _keyCachePriv={};var _keyCachePub={};var AccountLogin=function(){function AccountLogin(){(0,_classCallCheck3.default)(this,AccountLogin);var state={loggedIn:false,roles:["active","owner","memo"]};this.get=Object(__WEBPACK_IMPORTED_MODULE_2__state__["a"/* get */])(state);this.set=Object(__WEBPACK_IMPORTED_MODULE_2__state__["b"/* set */])(state);this.subs={};}(0,_createClass3.default)(AccountLogin,[{key:'addSubscription',value:function addSubscription(cb){this.subs[cb]=cb;}},{key:'setRoles',value:function setRoles(roles){this.set("roles",roles);}},{key:'generateKeys',value:function generateKeys(accountName,password,roles,prefix){var start=new Date().getTime();if(!accountName||!password){throw new Error("Account name or password required");}if(password.length<12){throw new Error("Password must have at least 12 characters");}var privKeys={};var pubKeys={};(roles||this.get("roles")).forEach(function(role){var seed=accountName+role+password;var pkey=_keyCachePriv[seed]?_keyCachePriv[seed]:__WEBPACK_IMPORTED_MODULE_0__ecc_src_PrivateKey__["a"/* default */].fromSeed(__WEBPACK_IMPORTED_MODULE_1__ecc_src_KeyUtils__["a"/* default */].normalize_brainKey(seed));_keyCachePriv[seed]=pkey;privKeys[role]=pkey;pubKeys[role]=_keyCachePub[seed]?_keyCachePub[seed]:pkey.toPublicKey().toString(prefix);_keyCachePub[seed]=pubKeys[role];});return{privKeys:privKeys,pubKeys:pubKeys};}},{key:'checkKeys',value:function checkKeys(_ref2){var _this19=this;var accountName=_ref2.accountName,password=_ref2.password,auths=_ref2.auths;if(!accountName||!password||!auths){throw new Error("checkKeys: Missing inputs");}var hasKey=false;var _loop=function _loop(role){var _generateKeys=_this19.generateKeys(accountName,password,[role]),privKeys=_generateKeys.privKeys,pubKeys=_generateKeys.pubKeys;auths[role].forEach(function(key){if(key[0]===pubKeys[role]){hasKey=true;_this19.set(role,{priv:privKeys[role],pub:pubKeys[role]});}});};for(var role in auths){_loop(role);};if(hasKey){this.set("name",accountName);}this.set("loggedIn",hasKey);return hasKey;}},{key:'signTransaction',value:function signTransaction(tr){var _this20=this;var myKeys={};var hasKey=false;this.get("roles").forEach(function(role){var myKey=_this20.get(role);if(myKey){hasKey=true;console.log("adding signer:",myKey.pub);tr.add_signer(myKey.priv,myKey.pub);}});if(!hasKey){throw new Error("You do not have any private keys to sign this transaction");}}}]);return AccountLogin;}();var accountLogin=new AccountLogin();/* harmony default export */__webpack_exports__["a"]=accountLogin;/***/},/* 81 *//***/function(module,__webpack_exports__,__webpack_require__){"use strict";/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return get;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"b",function(){return set;});function get(state){return function(key){return state[key]||"";};}function set(state){return function(key,value){state[key]=value;return this;};}/***/}]/******/));});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(92).Buffer, __webpack_require__(90), __webpack_require__(160)(module)))

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(185), __esModule: true };

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(48);
	__webpack_require__(4);
	module.exports = __webpack_require__(186);


/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

	var anObject = __webpack_require__(17);
	var get = __webpack_require__(58);
	module.exports = __webpack_require__(12).getIterator = function (it) {
	  var iterFn = get(it);
	  if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');
	  return anObject(iterFn.call(it));
	};


/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(188), __esModule: true };

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(189);
	module.exports = __webpack_require__(12).Object.assign;


/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.3.1 Object.assign(target, source)
	var $export = __webpack_require__(10);
	
	$export($export.S + $export.F, 'Object', { assign: __webpack_require__(190) });


/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.2.1 Object.assign(target, source, ...)
	var getKeys = __webpack_require__(31);
	var gOPS = __webpack_require__(191);
	var pIE = __webpack_require__(192);
	var toObject = __webpack_require__(47);
	var IObject = __webpack_require__(34);
	var $assign = Object.assign;
	
	// should work with symbols and should have deterministic property order (V8 bug)
	module.exports = !$assign || __webpack_require__(21)(function () {
	  var A = {};
	  var B = {};
	  // eslint-disable-next-line no-undef
	  var S = Symbol();
	  var K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function (k) { B[k] = k; });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
	  var T = toObject(target);
	  var aLen = arguments.length;
	  var index = 1;
	  var getSymbols = gOPS.f;
	  var isEnum = pIE.f;
	  while (aLen > index) {
	    var S = IObject(arguments[index++]);
	    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
	    var length = keys.length;
	    var j = 0;
	    var key;
	    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
	  } return T;
	} : $assign;


/***/ }),
/* 191 */
/***/ (function(module, exports) {

	exports.f = Object.getOwnPropertySymbols;


/***/ }),
/* 192 */
/***/ (function(module, exports) {

	exports.f = {}.propertyIsEnumerable;


/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(194), __esModule: true };

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(195);
	var $Object = __webpack_require__(12).Object;
	module.exports = function defineProperties(T, D) {
	  return $Object.defineProperties(T, D);
	};


/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(10);
	// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
	$export($export.S + $export.F * !__webpack_require__(20), 'Object', { defineProperties: __webpack_require__(30) });


/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(197), __esModule: true };

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(198);
	module.exports = __webpack_require__(12).Object.getOwnPropertySymbols;


/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var global = __webpack_require__(11);
	var has = __webpack_require__(25);
	var DESCRIPTORS = __webpack_require__(20);
	var $export = __webpack_require__(10);
	var redefine = __webpack_require__(26);
	var META = __webpack_require__(199).KEY;
	var $fails = __webpack_require__(21);
	var shared = __webpack_require__(40);
	var setToStringTag = __webpack_require__(44);
	var uid = __webpack_require__(41);
	var wks = __webpack_require__(45);
	var wksExt = __webpack_require__(200);
	var wksDefine = __webpack_require__(201);
	var enumKeys = __webpack_require__(202);
	var isArray = __webpack_require__(203);
	var anObject = __webpack_require__(17);
	var isObject = __webpack_require__(18);
	var toIObject = __webpack_require__(33);
	var toPrimitive = __webpack_require__(23);
	var createDesc = __webpack_require__(24);
	var _create = __webpack_require__(29);
	var gOPNExt = __webpack_require__(204);
	var $GOPD = __webpack_require__(206);
	var $DP = __webpack_require__(16);
	var $keys = __webpack_require__(31);
	var gOPD = $GOPD.f;
	var dP = $DP.f;
	var gOPN = gOPNExt.f;
	var $Symbol = global.Symbol;
	var $JSON = global.JSON;
	var _stringify = $JSON && $JSON.stringify;
	var PROTOTYPE = 'prototype';
	var HIDDEN = wks('_hidden');
	var TO_PRIMITIVE = wks('toPrimitive');
	var isEnum = {}.propertyIsEnumerable;
	var SymbolRegistry = shared('symbol-registry');
	var AllSymbols = shared('symbols');
	var OPSymbols = shared('op-symbols');
	var ObjectProto = Object[PROTOTYPE];
	var USE_NATIVE = typeof $Symbol == 'function';
	var QObject = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
	
	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function () {
	  return _create(dP({}, 'a', {
	    get: function () { return dP(this, 'a', { value: 7 }).a; }
	  })).a != 7;
	}) ? function (it, key, D) {
	  var protoDesc = gOPD(ObjectProto, key);
	  if (protoDesc) delete ObjectProto[key];
	  dP(it, key, D);
	  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
	} : dP;
	
	var wrap = function (tag) {
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};
	
	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
	  return typeof it == 'symbol';
	} : function (it) {
	  return it instanceof $Symbol;
	};
	
	var $defineProperty = function defineProperty(it, key, D) {
	  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if (has(AllSymbols, key)) {
	    if (!D.enumerable) {
	      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
	      D = _create(D, { enumerable: createDesc(0, false) });
	    } return setSymbolDesc(it, key, D);
	  } return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P) {
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P));
	  var i = 0;
	  var l = keys.length;
	  var key;
	  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P) {
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key) {
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
	  it = toIObject(it);
	  key = toPrimitive(key, true);
	  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
	  var D = gOPD(it, key);
	  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it) {
	  var names = gOPN(toIObject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
	  } return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
	  var IS_OP = it === ObjectProto;
	  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
	  } return result;
	};
	
	// 19.4.1.1 Symbol([description])
	if (!USE_NATIVE) {
	  $Symbol = function Symbol() {
	    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function (value) {
	      if (this === ObjectProto) $set.call(OPSymbols, value);
	      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    };
	    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
	    return this._k;
	  });
	
	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f = $defineProperty;
	  __webpack_require__(205).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(192).f = $propertyIsEnumerable;
	  __webpack_require__(191).f = $getOwnPropertySymbols;
	
	  if (DESCRIPTORS && !__webpack_require__(9)) {
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }
	
	  wksExt.f = function (name) {
	    return wrap(wks(name));
	  };
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });
	
	for (var es6Symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);
	
	for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);
	
	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function (key) {
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(sym) {
	    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
	    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
	  },
	  useSetter: function () { setter = true; },
	  useSimple: function () { setter = false; }
	});
	
	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});
	
	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it) {
	    var args = [it];
	    var i = 1;
	    var replacer, $replacer;
	    while (arguments.length > i) args.push(arguments[i++]);
	    $replacer = replacer = args[1];
	    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
	    if (!isArray(replacer)) replacer = function (key, value) {
	      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
	      if (!isSymbol(value)) return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});
	
	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(15)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);


/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

	var META = __webpack_require__(41)('meta');
	var isObject = __webpack_require__(18);
	var has = __webpack_require__(25);
	var setDesc = __webpack_require__(16).f;
	var id = 0;
	var isExtensible = Object.isExtensible || function () {
	  return true;
	};
	var FREEZE = !__webpack_require__(21)(function () {
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function (it) {
	  setDesc(it, META, { value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  } });
	};
	var fastKey = function (it, create) {
	  // return primitive with prefix
	  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if (!has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return 'F';
	    // not necessary to add metadata
	    if (!create) return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function (it, create) {
	  if (!has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return true;
	    // not necessary to add metadata
	    if (!create) return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function (it) {
	  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY: META,
	  NEED: false,
	  fastKey: fastKey,
	  getWeak: getWeak,
	  onFreeze: onFreeze
	};


/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

	exports.f = __webpack_require__(45);


/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(11);
	var core = __webpack_require__(12);
	var LIBRARY = __webpack_require__(9);
	var wksExt = __webpack_require__(200);
	var defineProperty = __webpack_require__(16).f;
	module.exports = function (name) {
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
	};


/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(31);
	var gOPS = __webpack_require__(191);
	var pIE = __webpack_require__(192);
	module.exports = function (it) {
	  var result = getKeys(it);
	  var getSymbols = gOPS.f;
	  if (getSymbols) {
	    var symbols = getSymbols(it);
	    var isEnum = pIE.f;
	    var i = 0;
	    var key;
	    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
	  } return result;
	};


/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(35);
	module.exports = Array.isArray || function isArray(arg) {
	  return cof(arg) == 'Array';
	};


/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(33);
	var gOPN = __webpack_require__(205).f;
	var toString = {}.toString;
	
	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];
	
	var getWindowNames = function (it) {
	  try {
	    return gOPN(it);
	  } catch (e) {
	    return windowNames.slice();
	  }
	};
	
	module.exports.f = function getOwnPropertyNames(it) {
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};


/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys = __webpack_require__(32);
	var hiddenKeys = __webpack_require__(42).concat('length', 'prototype');
	
	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return $keys(O, hiddenKeys);
	};


/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

	var pIE = __webpack_require__(192);
	var createDesc = __webpack_require__(24);
	var toIObject = __webpack_require__(33);
	var toPrimitive = __webpack_require__(23);
	var has = __webpack_require__(25);
	var IE8_DOM_DEFINE = __webpack_require__(19);
	var gOPD = Object.getOwnPropertyDescriptor;
	
	exports.f = __webpack_require__(20) ? gOPD : function getOwnPropertyDescriptor(O, P) {
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if (IE8_DOM_DEFINE) try {
	    return gOPD(O, P);
	  } catch (e) { /* empty */ }
	  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
	};


/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(208), __esModule: true };

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(209);
	module.exports = __webpack_require__(12).Object.getPrototypeOf;


/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.9 Object.getPrototypeOf(O)
	var toObject = __webpack_require__(47);
	var $getPrototypeOf = __webpack_require__(46);
	
	__webpack_require__(210)('getPrototypeOf', function () {
	  return function getPrototypeOf(it) {
	    return $getPrototypeOf(toObject(it));
	  };
	});


/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(10);
	var core = __webpack_require__(12);
	var fails = __webpack_require__(21);
	module.exports = function (KEY, exec) {
	  var fn = (core.Object || {})[KEY] || Object[KEY];
	  var exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
	};


/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(212), __esModule: true };

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(3);
	__webpack_require__(48);
	__webpack_require__(213);
	__webpack_require__(220);
	__webpack_require__(222);
	module.exports = __webpack_require__(12).WeakMap;


/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var global = __webpack_require__(11);
	var each = __webpack_require__(214)(0);
	var redefine = __webpack_require__(26);
	var meta = __webpack_require__(199);
	var assign = __webpack_require__(190);
	var weak = __webpack_require__(217);
	var isObject = __webpack_require__(18);
	var validate = __webpack_require__(218);
	var NATIVE_WEAK_MAP = __webpack_require__(218);
	var IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;
	var WEAK_MAP = 'WeakMap';
	var getWeak = meta.getWeak;
	var isExtensible = Object.isExtensible;
	var uncaughtFrozenStore = weak.ufstore;
	var InternalMap;
	
	var wrapper = function (get) {
	  return function WeakMap() {
	    return get(this, arguments.length > 0 ? arguments[0] : undefined);
	  };
	};
	
	var methods = {
	  // 23.3.3.3 WeakMap.prototype.get(key)
	  get: function get(key) {
	    if (isObject(key)) {
	      var data = getWeak(key);
	      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
	      return data ? data[this._i] : undefined;
	    }
	  },
	  // 23.3.3.5 WeakMap.prototype.set(key, value)
	  set: function set(key, value) {
	    return weak.def(validate(this, WEAK_MAP), key, value);
	  }
	};
	
	// 23.3 WeakMap Objects
	var $WeakMap = module.exports = __webpack_require__(219)(WEAK_MAP, wrapper, methods, weak, true, true);
	
	// IE11 WeakMap frozen keys fix
	if (NATIVE_WEAK_MAP && IS_IE11) {
	  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
	  assign(InternalMap.prototype, methods);
	  meta.NEED = true;
	  each(['delete', 'has', 'get', 'set'], function (key) {
	    var proto = $WeakMap.prototype;
	    var method = proto[key];
	    redefine(proto, key, function (a, b) {
	      // store frozen objects on internal weakmap shim
	      if (isObject(a) && !isExtensible(a)) {
	        if (!this._f) this._f = new InternalMap();
	        var result = this._f[key](a, b);
	        return key == 'set' ? this : result;
	      // store all the rest on native weakmap
	      } return method.call(this, a, b);
	    });
	  });
	}


/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

	// 0 -> Array#forEach
	// 1 -> Array#map
	// 2 -> Array#filter
	// 3 -> Array#some
	// 4 -> Array#every
	// 5 -> Array#find
	// 6 -> Array#findIndex
	var ctx = __webpack_require__(13);
	var IObject = __webpack_require__(34);
	var toObject = __webpack_require__(47);
	var toLength = __webpack_require__(37);
	var asc = __webpack_require__(215);
	module.exports = function (TYPE, $create) {
	  var IS_MAP = TYPE == 1;
	  var IS_FILTER = TYPE == 2;
	  var IS_SOME = TYPE == 3;
	  var IS_EVERY = TYPE == 4;
	  var IS_FIND_INDEX = TYPE == 6;
	  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
	  var create = $create || asc;
	  return function ($this, callbackfn, that) {
	    var O = toObject($this);
	    var self = IObject(O);
	    var f = ctx(callbackfn, that, 3);
	    var length = toLength(self.length);
	    var index = 0;
	    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
	    var val, res;
	    for (;length > index; index++) if (NO_HOLES || index in self) {
	      val = self[index];
	      res = f(val, index, O);
	      if (TYPE) {
	        if (IS_MAP) result[index] = res;   // map
	        else if (res) switch (TYPE) {
	          case 3: return true;             // some
	          case 5: return val;              // find
	          case 6: return index;            // findIndex
	          case 2: result.push(val);        // filter
	        } else if (IS_EVERY) return false; // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
	  };
	};


/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

	// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
	var speciesConstructor = __webpack_require__(216);
	
	module.exports = function (original, length) {
	  return new (speciesConstructor(original))(length);
	};


/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(18);
	var isArray = __webpack_require__(203);
	var SPECIES = __webpack_require__(45)('species');
	
	module.exports = function (original) {
	  var C;
	  if (isArray(original)) {
	    C = original.constructor;
	    // cross-realm fallback
	    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
	    if (isObject(C)) {
	      C = C[SPECIES];
	      if (C === null) C = undefined;
	    }
	  } return C === undefined ? Array : C;
	};


/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var redefineAll = __webpack_require__(67);
	var getWeak = __webpack_require__(199).getWeak;
	var anObject = __webpack_require__(17);
	var isObject = __webpack_require__(18);
	var anInstance = __webpack_require__(54);
	var forOf = __webpack_require__(55);
	var createArrayMethod = __webpack_require__(214);
	var $has = __webpack_require__(25);
	var validate = __webpack_require__(218);
	var arrayFind = createArrayMethod(5);
	var arrayFindIndex = createArrayMethod(6);
	var id = 0;
	
	// fallback for uncaught frozen keys
	var uncaughtFrozenStore = function (that) {
	  return that._l || (that._l = new UncaughtFrozenStore());
	};
	var UncaughtFrozenStore = function () {
	  this.a = [];
	};
	var findUncaughtFrozen = function (store, key) {
	  return arrayFind(store.a, function (it) {
	    return it[0] === key;
	  });
	};
	UncaughtFrozenStore.prototype = {
	  get: function (key) {
	    var entry = findUncaughtFrozen(this, key);
	    if (entry) return entry[1];
	  },
	  has: function (key) {
	    return !!findUncaughtFrozen(this, key);
	  },
	  set: function (key, value) {
	    var entry = findUncaughtFrozen(this, key);
	    if (entry) entry[1] = value;
	    else this.a.push([key, value]);
	  },
	  'delete': function (key) {
	    var index = arrayFindIndex(this.a, function (it) {
	      return it[0] === key;
	    });
	    if (~index) this.a.splice(index, 1);
	    return !!~index;
	  }
	};
	
	module.exports = {
	  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
	    var C = wrapper(function (that, iterable) {
	      anInstance(that, C, NAME, '_i');
	      that._t = NAME;      // collection type
	      that._i = id++;      // collection id
	      that._l = undefined; // leak store for uncaught frozen objects
	      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    redefineAll(C.prototype, {
	      // 23.3.3.2 WeakMap.prototype.delete(key)
	      // 23.4.3.3 WeakSet.prototype.delete(value)
	      'delete': function (key) {
	        if (!isObject(key)) return false;
	        var data = getWeak(key);
	        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
	        return data && $has(data, this._i) && delete data[this._i];
	      },
	      // 23.3.3.4 WeakMap.prototype.has(key)
	      // 23.4.3.4 WeakSet.prototype.has(value)
	      has: function has(key) {
	        if (!isObject(key)) return false;
	        var data = getWeak(key);
	        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
	        return data && $has(data, this._i);
	      }
	    });
	    return C;
	  },
	  def: function (that, key, value) {
	    var data = getWeak(anObject(key), true);
	    if (data === true) uncaughtFrozenStore(that).set(key, value);
	    else data[that._i] = value;
	    return that;
	  },
	  ufstore: uncaughtFrozenStore
	};


/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(18);
	module.exports = function (it, TYPE) {
	  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
	  return it;
	};


/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var global = __webpack_require__(11);
	var $export = __webpack_require__(10);
	var meta = __webpack_require__(199);
	var fails = __webpack_require__(21);
	var hide = __webpack_require__(15);
	var redefineAll = __webpack_require__(67);
	var forOf = __webpack_require__(55);
	var anInstance = __webpack_require__(54);
	var isObject = __webpack_require__(18);
	var setToStringTag = __webpack_require__(44);
	var dP = __webpack_require__(16).f;
	var each = __webpack_require__(214)(0);
	var DESCRIPTORS = __webpack_require__(20);
	
	module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
	  var Base = global[NAME];
	  var C = Base;
	  var ADDER = IS_MAP ? 'set' : 'add';
	  var proto = C && C.prototype;
	  var O = {};
	  if (!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
	    new C().entries().next();
	  }))) {
	    // create collection constructor
	    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
	    redefineAll(C.prototype, methods);
	    meta.NEED = true;
	  } else {
	    C = wrapper(function (target, iterable) {
	      anInstance(target, C, NAME, '_c');
	      target._c = new Base();
	      if (iterable != undefined) forOf(iterable, IS_MAP, target[ADDER], target);
	    });
	    each('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON'.split(','), function (KEY) {
	      var IS_ADDER = KEY == 'add' || KEY == 'set';
	      if (KEY in proto && !(IS_WEAK && KEY == 'clear')) hide(C.prototype, KEY, function (a, b) {
	        anInstance(this, C, KEY);
	        if (!IS_ADDER && IS_WEAK && !isObject(a)) return KEY == 'get' ? undefined : false;
	        var result = this._c[KEY](a === 0 ? 0 : a, b);
	        return IS_ADDER ? this : result;
	      });
	    });
	    IS_WEAK || dP(C.prototype, 'size', {
	      get: function () {
	        return this._c.size;
	      }
	    });
	  }
	
	  setToStringTag(C, NAME);
	
	  O[NAME] = C;
	  $export($export.G + $export.W + $export.F, O);
	
	  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);
	
	  return C;
	};


/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

	// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of
	__webpack_require__(221)('WeakMap');


/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// https://tc39.github.io/proposal-setmap-offrom/
	var $export = __webpack_require__(10);
	
	module.exports = function (COLLECTION) {
	  $export($export.S, COLLECTION, { of: function of() {
	    var length = arguments.length;
	    var A = new Array(length);
	    while (length--) A[length] = arguments[length];
	    return new this(A);
	  } });
	};


/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

	// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from
	__webpack_require__(223)('WeakMap');


/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// https://tc39.github.io/proposal-setmap-offrom/
	var $export = __webpack_require__(10);
	var aFunction = __webpack_require__(14);
	var ctx = __webpack_require__(13);
	var forOf = __webpack_require__(55);
	
	module.exports = function (COLLECTION) {
	  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {
	    var mapFn = arguments[1];
	    var mapping, A, n, cb;
	    aFunction(this);
	    mapping = mapFn !== undefined;
	    if (mapping) aFunction(mapFn);
	    if (source == undefined) return new this();
	    A = [];
	    if (mapping) {
	      n = 0;
	      cb = ctx(mapFn, arguments[2], 2);
	      forOf(source, false, function (nextItem) {
	        A.push(cb(nextItem, n++));
	      });
	    } else {
	      forOf(source, false, A.push, A);
	    }
	    return new this(A);
	  } });
	};


/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(225), __esModule: true };

/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(226);
	module.exports = __webpack_require__(12).Object.isExtensible;


/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.11 Object.isExtensible(O)
	var isObject = __webpack_require__(18);
	
	__webpack_require__(210)('isExtensible', function ($isExtensible) {
	  return function isExtensible(it) {
	    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
	  };
	});


/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(228), __esModule: true };

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(229);
	module.exports = __webpack_require__(12).Math.imul;


/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.18 Math.imul(x, y)
	var $export = __webpack_require__(10);
	var $imul = Math.imul;
	
	// some WebKit versions fails with big numbers, some has wrong arity
	$export($export.S + $export.F * __webpack_require__(21)(function () {
	  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
	}), 'Math', {
	  imul: function imul(x, y) {
	    var UINT16 = 0xffff;
	    var xn = +x;
	    var yn = +y;
	    var xl = UINT16 & xn;
	    var yl = UINT16 & yn;
	    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
	  }
	});


/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(231), __esModule: true };

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(4);
	__webpack_require__(48);
	module.exports = __webpack_require__(200).f('iterator');


/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(233), __esModule: true };

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(198);
	__webpack_require__(3);
	__webpack_require__(234);
	__webpack_require__(235);
	module.exports = __webpack_require__(12).Symbol;


/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(201)('asyncIterator');


/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(201)('observable');


/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(237), __esModule: true };

/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(3);
	__webpack_require__(4);
	__webpack_require__(48);
	__webpack_require__(238);
	__webpack_require__(240);
	__webpack_require__(243);
	__webpack_require__(244);
	module.exports = __webpack_require__(12).Map;


/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(239);
	var validate = __webpack_require__(218);
	var MAP = 'Map';
	
	// 23.1 Map Objects
	module.exports = __webpack_require__(219)(MAP, function (get) {
	  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.1.3.6 Map.prototype.get(key)
	  get: function get(key) {
	    var entry = strong.getEntry(validate(this, MAP), key);
	    return entry && entry.v;
	  },
	  // 23.1.3.9 Map.prototype.set(key, value)
	  set: function set(key, value) {
	    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
	  }
	}, strong, true);


/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var dP = __webpack_require__(16).f;
	var create = __webpack_require__(29);
	var redefineAll = __webpack_require__(67);
	var ctx = __webpack_require__(13);
	var anInstance = __webpack_require__(54);
	var forOf = __webpack_require__(55);
	var $iterDefine = __webpack_require__(8);
	var step = __webpack_require__(51);
	var setSpecies = __webpack_require__(68);
	var DESCRIPTORS = __webpack_require__(20);
	var fastKey = __webpack_require__(199).fastKey;
	var validate = __webpack_require__(218);
	var SIZE = DESCRIPTORS ? '_s' : 'size';
	
	var getEntry = function (that, key) {
	  // fast case
	  var index = fastKey(key);
	  var entry;
	  if (index !== 'F') return that._i[index];
	  // frozen object case
	  for (entry = that._f; entry; entry = entry.n) {
	    if (entry.k == key) return entry;
	  }
	};
	
	module.exports = {
	  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
	    var C = wrapper(function (that, iterable) {
	      anInstance(that, C, NAME, '_i');
	      that._t = NAME;         // collection type
	      that._i = create(null); // index
	      that._f = undefined;    // first entry
	      that._l = undefined;    // last entry
	      that[SIZE] = 0;         // size
	      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    redefineAll(C.prototype, {
	      // 23.1.3.1 Map.prototype.clear()
	      // 23.2.3.2 Set.prototype.clear()
	      clear: function clear() {
	        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
	          entry.r = true;
	          if (entry.p) entry.p = entry.p.n = undefined;
	          delete data[entry.i];
	        }
	        that._f = that._l = undefined;
	        that[SIZE] = 0;
	      },
	      // 23.1.3.3 Map.prototype.delete(key)
	      // 23.2.3.4 Set.prototype.delete(value)
	      'delete': function (key) {
	        var that = validate(this, NAME);
	        var entry = getEntry(that, key);
	        if (entry) {
	          var next = entry.n;
	          var prev = entry.p;
	          delete that._i[entry.i];
	          entry.r = true;
	          if (prev) prev.n = next;
	          if (next) next.p = prev;
	          if (that._f == entry) that._f = next;
	          if (that._l == entry) that._l = prev;
	          that[SIZE]--;
	        } return !!entry;
	      },
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
	      forEach: function forEach(callbackfn /* , that = undefined */) {
	        validate(this, NAME);
	        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
	        var entry;
	        while (entry = entry ? entry.n : this._f) {
	          f(entry.v, entry.k, this);
	          // revert to the last existing entry
	          while (entry && entry.r) entry = entry.p;
	        }
	      },
	      // 23.1.3.7 Map.prototype.has(key)
	      // 23.2.3.7 Set.prototype.has(value)
	      has: function has(key) {
	        return !!getEntry(validate(this, NAME), key);
	      }
	    });
	    if (DESCRIPTORS) dP(C.prototype, 'size', {
	      get: function () {
	        return validate(this, NAME)[SIZE];
	      }
	    });
	    return C;
	  },
	  def: function (that, key, value) {
	    var entry = getEntry(that, key);
	    var prev, index;
	    // change existing entry
	    if (entry) {
	      entry.v = value;
	    // create new entry
	    } else {
	      that._l = entry = {
	        i: index = fastKey(key, true), // <- index
	        k: key,                        // <- key
	        v: value,                      // <- value
	        p: prev = that._l,             // <- previous entry
	        n: undefined,                  // <- next entry
	        r: false                       // <- removed
	      };
	      if (!that._f) that._f = entry;
	      if (prev) prev.n = entry;
	      that[SIZE]++;
	      // add to index
	      if (index !== 'F') that._i[index] = entry;
	    } return that;
	  },
	  getEntry: getEntry,
	  setStrong: function (C, NAME, IS_MAP) {
	    // add .keys, .values, .entries, [@@iterator]
	    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
	    $iterDefine(C, NAME, function (iterated, kind) {
	      this._t = validate(iterated, NAME); // target
	      this._k = kind;                     // kind
	      this._l = undefined;                // previous
	    }, function () {
	      var that = this;
	      var kind = that._k;
	      var entry = that._l;
	      // revert to the last existing entry
	      while (entry && entry.r) entry = entry.p;
	      // get next entry
	      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
	        // or finish the iteration
	        that._t = undefined;
	        return step(1);
	      }
	      // return step by kind
	      if (kind == 'keys') return step(0, entry.k);
	      if (kind == 'values') return step(0, entry.v);
	      return step(0, [entry.k, entry.v]);
	    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);
	
	    // add [@@species], 23.1.2.2, 23.2.2.2
	    setSpecies(NAME);
	  }
	};


/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var $export = __webpack_require__(10);
	
	$export($export.P + $export.R, 'Map', { toJSON: __webpack_require__(241)('Map') });


/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var classof = __webpack_require__(53);
	var from = __webpack_require__(242);
	module.exports = function (NAME) {
	  return function toJSON() {
	    if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
	    return from(this);
	  };
	};


/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

	var forOf = __webpack_require__(55);
	
	module.exports = function (iter, ITERATOR) {
	  var result = [];
	  forOf(iter, false, result.push, result, ITERATOR);
	  return result;
	};


/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

	// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
	__webpack_require__(221)('Map');


/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

	// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
	__webpack_require__(223)('Map');


/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(246), __esModule: true };

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(3);
	__webpack_require__(4);
	__webpack_require__(48);
	__webpack_require__(247);
	__webpack_require__(248);
	__webpack_require__(249);
	__webpack_require__(250);
	module.exports = __webpack_require__(12).Set;


/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(239);
	var validate = __webpack_require__(218);
	var SET = 'Set';
	
	// 23.2 Set Objects
	module.exports = __webpack_require__(219)(SET, function (get) {
	  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.2.3.1 Set.prototype.add(value)
	  add: function add(value) {
	    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
	  }
	}, strong);


/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var $export = __webpack_require__(10);
	
	$export($export.P + $export.R, 'Set', { toJSON: __webpack_require__(241)('Set') });


/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

	// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
	__webpack_require__(221)('Set');


/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

	// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
	__webpack_require__(223)('Set');


/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _isIterable2 = __webpack_require__(252);
	
	var _isIterable3 = _interopRequireDefault(_isIterable2);
	
	var _getIterator2 = __webpack_require__(184);
	
	var _getIterator3 = _interopRequireDefault(_getIterator2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function () {
	  function sliceIterator(arr, i) {
	    var _arr = [];
	    var _n = true;
	    var _d = false;
	    var _e = undefined;
	
	    try {
	      for (var _i = (0, _getIterator3.default)(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {
	        _arr.push(_s.value);
	
	        if (i && _arr.length === i) break;
	      }
	    } catch (err) {
	      _d = true;
	      _e = err;
	    } finally {
	      try {
	        if (!_n && _i["return"]) _i["return"]();
	      } finally {
	        if (_d) throw _e;
	      }
	    }
	
	    return _arr;
	  }
	
	  return function (arr, i) {
	    if (Array.isArray(arr)) {
	      return arr;
	    } else if ((0, _isIterable3.default)(Object(arr))) {
	      return sliceIterator(arr, i);
	    } else {
	      throw new TypeError("Invalid attempt to destructure non-iterable instance");
	    }
	  };
	}();

/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(253), __esModule: true };

/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(48);
	__webpack_require__(4);
	module.exports = __webpack_require__(254);


/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

	var classof = __webpack_require__(53);
	var ITERATOR = __webpack_require__(45)('iterator');
	var Iterators = __webpack_require__(27);
	module.exports = __webpack_require__(12).isIterable = function (it) {
	  var O = Object(it);
	  return O[ITERATOR] !== undefined
	    || '@@iterator' in O
	    // eslint-disable-next-line no-prototype-builtins
	    || Iterators.hasOwnProperty(classof(O));
	};


/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(256), __esModule: true };

/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(257);
	module.exports = __webpack_require__(12).Object.keys;


/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.14 Object.keys(O)
	var toObject = __webpack_require__(47);
	var $keys = __webpack_require__(31);
	
	__webpack_require__(210)('keys', function () {
	  return function keys(it) {
	    return $keys(toObject(it));
	  };
	});


/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(259), __esModule: true };

/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(260);
	var $Object = __webpack_require__(12).Object;
	module.exports = function create(P, D) {
	  return $Object.create(P, D);
	};


/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(10);
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	$export($export.S, 'Object', { create: __webpack_require__(29) });


/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _iterator = __webpack_require__(230);
	
	var _iterator2 = _interopRequireDefault(_iterator);
	
	var _symbol = __webpack_require__(232);
	
	var _symbol2 = _interopRequireDefault(_symbol);
	
	var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
	} : function (obj) {
	  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
	};

/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {!function(e,t){ true?module.exports=t():"function"==typeof define&&define.amd?define("cybexjs-ws",[],t):"object"==typeof exports?exports["cybexjs-ws"]=t():e["cybexjs-ws"]=t()}(global,function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=22)}([function(e,t,n){var r=n(16),i=r.Buffer;function o(e,t){for(var n in e)t[n]=e[n]}function s(e,t,n){return i(e,t,n)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?e.exports=r:(o(r,t),t.Buffer=s),o(i,s),s.from=function(e,t,n){if("number"==typeof e)throw new TypeError("Argument must not be a number");return i(e,t,n)},s.alloc=function(e,t,n){if("number"!=typeof e)throw new TypeError("Argument must be a number");var r=i(e);return void 0!==t?"string"==typeof n?r.fill(t,n):r.fill(t):r.fill(0),r},s.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return i(e)},s.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return r.SlowBuffer(e)}},function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i,o=n(0),s=n(17),a=n(18),c=n(3),l=o.Buffer,u=l.from([0,0,255,255]),f=l.from([0]),h=Symbol("write-in-progress"),d=Symbol("pending-close"),p=Symbol("total-length"),_=Symbol("callback"),v=Symbol("buffers"),b=Symbol("error"),y=Symbol("owner"),m=function(){function e(t,n,r){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._maxPayload=0|r,this._options=t||{},this._threshold=void 0!==this._options.threshold?this._options.threshold:1024,this._isServer=!!n,this._deflate=null,this._inflate=null,this.params=null,!i){var o=void 0!==this._options.concurrencyLimit?this._options.concurrencyLimit:10;i=new s({concurrency:o})}}var t,n,o;return t=e,o=[{key:"extensionName",get:function(){return"permessage-deflate"}}],(n=[{key:"offer",value:function(){var e={};return this._options.serverNoContextTakeover&&(e.server_no_context_takeover=!0),this._options.clientNoContextTakeover&&(e.client_no_context_takeover=!0),this._options.serverMaxWindowBits&&(e.server_max_window_bits=this._options.serverMaxWindowBits),this._options.clientMaxWindowBits?e.client_max_window_bits=this._options.clientMaxWindowBits:null==this._options.clientMaxWindowBits&&(e.client_max_window_bits=!0),e}},{key:"accept",value:function(e){var t;return e=this.normalizeParams(e),t=this._isServer?this.acceptAsServer(e):this.acceptAsClient(e),this.params=t,t}},{key:"cleanup",value:function(){this._inflate&&(this._inflate[h]?this._inflate[d]=!0:(this._inflate.close(),this._inflate=null)),this._deflate&&(this._deflate[h]?this._deflate[d]=!0:(this._deflate.close(),this._deflate=null))}},{key:"acceptAsServer",value:function(e){var t=this,n={};if(!e.some(function(e){if(!(!1===t._options.serverNoContextTakeover&&e.server_no_context_takeover||!1===t._options.serverMaxWindowBits&&e.server_max_window_bits||"number"==typeof t._options.serverMaxWindowBits&&"number"==typeof e.server_max_window_bits&&t._options.serverMaxWindowBits>e.server_max_window_bits||"number"==typeof t._options.clientMaxWindowBits&&!e.client_max_window_bits))return(t._options.serverNoContextTakeover||e.server_no_context_takeover)&&(n.server_no_context_takeover=!0),(t._options.clientNoContextTakeover||!1!==t._options.clientNoContextTakeover&&e.client_no_context_takeover)&&(n.client_no_context_takeover=!0),"number"==typeof t._options.serverMaxWindowBits?n.server_max_window_bits=t._options.serverMaxWindowBits:"number"==typeof e.server_max_window_bits&&(n.server_max_window_bits=e.server_max_window_bits),"number"==typeof t._options.clientMaxWindowBits?n.client_max_window_bits=t._options.clientMaxWindowBits:!1!==t._options.clientMaxWindowBits&&"number"==typeof e.client_max_window_bits&&(n.client_max_window_bits=e.client_max_window_bits),!0}))throw new Error("Doesn't support the offered configuration");return n}},{key:"acceptAsClient",value:function(e){var t=e[0];if(!1===this._options.clientNoContextTakeover&&t.client_no_context_takeover)throw new Error('Invalid value for "client_no_context_takeover"');if("number"==typeof this._options.clientMaxWindowBits&&(!t.client_max_window_bits||t.client_max_window_bits>this._options.clientMaxWindowBits)||!1===this._options.clientMaxWindowBits&&t.client_max_window_bits)throw new Error('Invalid value for "client_max_window_bits"');return t}},{key:"normalizeParams",value:function(e){var t=this;return e.map(function(e){return Object.keys(e).forEach(function(n){var r=e[n];if(r.length>1)throw new Error("Multiple extension parameters for ".concat(n));switch(r=r[0],n){case"server_no_context_takeover":case"client_no_context_takeover":if(!0!==r)throw new Error("invalid extension parameter value for ".concat(n," (").concat(r,")"));e[n]=!0;break;case"server_max_window_bits":case"client_max_window_bits":if("string"==typeof r&&(r=parseInt(r,10),Number.isNaN(r)||r<a.Z_MIN_WINDOWBITS||r>a.Z_MAX_WINDOWBITS))throw new Error("invalid extension parameter value for ".concat(n," (").concat(r,")"));if(!t._isServer&&!0===r)throw new Error("Missing extension parameter value for ".concat(n));e[n]=r;break;default:throw new Error("Not defined extension parameter (".concat(n,")"))}}),e})}},{key:"decompress",value:function(e,t,n){var r=this;i.push(function(i){r._decompress(e,t,function(e,t){i(),n(e,t)})})}},{key:"compress",value:function(e,t,n){var r=this;i.push(function(i){r._compress(e,t,function(e,t){i(),n(e,t)})})}},{key:"_decompress",value:function(e,t,n){var r=this,i=this._isServer?"client":"server";if(!this._inflate){var o="".concat(i,"_max_window_bits"),s="number"!=typeof this.params[o]?a.Z_DEFAULT_WINDOWBITS:this.params[o];this._inflate=a.createInflateRaw({windowBits:s}),this._inflate[p]=0,this._inflate[v]=[],this._inflate[y]=this,this._inflate.on("error",k),this._inflate.on("data",g)}this._inflate[_]=n,this._inflate[h]=!0,this._inflate.write(e),t&&this._inflate.write(u),this._inflate.flush(function(){var e=r._inflate[b];if(e)return r._inflate.close(),r._inflate=null,void n(e);var o=c.concat(r._inflate[v],r._inflate[p]);t&&r.params["".concat(i,"_no_context_takeover")]||r._inflate[d]?(r._inflate.close(),r._inflate=null):(r._inflate[h]=!1,r._inflate[p]=0,r._inflate[v]=[]),n(null,o)})}},{key:"_compress",value:function(e,t,n){var r=this;if(e&&0!==e.length){var i=this._isServer?"server":"client";if(!this._deflate){var o="".concat(i,"_max_window_bits"),s="number"!=typeof this.params[o]?a.Z_DEFAULT_WINDOWBITS:this.params[o];this._deflate=a.createDeflateRaw({memLevel:this._options.memLevel,level:this._options.level,flush:a.Z_SYNC_FLUSH,windowBits:s}),this._deflate[p]=0,this._deflate[v]=[],this._deflate.on("data",w)}this._deflate[h]=!0,this._deflate.write(e),this._deflate.flush(a.Z_SYNC_FLUSH,function(){var e=c.concat(r._deflate[v],r._deflate[p]);t&&(e=e.slice(0,e.length-4)),t&&r.params["".concat(i,"_no_context_takeover")]||r._deflate[d]?(r._deflate.close(),r._deflate=null):(r._deflate[h]=!1,r._deflate[p]=0,r._deflate[v]=[]),n(null,e)})}else process.nextTick(n,null,f)}}])&&r(t.prototype,n),o&&r(t,o),e}();function w(e){this[v].push(e),this[p]+=e.length}function g(e){this[p]+=e.length,this[y]._maxPayload<1||this[p]<=this[y]._maxPayload?this[v].push(e):(this[b]=new Error("max payload size exceeded"),this[b].closeCode=1009,this.removeListener("data",g),this.reset())}function k(e){this[y]._inflate=null,this[_](e)}e.exports=m},function(e,t){e.exports=__webpack_require__(91)},function(e,t,n){"use strict";
	/*!
	 * ws: a node.js websocket client
	 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
	 * MIT Licensed
	 */var r=n(0).Buffer,i=function(e,t){for(var n=r.allocUnsafe(t),i=0,o=0;o<e.length;o++){var s=e[o];s.copy(n,i),i+=s.length}return n};try{var o=n(!function(){var e=new Error("Cannot find module 'bufferutil'");throw e.code="MODULE_NOT_FOUND",e}());e.exports=Object.assign({concat:i},o.BufferUtil||o)}catch(t){e.exports={concat:i,mask:function(e,t,n,r,i){for(var o=0;o<i;o++)n[r+o]=e[o]^t[3&o]},unmask:function(e,t){for(var n=e.length,r=0;r<n;r++)e[r]^=t[3&r]}}}},function(e,t,n){"use strict";var r=n(0).Buffer;t.BINARY_TYPES=["nodebuffer","arraybuffer","fragments"],t.GUID="258EAFA5-E914-47DA-95CA-C5AB0DC85B11",t.EMPTY_BUFFER=r.alloc(0),t.NOOP=function(){}},function(e,t,n){"use strict";
	/*!
	 * ws: a node.js websocket client
	 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
	 * MIT Licensed
	 */function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(e){return(o=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function a(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var c=n(6),l=n(2),u=n(7),f=n(15),h=n(8),d=n(9),p=n(1),_=n(19),v=n(10),b=n(4),y=n(11),m=n(13),w=[8,13],g=function(e){function t(e,n,i){var s,c,l;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),c=this,s=!(l=o(t).call(this))||"object"!==r(l)&&"function"!=typeof l?a(c):l,n?"string"==typeof n?n=[n]:Array.isArray(n)||(i=n,n=[]):n=[],s.readyState=t.CONNECTING,s.bytesReceived=0,s.extensions={},s.protocol="",s._binaryType=b.BINARY_TYPES[0],s._finalize=s.finalize.bind(a(a(s))),s._finalizeCalled=!1,s._closeMessage=null,s._closeTimer=null,s._closeCode=null,s._receiver=null,s._sender=null,s._socket=null,s._ultron=null,Array.isArray(e)?function(e,t,n){this.protocolVersion=n.protocolVersion,this._maxPayload=n.maxPayload,this.extensions=n.extensions,this.protocol=n.protocol,this._isServer=!0,this.setSocket(e,t)}.call(a(a(s)),e[0],e[1],i):k.call(a(a(s)),e,n,i),s}var n,l,f;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(t,c),n=t,(l=[{key:"setSocket",value:function(e,n){var r=this;e.setTimeout(0),e.setNoDelay(),this._receiver=new y(this.extensions,this._maxPayload,this.binaryType),this._sender=new m(e,this.extensions),this._ultron=new u(e),this._socket=e,this._ultron.on("close",this._finalize),this._ultron.on("error",this._finalize),this._ultron.on("end",this._finalize),n.length>0&&e.unshift(n),this._ultron.on("data",function(e){r.bytesReceived+=e.length,r._receiver.add(e)}),this._receiver.onmessage=function(e){return r.emit("message",e)},this._receiver.onping=function(e){r.pong(e,!r._isServer,!0),r.emit("ping",e)},this._receiver.onpong=function(e){return r.emit("pong",e)},this._receiver.onclose=function(e,t){r._closeMessage=t,r._closeCode=e,r.close(e,t)},this._receiver.onerror=function(e,t){r.close(t,""),r.emit("error",e)},this.readyState=t.OPEN,this.emit("open")}},{key:"finalize",value:function(e){var n=this;this._finalizeCalled||(this.readyState=t.CLOSING,this._finalizeCalled=!0,clearTimeout(this._closeTimer),this._closeTimer=null,e&&(this._closeCode=1006),this._socket?(this._ultron.destroy(),this._socket.on("error",function(){this.destroy()}),e?this._socket.destroy():this._socket.end(),this._receiver.cleanup(function(){return n.emitClose()}),this._receiver=null,this._sender=null,this._socket=null,this._ultron=null):this.emitClose())}},{key:"emitClose",value:function(){this.readyState=t.CLOSED,this.emit("close",this._closeCode||1006,this._closeMessage||""),this.extensions[p.extensionName]&&this.extensions[p.extensionName].cleanup(),this.extensions=null,this.removeAllListeners(),this.on("error",b.NOOP)}},{key:"pause",value:function(){if(this.readyState!==t.OPEN)throw new Error("not opened");this._socket.pause()}},{key:"resume",value:function(){if(this.readyState!==t.OPEN)throw new Error("not opened");this._socket.resume()}},{key:"close",value:function(e,n){var r=this;this.readyState!==t.CLOSED&&(this.readyState!==t.CONNECTING?this.readyState!==t.CLOSING?(this.readyState=t.CLOSING,this._sender.close(e,n,!this._isServer,function(e){e&&r.emit("error",e),r._socket&&(r._closeCode&&r._socket.end(),clearTimeout(r._closeTimer),r._closeTimer=setTimeout(r._finalize,3e4,!0))})):this._closeCode&&this._socket&&this._socket.end():this._req&&!this._req.aborted&&(this._req.abort(),this.emit("error",new Error("closed before the connection is established")),this.finalize(!0)))}},{key:"ping",value:function(e,n,r){if(this.readyState!==t.OPEN){if(r)return;throw new Error("not opened")}"number"==typeof e&&(e=e.toString()),void 0===n&&(n=!this._isServer),this._sender.ping(e||b.EMPTY_BUFFER,n)}},{key:"pong",value:function(e,n,r){if(this.readyState!==t.OPEN){if(r)return;throw new Error("not opened")}"number"==typeof e&&(e=e.toString()),void 0===n&&(n=!this._isServer),this._sender.pong(e||b.EMPTY_BUFFER,n)}},{key:"send",value:function(e,n,r){if("function"==typeof n&&(r=n,n={}),this.readyState===t.OPEN){"number"==typeof e&&(e=e.toString());var i=Object.assign({binary:"string"!=typeof e,mask:!this._isServer,compress:!0,fin:!0},n);this.extensions[p.extensionName]||(i.compress=!1),this._sender.send(e||b.EMPTY_BUFFER,i,r)}else{if(!r)throw new Error("not opened");r(new Error("not opened"))}}},{key:"terminate",value:function(){this.readyState!==t.CLOSED&&(this.readyState!==t.CONNECTING?this.finalize(!0):this._req&&!this._req.aborted&&(this._req.abort(),this.emit("error",new Error("closed before the connection is established")),this.finalize(!0)))}},{key:"CONNECTING",get:function(){return t.CONNECTING}},{key:"CLOSING",get:function(){return t.CLOSING}},{key:"CLOSED",get:function(){return t.CLOSED}},{key:"OPEN",get:function(){return t.OPEN}},{key:"bufferedAmount",get:function(){var e=0;return this._socket&&(e=this._socket.bufferSize+this._sender._bufferedBytes),e}},{key:"binaryType",get:function(){return this._binaryType},set:function(e){b.BINARY_TYPES.indexOf(e)<0||(this._binaryType=e,this._receiver&&(this._receiver._binaryType=e))}}])&&i(n.prototype,l),f&&i(n,f),t}();function k(e,t,n){var r=this;if(n=Object.assign({protocolVersion:w[1],protocol:t.join(","),perMessageDeflate:!0,handshakeTimeout:null,localAddress:null,headers:null,family:null,origin:null,agent:null,host:null,checkServerIdentity:null,rejectUnauthorized:null,passphrase:null,ciphers:null,ecdhCurve:null,cert:null,key:null,pfx:null,ca:null},n),-1===w.indexOf(n.protocolVersion))throw new Error("unsupported protocol version: ".concat(n.protocolVersion," ")+"(supported versions: ".concat(w.join(", "),")"));this.protocolVersion=n.protocolVersion,this._isServer=!1,this.url=e;var i=d.parse(e),o="ws+unix:"===i.protocol;if(!(i.host||o&&i.path))throw new Error("invalid url");var s,a="wss:"===i.protocol||"https:"===i.protocol,c=l.randomBytes(16).toString("base64"),u=a?f:h,_={port:i.port||(a?443:80),host:i.hostname,path:"/",headers:{"Sec-WebSocket-Version":n.protocolVersion,"Sec-WebSocket-Key":c,Connection:"Upgrade",Upgrade:"websocket"}};if(n.headers&&Object.assign(_.headers,n.headers),n.perMessageDeflate&&(s=new p(!0!==n.perMessageDeflate?n.perMessageDeflate:{},!1),_.headers["Sec-WebSocket-Extensions"]=v.format(function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}({},p.extensionName,s.offer()))),n.protocol&&(_.headers["Sec-WebSocket-Protocol"]=n.protocol),n.origin&&(n.protocolVersion<13?_.headers["Sec-WebSocket-Origin"]=n.origin:_.headers.Origin=n.origin),n.host&&(_.headers.Host=n.host),i.auth&&(_.auth=i.auth),n.localAddress&&(_.localAddress=n.localAddress),n.family&&(_.family=n.family),o){var y=i.path.split(":");_.socketPath=y[0],_.path=y[1]}else i.path&&("/"!==i.path.charAt(0)?_.path="/".concat(i.path):_.path=i.path);var m=n.agent;(null!=n.rejectUnauthorized||n.checkServerIdentity||n.passphrase||n.ciphers||n.ecdhCurve||n.cert||n.key||n.pfx||n.ca)&&(n.passphrase&&(_.passphrase=n.passphrase),n.ciphers&&(_.ciphers=n.ciphers),n.ecdhCurve&&(_.ecdhCurve=n.ecdhCurve),n.cert&&(_.cert=n.cert),n.key&&(_.key=n.key),n.pfx&&(_.pfx=n.pfx),n.ca&&(_.ca=n.ca),n.checkServerIdentity&&(_.checkServerIdentity=n.checkServerIdentity),null!=n.rejectUnauthorized&&(_.rejectUnauthorized=n.rejectUnauthorized),m||(m=new u.Agent(_))),m&&(_.agent=m),this._req=u.get(_),n.handshakeTimeout&&this._req.setTimeout(n.handshakeTimeout,function(){r._req.abort(),r.emit("error",new Error("opening handshake has timed out")),r.finalize(!0)}),this._req.on("error",function(e){r._req.aborted||(r._req=null,r.emit("error",e),r.finalize(!0))}),this._req.on("response",function(e){r.emit("unexpected-response",r._req,e)||(r._req.abort(),r.emit("error",new Error("unexpected server response (".concat(e.statusCode,")"))),r.finalize(!0))}),this._req.on("upgrade",function(e,t,i){if(r.emit("headers",e.headers,e),r.readyState===g.CONNECTING){r._req=null;var o=l.createHash("sha1").update(c+b.GUID,"binary").digest("base64");if(e.headers["sec-websocket-accept"]!==o)return t.destroy(),r.emit("error",new Error("invalid server key")),r.finalize(!0);var a,u=e.headers["sec-websocket-protocol"],f=(n.protocol||"").split(/, */);if(!n.protocol&&u?a="server sent a subprotocol even though none requested":n.protocol&&!u?a="server sent no subprotocol even though requested":u&&-1===f.indexOf(u)&&(a="server responded with an invalid protocol"),a)return t.destroy(),r.emit("error",new Error(a)),r.finalize(!0);if(u&&(r.protocol=u),s)try{var h=v.parse(e.headers["sec-websocket-extensions"]);h[p.extensionName]&&(s.accept(h[p.extensionName]),r.extensions[p.extensionName]=s)}catch(e){return t.destroy(),r.emit("error",new Error("invalid Sec-WebSocket-Extensions header")),r.finalize(!0)}r.setSocket(t,i)}})}g.CONNECTING=0,g.OPEN=1,g.CLOSING=2,g.CLOSED=3,["open","error","close","message"].forEach(function(e){Object.defineProperty(g.prototype,"on".concat(e),{get:function(){for(var t=this.listeners(e),n=0;n<t.length;n++)if(t[n]._listener)return t[n]._listener},set:function(t){for(var n=this.listeners(e),r=0;r<n.length;r++)n[r]._listener&&this.removeListener(e,n[r]);this.addEventListener(e,t)}})}),g.prototype.addEventListener=_.addEventListener,g.prototype.removeEventListener=_.removeEventListener,e.exports=g},function(e,t){e.exports=__webpack_require__(118)},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty,i=0;function o(e){if(!(this instanceof o))return new o(e);this.id=i++,this.ee=e}o.prototype.on=function(e,t,n){return t.__ultron=this.id,this.ee.on(e,t,n),this},o.prototype.once=function(e,t,n){return t.__ultron=this.id,this.ee.once(e,t,n),this},o.prototype.remove=function(){var e,t=arguments,n=this.ee;if(1===t.length&&"string"==typeof t[0])t=t[0].split(/[, ]+/);else if(!t.length)if(n.eventNames)t=n.eventNames();else if(n._events){for(e in t=[],n._events)r.call(n._events,e)&&t.push(e);Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(n._events)))}for(var i=0;i<t.length;i++)for(var o=n.listeners(t[i]),s=0;s<o.length;s++){if((e=o[s]).listener){if(e.listener.__ultron!==this.id)continue}else if(e.__ultron!==this.id)continue;n.removeListener(t[i],e)}return this},o.prototype.destroy=function(){return!!this.ee&&(this.remove(),this.ee=null,!0)},e.exports=o},function(e,t){e.exports=__webpack_require__(151)},function(e,t){e.exports=__webpack_require__(158)},function(e,t,n){"use strict";var r=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,0,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0];function i(e,t,n){Object.prototype.hasOwnProperty.call(e,t)?e[t].push(n):e[t]=[n]}e.exports={format:function(e){return Object.keys(e).map(function(t){var n=e[t];return Array.isArray(n)||(n=[n]),n.map(function(e){return[t].concat(Object.keys(e).map(function(t){var n=e[t];return Array.isArray(n)||(n=[n]),n.map(function(e){return!0===e?t:"".concat(t,"=").concat(e)}).join("; ")})).join("; ")}).join(", ")}).join(", ")},parse:function(e){var t={};if(void 0===e||""===e)return t;for(var n,o,s={},a=!1,c=!1,l=!1,u=-1,f=-1,h=0;h<e.length;h++){var d=e.charCodeAt(h);if(void 0===n)if(-1===f&&1===r[d])-1===u&&(u=h);else if(32===d||9===d)-1===f&&-1!==u&&(f=h);else{if(59!==d&&44!==d)throw new Error("unexpected character at index ".concat(h));if(-1===u)throw new Error("unexpected character at index ".concat(h));-1===f&&(f=h);var p=e.slice(u,f);44===d?(i(t,p,s),s={}):n=p,u=f=-1}else if(void 0===o)if(-1===f&&1===r[d])-1===u&&(u=h);else if(32===d||9===d)-1===f&&-1!==u&&(f=h);else if(59===d||44===d){if(-1===u)throw new Error("unexpected character at index ".concat(h));-1===f&&(f=h),i(s,e.slice(u,f),!0),44===d&&(i(t,n,s),s={},n=void 0),u=f=-1}else{if(61!==d||-1===u||-1!==f)throw new Error("unexpected character at index ".concat(h));o=e.slice(u,h),u=f=-1}else if(c){if(1!==r[d])throw new Error("unexpected character at index ".concat(h));-1===u?u=h:a||(a=!0),c=!1}else if(l)if(1===r[d])-1===u&&(u=h);else if(34===d&&-1!==u)l=!1,f=h;else{if(92!==d)throw new Error("unexpected character at index ".concat(h));c=!0}else if(34===d&&61===e.charCodeAt(h-1))l=!0;else if(-1===f&&1===r[d])-1===u&&(u=h);else if(-1===u||32!==d&&9!==d){if(59!==d&&44!==d)throw new Error("unexpected character at index ".concat(h));if(-1===u)throw new Error("unexpected character at index ".concat(h));-1===f&&(f=h);var _=e.slice(u,f);a&&(_=_.replace(/\\/g,""),a=!1),i(s,o,_),44===d&&(i(t,n,s),s={},n=void 0),o=void 0,u=f=-1}else-1===f&&(f=h)}if(-1===u||l)throw new Error("unexpected end of input");-1===f&&(f=h);var v=e.slice(u,f);return void 0===n?i(t,v,{}):(void 0===o?i(s,v,!0):i(s,o,a?v.replace(/\\/g,""):v),i(t,n,s)),t}}},function(e,t,n){"use strict";
	/*!
	 * ws: a node.js websocket client
	 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
	 * MIT Licensed
	 */function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=n(0),o=n(1),s=n(20),a=n(3),c=n(12),l=n(4),u=i.Buffer,f=0,h=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._binaryType=r||l.BINARY_TYPES[0],this._extensions=t||{},this._maxPayload=0|n,this._bufferedBytes=0,this._buffers=[],this._compressed=!1,this._payloadLength=0,this._fragmented=0,this._masked=!1,this._fin=!1,this._mask=null,this._opcode=0,this._totalPayloadLength=0,this._messageLength=0,this._fragments=[],this._cleanupCallback=null,this._hadError=!1,this._dead=!1,this._loop=!1,this.onmessage=null,this.onclose=null,this.onerror=null,this.onping=null,this.onpong=null,this._state=f}var t,n,i;return t=e,(n=[{key:"readBuffer",value:function(e){var t,n,r=0;if(this._bufferedBytes-=e,e===this._buffers[0].length)return this._buffers.shift();if(e<this._buffers[0].length)return t=this._buffers[0].slice(0,e),this._buffers[0]=this._buffers[0].slice(e),t;for(t=u.allocUnsafe(e);e>0;)e>=(n=this._buffers[0].length)?(this._buffers[0].copy(t,r),r+=n,this._buffers.shift()):(this._buffers[0].copy(t,r,0,e),this._buffers[0]=this._buffers[0].slice(e)),e-=n;return t}},{key:"hasBufferedBytes",value:function(e){return this._bufferedBytes>=e||(this._loop=!1,this._dead&&this.cleanup(this._cleanupCallback),!1)}},{key:"add",value:function(e){this._dead||(this._bufferedBytes+=e.length,this._buffers.push(e),this.startLoop())}},{key:"startLoop",value:function(){for(this._loop=!0;this._loop;)switch(this._state){case f:this.getInfo();break;case 1:this.getPayloadLength16();break;case 2:this.getPayloadLength64();break;case 3:this.getMask();break;case 4:this.getData();break;default:this._loop=!1}}},{key:"getInfo",value:function(){if(this.hasBufferedBytes(2)){var e=this.readBuffer(2);if(0==(48&e[0])){var t=64==(64&e[0]);if(!t||this._extensions[o.extensionName]){if(this._fin=128==(128&e[0]),this._opcode=15&e[0],this._payloadLength=127&e[1],0===this._opcode){if(t)return void this.error(new Error("RSV1 must be clear"),1002);if(!this._fragmented)return void this.error(new Error("invalid opcode: ".concat(this._opcode)),1002);this._opcode=this._fragmented}else if(1===this._opcode||2===this._opcode){if(this._fragmented)return void this.error(new Error("invalid opcode: ".concat(this._opcode)),1002);this._compressed=t}else{if(!(this._opcode>7&&this._opcode<11))return void this.error(new Error("invalid opcode: ".concat(this._opcode)),1002);if(!this._fin)return void this.error(new Error("FIN must be set"),1002);if(t)return void this.error(new Error("RSV1 must be clear"),1002);if(this._payloadLength>125)return void this.error(new Error("invalid payload length"),1002)}this._fin||this._fragmented||(this._fragmented=this._opcode),this._masked=128==(128&e[1]),126===this._payloadLength?this._state=1:127===this._payloadLength?this._state=2:this.haveLength()}else this.error(new Error("RSV1 must be clear"),1002)}else this.error(new Error("RSV2 and RSV3 must be clear"),1002)}}},{key:"getPayloadLength16",value:function(){this.hasBufferedBytes(2)&&(this._payloadLength=this.readBuffer(2).readUInt16BE(0,!0),this.haveLength())}},{key:"getPayloadLength64",value:function(){if(this.hasBufferedBytes(8)){var e=this.readBuffer(8),t=e.readUInt32BE(0,!0);t>Math.pow(2,21)-1?this.error(new Error("max payload size exceeded"),1009):(this._payloadLength=t*Math.pow(2,32)+e.readUInt32BE(4,!0),this.haveLength())}}},{key:"haveLength",value:function(){this._opcode<8&&this.maxPayloadExceeded(this._payloadLength)||(this._masked?this._state=3:this._state=4)}},{key:"getMask",value:function(){this.hasBufferedBytes(4)&&(this._mask=this.readBuffer(4),this._state=4)}},{key:"getData",value:function(){var e=l.EMPTY_BUFFER;if(this._payloadLength){if(!this.hasBufferedBytes(this._payloadLength))return;e=this.readBuffer(this._payloadLength),this._masked&&a.unmask(e,this._mask)}this._opcode>7?this.controlMessage(e):this._compressed?(this._state=5,this.decompress(e)):this.pushFragment(e)&&this.dataMessage()}},{key:"decompress",value:function(e){var t=this;this._extensions[o.extensionName].decompress(e,this._fin,function(e,n){e?t.error(e,1009===e.closeCode?1009:1007):(t.pushFragment(n)&&t.dataMessage(),t.startLoop())})}},{key:"dataMessage",value:function(){if(this._fin){var e=this._messageLength,t=this._fragments;if(this._totalPayloadLength=0,this._messageLength=0,this._fragmented=0,this._fragments=[],2===this._opcode){var n;n="nodebuffer"===this._binaryType?d(t,e):"arraybuffer"===this._binaryType?function(e){if(0===e.byteOffset&&e.byteLength===e.buffer.byteLength)return e.buffer;return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}(d(t,e)):t,this.onmessage(n)}else{var r=d(t,e);if(!s(r))return void this.error(new Error("invalid utf8 sequence"),1007);this.onmessage(r.toString())}}this._state=f}},{key:"controlMessage",value:function(e){if(8!==this._opcode)9===this._opcode?this.onping(e):this.onpong(e),this._state=f;else if(0===e.length)this.onclose(1e3,""),this._loop=!1,this.cleanup(this._cleanupCallback);else if(1===e.length)this.error(new Error("invalid payload length"),1002);else{var t=e.readUInt16BE(0,!0);if(!c.isValidErrorCode(t))return void this.error(new Error("invalid status code: ".concat(t)),1002);var n=e.slice(2);if(!s(n))return void this.error(new Error("invalid utf8 sequence"),1007);this.onclose(t,n.toString()),this._loop=!1,this.cleanup(this._cleanupCallback)}}},{key:"error",value:function(e,t){this.onerror(e,t),this._hadError=!0,this._loop=!1,this.cleanup(this._cleanupCallback)}},{key:"maxPayloadExceeded",value:function(e){if(0===e||this._maxPayload<1)return!1;var t=this._totalPayloadLength+e;return t<=this._maxPayload?(this._totalPayloadLength=t,!1):(this.error(new Error("max payload size exceeded"),1009),!0)}},{key:"pushFragment",value:function(e){if(0===e.length)return!0;var t=this._messageLength+e.length;return this._maxPayload<1||t<=this._maxPayload?(this._messageLength=t,this._fragments.push(e),!0):(this.error(new Error("max payload size exceeded"),1009),!1)}},{key:"cleanup",value:function(e){this._dead=!0,this._hadError||!this._loop&&5!==this._state?(this._extensions=null,this._fragments=null,this._buffers=null,this._mask=null,this._cleanupCallback=null,this.onmessage=null,this.onclose=null,this.onerror=null,this.onping=null,this.onpong=null,e&&e()):this._cleanupCallback=e}}])&&r(t.prototype,n),i&&r(t,i),e}();function d(e,t){return 1===e.length?e[0]:e.length>1?a.concat(e,t):l.EMPTY_BUFFER}e.exports=h},function(e,t,n){"use strict";
	/*!
	 * ws: a node.js websocket client
	 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
	 * MIT Licensed
	 */e.exports={isValidErrorCode:function(e){return e>=1e3&&e<=1013&&1004!==e&&1005!==e&&1006!==e||e>=3e3&&e<=4999},1000:"normal",1001:"going away",1002:"protocol error",1003:"unsupported data",1004:"reserved",1005:"reserved for extensions",1006:"reserved for extensions",1007:"inconsistent or invalid data",1008:"policy violation",1009:"message too big",1010:"extension handshake missing",1011:"an unexpected condition prevented the request from being fulfilled",1012:"service restart",1013:"try again later"}},function(e,t,n){"use strict";
	/*!
	 * ws: a node.js websocket client
	 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
	 * MIT Licensed
	 */function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=n(0),o=n(2),s=n(1),a=n(3),c=n(12),l=i.Buffer,u=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._extensions=n||{},this._socket=t,this._firstFragment=!0,this._compress=!1,this._bufferedBytes=0,this._deflating=!1,this._queue=[]}var t,n,i;return t=e,i=[{key:"frame",value:function(e,t){var n=e.length<1024||t.mask&&t.readOnly,r=t.mask?6:2,i=e.length;e.length>=65536?(r+=8,i=127):e.length>125&&(r+=2,i=126);var s=l.allocUnsafe(n?e.length+r:r);if(s[0]=t.fin?128|t.opcode:t.opcode,t.rsv1&&(s[0]|=64),126===i?s.writeUInt16BE(e.length,2,!0):127===i&&(s.writeUInt32BE(0,2,!0),s.writeUInt32BE(e.length,6,!0)),!t.mask)return s[1]=i,n?(e.copy(s,r),[s]):[s,e];var c=o.randomBytes(4);return s[1]=128|i,s[r-4]=c[0],s[r-3]=c[1],s[r-2]=c[2],s[r-1]=c[3],n?(a.mask(e,c,s,r,e.length),[s]):(a.mask(e,c,e,0,e.length),[s,e])}}],(n=[{key:"close",value:function(e,t,n,r){if(void 0!==e&&("number"!=typeof e||!c.isValidErrorCode(e)))throw new Error("first argument must be a valid error code number");var i=l.allocUnsafe(2+(t?l.byteLength(t):0));i.writeUInt16BE(e||1e3,0,!0),i.length>2&&i.write(t,2),this._deflating?this.enqueue([this.doClose,i,n,r]):this.doClose(i,n,r)}},{key:"doClose",value:function(t,n,r){this.sendFrame(e.frame(t,{fin:!0,rsv1:!1,opcode:8,mask:n,readOnly:!1}),r)}},{key:"ping",value:function(e,t){var n=!0;l.isBuffer(e)||(e instanceof ArrayBuffer?e=l.from(e):ArrayBuffer.isView(e)?e=f(e):(e=l.from(e),n=!1)),this._deflating?this.enqueue([this.doPing,e,t,n]):this.doPing(e,t,n)}},{key:"doPing",value:function(t,n,r){this.sendFrame(e.frame(t,{fin:!0,rsv1:!1,opcode:9,mask:n,readOnly:r}))}},{key:"pong",value:function(e,t){var n=!0;l.isBuffer(e)||(e instanceof ArrayBuffer?e=l.from(e):ArrayBuffer.isView(e)?e=f(e):(e=l.from(e),n=!1)),this._deflating?this.enqueue([this.doPong,e,t,n]):this.doPong(e,t,n)}},{key:"doPong",value:function(t,n,r){this.sendFrame(e.frame(t,{fin:!0,rsv1:!1,opcode:10,mask:n,readOnly:r}))}},{key:"send",value:function(t,n,r){var i=n.binary?2:1,o=n.compress,a=!0;l.isBuffer(t)||(t instanceof ArrayBuffer?t=l.from(t):ArrayBuffer.isView(t)?t=f(t):(t=l.from(t),a=!1));var c=this._extensions[s.extensionName];if(this._firstFragment?(this._firstFragment=!1,o&&c&&(o=t.length>=c._threshold),this._compress=o):(o=!1,i=0),n.fin&&(this._firstFragment=!0),c){var u={fin:n.fin,rsv1:o,opcode:i,mask:n.mask,readOnly:a};this._deflating?this.enqueue([this.dispatch,t,this._compress,u,r]):this.dispatch(t,this._compress,u,r)}else this.sendFrame(e.frame(t,{fin:n.fin,rsv1:!1,opcode:i,mask:n.mask,readOnly:a}),r)}},{key:"dispatch",value:function(t,n,r,i){var o=this;if(n){var a=this._extensions[s.extensionName];this._deflating=!0,a.compress(t,r.fin,function(t,n){r.readOnly=!1,o.sendFrame(e.frame(n,r),i),o._deflating=!1,o.dequeue()})}else this.sendFrame(e.frame(t,r),i)}},{key:"dequeue",value:function(){for(;!this._deflating&&this._queue.length;){var e=this._queue.shift();this._bufferedBytes-=e[1].length,e[0].apply(this,e.slice(1))}}},{key:"enqueue",value:function(e){this._bufferedBytes+=e[1].length,this._queue.push(e)}},{key:"sendFrame",value:function(e,t){2===e.length?(this._socket.write(e[0]),this._socket.write(e[1],t)):this._socket.write(e[0],t)}}])&&r(t.prototype,n),i&&r(t,i),e}();function f(e){var t=l.from(e.buffer);return e.byteLength!==e.buffer.byteLength?t.slice(e.byteOffset,e.byteOffset+e.byteLength):t}e.exports=u},function(e,t,n){"use strict";
	/*!
	 * ws: a node.js websocket client
	 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
	 * MIT Licensed
	 */var r=n(5);r.Server=n(21),r.Receiver=n(11),r.Sender=n(13),e.exports=r},function(e,t){e.exports=__webpack_require__(165)},function(e,t){e.exports=__webpack_require__(92)},function(e,t,n){"use strict";function r(e){if(!(this instanceof r))return new r(e);e=e||{},this.concurrency=e.concurrency||1/0,this.pending=0,this.jobs=[],this.cbs=[],this._done=function(){this.pending--,this._run()}.bind(this)}["push","unshift","splice"].forEach(function(e){r.prototype[e]=function(){var t=Array.prototype[e].apply(this.jobs,arguments);return this._run(),t}}),Object.defineProperty(r.prototype,"length",{get:function(){return this.pending+this.jobs.length}}),r.prototype._run=function(){if(this.pending!==this.concurrency){if(this.jobs.length){var e=this.jobs.shift();this.pending++,e(this._done),this._run()}if(0===this.pending)for(;0!==this.cbs.length;){var t=this.cbs.pop();process.nextTick(t)}}},r.prototype.onDone=function(e){"function"==typeof e&&(this.cbs.push(e),this._run())},e.exports=r},function(e,t){e.exports=__webpack_require__(166)},function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function o(e){return(o=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&a(e,t)}function a(e,t){return(a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function c(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var l=function e(t,n){c(this,e),this.target=n,this.type=t},u=function(e){function t(e,n){var r;return c(this,t),(r=i(this,o(t).call(this,"message",n))).data=e,r}return s(t,l),t}(),f=function(e){function t(e,n,r){var s;return c(this,t),(s=i(this,o(t).call(this,"close",r))).wasClean=void 0===e||1e3===e||e>=3e3&&e<=4999,s.reason=n,s.code=e,s}return s(t,l),t}(),h=function(e){function t(e){return c(this,t),i(this,o(t).call(this,"open",e))}return s(t,l),t}(),d={addEventListener:function(e,t){function n(e){t.call(this,new u(e,this))}function r(e,n){t.call(this,new f(e,n,this))}function i(e){e.type="error",e.target=this,t.call(this,e)}function o(){t.call(this,new h(this))}"function"==typeof t&&("message"===e?(n._listener=t,this.on(e,n)):"close"===e?(r._listener=t,this.on(e,r)):"error"===e?(i._listener=t,this.on(e,i)):"open"===e?(o._listener=t,this.on(e,o)):this.on(e,t))},removeEventListener:function(e,t){for(var n=this.listeners(e),r=0;r<n.length;r++)n[r]!==t&&n[r]._listener!==t||this.removeListener(e,n[r])}};e.exports=d},function(e,t,n){"use strict";
	/*!
	 * ws: a node.js websocket client
	 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
	 * MIT Licensed
	 */function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}try{var i=n(!function(){var e=new Error("Cannot find module 'utf-8-validate'");throw e.code="MODULE_NOT_FOUND",e}());e.exports="object"===r(i)?i.Validation.isValidUTF8:i}catch(t){e.exports=function(){return!0}}},function(e,t,n){"use strict";
	/*!
	 * ws: a node.js websocket client
	 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
	 * MIT Licensed
	 */function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function s(e){return(s=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function a(e,t){return(a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var c=n(0),l=n(6),u=n(2),f=n(7),h=n(8),d=n(9),p=n(1),_=n(10),v=n(4),b=n(5),y=c.Buffer,m=function(e){function t(e,n){var r;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=o(this,s(t).call(this)),null==(e=Object.assign({maxPayload:104857600,perMessageDeflate:!1,handleProtocols:null,clientTracking:!0,verifyClient:null,noServer:!1,backlog:null,server:null,host:null,path:null,port:null},e)).port&&!e.server&&!e.noServer)throw new TypeError("missing or invalid options");return null!=e.port?(r._server=h.createServer(function(e,t){var n=h.STATUS_CODES[426];t.writeHead(426,{"Content-Length":n.length,"Content-Type":"text/plain"}),t.end(n)}),r._server.allowHalfOpen=!1,r._server.listen(e.port,e.host,e.backlog,n)):e.server&&(r._server=e.server),r._server&&(r._ultron=new f(r._server),r._ultron.on("listening",function(){return r.emit("listening")}),r._ultron.on("error",function(e){return r.emit("error",e)}),r._ultron.on("upgrade",function(e,t,n){r.handleUpgrade(e,t,n,function(t){r.emit("connection",t,e)})})),!0===e.perMessageDeflate&&(e.perMessageDeflate={}),e.clientTracking&&(r.clients=new Set),r.options=e,r}var n,r,c;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&a(e,t)}(t,l),n=t,(r=[{key:"close",value:function(e){if(this.clients){var t=!0,n=!1,r=void 0;try{for(var i,o=this.clients[Symbol.iterator]();!(t=(i=o.next()).done);t=!0){i.value.terminate()}}catch(e){n=!0,r=e}finally{try{t||null==o.return||o.return()}finally{if(n)throw r}}}var s=this._server;if(s&&(this._ultron.destroy(),this._ultron=this._server=null,null!=this.options.port))return s.close(e);e&&e()}},{key:"shouldHandle",value:function(e){return!this.options.path||d.parse(e.url).pathname===this.options.path}},{key:"handleUpgrade",value:function(e,t,n,r){var i=this;t.on("error",w);var o=+e.headers["sec-websocket-version"],s={};if("GET"!==e.method||"websocket"!==e.headers.upgrade.toLowerCase()||!e.headers["sec-websocket-key"]||8!==o&&13!==o||!this.shouldHandle(e))return g(t,400);if(this.options.perMessageDeflate){var a=new p(this.options.perMessageDeflate,!0,this.options.maxPayload);try{var c=_.parse(e.headers["sec-websocket-extensions"]);c[p.extensionName]&&(a.accept(c[p.extensionName]),s[p.extensionName]=a)}catch(e){return g(t,400)}}var l=(e.headers["sec-websocket-protocol"]||"").split(/, */);if(this.options.handleProtocols){if(!1===(l=this.options.handleProtocols(l,e)))return g(t,401)}else l=l[0];if(this.options.verifyClient){var u={origin:e.headers["".concat(8===o?"sec-websocket-origin":"origin")],secure:!(!e.connection.authorized&&!e.connection.encrypted),req:e};if(2===this.options.verifyClient.length)return void this.options.verifyClient(u,function(a,c,u){if(!a)return g(t,c||401,u);i.completeUpgrade(l,s,o,e,t,n,r)});if(!this.options.verifyClient(u))return g(t,401)}this.completeUpgrade(l,s,o,e,t,n,r)}},{key:"completeUpgrade",value:function(e,t,n,r,i,o,s){var a=this;if(!i.readable||!i.writable)return i.destroy();var c=u.createHash("sha1").update(r.headers["sec-websocket-key"]+v.GUID,"binary").digest("base64"),l=["HTTP/1.1 101 Switching Protocols","Upgrade: websocket","Connection: Upgrade","Sec-WebSocket-Accept: ".concat(c)];if(e&&l.push("Sec-WebSocket-Protocol: ".concat(e)),t[p.extensionName]){var f=t[p.extensionName].params,h=_.format(function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}({},p.extensionName,[f]));l.push("Sec-WebSocket-Extensions: ".concat(h))}this.emit("headers",l,r),i.write(l.concat("\r\n").join("\r\n"));var d=new b([i,o],null,{maxPayload:this.options.maxPayload,protocolVersion:n,extensions:t,protocol:e});this.clients&&(this.clients.add(d),d.on("close",function(){return a.clients.delete(d)})),i.removeListener("error",w),s(d)}}])&&i(n.prototype,r),c&&i(n,c),t}();function w(){this.destroy()}function g(e,t,n){e.writable&&(n=n||h.STATUS_CODES[t],e.write("HTTP/1.1 ".concat(t," ").concat(h.STATUS_CODES[t],"\r\n")+"Connection: close\r\nContent-type: text/html\r\n"+"Content-Length: ".concat(y.byteLength(n),"\r\n")+"\r\n"+n)),e.removeListener("error",w),e.destroy()}e.exports=m},function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i;n.r(t),i="undefined"!=typeof WebSocket||process.env.browser?WebSocket:n(14);var o=5,s=2*o,a=function(){function e(t,n){var r=this,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:5e3,c=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],l=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.statusCb=n,this.connectionTimeout=setTimeout(function(){r.current_reject&&r.current_reject(new Error("Connection attempt timed out: "+t))},a);var u=function(e){return e||"undefined"==typeof WebSocket||"undefined"==typeof document?i:WebSocket}(c);try{this.ws=new u(t)}catch(e){console.error("invalid websocket URL:",e,t),this.ws=new u("wss://127.0.0.1:8090")}this.ws.timeoutInterval=5e3,this.current_reject=null,this.on_reconnect=null,this.send_life=o,this.recv_life=s,this.keepAliveCb=l,this.connect_promise=new Promise(function(e,t){r.current_reject=t,r.ws.onopen=function(){clearTimeout(r.connectionTimeout),r.statusCb&&r.statusCb("open"),r.on_reconnect&&r.on_reconnect(),r.keepalive_timer=setInterval(function(){if(r.recv_life--,0==r.recv_life)return console.error("keep alive timeout."),r.ws.terminate?r.ws.terminate():r.ws.close(),clearInterval(r.keepalive_timer),void(r.keepalive_timer=void 0);r.send_life--,0==r.send_life&&(r.keepAliveCb&&r.keepAliveCb(),r.send_life=o)},5e3),e()},r.ws.onerror=function(e){r.keepalive_timer&&(clearInterval(r.keepalive_timer),r.keepalive_timer=void 0),clearTimeout(r.connectionTimeout),r.statusCb&&r.statusCb("error"),r.current_reject&&r.current_reject(e)},r.ws.onmessage=function(e){r.recv_life=s,r.listener(JSON.parse(e.data))},r.ws.onclose=function(){r.keepalive_timer&&(clearInterval(r.keepalive_timer),r.keepalive_timer=void 0);for(var e=new Error("connection closed"),t=r.responseCbId+1;t<=r.cbId;t+=1)r.cbs[t].reject(e);r.statusCb&&r.statusCb("closed"),r.closeCb&&r.closeCb()}}),this.cbId=0,this.responseCbId=0,this.cbs={},this.subs={},this.unsub={}}var t,n,a;return t=e,(n=[{key:"call",value:function(e){var t=this;if(1!==this.ws.readyState)return Promise.reject(new Error("websocket state error:"+this.ws.readyState));var n=e[1];if(this.cbId+=1,"set_subscribe_callback"!==n&&"subscribe_to_market"!==n&&"broadcast_transaction_with_callback"!==n&&"set_pending_transaction_callback"!==n||(this.subs[this.cbId]={callback:e[2][0]},e[2][0]=this.cbId),"unsubscribe_from_market"===n||"unsubscribe_from_accounts"===n){if("function"!=typeof e[2][0])throw new Error("First parameter of unsub must be the original callback");var r=e[2].splice(0,1)[0];for(var i in this.subs)if(this.subs[i].callback===r){this.unsub[this.cbId]=i;break}}var s={method:"call",params:e};return s.id=this.cbId,this.send_life=o,new Promise(function(e,n){t.cbs[t.cbId]={time:new Date,resolve:e,reject:n},t.ws.send(JSON.stringify(s))})}},{key:"listener",value:function(e){var t=!1,n=null;"notice"===e.method&&(t=!0,e.id=e.params[0]),t?n=this.subs[e.id].callback:(n=this.cbs[e.id],this.responseCbId=e.id),n&&!t?(e.error?n.reject(e.error):n.resolve(e.result),delete this.cbs[e.id],this.unsub[e.id]&&(delete this.subs[this.unsub[e.id]],delete this.unsub[e.id])):n&&t?n(e.params[1]):console.log("Warning: unknown websocket response: ",e)}},{key:"login",value:function(e,t){var n=this;return this.connect_promise.then(function(){return n.call([1,"login",[e,t]])})}},{key:"close",value:function(){var e=this;return new Promise(function(t){e.closeCb=function(){t(),e.closeCb=null},e.ws.close(),1!==e.ws.readyState&&t()})}}])&&r(t.prototype,n),a&&r(t,a),e}();function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var l,u=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.ws_rpc=t,this.api_name=n}var t,n,r;return t=e,(n=[{key:"init",value:function(){var e=this;return this.ws_rpc.call([1,this.api_name,[]]).then(function(t){return e.api_id=t,e})}},{key:"exec",value:function(e,t){return this.ws_rpc.call([this.api_id,e,t]).catch(function(n){throw console.log("!!! GrapheneApi error: ",e,t,n,JSON.stringify(n)),n})}}])&&c(t.prototype,n),r&&c(t,r),e}();function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var h,d={"4018d7844c78f6a6c41c6a552b898022310fc5dec06da467ee7905a8dad512c8":"BTS",d3011619ed40beb302e3ef32b527fa36b89594d93b885fb226230988b47a12c5:"BTS",a42af4f55e76505b97529e8be59ed549065fb9bf8d2edf2bb3707df231b0e5e0:"CYB","133572a395d5b12c7db7f2d5f0dadd347b68ccbd996defafcb5768954c6d46c5":"CYB","45ad2d3f9ef92a49b55c2227eb06123f613bb35dd08bd876f2aea21925a67a67":"MUSE","39f5e2ede1f8bc1a3a54a7914414e3779e33193f1f5693510e73cb7a87617447":"TEST"},p=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.chain_id=t,this.core_asset=n}var t,n,r;return t=e,(n=[{key:"address_prefix",get:function(){var e=global||window||{};return e&&e.localStorage&&e.localStorage.getItem("PREFIX_".concat(this.chain_id))||d[this.chain_id]||this.core_asset}}])&&f(t.prototype,n),r&&f(t,r),e}(),_={address_prefix:"CYB"},v=l={core_asset:"CORE",address_prefix:"CYB",expire_in_secs:45,expire_in_secs_proposal:86400,review_in_secs_committee:86400,networks:{BitShares:new p("4018d7844c78f6a6c41c6a552b898022310fc5dec06da467ee7905a8dad512c8","BTS"),CybexOpen:new p("d3011619ed40beb302e3ef32b527fa36b89594d93b885fb226230988b47a12c5","BTS"),Cybex:new p("a42af4f55e76505b97529e8be59ed549065fb9bf8d2edf2bb3707df231b0e5e0","CYB"),CybexTest:new p("133572a395d5b12c7db7f2d5f0dadd347b68ccbd996defafcb5768954c6d46c5","CYB"),Muse:new p("45ad2d3f9ef92a49b55c2227eb06123f613bb35dd08bd876f2aea21925a67a67","MUSE"),Test:new p("39f5e2ede1f8bc1a3a54a7914414e3779e33193f1f5693510e73cb7a87617447","TEST"),Obelisk:{core_asset:"GOV",address_prefix:"FEW",chain_id:"1cfde7c388b9e8ac06462d68aadbd966b58f88797637d9af805b4560b0e9661e"}},setChainId:function(e){var t,n,r,i,o;for(t=0,n=(o=Object.keys(l.networks)).length;t<n;t++)if(i=o[t],(r=l.networks[i]).chain_id===e)return l.network_name=i,r.address_prefix&&(l.address_prefix=r.address_prefix,_.address_prefix=r.address_prefix),{network_name:i,network:r};l.network_name||console.log("Unknown chain id (this may be a testnet)",e)},reset:function(){l.core_asset="CORE",l.address_prefix="CYB",_.address_prefix="CYB",l.expire_in_secs=15,l.expire_in_secs_proposal=86400,console.log("Chain config reset")},setPrefix:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"CYB";l.address_prefix=e,_.address_prefix=e}};function b(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var y=!0,m={setRpcConnectionStatusCallback:function(e){this.statusCb=e,h&&h.setRpcConnectionStatusCallback(e)},setAutoReconnect:function(e){y=e},reset:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"ws://localhost:8090",n=arguments.length>1?arguments[1]:void 0,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:4e3;return this.close().then(function(){return(h=new w).setRpcConnectionStatusCallback(e.statusCb),h&&n&&h.connect(t,r),h})},instance:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"ws://localhost:8090",t=arguments.length>1?arguments[1]:void 0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:4e3,r=arguments.length>3?arguments[3]:void 0;return h||(h=new w).setRpcConnectionStatusCallback(this.statusCb),h&&t&&h.connect(e,n,r),h},chainId:function(){return Apis.instance().chain_id},close:function(){return h?new Promise(function(e){h.close().then(function(){h=null,e()})}):Promise.resolve()}},w=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r;return t=e,(n=[{key:"connect",value:function(e,t){var n=this,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];this.url=e;if("undefined"!=typeof window&&window.location&&"https:"===window.location.protocol&&e.indexOf("wss://")<0)throw new Error("Secure domains require wss connection");this.ws_rpc=new a(e,this.statusCb,t,y,function(){n._db.exec("get_objects",[["2.1.0"]]).catch(function(e){})}),this.init_promise=this.ws_rpc.login("","").then(function(){n._db=new u(n.ws_rpc,"database"),n._net=new u(n.ws_rpc,"network_broadcast"),n._hist=new u(n.ws_rpc,"history"),n._limit=new u(n.ws_rpc,"limit_order_status"),r&&(n._crypt=new u(n.ws_rpc,"crypto"));var e=n._db.init().then(function(){return n._db.exec("get_chain_id",[]).then(function(e){return n.chain_id=e,v.setChainId(e)})});n.ws_rpc.on_reconnect=function(){n.ws_rpc.login("","").then(function(){n._db.init().then(function(){n.statusCb&&n.statusCb("reconnect")}),n._net.init(),n._hist.init(),r&&n._crypt.init()})};var t=[e,n._net.init(),n._limit.init().catch(function(){return null}),n._hist.init()];return r&&t.push(n._crypt.init()),Promise.all(t)})}},{key:"close",value:function(){var e=this;return this.ws_rpc?this.ws_rpc.close().then(function(){e.ws_rpc=null}):(this.ws_rpc=null,Promise.resolve())}},{key:"db_api",value:function(){return this._db}},{key:"network_api",value:function(){return this._net}},{key:"history_api",value:function(){return this._hist}},{key:"crypto_api",value:function(){return this._crypt}},{key:"limit_api",value:function(){return this._limit}},{key:"setRpcConnectionStatusCallback",value:function(e){this.statusCb=e}}])&&b(t.prototype,n),r&&b(t,r),e}();function g(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var k=function(){function e(t){var n=t.url,r=t.urls;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.url=n,this.urls=r.filter(function(e){return e!==n})}var t,n,r;return t=e,r=[{key:"close",value:function(){return m.close()}}],(n=[{key:"logFailure",value:function(e,t){console.error("Skipping to next full node API server. Error: "+(t?JSON.stringify(t.message):""))}},{key:"connect",value:function(){var e=this,t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.url,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return new Promise(function(i,o){m.instance(n,t,void 0,r).init_promise.then(function(t){e.url=n,i(t)}).catch(function(e){m.close().then(function(){o(new Error("Unable to connect to node: "+n+", error:"+JSON.stringify(e&&e.message)))})})})}},{key:"connectWithFallback",value:function(){var e=this,t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.url,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null,s=arguments.length>5?arguments[5]:void 0;if(o&&r>this.urls.length)return o(new Error("Tried "+r+" connections, none of which worked: "+JSON.stringify(this.urls.concat(this.url))));var a=function(i,o,a){return e.logFailure(n,i),e.connectWithFallback(t,e.urls[r],r+1,o,a,s)};return i&&o?this.connect(t,n,s).then(i).catch(function(e){a(e,i,o)}):new Promise(function(n,r){e.connect(t,void 0,s).then(n).catch(function(e){a(e,n,r)})})}},{key:"checkConnections",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",r=arguments.length>2?arguments[2]:void 0,i=arguments.length>3?arguments[3]:void 0,o={},s=function(r,i){var s=e.urls.concat(e.url),c=[];s.forEach(function(r){var i=new a(r,function(){});o[r]=(new Date).getTime(),c.push(function(){return i.login(t,n).then(function(e){var t,n,s,a=(t={},n=r,s=(new Date).getTime()-o[r],n in t?Object.defineProperty(t,n,{value:s,enumerable:!0,configurable:!0,writable:!0}):t[n]=s,t);return i.close().then(function(){return a})}).catch(function(t){return r===e.url?e.url=e.urls[0]:e.urls=e.urls.filter(function(e){return e!==r}),i.close().then(function(){return null})})})}),Promise.all(c.map(function(e){return e()})).then(function(e){r(e.filter(function(e){return!!e}).reduce(function(e,t){var n=Object.keys(t)[0];return e[n]=t[n],e},{}))}).catch(function(){return e.checkConnections(t,n,r,i)})};if(!r||!i)return new Promise(s);s(r,i)}}])&&g(t.prototype,n),r&&g(t,r),e}();n.d(t,"Apis",function(){return m}),n.d(t,"ChainConfig",function(){return v}),n.d(t,"Manager",function(){return k})}])});
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(90)))

/***/ })
/******/ ]);
//# sourceMappingURL=renderer.js.map